
elan_mpu6050.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000966  000009da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000966  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000a3a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a6c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002243  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ba  00000000  00000000  00002e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008a3  00000000  00000000  00003639  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000544  00000000  00000000  00003edc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000698  00000000  00000000  00004420  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001801  00000000  00000000  00004ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  000062b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 36       	cpi	r26, 0x60	; 96
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <main>
  8e:	0c 94 b1 04 	jmp	0x962	; 0x962 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <MPU6050_test_I2C>:
	MPU6050_set_gyro_bias_reg(gy_bias);
	MPU6050_set_gyroFS(2); // set to +-1000dps range
	
	for (uint16_t i = 0; i < 1024; i++) {
		MPU6050_get_gyro(gyro);
		for (uint8_t j = 0; j < 3; j++) {
  96:	cf 93       	push	r28
	int16_t gyro[3];
	long gy_bias[] = {0, 0, 0};
	MPU6050_set_gyro_bias_reg(gy_bias);
	MPU6050_set_gyroFS(2); // set to +-1000dps range
	
	for (uint16_t i = 0; i < 1024; i++) {
  98:	df 93       	push	r29
			gy_bias[j] += gyro[j];
		}
	}
	
	for (uint8_t k = 0; k < 3; k++) {
		gy_bias[k] = gy_bias[k] / 1024;
  9a:	1f 92       	push	r1
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	19 82       	std	Y+1, r1	; 0x01
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	ae 01       	movw	r20, r28
  a8:	4f 5f       	subi	r20, 0xFF	; 255
  aa:	5f 4f       	sbci	r21, 0xFF	; 255
  ac:	65 e7       	ldi	r22, 0x75	; 117
  ae:	80 ed       	ldi	r24, 0xD0	; 208
  b0:	0e 94 54 03 	call	0x6a8	; 0x6a8 <i2c_readReg>
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	99 81       	ldd	r25, Y+1	; 0x01
  b8:	98 36       	cpi	r25, 0x68	; 104
  ba:	09 f0       	breq	.+2      	; 0xbe <MPU6050_test_I2C+0x28>
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0f 90       	pop	r0
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <MPU6050_get_accel>:
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	00 d0       	rcall	.+0      	; 0xd0 <MPU6050_get_accel+0xa>
  d0:	00 d0       	rcall	.+0      	; 0xd2 <MPU6050_get_accel+0xc>
  d2:	00 d0       	rcall	.+0      	; 0xd4 <MPU6050_get_accel+0xe>
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	8c 01       	movw	r16, r24
  da:	26 e0       	ldi	r18, 0x06	; 6
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	ae 01       	movw	r20, r28
  e0:	4f 5f       	subi	r20, 0xFF	; 255
  e2:	5f 4f       	sbci	r21, 0xFF	; 255
  e4:	6b e3       	ldi	r22, 0x3B	; 59
  e6:	80 ed       	ldi	r24, 0xD0	; 208
  e8:	0e 94 54 03 	call	0x6a8	; 0x6a8 <i2c_readReg>
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	98 2f       	mov	r25, r24
  f2:	88 27       	eor	r24, r24
  f4:	2a 81       	ldd	r18, Y+2	; 0x02
  f6:	82 2b       	or	r24, r18
  f8:	f8 01       	movw	r30, r16
  fa:	91 83       	std	Z+1, r25	; 0x01
  fc:	80 83       	st	Z, r24
  fe:	2b 81       	ldd	r18, Y+3	; 0x03
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	32 2f       	mov	r19, r18
 104:	22 27       	eor	r18, r18
 106:	8c 81       	ldd	r24, Y+4	; 0x04
 108:	28 2b       	or	r18, r24
 10a:	33 83       	std	Z+3, r19	; 0x03
 10c:	22 83       	std	Z+2, r18	; 0x02
 10e:	2d 81       	ldd	r18, Y+5	; 0x05
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	32 2f       	mov	r19, r18
 114:	22 27       	eor	r18, r18
 116:	8e 81       	ldd	r24, Y+6	; 0x06
 118:	28 2b       	or	r18, r24
 11a:	35 83       	std	Z+5, r19	; 0x05
 11c:	24 83       	std	Z+4, r18	; 0x04
 11e:	26 96       	adiw	r28, 0x06	; 6
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	08 95       	ret

00000134 <MPU6050_set_sleepMode>:
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	00 d0       	rcall	.+0      	; 0x13a <MPU6050_set_sleepMode+0x6>
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
 13e:	88 23       	and	r24, r24
 140:	c1 f0       	breq	.+48     	; 0x172 <MPU6050_set_sleepMode+0x3e>
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	61 f5       	brne	.+88     	; 0x19e <MPU6050_set_sleepMode+0x6a>
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	ae 01       	movw	r20, r28
 14c:	4f 5f       	subi	r20, 0xFF	; 255
 14e:	5f 4f       	sbci	r21, 0xFF	; 255
 150:	6b e6       	ldi	r22, 0x6B	; 107
 152:	80 ed       	ldi	r24, 0xD0	; 208
 154:	0e 94 54 03 	call	0x6a8	; 0x6a8 <i2c_readReg>
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	80 64       	ori	r24, 0x40	; 64
 15c:	8a 83       	std	Y+2, r24	; 0x02
 15e:	21 e0       	ldi	r18, 0x01	; 1
	
	char gyrX_str[16], gyrY_str[16], gyrZ_str[16];
	ltoa(gy_bias[0],gyrX_str,10);
	ltoa(gy_bias[1],gyrY_str,10);
	ltoa(gy_bias[2],gyrZ_str,10);
	printString(gyrX_str); printString("_");
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	ae 01       	movw	r20, r28
 164:	4e 5f       	subi	r20, 0xFE	; 254
 166:	5f 4f       	sbci	r21, 0xFF	; 255
 168:	6b e6       	ldi	r22, 0x6B	; 107
 16a:	80 ed       	ldi	r24, 0xD0	; 208
 16c:	0e 94 22 03 	call	0x644	; 0x644 <i2c_writeReg>
	printString(gyrY_str); printString("_");
 170:	2b c0       	rjmp	.+86     	; 0x1c8 <MPU6050_set_sleepMode+0x94>
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	ae 01       	movw	r20, r28
 178:	4f 5f       	subi	r20, 0xFF	; 255
 17a:	5f 4f       	sbci	r21, 0xFF	; 255
 17c:	6b e6       	ldi	r22, 0x6B	; 107
 17e:	80 ed       	ldi	r24, 0xD0	; 208
	printLine(gyrZ_str);
 180:	0e 94 54 03 	call	0x6a8	; 0x6a8 <i2c_readReg>
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	8f 7b       	andi	r24, 0xBF	; 191
	
	MPU6050_set_gyro_bias_reg(gy_bias);
 188:	8a 83       	std	Y+2, r24	; 0x02
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	ae 01       	movw	r20, r28
 190:	4e 5f       	subi	r20, 0xFE	; 254
 192:	5f 4f       	sbci	r21, 0xFF	; 255
 194:	6b e6       	ldi	r22, 0x6B	; 107
 196:	80 ed       	ldi	r24, 0xD0	; 208
 198:	0e 94 22 03 	call	0x644	; 0x644 <i2c_writeReg>
 19c:	15 c0       	rjmp	.+42     	; 0x1c8 <MPU6050_set_sleepMode+0x94>
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	ae 01       	movw	r20, r28
 1a4:	4f 5f       	subi	r20, 0xFF	; 255
 1a6:	5f 4f       	sbci	r21, 0xFF	; 255
 1a8:	6b e6       	ldi	r22, 0x6B	; 107
 1aa:	80 ed       	ldi	r24, 0xD0	; 208
				power_reg_write = power_reg_read & ~(0b01000000);
				power_reg_write |= (0b00000000);
				i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
				break;
		default:
				i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 1ac:	0e 94 54 03 	call	0x6a8	; 0x6a8 <i2c_readReg>
				power_reg_write = power_reg_read & ~(0b01000000);
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
				power_reg_write |= (0b01000000);
 1b2:	80 64       	ori	r24, 0x40	; 64
 1b4:	8a 83       	std	Y+2, r24	; 0x02
				i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	ae 01       	movw	r20, r28
 1bc:	4e 5f       	subi	r20, 0xFE	; 254
 1be:	5f 4f       	sbci	r21, 0xFF	; 255
 1c0:	6b e6       	ldi	r22, 0x6B	; 107
 1c2:	80 ed       	ldi	r24, 0xD0	; 208
 1c4:	0e 94 22 03 	call	0x644	; 0x644 <i2c_writeReg>
				break;
	}
}
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <MPU6050_set_gyroFS>:

void MPU6050_set_gyroFS(uint8_t gyroFS)
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	1f 92       	push	r1
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
	uint8_t gyroFSregValue = 0;
	
	switch(gyroFS) {
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	49 f0       	breq	.+18     	; 0x1f2 <MPU6050_set_gyroFS+0x20>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	51 f0       	breq	.+20     	; 0x1f8 <MPU6050_set_gyroFS+0x26>
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	11 f0       	breq	.+4      	; 0x1ec <MPU6050_set_gyroFS+0x1a>
	}
}

void MPU6050_set_gyroFS(uint8_t gyroFS)
{
	uint8_t gyroFSregValue = 0;
 1e8:	19 82       	std	Y+1, r1	; 0x01
 1ea:	08 c0       	rjmp	.+16     	; 0x1fc <MPU6050_set_gyroFS+0x2a>
	switch(gyroFS) {
		case 0:
			gyroFSregValue = 0b00000000;
			break;
		case 1:
			gyroFSregValue = 0b00001000;
 1ec:	88 e0       	ldi	r24, 0x08	; 8
 1ee:	89 83       	std	Y+1, r24	; 0x01
			break;
 1f0:	05 c0       	rjmp	.+10     	; 0x1fc <MPU6050_set_gyroFS+0x2a>
		case 2:
			gyroFSregValue = 0b00010000;
 1f2:	80 e1       	ldi	r24, 0x10	; 16
 1f4:	89 83       	std	Y+1, r24	; 0x01
			break;
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <MPU6050_set_gyroFS+0x2a>
		case 3:
			gyroFSregValue = 0b00011000;
 1f8:	88 e1       	ldi	r24, 0x18	; 24
 1fa:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			gyroFSregValue = 0b00000000;
	}
	i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG,&gyroFSregValue,1);
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	ae 01       	movw	r20, r28
 202:	4f 5f       	subi	r20, 0xFF	; 255
 204:	5f 4f       	sbci	r21, 0xFF	; 255
 206:	6b e1       	ldi	r22, 0x1B	; 27
 208:	80 ed       	ldi	r24, 0xD0	; 208
 20a:	0e 94 22 03 	call	0x644	; 0x644 <i2c_writeReg>
}
 20e:	0f 90       	pop	r0
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <MPU6050_set_accelFS>:

void MPU6050_set_accelFS(uint8_t accelFS)
{
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	00 d0       	rcall	.+0      	; 0x21c <MPU6050_set_accelFS+0x6>
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
	uint8_t accel_config_read, accel_config_write;
	
	switch(accelFS) {
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	e9 f0       	breq	.+58     	; 0x25e <MPU6050_set_accelFS+0x48>
 224:	30 f0       	brcs	.+12     	; 0x232 <MPU6050_set_accelFS+0x1c>
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	89 f1       	breq	.+98     	; 0x28c <MPU6050_set_accelFS+0x76>
 22a:	83 30       	cpi	r24, 0x03	; 3
 22c:	09 f4       	brne	.+2      	; 0x230 <MPU6050_set_accelFS+0x1a>
 22e:	45 c0       	rjmp	.+138    	; 0x2ba <MPU6050_set_accelFS+0xa4>
 230:	5a c0       	rjmp	.+180    	; 0x2e6 <MPU6050_set_accelFS+0xd0>
		case 0:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	ae 01       	movw	r20, r28
 238:	4f 5f       	subi	r20, 0xFF	; 255
 23a:	5f 4f       	sbci	r21, 0xFF	; 255
 23c:	6c e1       	ldi	r22, 0x1C	; 28
 23e:	80 ed       	ldi	r24, 0xD0	; 208
 240:	0e 94 54 03 	call	0x6a8	; 0x6a8 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	87 7e       	andi	r24, 0xE7	; 231
 248:	8a 83       	std	Y+2, r24	; 0x02
			accel_config_write |= (0b00000000);
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 24a:	21 e0       	ldi	r18, 0x01	; 1
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	ae 01       	movw	r20, r28
 250:	4e 5f       	subi	r20, 0xFE	; 254
 252:	5f 4f       	sbci	r21, 0xFF	; 255
 254:	6c e1       	ldi	r22, 0x1C	; 28
 256:	80 ed       	ldi	r24, 0xD0	; 208
 258:	0e 94 22 03 	call	0x644	; 0x644 <i2c_writeReg>
			break;
 25c:	59 c0       	rjmp	.+178    	; 0x310 <MPU6050_set_accelFS+0xfa>
		case 1:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 25e:	21 e0       	ldi	r18, 0x01	; 1
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	ae 01       	movw	r20, r28
 264:	4f 5f       	subi	r20, 0xFF	; 255
 266:	5f 4f       	sbci	r21, 0xFF	; 255
 268:	6c e1       	ldi	r22, 0x1C	; 28
 26a:	80 ed       	ldi	r24, 0xD0	; 208
 26c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	87 7e       	andi	r24, 0xE7	; 231
			accel_config_write |= (0b00001000);
 274:	88 60       	ori	r24, 0x08	; 8
 276:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	ae 01       	movw	r20, r28
 27e:	4e 5f       	subi	r20, 0xFE	; 254
 280:	5f 4f       	sbci	r21, 0xFF	; 255
 282:	6c e1       	ldi	r22, 0x1C	; 28
 284:	80 ed       	ldi	r24, 0xD0	; 208
 286:	0e 94 22 03 	call	0x644	; 0x644 <i2c_writeReg>
			break;
 28a:	42 c0       	rjmp	.+132    	; 0x310 <MPU6050_set_accelFS+0xfa>
		case 2:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	ae 01       	movw	r20, r28
 292:	4f 5f       	subi	r20, 0xFF	; 255
 294:	5f 4f       	sbci	r21, 0xFF	; 255
 296:	6c e1       	ldi	r22, 0x1C	; 28
 298:	80 ed       	ldi	r24, 0xD0	; 208
 29a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	87 7e       	andi	r24, 0xE7	; 231
			accel_config_write |= (0b00010000);
 2a2:	80 61       	ori	r24, 0x10	; 16
 2a4:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 2a6:	21 e0       	ldi	r18, 0x01	; 1
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	ae 01       	movw	r20, r28
 2ac:	4e 5f       	subi	r20, 0xFE	; 254
 2ae:	5f 4f       	sbci	r21, 0xFF	; 255
 2b0:	6c e1       	ldi	r22, 0x1C	; 28
 2b2:	80 ed       	ldi	r24, 0xD0	; 208
 2b4:	0e 94 22 03 	call	0x644	; 0x644 <i2c_writeReg>
			break;
 2b8:	2b c0       	rjmp	.+86     	; 0x310 <MPU6050_set_accelFS+0xfa>
		case 3:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	ae 01       	movw	r20, r28
 2c0:	4f 5f       	subi	r20, 0xFF	; 255
 2c2:	5f 4f       	sbci	r21, 0xFF	; 255
 2c4:	6c e1       	ldi	r22, 0x1C	; 28
 2c6:	80 ed       	ldi	r24, 0xD0	; 208
 2c8:	0e 94 54 03 	call	0x6a8	; 0x6a8 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
			accel_config_write |= (0b00011000);
 2ce:	88 61       	ori	r24, 0x18	; 24
 2d0:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	ae 01       	movw	r20, r28
 2d8:	4e 5f       	subi	r20, 0xFE	; 254
 2da:	5f 4f       	sbci	r21, 0xFF	; 255
 2dc:	6c e1       	ldi	r22, 0x1C	; 28
 2de:	80 ed       	ldi	r24, 0xD0	; 208
 2e0:	0e 94 22 03 	call	0x644	; 0x644 <i2c_writeReg>
			break;
 2e4:	15 c0       	rjmp	.+42     	; 0x310 <MPU6050_set_accelFS+0xfa>
		default:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	ae 01       	movw	r20, r28
 2ec:	4f 5f       	subi	r20, 0xFF	; 255
 2ee:	5f 4f       	sbci	r21, 0xFF	; 255
 2f0:	6c e1       	ldi	r22, 0x1C	; 28
 2f2:	80 ed       	ldi	r24, 0xD0	; 208
 2f4:	0e 94 54 03 	call	0x6a8	; 0x6a8 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	87 7e       	andi	r24, 0xE7	; 231
 2fc:	8a 83       	std	Y+2, r24	; 0x02
			accel_config_write |= (0b00000000);
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 2fe:	21 e0       	ldi	r18, 0x01	; 1
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	ae 01       	movw	r20, r28
 304:	4e 5f       	subi	r20, 0xFE	; 254
 306:	5f 4f       	sbci	r21, 0xFF	; 255
 308:	6c e1       	ldi	r22, 0x1C	; 28
 30a:	80 ed       	ldi	r24, 0xD0	; 208
 30c:	0e 94 22 03 	call	0x644	; 0x644 <i2c_writeReg>
			break;
	}
}
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <MPU6050_set_clockSource>:

void MPU6050_set_clockSource(uint8_t clockSource)
{
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	00 d0       	rcall	.+0      	; 0x320 <MPU6050_set_clockSource+0x6>
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
	uint8_t power_reg_read, power_reg_write;
	switch(clockSource) {
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	e9 f0       	breq	.+58     	; 0x362 <MPU6050_set_clockSource+0x48>
 328:	30 f0       	brcs	.+12     	; 0x336 <MPU6050_set_clockSource+0x1c>
 32a:	82 30       	cpi	r24, 0x02	; 2
 32c:	89 f1       	breq	.+98     	; 0x390 <MPU6050_set_clockSource+0x76>
 32e:	83 30       	cpi	r24, 0x03	; 3
 330:	09 f4       	brne	.+2      	; 0x334 <MPU6050_set_clockSource+0x1a>
 332:	45 c0       	rjmp	.+138    	; 0x3be <MPU6050_set_clockSource+0xa4>
 334:	5b c0       	rjmp	.+182    	; 0x3ec <MPU6050_set_clockSource+0xd2>
		case 0:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 336:	21 e0       	ldi	r18, 0x01	; 1
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	ae 01       	movw	r20, r28
 33c:	4f 5f       	subi	r20, 0xFF	; 255
 33e:	5f 4f       	sbci	r21, 0xFF	; 255
 340:	6b e6       	ldi	r22, 0x6B	; 107
 342:	80 ed       	ldi	r24, 0xD0	; 208
 344:	0e 94 54 03 	call	0x6a8	; 0x6a8 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	88 7f       	andi	r24, 0xF8	; 248
 34c:	8a 83       	std	Y+2, r24	; 0x02
			power_reg_write |= (0b00000000);
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 34e:	21 e0       	ldi	r18, 0x01	; 1
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	ae 01       	movw	r20, r28
 354:	4e 5f       	subi	r20, 0xFE	; 254
 356:	5f 4f       	sbci	r21, 0xFF	; 255
 358:	6b e6       	ldi	r22, 0x6B	; 107
 35a:	80 ed       	ldi	r24, 0xD0	; 208
 35c:	0e 94 22 03 	call	0x644	; 0x644 <i2c_writeReg>
			break;
 360:	5b c0       	rjmp	.+182    	; 0x418 <MPU6050_set_clockSource+0xfe>
		case 1:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 362:	21 e0       	ldi	r18, 0x01	; 1
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	ae 01       	movw	r20, r28
 368:	4f 5f       	subi	r20, 0xFF	; 255
 36a:	5f 4f       	sbci	r21, 0xFF	; 255
 36c:	6b e6       	ldi	r22, 0x6B	; 107
 36e:	80 ed       	ldi	r24, 0xD0	; 208
 370:	0e 94 54 03 	call	0x6a8	; 0x6a8 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 374:	89 81       	ldd	r24, Y+1	; 0x01
 376:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000001);
 378:	81 60       	ori	r24, 0x01	; 1
 37a:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 37c:	21 e0       	ldi	r18, 0x01	; 1
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	ae 01       	movw	r20, r28
 382:	4e 5f       	subi	r20, 0xFE	; 254
 384:	5f 4f       	sbci	r21, 0xFF	; 255
 386:	6b e6       	ldi	r22, 0x6B	; 107
 388:	80 ed       	ldi	r24, 0xD0	; 208
 38a:	0e 94 22 03 	call	0x644	; 0x644 <i2c_writeReg>
			break;
 38e:	44 c0       	rjmp	.+136    	; 0x418 <MPU6050_set_clockSource+0xfe>
		case 2:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	ae 01       	movw	r20, r28
 396:	4f 5f       	subi	r20, 0xFF	; 255
 398:	5f 4f       	sbci	r21, 0xFF	; 255
 39a:	6b e6       	ldi	r22, 0x6B	; 107
 39c:	80 ed       	ldi	r24, 0xD0	; 208
 39e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000010);
 3a6:	82 60       	ori	r24, 0x02	; 2
 3a8:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 3aa:	21 e0       	ldi	r18, 0x01	; 1
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	ae 01       	movw	r20, r28
 3b0:	4e 5f       	subi	r20, 0xFE	; 254
 3b2:	5f 4f       	sbci	r21, 0xFF	; 255
 3b4:	6b e6       	ldi	r22, 0x6B	; 107
 3b6:	80 ed       	ldi	r24, 0xD0	; 208
 3b8:	0e 94 22 03 	call	0x644	; 0x644 <i2c_writeReg>
			break;
 3bc:	2d c0       	rjmp	.+90     	; 0x418 <MPU6050_set_clockSource+0xfe>
		case 3:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 3be:	21 e0       	ldi	r18, 0x01	; 1
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	ae 01       	movw	r20, r28
 3c4:	4f 5f       	subi	r20, 0xFF	; 255
 3c6:	5f 4f       	sbci	r21, 0xFF	; 255
 3c8:	6b e6       	ldi	r22, 0x6B	; 107
 3ca:	80 ed       	ldi	r24, 0xD0	; 208
 3cc:	0e 94 54 03 	call	0x6a8	; 0x6a8 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000011);
 3d4:	83 60       	ori	r24, 0x03	; 3
 3d6:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 3d8:	21 e0       	ldi	r18, 0x01	; 1
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	ae 01       	movw	r20, r28
 3de:	4e 5f       	subi	r20, 0xFE	; 254
 3e0:	5f 4f       	sbci	r21, 0xFF	; 255
 3e2:	6b e6       	ldi	r22, 0x6B	; 107
 3e4:	80 ed       	ldi	r24, 0xD0	; 208
 3e6:	0e 94 22 03 	call	0x644	; 0x644 <i2c_writeReg>
			break;
 3ea:	16 c0       	rjmp	.+44     	; 0x418 <MPU6050_set_clockSource+0xfe>
		default:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 3ec:	21 e0       	ldi	r18, 0x01	; 1
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	ae 01       	movw	r20, r28
 3f2:	4f 5f       	subi	r20, 0xFF	; 255
 3f4:	5f 4f       	sbci	r21, 0xFF	; 255
 3f6:	6b e6       	ldi	r22, 0x6B	; 107
 3f8:	80 ed       	ldi	r24, 0xD0	; 208
 3fa:	0e 94 54 03 	call	0x6a8	; 0x6a8 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 3fe:	89 81       	ldd	r24, Y+1	; 0x01
 400:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000001);
 402:	81 60       	ori	r24, 0x01	; 1
 404:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 406:	21 e0       	ldi	r18, 0x01	; 1
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	ae 01       	movw	r20, r28
 40c:	4e 5f       	subi	r20, 0xFE	; 254
 40e:	5f 4f       	sbci	r21, 0xFF	; 255
 410:	6b e6       	ldi	r22, 0x6B	; 107
 412:	80 ed       	ldi	r24, 0xD0	; 208
 414:	0e 94 22 03 	call	0x644	; 0x644 <i2c_writeReg>
			break;
	}
}
 418:	0f 90       	pop	r0
 41a:	0f 90       	pop	r0
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <MPU6050_init>:
#include "i2c_master.h"
#include "USART.h"

void MPU6050_init()
{
	i2c_init();
 422:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_init>
	MPU6050_set_clockSource(1);
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 8d 01 	call	0x31a	; 0x31a <MPU6050_set_clockSource>
	MPU6050_set_gyroFS(2);
 42c:	82 e0       	ldi	r24, 0x02	; 2
 42e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <MPU6050_set_gyroFS>
	MPU6050_set_accelFS(0);
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	0e 94 0b 01 	call	0x216	; 0x216 <MPU6050_set_accelFS>
	MPU6050_set_sleepMode(0);
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	0e 94 9a 00 	call	0x134	; 0x134 <MPU6050_set_sleepMode>
 43e:	08 95       	ret

00000440 <MPU6050_set_accel_bias_reg>:
			break;
	}
}

void MPU6050_set_accel_bias_reg(long *accel_bias)
{
 440:	cf 92       	push	r12
 442:	df 92       	push	r13
 444:	ef 92       	push	r14
 446:	ff 92       	push	r15
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	00 d0       	rcall	.+0      	; 0x452 <MPU6050_set_accel_bias_reg+0x12>
 452:	00 d0       	rcall	.+0      	; 0x454 <MPU6050_set_accel_bias_reg+0x14>
 454:	00 d0       	rcall	.+0      	; 0x456 <MPU6050_set_accel_bias_reg+0x16>
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
 45a:	fc 01       	movw	r30, r24
	unsigned char data[6] = {0, 0, 0, 0, 0, 0};
 45c:	ae 01       	movw	r20, r28
 45e:	4f 5f       	subi	r20, 0xFF	; 255
 460:	5f 4f       	sbci	r21, 0xFF	; 255
 462:	86 e0       	ldi	r24, 0x06	; 6
 464:	da 01       	movw	r26, r20
 466:	1d 92       	st	X+, r1
 468:	8a 95       	dec	r24
 46a:	e9 f7       	brne	.-6      	; 0x466 <MPU6050_set_accel_bias_reg+0x26>
	int i=0;
	for(i=0;i<3;i++) {
		accel_bias[i]= (-accel_bias[i]);
 46c:	c0 80       	ld	r12, Z
 46e:	d1 80       	ldd	r13, Z+1	; 0x01
 470:	e2 80       	ldd	r14, Z+2	; 0x02
 472:	f3 80       	ldd	r15, Z+3	; 0x03
 474:	f0 94       	com	r15
 476:	e0 94       	com	r14
 478:	d0 94       	com	r13
 47a:	c0 94       	com	r12
 47c:	c1 1c       	adc	r12, r1
 47e:	d1 1c       	adc	r13, r1
 480:	e1 1c       	adc	r14, r1
 482:	f1 1c       	adc	r15, r1
 484:	c0 82       	st	Z, r12
 486:	d1 82       	std	Z+1, r13	; 0x01
 488:	e2 82       	std	Z+2, r14	; 0x02
 48a:	f3 82       	std	Z+3, r15	; 0x03
 48c:	04 81       	ldd	r16, Z+4	; 0x04
 48e:	15 81       	ldd	r17, Z+5	; 0x05
 490:	26 81       	ldd	r18, Z+6	; 0x06
 492:	37 81       	ldd	r19, Z+7	; 0x07
 494:	30 95       	com	r19
 496:	20 95       	com	r18
 498:	10 95       	com	r17
 49a:	01 95       	neg	r16
 49c:	1f 4f       	sbci	r17, 0xFF	; 255
 49e:	2f 4f       	sbci	r18, 0xFF	; 255
 4a0:	3f 4f       	sbci	r19, 0xFF	; 255
 4a2:	04 83       	std	Z+4, r16	; 0x04
 4a4:	15 83       	std	Z+5, r17	; 0x05
 4a6:	26 83       	std	Z+6, r18	; 0x06
 4a8:	37 83       	std	Z+7, r19	; 0x07
 4aa:	80 85       	ldd	r24, Z+8	; 0x08
 4ac:	91 85       	ldd	r25, Z+9	; 0x09
 4ae:	a2 85       	ldd	r26, Z+10	; 0x0a
 4b0:	b3 85       	ldd	r27, Z+11	; 0x0b
 4b2:	b0 95       	com	r27
 4b4:	a0 95       	com	r26
 4b6:	90 95       	com	r25
 4b8:	81 95       	neg	r24
 4ba:	9f 4f       	sbci	r25, 0xFF	; 255
 4bc:	af 4f       	sbci	r26, 0xFF	; 255
 4be:	bf 4f       	sbci	r27, 0xFF	; 255
 4c0:	80 87       	std	Z+8, r24	; 0x08
 4c2:	91 87       	std	Z+9, r25	; 0x09
 4c4:	a2 87       	std	Z+10, r26	; 0x0a
 4c6:	b3 87       	std	Z+11, r27	; 0x0b
	}
	data[0] = (accel_bias[0] >> 8) & 0xff;
 4c8:	d9 82       	std	Y+1, r13	; 0x01
	data[1] = (accel_bias[0]) & 0xff;
 4ca:	ca 82       	std	Y+2, r12	; 0x02
	data[2] = (accel_bias[1] >> 8) & 0xff;
 4cc:	1b 83       	std	Y+3, r17	; 0x03
	data[3] = (accel_bias[1]) & 0xff;
 4ce:	0c 83       	std	Y+4, r16	; 0x04
	data[4] = (accel_bias[2] >> 8) & 0xff;
 4d0:	9d 83       	std	Y+5, r25	; 0x05
	data[5] = (accel_bias[2]) & 0xff;
 4d2:	8e 83       	std	Y+6, r24	; 0x06
	
	i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_XA_OFFS_H, &data[0], 6);
 4d4:	26 e0       	ldi	r18, 0x06	; 6
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	66 e0       	ldi	r22, 0x06	; 6
 4da:	80 ed       	ldi	r24, 0xD0	; 208
 4dc:	0e 94 22 03 	call	0x644	; 0x644 <i2c_writeReg>
}
 4e0:	26 96       	adiw	r28, 0x06	; 6
 4e2:	0f b6       	in	r0, 0x3f	; 63
 4e4:	f8 94       	cli
 4e6:	de bf       	out	0x3e, r29	; 62
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	cd bf       	out	0x3d, r28	; 61
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	ff 90       	pop	r15
 4f6:	ef 90       	pop	r14
 4f8:	df 90       	pop	r13
 4fa:	cf 90       	pop	r12
 4fc:	08 95       	ret

000004fe <MPU6050_auto_set_accel_bias>:
	data[5] = (gyro_bias[2]) & 0xff;
	
	i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_XG_OFFS_USRH, &data[0], 6);
}

void MPU6050_auto_set_accel_bias() {
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	cd b7       	in	r28, 0x3d	; 61
 504:	de b7       	in	r29, 0x3e	; 62
 506:	ec 97       	sbiw	r28, 0x3c	; 60
 508:	0f b6       	in	r0, 0x3f	; 63
 50a:	f8 94       	cli
 50c:	de bf       	out	0x3e, r29	; 62
 50e:	0f be       	out	0x3f, r0	; 63
 510:	cd bf       	out	0x3d, r28	; 61
	int16_t accel[3];
	long ac_bias[3] = {0,0,0};
 512:	19 82       	std	Y+1, r1	; 0x01
 514:	1a 82       	std	Y+2, r1	; 0x02
 516:	1b 82       	std	Y+3, r1	; 0x03
 518:	1c 82       	std	Y+4, r1	; 0x04
 51a:	1d 82       	std	Y+5, r1	; 0x05
 51c:	1e 82       	std	Y+6, r1	; 0x06
 51e:	1f 82       	std	Y+7, r1	; 0x07
 520:	18 86       	std	Y+8, r1	; 0x08
 522:	19 86       	std	Y+9, r1	; 0x09
 524:	1a 86       	std	Y+10, r1	; 0x0a
 526:	1b 86       	std	Y+11, r1	; 0x0b
 528:	1c 86       	std	Y+12, r1	; 0x0c
	MPU6050_set_accel_bias_reg(ac_bias);
 52a:	ce 01       	movw	r24, r28
 52c:	01 96       	adiw	r24, 0x01	; 1
 52e:	0e 94 20 02 	call	0x440	; 0x440 <MPU6050_set_accel_bias_reg>
	MPU6050_set_accelFS(2); // set to 8G range
 532:	82 e0       	ldi	r24, 0x02	; 2
 534:	0e 94 0b 01 	call	0x216	; 0x216 <MPU6050_set_accelFS>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 538:	4a e0       	ldi	r20, 0x0A	; 10
 53a:	be 01       	movw	r22, r28
 53c:	63 5f       	subi	r22, 0xF3	; 243
 53e:	7f 4f       	sbci	r23, 0xFF	; 255
 540:	89 81       	ldd	r24, Y+1	; 0x01
 542:	9a 81       	ldd	r25, Y+2	; 0x02
 544:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__itoa_ncheck>
 548:	4a e0       	ldi	r20, 0x0A	; 10
 54a:	be 01       	movw	r22, r28
 54c:	63 5e       	subi	r22, 0xE3	; 227
 54e:	7f 4f       	sbci	r23, 0xFF	; 255
 550:	8d 81       	ldd	r24, Y+5	; 0x05
 552:	9e 81       	ldd	r25, Y+6	; 0x06
 554:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__itoa_ncheck>
 558:	4a e0       	ldi	r20, 0x0A	; 10
 55a:	be 01       	movw	r22, r28
 55c:	63 5d       	subi	r22, 0xD3	; 211
 55e:	7f 4f       	sbci	r23, 0xFF	; 255
 560:	89 85       	ldd	r24, Y+9	; 0x09
 562:	9a 85       	ldd	r25, Y+10	; 0x0a
 564:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__itoa_ncheck>
	
	char accX_str[16], accY_str[16], accZ_str[16];
	itoa(ac_bias[0],accX_str,10);
	itoa(ac_bias[1],accY_str,10);
	itoa(ac_bias[2],accZ_str,10);
	printString(accX_str); printString("_");
 568:	ce 01       	movw	r24, r28
 56a:	0d 96       	adiw	r24, 0x0d	; 13
 56c:	0e 94 b0 03 	call	0x760	; 0x760 <printString>
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	91 e0       	ldi	r25, 0x01	; 1
 574:	0e 94 b0 03 	call	0x760	; 0x760 <printString>
	printString(accY_str); printString("_");
 578:	ce 01       	movw	r24, r28
 57a:	4d 96       	adiw	r24, 0x1d	; 29
 57c:	0e 94 b0 03 	call	0x760	; 0x760 <printString>
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	0e 94 b0 03 	call	0x760	; 0x760 <printString>
	printLine(accZ_str);
 588:	ce 01       	movw	r24, r28
 58a:	8d 96       	adiw	r24, 0x2d	; 45
 58c:	0e 94 c6 03 	call	0x78c	; 0x78c <printLine>
}
 590:	ec 96       	adiw	r28, 0x3c	; 60
 592:	0f b6       	in	r0, 0x3f	; 63
 594:	f8 94       	cli
 596:	de bf       	out	0x3e, r29	; 62
 598:	0f be       	out	0x3f, r0	; 63
 59a:	cd bf       	out	0x3d, r28	; 61
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret

000005a2 <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
 5a2:	88 e4       	ldi	r24, 0x48	; 72
 5a4:	80 93 b8 00 	sts	0x00B8, r24
 5a8:	08 95       	ret

000005aa <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
 5aa:	ec eb       	ldi	r30, 0xBC	; 188
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	10 82       	st	Z, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 5b0:	94 ea       	ldi	r25, 0xA4	; 164
 5b2:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 5b4:	90 81       	ld	r25, Z
 5b6:	99 23       	and	r25, r25
 5b8:	ec f7       	brge	.-6      	; 0x5b4 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 5ba:	90 91 b9 00 	lds	r25, 0x00B9
 5be:	98 7f       	andi	r25, 0xF8	; 248
 5c0:	98 30       	cpi	r25, 0x08	; 8
 5c2:	a1 f4       	brne	.+40     	; 0x5ec <i2c_start+0x42>
	
	// load slave address into data register
	TWDR = address;
 5c4:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
 5c8:	84 e8       	ldi	r24, 0x84	; 132
 5ca:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 5ce:	ec eb       	ldi	r30, 0xBC	; 188
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	80 81       	ld	r24, Z
 5d4:	88 23       	and	r24, r24
 5d6:	ec f7       	brge	.-6      	; 0x5d2 <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
 5d8:	90 91 b9 00 	lds	r25, 0x00B9
 5dc:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 5de:	98 31       	cpi	r25, 0x18	; 24
 5e0:	39 f0       	breq	.+14     	; 0x5f0 <i2c_start+0x46>
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 34       	cpi	r25, 0x40	; 64
 5e6:	29 f4       	brne	.+10     	; 0x5f2 <i2c_start+0x48>
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
 5f0:	80 e0       	ldi	r24, 0x00	; 0
}
 5f2:	08 95       	ret

000005f4 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
 5f4:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
 5f8:	84 e8       	ldi	r24, 0x84	; 132
 5fa:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 5fe:	ec eb       	ldi	r30, 0xBC	; 188
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	80 81       	ld	r24, Z
 604:	88 23       	and	r24, r24
 606:	ec f7       	brge	.-6      	; 0x602 <i2c_write+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
 608:	90 91 b9 00 	lds	r25, 0x00B9
 60c:	98 7f       	andi	r25, 0xF8	; 248
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	98 32       	cpi	r25, 0x28	; 40
 612:	09 f4       	brne	.+2      	; 0x616 <i2c_write+0x22>
 614:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
 616:	08 95       	ret

00000618 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 618:	84 ec       	ldi	r24, 0xC4	; 196
 61a:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 61e:	ec eb       	ldi	r30, 0xBC	; 188
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	80 81       	ld	r24, Z
 624:	88 23       	and	r24, r24
 626:	ec f7       	brge	.-6      	; 0x622 <i2c_read_ack+0xa>
	// return received data from TWDR
	return TWDR;
 628:	80 91 bb 00 	lds	r24, 0x00BB
}
 62c:	08 95       	ret

0000062e <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 62e:	84 e8       	ldi	r24, 0x84	; 132
 630:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 634:	ec eb       	ldi	r30, 0xBC	; 188
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
 63a:	88 23       	and	r24, r24
 63c:	ec f7       	brge	.-6      	; 0x638 <i2c_read_nack+0xa>
	// return received data from TWDR
	return TWDR;
 63e:	80 91 bb 00 	lds	r24, 0x00BB
}
 642:	08 95       	ret

00000644 <i2c_writeReg>:
	
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 644:	cf 92       	push	r12
 646:	df 92       	push	r13
 648:	ff 92       	push	r15
 64a:	0f 93       	push	r16
 64c:	1f 93       	push	r17
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	c6 2f       	mov	r28, r22
 654:	6a 01       	movw	r12, r20
 656:	89 01       	movw	r16, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 658:	0e 94 d5 02 	call	0x5aa	; 0x5aa <i2c_start>
 65c:	f8 2e       	mov	r15, r24
 65e:	81 11       	cpse	r24, r1
 660:	15 c0       	rjmp	.+42     	; 0x68c <i2c_writeReg+0x48>

	i2c_write(regaddr);
 662:	8c 2f       	mov	r24, r28
 664:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <i2c_write>

	for (uint16_t i = 0; i < length; i++)
 668:	01 15       	cp	r16, r1
 66a:	11 05       	cpc	r17, r1
 66c:	59 f0       	breq	.+22     	; 0x684 <i2c_writeReg+0x40>
 66e:	e6 01       	movw	r28, r12
 670:	0c 0d       	add	r16, r12
 672:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 674:	89 91       	ld	r24, Y+
 676:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <i2c_write>
 67a:	81 11       	cpse	r24, r1
 67c:	0a c0       	rjmp	.+20     	; 0x692 <i2c_writeReg+0x4e>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
 67e:	c0 17       	cp	r28, r16
 680:	d1 07       	cpc	r29, r17
 682:	c1 f7       	brne	.-16     	; 0x674 <i2c_writeReg+0x30>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 684:	84 e9       	ldi	r24, 0x94	; 148
 686:	80 93 bc 00 	sts	0x00BC, r24
 68a:	05 c0       	rjmp	.+10     	; 0x696 <i2c_writeReg+0x52>
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
 68c:	ff 24       	eor	r15, r15
 68e:	f3 94       	inc	r15
 690:	02 c0       	rjmp	.+4      	; 0x696 <i2c_writeReg+0x52>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 692:	ff 24       	eor	r15, r15
 694:	f3 94       	inc	r15
	}

	i2c_stop();

	return 0;
}
 696:	8f 2d       	mov	r24, r15
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	1f 91       	pop	r17
 69e:	0f 91       	pop	r16
 6a0:	ff 90       	pop	r15
 6a2:	df 90       	pop	r13
 6a4:	cf 90       	pop	r12
 6a6:	08 95       	ret

000006a8 <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 6a8:	af 92       	push	r10
 6aa:	bf 92       	push	r11
 6ac:	df 92       	push	r13
 6ae:	ef 92       	push	r14
 6b0:	ff 92       	push	r15
 6b2:	0f 93       	push	r16
 6b4:	1f 93       	push	r17
 6b6:	cf 93       	push	r28
 6b8:	df 93       	push	r29
 6ba:	18 2f       	mov	r17, r24
 6bc:	06 2f       	mov	r16, r22
 6be:	5a 01       	movw	r10, r20
 6c0:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
 6c2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <i2c_start>
 6c6:	81 11       	cpse	r24, r1
 6c8:	22 c0       	rjmp	.+68     	; 0x70e <i2c_readReg+0x66>

	i2c_write(regaddr);
 6ca:	80 2f       	mov	r24, r16
 6cc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 6d0:	81 2f       	mov	r24, r17
 6d2:	81 60       	ori	r24, 0x01	; 1
 6d4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <i2c_start>
 6d8:	d8 2e       	mov	r13, r24
 6da:	81 11       	cpse	r24, r1
 6dc:	1b c0       	rjmp	.+54     	; 0x714 <i2c_readReg+0x6c>

	for (uint16_t i = 0; i < (length-1); i++)
 6de:	8e 01       	movw	r16, r28
 6e0:	01 50       	subi	r16, 0x01	; 1
 6e2:	11 09       	sbc	r17, r1
 6e4:	51 f0       	breq	.+20     	; 0x6fa <i2c_readReg+0x52>
 6e6:	e5 01       	movw	r28, r10
 6e8:	75 01       	movw	r14, r10
 6ea:	e0 0e       	add	r14, r16
 6ec:	f1 1e       	adc	r15, r17
	{
		data[i] = i2c_read_ack();
 6ee:	0e 94 0c 03 	call	0x618	; 0x618 <i2c_read_ack>
 6f2:	89 93       	st	Y+, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
 6f4:	ce 15       	cp	r28, r14
 6f6:	df 05       	cpc	r29, r15
 6f8:	d1 f7       	brne	.-12     	; 0x6ee <i2c_readReg+0x46>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 6fa:	e5 01       	movw	r28, r10
 6fc:	c0 0f       	add	r28, r16
 6fe:	d1 1f       	adc	r29, r17
 700:	0e 94 17 03 	call	0x62e	; 0x62e <i2c_read_nack>
 704:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 706:	84 e9       	ldi	r24, 0x94	; 148
 708:	80 93 bc 00 	sts	0x00BC, r24
 70c:	05 c0       	rjmp	.+10     	; 0x718 <i2c_readReg+0x70>
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
 70e:	dd 24       	eor	r13, r13
 710:	d3 94       	inc	r13
 712:	02 c0       	rjmp	.+4      	; 0x718 <i2c_readReg+0x70>

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
 714:	dd 24       	eor	r13, r13
 716:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 718:	8d 2d       	mov	r24, r13
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	1f 91       	pop	r17
 720:	0f 91       	pop	r16
 722:	ff 90       	pop	r15
 724:	ef 90       	pop	r14
 726:	df 90       	pop	r13
 728:	bf 90       	pop	r11
 72a:	af 90       	pop	r10
 72c:	08 95       	ret

0000072e <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 72e:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
 732:	87 e6       	ldi	r24, 0x67	; 103
 734:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
#else
  UCSR0A &= ~(1 << U2X0);
 738:	e0 ec       	ldi	r30, 0xC0	; 192
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	80 81       	ld	r24, Z
 73e:	8d 7f       	andi	r24, 0xFD	; 253
 740:	80 83       	st	Z, r24
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 742:	88 e1       	ldi	r24, 0x18	; 24
 744:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 748:	86 e0       	ldi	r24, 0x06	; 6
 74a:	80 93 c2 00 	sts	0x00C2, r24
 74e:	08 95       	ret

00000750 <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 750:	e0 ec       	ldi	r30, 0xC0	; 192
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	90 81       	ld	r25, Z
 756:	95 ff       	sbrs	r25, 5
 758:	fd cf       	rjmp	.-6      	; 0x754 <transmitByte+0x4>
  UDR0 = data;                                            /* send data */
 75a:	80 93 c6 00 	sts	0x00C6, r24
 75e:	08 95       	ret

00000760 <printString>:
}


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 760:	0f 93       	push	r16
 762:	1f 93       	push	r17
 764:	cf 93       	push	r28
 766:	fc 01       	movw	r30, r24
  uint8_t i = 0;
  while (myString[i]) {
 768:	80 81       	ld	r24, Z
 76a:	88 23       	and	r24, r24
 76c:	59 f0       	breq	.+22     	; 0x784 <printString+0x24>
 76e:	8f 01       	movw	r16, r30
 770:	c0 e0       	ldi	r28, 0x00	; 0
    transmitByte(myString[i]);
 772:	0e 94 a8 03 	call	0x750	; 0x750 <transmitByte>
    i++;
 776:	cf 5f       	subi	r28, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 778:	f8 01       	movw	r30, r16
 77a:	ec 0f       	add	r30, r28
 77c:	f1 1d       	adc	r31, r1
 77e:	80 81       	ld	r24, Z
 780:	81 11       	cpse	r24, r1
 782:	f7 cf       	rjmp	.-18     	; 0x772 <printString+0x12>
    transmitByte(myString[i]);
    i++;
  }
}
 784:	cf 91       	pop	r28
 786:	1f 91       	pop	r17
 788:	0f 91       	pop	r16
 78a:	08 95       	ret

0000078c <printLine>:

void printLine(const char myString[]) {
 78c:	0f 93       	push	r16
 78e:	1f 93       	push	r17
 790:	cf 93       	push	r28
 792:	8c 01       	movw	r16, r24
	uint8_t i = 0;
	while (myString[i]) {
 794:	fc 01       	movw	r30, r24
 796:	80 81       	ld	r24, Z
 798:	88 23       	and	r24, r24
 79a:	51 f0       	breq	.+20     	; 0x7b0 <printLine+0x24>
 79c:	c0 e0       	ldi	r28, 0x00	; 0
		transmitByte(myString[i]);
 79e:	0e 94 a8 03 	call	0x750	; 0x750 <transmitByte>
		i++;
 7a2:	cf 5f       	subi	r28, 0xFF	; 255
  }
}

void printLine(const char myString[]) {
	uint8_t i = 0;
	while (myString[i]) {
 7a4:	f8 01       	movw	r30, r16
 7a6:	ec 0f       	add	r30, r28
 7a8:	f1 1d       	adc	r31, r1
 7aa:	80 81       	ld	r24, Z
 7ac:	81 11       	cpse	r24, r1
 7ae:	f7 cf       	rjmp	.-18     	; 0x79e <printLine+0x12>
		transmitByte(myString[i]);
		i++;
	}
	transmitByte(10);
 7b0:	8a e0       	ldi	r24, 0x0A	; 10
 7b2:	0e 94 a8 03 	call	0x750	; 0x750 <transmitByte>
}
 7b6:	cf 91       	pop	r28
 7b8:	1f 91       	pop	r17
 7ba:	0f 91       	pop	r16
 7bc:	08 95       	ret

000007be <statusLED>:
    }
}

void statusLED(uint8_t status)
{
	if (status) {
 7be:	88 23       	and	r24, r24
 7c0:	11 f0       	breq	.+4      	; 0x7c6 <statusLED+0x8>
		PORTB |= (1<<PORTB5);
 7c2:	2d 9a       	sbi	0x05, 5	; 5
 7c4:	08 95       	ret
	}
	else {
		PORTB &= ~(1<<PORTB5);
 7c6:	2d 98       	cbi	0x05, 5	; 5
 7c8:	08 95       	ret

000007ca <main>:
#include "i2c_master.h"

void statusLED(uint8_t status);

int main(void)
{
 7ca:	cf 93       	push	r28
 7cc:	df 93       	push	r29
 7ce:	cd b7       	in	r28, 0x3d	; 61
 7d0:	de b7       	in	r29, 0x3e	; 62
 7d2:	e6 97       	sbiw	r28, 0x36	; 54
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	f8 94       	cli
 7d8:	de bf       	out	0x3e, r29	; 62
 7da:	0f be       	out	0x3f, r0	; 63
 7dc:	cd bf       	out	0x3d, r28	; 61
	uint8_t timing_bit = 0;
	int16_t acc[3];
	char accX_str[16], accY_str[16], accZ_str[16];
	
	// set status LED as output
	DDRB |= (1<<DDB5);
 7de:	25 9a       	sbi	0x04, 5	; 4
	
	initUSART();
 7e0:	0e 94 97 03 	call	0x72e	; 0x72e <initUSART>
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	80 e8       	ldi	r24, 0x80	; 128
 7e8:	0f b6       	in	r0, 0x3f	; 63
 7ea:	f8 94       	cli
 7ec:	80 93 61 00 	sts	0x0061, r24
 7f0:	90 93 61 00 	sts	0x0061, r25
 7f4:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(clock_div_1); // set clock to 16MHz
	MPU6050_init();
 7f6:	0e 94 11 02 	call	0x422	; 0x422 <MPU6050_init>
	
	if (MPU6050_test_I2C()) {
 7fa:	0e 94 4b 00 	call	0x96	; 0x96 <MPU6050_test_I2C>
 7fe:	88 23       	and	r24, r24
 800:	41 f0       	breq	.+16     	; 0x812 <main+0x48>
		printLine("=== IMU working properly ===");
 802:	82 e0       	ldi	r24, 0x02	; 2
 804:	91 e0       	ldi	r25, 0x01	; 1
 806:	0e 94 c6 03 	call	0x78c	; 0x78c <printLine>
		statusLED(1);
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	0e 94 df 03 	call	0x7be	; 0x7be <statusLED>
 810:	26 c0       	rjmp	.+76     	; 0x85e <main+0x94>
	}
	else {
		statusLED(1);
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	0e 94 df 03 	call	0x7be	; 0x7be <statusLED>
		printLine("=== IMU ERROR ===");
 818:	8f e1       	ldi	r24, 0x1F	; 31
 81a:	91 e0       	ldi	r25, 0x01	; 1
 81c:	0e 94 c6 03 	call	0x78c	; 0x78c <printLine>
 820:	12 e3       	ldi	r17, 0x32	; 50
		for(uint8_t i = 0; i < 50; i++){
			statusLED(0);
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	0e 94 df 03 	call	0x7be	; 0x7be <statusLED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 828:	2f ef       	ldi	r18, 0xFF	; 255
 82a:	80 e7       	ldi	r24, 0x70	; 112
 82c:	92 e0       	ldi	r25, 0x02	; 2
 82e:	21 50       	subi	r18, 0x01	; 1
 830:	80 40       	sbci	r24, 0x00	; 0
 832:	90 40       	sbci	r25, 0x00	; 0
 834:	e1 f7       	brne	.-8      	; 0x82e <main+0x64>
 836:	00 c0       	rjmp	.+0      	; 0x838 <main+0x6e>
 838:	00 00       	nop
			_delay_ms(50);
			statusLED(1);
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	0e 94 df 03 	call	0x7be	; 0x7be <statusLED>
 840:	2f ef       	ldi	r18, 0xFF	; 255
 842:	80 e7       	ldi	r24, 0x70	; 112
 844:	92 e0       	ldi	r25, 0x02	; 2
 846:	21 50       	subi	r18, 0x01	; 1
 848:	80 40       	sbci	r24, 0x00	; 0
 84a:	90 40       	sbci	r25, 0x00	; 0
 84c:	e1 f7       	brne	.-8      	; 0x846 <main+0x7c>
 84e:	00 c0       	rjmp	.+0      	; 0x850 <main+0x86>
 850:	00 00       	nop
			_delay_ms(50);
			printString(".");
 852:	8c e4       	ldi	r24, 0x4C	; 76
 854:	91 e0       	ldi	r25, 0x01	; 1
 856:	0e 94 b0 03 	call	0x760	; 0x760 <printString>
 85a:	11 50       	subi	r17, 0x01	; 1
		statusLED(1);
	}
	else {
		statusLED(1);
		printLine("=== IMU ERROR ===");
		for(uint8_t i = 0; i < 50; i++){
 85c:	11 f7       	brne	.-60     	; 0x822 <main+0x58>
			_delay_ms(50);
			printString(".");
		}
	}
	
	printLine("Calibrating Accelerometer...");
 85e:	81 e3       	ldi	r24, 0x31	; 49
 860:	91 e0       	ldi	r25, 0x01	; 1
 862:	0e 94 c6 03 	call	0x78c	; 0x78c <printLine>
	MPU6050_auto_set_accel_bias();
 866:	0e 94 7f 02 	call	0x4fe	; 0x4fe <MPU6050_auto_set_accel_bias>
	printLine("Calibration OK");
 86a:	8e e4       	ldi	r24, 0x4E	; 78
 86c:	91 e0       	ldi	r25, 0x01	; 1
 86e:	0e 94 c6 03 	call	0x78c	; 0x78c <printLine>
	
	MPU6050_set_accelFS(2);
 872:	82 e0       	ldi	r24, 0x02	; 2
 874:	0e 94 0b 01 	call	0x216	; 0x216 <MPU6050_set_accelFS>

void statusLED(uint8_t status);

int main(void)
{
	uint8_t timing_bit = 0;
 878:	10 e0       	ldi	r17, 0x00	; 0
		itoa(acc[2],accZ_str,10);
		printString(accX_str); printString(" ");
		printString(accY_str); printString(" ");
		printLine(accZ_str);
		_delay_ms(10);
		timing_bit = !timing_bit;
 87a:	01 e0       	ldi	r16, 0x01	; 1
 87c:	f1 2c       	mov	r15, r1
	
	MPU6050_set_accelFS(2);

    while (1) 
    {
		MPU6050_get_accel(acc);
 87e:	ce 01       	movw	r24, r28
 880:	01 96       	adiw	r24, 0x01	; 1
 882:	0e 94 63 00 	call	0xc6	; 0xc6 <MPU6050_get_accel>
 886:	4a e0       	ldi	r20, 0x0A	; 10
 888:	be 01       	movw	r22, r28
 88a:	69 5f       	subi	r22, 0xF9	; 249
 88c:	7f 4f       	sbci	r23, 0xFF	; 255
 88e:	89 81       	ldd	r24, Y+1	; 0x01
 890:	9a 81       	ldd	r25, Y+2	; 0x02
 892:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__itoa_ncheck>
 896:	4a e0       	ldi	r20, 0x0A	; 10
 898:	be 01       	movw	r22, r28
 89a:	69 5e       	subi	r22, 0xE9	; 233
 89c:	7f 4f       	sbci	r23, 0xFF	; 255
 89e:	8b 81       	ldd	r24, Y+3	; 0x03
 8a0:	9c 81       	ldd	r25, Y+4	; 0x04
 8a2:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__itoa_ncheck>
 8a6:	4a e0       	ldi	r20, 0x0A	; 10
 8a8:	be 01       	movw	r22, r28
 8aa:	69 5d       	subi	r22, 0xD9	; 217
 8ac:	7f 4f       	sbci	r23, 0xFF	; 255
 8ae:	8d 81       	ldd	r24, Y+5	; 0x05
 8b0:	9e 81       	ldd	r25, Y+6	; 0x06
 8b2:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__itoa_ncheck>
		itoa(acc[0],accX_str,10);
		itoa(acc[1],accY_str,10);
		itoa(acc[2],accZ_str,10);
		printString(accX_str); printString(" ");
 8b6:	ce 01       	movw	r24, r28
 8b8:	07 96       	adiw	r24, 0x07	; 7
 8ba:	0e 94 b0 03 	call	0x760	; 0x760 <printString>
 8be:	8d e5       	ldi	r24, 0x5D	; 93
 8c0:	91 e0       	ldi	r25, 0x01	; 1
 8c2:	0e 94 b0 03 	call	0x760	; 0x760 <printString>
		printString(accY_str); printString(" ");
 8c6:	ce 01       	movw	r24, r28
 8c8:	47 96       	adiw	r24, 0x17	; 23
 8ca:	0e 94 b0 03 	call	0x760	; 0x760 <printString>
 8ce:	8d e5       	ldi	r24, 0x5D	; 93
 8d0:	91 e0       	ldi	r25, 0x01	; 1
 8d2:	0e 94 b0 03 	call	0x760	; 0x760 <printString>
		printLine(accZ_str);
 8d6:	ce 01       	movw	r24, r28
 8d8:	87 96       	adiw	r24, 0x27	; 39
 8da:	0e 94 c6 03 	call	0x78c	; 0x78c <printLine>
 8de:	8f e3       	ldi	r24, 0x3F	; 63
 8e0:	9c e9       	ldi	r25, 0x9C	; 156
 8e2:	01 97       	sbiw	r24, 0x01	; 1
 8e4:	f1 f7       	brne	.-4      	; 0x8e2 <main+0x118>
 8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <main+0x11e>
 8e8:	00 00       	nop
		_delay_ms(10);
		timing_bit = !timing_bit;
 8ea:	80 2f       	mov	r24, r16
 8ec:	11 11       	cpse	r17, r1
 8ee:	8f 2d       	mov	r24, r15
 8f0:	18 2f       	mov	r17, r24
		statusLED(timing_bit);
 8f2:	0e 94 df 03 	call	0x7be	; 0x7be <statusLED>
    }
 8f6:	c3 cf       	rjmp	.-122    	; 0x87e <main+0xb4>

000008f8 <__itoa_ncheck>:
 8f8:	bb 27       	eor	r27, r27
 8fa:	4a 30       	cpi	r20, 0x0A	; 10
 8fc:	31 f4       	brne	.+12     	; 0x90a <__stack+0xb>
 8fe:	99 23       	and	r25, r25
 900:	22 f4       	brpl	.+8      	; 0x90a <__stack+0xb>
 902:	bd e2       	ldi	r27, 0x2D	; 45
 904:	90 95       	com	r25
 906:	81 95       	neg	r24
 908:	9f 4f       	sbci	r25, 0xFF	; 255
 90a:	0c 94 88 04 	jmp	0x910	; 0x910 <__utoa_common>

0000090e <__utoa_ncheck>:
 90e:	bb 27       	eor	r27, r27

00000910 <__utoa_common>:
 910:	fb 01       	movw	r30, r22
 912:	55 27       	eor	r21, r21
 914:	aa 27       	eor	r26, r26
 916:	88 0f       	add	r24, r24
 918:	99 1f       	adc	r25, r25
 91a:	aa 1f       	adc	r26, r26
 91c:	a4 17       	cp	r26, r20
 91e:	10 f0       	brcs	.+4      	; 0x924 <__utoa_common+0x14>
 920:	a4 1b       	sub	r26, r20
 922:	83 95       	inc	r24
 924:	50 51       	subi	r21, 0x10	; 16
 926:	b9 f7       	brne	.-18     	; 0x916 <__utoa_common+0x6>
 928:	a0 5d       	subi	r26, 0xD0	; 208
 92a:	aa 33       	cpi	r26, 0x3A	; 58
 92c:	08 f0       	brcs	.+2      	; 0x930 <__utoa_common+0x20>
 92e:	a9 5d       	subi	r26, 0xD9	; 217
 930:	a1 93       	st	Z+, r26
 932:	00 97       	sbiw	r24, 0x00	; 0
 934:	79 f7       	brne	.-34     	; 0x914 <__utoa_common+0x4>
 936:	b1 11       	cpse	r27, r1
 938:	b1 93       	st	Z+, r27
 93a:	11 92       	st	Z+, r1
 93c:	cb 01       	movw	r24, r22
 93e:	0c 94 a1 04 	jmp	0x942	; 0x942 <strrev>

00000942 <strrev>:
 942:	dc 01       	movw	r26, r24
 944:	fc 01       	movw	r30, r24
 946:	67 2f       	mov	r22, r23
 948:	71 91       	ld	r23, Z+
 94a:	77 23       	and	r23, r23
 94c:	e1 f7       	brne	.-8      	; 0x946 <strrev+0x4>
 94e:	32 97       	sbiw	r30, 0x02	; 2
 950:	04 c0       	rjmp	.+8      	; 0x95a <strrev+0x18>
 952:	7c 91       	ld	r23, X
 954:	6d 93       	st	X+, r22
 956:	70 83       	st	Z, r23
 958:	62 91       	ld	r22, -Z
 95a:	ae 17       	cp	r26, r30
 95c:	bf 07       	cpc	r27, r31
 95e:	c8 f3       	brcs	.-14     	; 0x952 <strrev+0x10>
 960:	08 95       	ret

00000962 <_exit>:
 962:	f8 94       	cli

00000964 <__stop_program>:
 964:	ff cf       	rjmp	.-2      	; 0x964 <__stop_program>
