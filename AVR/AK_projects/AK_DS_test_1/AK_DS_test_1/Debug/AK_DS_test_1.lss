
AK_DS_test_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00000658  000006ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000658  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080014e  0080014e  0000073a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000073a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000076c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ff1  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000057a  00000000  00000000  0000188d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065d  00000000  00000000  00001e07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00002464  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000489  00000000  00000000  00002728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ec9  00000000  00000000  00002bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003a7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e5       	ldi	r30, 0x58	; 88
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 34       	cpi	r26, 0x4E	; 78
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e4       	ldi	r26, 0x4E	; 78
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 35       	cpi	r26, 0x51	; 81
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 75 02 	call	0x4ea	; 0x4ea <main>
  9e:	0c 94 2a 03 	jmp	0x654	; 0x654 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_spi>:
//-----------------------------------
// Initialize SPI               
//-----------------------------------
void init_spi(void) {
	/* Set MOSI and SCK output, all others input */
    DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS);
  a6:	8c e2       	ldi	r24, 0x2C	; 44
  a8:	84 b9       	out	0x04, r24	; 4
    /* Enable SPI, Master, set clock rate fck/4 */
	SPCR = ( 1<<SPE | 1<<MSTR | 1<<SPR0 | 1<<SPR1);
  aa:	83 e5       	ldi	r24, 0x53	; 83
  ac:	8c bd       	out	0x2c, r24	; 44
  ae:	08 95       	ret

000000b0 <xmit_spi>:

//-----------------------------------
// Transmit a byte to MMC via SPI               
//-----------------------------------
BYTE xmit_spi(BYTE c) {
	SPDR = c;
  b0:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
  b2:	0d b4       	in	r0, 0x2d	; 45
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <xmit_spi+0x2>
	return SPDR;
  b8:	8e b5       	in	r24, 0x2e	; 46
}
  ba:	08 95       	ret

000000bc <rcv_spi>:

//-----------------------------------
// Receive a byte from MMC via SPI               
//-----------------------------------
BYTE rcv_spi(void) {
	return xmit_spi(0xFF);
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
  c2:	08 95       	ret

000000c4 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
  c4:	ff 92       	push	r15
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	c8 2f       	mov	r28, r24
  d0:	d4 2f       	mov	r29, r20
  d2:	15 2f       	mov	r17, r21
  d4:	06 2f       	mov	r16, r22
  d6:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
  d8:	88 23       	and	r24, r24
  da:	4c f4       	brge	.+18     	; 0xee <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	ba 01       	movw	r22, r20
  e2:	87 e7       	ldi	r24, 0x77	; 119
  e4:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
		if (res > 1) return res;
  e8:	82 30       	cpi	r24, 0x02	; 2
  ea:	40 f5       	brcc	.+80     	; 0x13c <send_cmd+0x78>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
  ec:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	DESELECT();
  ee:	2a 9a       	sbi	0x05, 2	; 5
	rcv_spi();
  f0:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
	SELECT();
  f4:	2a 98       	cbi	0x05, 2	; 5
	rcv_spi();
  f6:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
  fa:	8c 2f       	mov	r24, r28
  fc:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 100:	8f 2d       	mov	r24, r15
 102:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 106:	80 2f       	mov	r24, r16
 108:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 10c:	81 2f       	mov	r24, r17
 10e:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
 112:	8d 2f       	mov	r24, r29
 114:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 118:	c0 34       	cpi	r28, 0x40	; 64
 11a:	21 f0       	breq	.+8      	; 0x124 <send_cmd+0x60>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 11c:	c8 34       	cpi	r28, 0x48	; 72
 11e:	21 f4       	brne	.+8      	; 0x128 <send_cmd+0x64>
 120:	87 e8       	ldi	r24, 0x87	; 135
 122:	03 c0       	rjmp	.+6      	; 0x12a <send_cmd+0x66>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 124:	85 e9       	ldi	r24, 0x95	; 149
 126:	01 c0       	rjmp	.+2      	; 0x12a <send_cmd+0x66>
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
 128:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	xmit_spi(n);
 12a:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
 12e:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
 130:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
	} while ((res & 0x80) && --n);
 134:	88 23       	and	r24, r24
 136:	14 f4       	brge	.+4      	; 0x13c <send_cmd+0x78>
 138:	c1 50       	subi	r28, 0x01	; 1
 13a:	d1 f7       	brne	.-12     	; 0x130 <send_cmd+0x6c>

	return res;			/* Return with the response value */
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	ff 90       	pop	r15
 146:	08 95       	ret

00000148 <release_spi>:
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
 148:	2a 9a       	sbi	0x05, 2	; 5
	rcv_spi();
 14a:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
 14e:	08 95       	ret

00000150 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
 150:	cf 92       	push	r12
 152:	df 92       	push	r13
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	00 d0       	rcall	.+0      	; 0x162 <disk_initialize+0x12>
 162:	00 d0       	rcall	.+0      	; 0x164 <disk_initialize+0x14>
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	WORD tmr;

	init_spi();
 168:	0e 94 53 00 	call	0xa6	; 0xa6 <init_spi>
 16c:	14 e6       	ldi	r17, 0x64	; 100

//#if _WRITE_FUNC
//	if (MMC_SEL) disk_writep(0, 0);		/* Finalize write process if it is in progress */
//#endif
	for (n = 100; n; n--) rcv_spi();	/* Dummy clocks */
 16e:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
 172:	11 50       	subi	r17, 0x01	; 1
 174:	e1 f7       	brne	.-8      	; 0x16e <disk_initialize+0x1e>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	ba 01       	movw	r22, r20
 17c:	80 e4       	ldi	r24, 0x40	; 64
 17e:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	09 f0       	breq	.+2      	; 0x188 <disk_initialize+0x38>
 186:	7d c0       	rjmp	.+250    	; 0x282 <disk_initialize+0x132>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
 188:	4a ea       	ldi	r20, 0xAA	; 170
 18a:	51 e0       	ldi	r21, 0x01	; 1
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	88 e4       	ldi	r24, 0x48	; 72
 192:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	09 f0       	breq	.+2      	; 0x19c <disk_initialize+0x4c>
 19a:	42 c0       	rjmp	.+132    	; 0x220 <disk_initialize+0xd0>
 19c:	ce 01       	movw	r24, r28
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	7c 01       	movw	r14, r24
 1a2:	6e 01       	movw	r12, r28
 1a4:	95 e0       	ldi	r25, 0x05	; 5
 1a6:	c9 0e       	add	r12, r25
 1a8:	d1 1c       	adc	r13, r1
 1aa:	87 01       	movw	r16, r14
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
 1ac:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
 1b0:	f8 01       	movw	r30, r16
 1b2:	81 93       	st	Z+, r24
 1b4:	8f 01       	movw	r16, r30
 1b6:	ec 15       	cp	r30, r12
 1b8:	fd 05       	cpc	r31, r13
 1ba:	c1 f7       	brne	.-16     	; 0x1ac <disk_initialize+0x5c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
 1bc:	8b 81       	ldd	r24, Y+3	; 0x03
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	09 f0       	breq	.+2      	; 0x1c4 <disk_initialize+0x74>
 1c2:	61 c0       	rjmp	.+194    	; 0x286 <disk_initialize+0x136>
 1c4:	8c 81       	ldd	r24, Y+4	; 0x04
 1c6:	8a 3a       	cpi	r24, 0xAA	; 170
 1c8:	31 f0       	breq	.+12     	; 0x1d6 <disk_initialize+0x86>
//#if _WRITE_FUNC
//	if (MMC_SEL) disk_writep(0, 0);		/* Finalize write process if it is in progress */
//#endif
	for (n = 100; n; n--) rcv_spi();	/* Dummy clocks */

	ty = 0;
 1ca:	f1 2c       	mov	r15, r1
 1cc:	6c c0       	rjmp	.+216    	; 0x2a6 <disk_initialize+0x156>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
 1ce:	01 50       	subi	r16, 0x01	; 1
 1d0:	11 09       	sbc	r17, r1
 1d2:	19 f4       	brne	.+6      	; 0x1da <disk_initialize+0x8a>
 1d4:	5a c0       	rjmp	.+180    	; 0x28a <disk_initialize+0x13a>
 1d6:	00 ee       	ldi	r16, 0xE0	; 224
 1d8:	1e e2       	ldi	r17, 0x2E	; 46
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	70 e4       	ldi	r23, 0x40	; 64
 1e2:	89 ee       	ldi	r24, 0xE9	; 233
 1e4:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
 1e8:	81 11       	cpse	r24, r1
 1ea:	f1 cf       	rjmp	.-30     	; 0x1ce <disk_initialize+0x7e>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 1ec:	01 2b       	or	r16, r17
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <disk_initialize+0xa2>
 1f0:	4e c0       	rjmp	.+156    	; 0x28e <disk_initialize+0x13e>
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	ba 01       	movw	r22, r20
 1f8:	8a e7       	ldi	r24, 0x7A	; 122
 1fa:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
 1fe:	81 11       	cpse	r24, r1
 200:	48 c0       	rjmp	.+144    	; 0x292 <disk_initialize+0x142>
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
 202:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
 206:	f7 01       	movw	r30, r14
 208:	81 93       	st	Z+, r24
 20a:	7f 01       	movw	r14, r30
 20c:	ec 15       	cp	r30, r12
 20e:	fd 05       	cpc	r31, r13
 210:	c1 f7       	brne	.-16     	; 0x202 <disk_initialize+0xb2>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
 212:	89 81       	ldd	r24, Y+1	; 0x01
 214:	86 fd       	sbrc	r24, 6
 216:	3f c0       	rjmp	.+126    	; 0x296 <disk_initialize+0x146>
 218:	68 94       	set
 21a:	ff 24       	eor	r15, r15
 21c:	f2 f8       	bld	r15, 2
 21e:	43 c0       	rjmp	.+134    	; 0x2a6 <disk_initialize+0x156>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	ba 01       	movw	r22, r20
 226:	89 ee       	ldi	r24, 0xE9	; 233
 228:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	38 f0       	brcs	.+14     	; 0x23e <disk_initialize+0xee>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
 230:	ff 24       	eor	r15, r15
 232:	f3 94       	inc	r15
 234:	0f 2e       	mov	r0, r31
 236:	f1 e4       	ldi	r31, 0x41	; 65
 238:	ef 2e       	mov	r14, r31
 23a:	f0 2d       	mov	r31, r0
 23c:	07 c0       	rjmp	.+14     	; 0x24c <disk_initialize+0xfc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
 23e:	68 94       	set
 240:	ff 24       	eor	r15, r15
 242:	f1 f8       	bld	r15, 1
 244:	0f 2e       	mov	r0, r31
 246:	f9 ee       	ldi	r31, 0xE9	; 233
 248:	ef 2e       	mov	r14, r31
 24a:	f0 2d       	mov	r31, r0
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
 24c:	08 ea       	ldi	r16, 0xA8	; 168
 24e:	11 e6       	ldi	r17, 0x61	; 97
 250:	03 c0       	rjmp	.+6      	; 0x258 <disk_initialize+0x108>
 252:	01 50       	subi	r16, 0x01	; 1
 254:	11 09       	sbc	r17, r1
 256:	21 f1       	breq	.+72     	; 0x2a0 <disk_initialize+0x150>
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	ba 01       	movw	r22, r20
 25e:	8e 2d       	mov	r24, r14
 260:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
 264:	81 11       	cpse	r24, r1
 266:	f5 cf       	rjmp	.-22     	; 0x252 <disk_initialize+0x102>
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
 268:	01 2b       	or	r16, r17
 26a:	e1 f0       	breq	.+56     	; 0x2a4 <disk_initialize+0x154>
 26c:	40 e0       	ldi	r20, 0x00	; 0
 26e:	52 e0       	ldi	r21, 0x02	; 2
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	80 e5       	ldi	r24, 0x50	; 80
 276:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
 27a:	88 23       	and	r24, r24
 27c:	a1 f0       	breq	.+40     	; 0x2a6 <disk_initialize+0x156>
				ty = 0;
 27e:	f1 2c       	mov	r15, r1
 280:	12 c0       	rjmp	.+36     	; 0x2a6 <disk_initialize+0x156>
//#if _WRITE_FUNC
//	if (MMC_SEL) disk_writep(0, 0);		/* Finalize write process if it is in progress */
//#endif
	for (n = 100; n; n--) rcv_spi();	/* Dummy clocks */

	ty = 0;
 282:	f1 2c       	mov	r15, r1
 284:	10 c0       	rjmp	.+32     	; 0x2a6 <disk_initialize+0x156>
 286:	f1 2c       	mov	r15, r1
 288:	0e c0       	rjmp	.+28     	; 0x2a6 <disk_initialize+0x156>
 28a:	f1 2c       	mov	r15, r1
 28c:	0c c0       	rjmp	.+24     	; 0x2a6 <disk_initialize+0x156>
 28e:	f1 2c       	mov	r15, r1
 290:	0a c0       	rjmp	.+20     	; 0x2a6 <disk_initialize+0x156>
 292:	f1 2c       	mov	r15, r1
 294:	08 c0       	rjmp	.+16     	; 0x2a6 <disk_initialize+0x156>
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
 296:	0f 2e       	mov	r0, r31
 298:	fc e0       	ldi	r31, 0x0C	; 12
 29a:	ff 2e       	mov	r15, r31
 29c:	f0 2d       	mov	r31, r0
 29e:	03 c0       	rjmp	.+6      	; 0x2a6 <disk_initialize+0x156>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
 2a0:	f1 2c       	mov	r15, r1
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <disk_initialize+0x156>
 2a4:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
 2a6:	f0 92 50 01 	sts	0x0150, r15
	release_spi();
 2aa:	0e 94 a4 00 	call	0x148	; 0x148 <release_spi>

	return ty ? 0 : STA_NOINIT;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	f1 10       	cpse	r15, r1
 2b2:	80 e0       	ldi	r24, 0x00	; 0
}
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	ff 90       	pop	r15
 2c6:	ef 90       	pop	r14
 2c8:	df 90       	pop	r13
 2ca:	cf 90       	pop	r12
 2cc:	08 95       	ret

000002ce <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
 2ce:	cf 92       	push	r12
 2d0:	df 92       	push	r13
 2d2:	ef 92       	push	r14
 2d4:	ff 92       	push	r15
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	7c 01       	movw	r14, r24
 2e0:	69 01       	movw	r12, r18
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
 2e2:	80 91 50 01 	lds	r24, 0x0150
 2e6:	83 fd       	sbrc	r24, 3
 2e8:	09 c0       	rjmp	.+18     	; 0x2fc <disk_readp+0x2e>
 2ea:	03 2e       	mov	r0, r19
 2ec:	39 e0       	ldi	r19, 0x09	; 9
 2ee:	44 0f       	add	r20, r20
 2f0:	55 1f       	adc	r21, r21
 2f2:	66 1f       	adc	r22, r22
 2f4:	77 1f       	adc	r23, r23
 2f6:	3a 95       	dec	r19
 2f8:	d1 f7       	brne	.-12     	; 0x2ee <disk_readp+0x20>
 2fa:	30 2d       	mov	r19, r0

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
 2fc:	81 e5       	ldi	r24, 0x51	; 81
 2fe:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
 302:	81 11       	cpse	r24, r1
 304:	2c c0       	rjmp	.+88     	; 0x35e <disk_readp+0x90>
 306:	c0 e3       	ldi	r28, 0x30	; 48
 308:	d5 e7       	ldi	r29, 0x75	; 117

		bc = 30000;
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
 30a:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
		} while (rc == 0xFF && --bc);
 30e:	8f 3f       	cpi	r24, 0xFF	; 255
 310:	21 f4       	brne	.+8      	; 0x31a <disk_readp+0x4c>
 312:	21 97       	sbiw	r28, 0x01	; 1
 314:	d1 f7       	brne	.-12     	; 0x30a <disk_readp+0x3c>
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */

	res = RES_ERROR;
 316:	c1 e0       	ldi	r28, 0x01	; 1
 318:	25 c0       	rjmp	.+74     	; 0x364 <disk_readp+0x96>
		bc = 30000;
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {				/* A data packet arrived */
 31a:	8e 3f       	cpi	r24, 0xFE	; 254
 31c:	11 f5       	brne	.+68     	; 0x362 <disk_readp+0x94>
 31e:	c2 e0       	ldi	r28, 0x02	; 2
 320:	d2 e0       	ldi	r29, 0x02	; 2
 322:	c0 1b       	sub	r28, r16
 324:	d1 0b       	sbc	r29, r17
			bc = 514 - ofs - cnt;
 326:	cc 19       	sub	r28, r12
 328:	dd 09       	sbc	r29, r13

			/* Skip leading bytes */
			if (ofs) {
 32a:	c1 14       	cp	r12, r1
 32c:	d1 04       	cpc	r13, r1
 32e:	31 f0       	breq	.+12     	; 0x33c <disk_readp+0x6e>
				do rcv_spi(); while (--ofs);
 330:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	c8 1a       	sub	r12, r24
 338:	d1 08       	sbc	r13, r1
 33a:	d1 f7       	brne	.-12     	; 0x330 <disk_readp+0x62>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
 33c:	e1 14       	cp	r14, r1
 33e:	f1 04       	cpc	r15, r1
 340:	41 f0       	breq	.+16     	; 0x352 <disk_readp+0x84>
				do
					*buff++ = rcv_spi();
 342:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
 346:	f7 01       	movw	r30, r14
 348:	81 93       	st	Z+, r24
 34a:	7f 01       	movw	r14, r30
				while (--cnt);
 34c:	01 50       	subi	r16, 0x01	; 1
 34e:	11 09       	sbc	r17, r1
 350:	c1 f7       	brne	.-16     	; 0x342 <disk_readp+0x74>
			}

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
 352:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
 356:	21 97       	sbiw	r28, 0x01	; 1
 358:	e1 f7       	brne	.-8      	; 0x352 <disk_readp+0x84>

			res = RES_OK;
 35a:	c0 e0       	ldi	r28, 0x00	; 0
 35c:	03 c0       	rjmp	.+6      	; 0x364 <disk_readp+0x96>
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */

	res = RES_ERROR;
 35e:	c1 e0       	ldi	r28, 0x01	; 1
 360:	01 c0       	rjmp	.+2      	; 0x364 <disk_readp+0x96>
 362:	c1 e0       	ldi	r28, 0x01	; 1

			res = RES_OK;
		}
	}

	release_spi();
 364:	0e 94 a4 00 	call	0x148	; 0x148 <release_spi>

	return res;
}
 368:	8c 2f       	mov	r24, r28
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	ff 90       	pop	r15
 374:	ef 90       	pop	r14
 376:	df 90       	pop	r13
 378:	cf 90       	pop	r12
 37a:	08 95       	ret

0000037c <disk_writep>:

DRESULT disk_writep (
	const BYTE *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	DWORD sa			/* Number of bytes to send, Sector number (LBA) or zero */
)
{
 37c:	ef 92       	push	r14
 37e:	ff 92       	push	r15
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
	static WORD wc;


	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
 388:	00 97       	sbiw	r24, 0x00	; 0
 38a:	f1 f0       	breq	.+60     	; 0x3c8 <disk_writep+0x4c>
		bc = (WORD)sa;
 38c:	8a 01       	movw	r16, r20
		while (bc && wc) {		/* Send data bytes to the card */
 38e:	45 2b       	or	r20, r21
 390:	09 f4       	brne	.+2      	; 0x394 <disk_writep+0x18>
 392:	6a c0       	rjmp	.+212    	; 0x468 <disk_writep+0xec>
 394:	c0 91 4e 01 	lds	r28, 0x014E
 398:	d0 91 4f 01 	lds	r29, 0x014F
 39c:	20 97       	sbiw	r28, 0x00	; 0
 39e:	09 f4       	brne	.+2      	; 0x3a2 <disk_writep+0x26>
 3a0:	65 c0       	rjmp	.+202    	; 0x46c <disk_writep+0xf0>
 3a2:	7c 01       	movw	r14, r24
			xmit_spi(*buff++);
 3a4:	f7 01       	movw	r30, r14
 3a6:	81 91       	ld	r24, Z+
 3a8:	7f 01       	movw	r14, r30
 3aa:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
			wc--; bc--;
 3ae:	21 97       	sbiw	r28, 0x01	; 1
 3b0:	d0 93 4f 01 	sts	0x014F, r29
 3b4:	c0 93 4e 01 	sts	0x014E, r28
 3b8:	01 50       	subi	r16, 0x01	; 1
 3ba:	11 09       	sbc	r17, r1

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
 3bc:	09 f4       	brne	.+2      	; 0x3c0 <disk_writep+0x44>
 3be:	58 c0       	rjmp	.+176    	; 0x470 <disk_writep+0xf4>
 3c0:	20 97       	sbiw	r28, 0x00	; 0
 3c2:	81 f7       	brne	.-32     	; 0x3a4 <disk_writep+0x28>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
 3c4:	c0 e0       	ldi	r28, 0x00	; 0
 3c6:	57 c0       	rjmp	.+174    	; 0x476 <disk_writep+0xfa>
	} else {
		if (sa) {	/* Initiate sector write process */
 3c8:	41 15       	cp	r20, r1
 3ca:	51 05       	cpc	r21, r1
 3cc:	61 05       	cpc	r22, r1
 3ce:	71 05       	cpc	r23, r1
 3d0:	01 f1       	breq	.+64     	; 0x412 <disk_writep+0x96>
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
 3d2:	80 91 50 01 	lds	r24, 0x0150
 3d6:	83 fd       	sbrc	r24, 3
 3d8:	09 c0       	rjmp	.+18     	; 0x3ec <disk_writep+0x70>
 3da:	03 2e       	mov	r0, r19
 3dc:	39 e0       	ldi	r19, 0x09	; 9
 3de:	44 0f       	add	r20, r20
 3e0:	55 1f       	adc	r21, r21
 3e2:	66 1f       	adc	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	3a 95       	dec	r19
 3e8:	d1 f7       	brne	.-12     	; 0x3de <disk_writep+0x62>
 3ea:	30 2d       	mov	r19, r0
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
 3ec:	88 e5       	ldi	r24, 0x58	; 88
 3ee:	0e 94 62 00 	call	0xc4	; 0xc4 <send_cmd>
 3f2:	81 11       	cpse	r24, r1
 3f4:	3f c0       	rjmp	.+126    	; 0x474 <disk_writep+0xf8>
				xmit_spi(0xFF); xmit_spi(0xFE);		/* Data block header */
 3f6:	8f ef       	ldi	r24, 0xFF	; 255
 3f8:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
 3fc:	8e ef       	ldi	r24, 0xFE	; 254
 3fe:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
				wc = 512;							/* Set byte counter */
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	92 e0       	ldi	r25, 0x02	; 2
 406:	90 93 4f 01 	sts	0x014F, r25
 40a:	80 93 4e 01 	sts	0x014E, r24
				res = RES_OK;
 40e:	c0 e0       	ldi	r28, 0x00	; 0
 410:	32 c0       	rjmp	.+100    	; 0x476 <disk_writep+0xfa>
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
 412:	c0 91 4e 01 	lds	r28, 0x014E
 416:	d0 91 4f 01 	lds	r29, 0x014F
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
 41a:	ce 3f       	cpi	r28, 0xFE	; 254
 41c:	ff ef       	ldi	r31, 0xFF	; 255
 41e:	df 07       	cpc	r29, r31
 420:	11 f4       	brne	.+4      	; 0x426 <disk_writep+0xaa>
 422:	08 c0       	rjmp	.+16     	; 0x434 <disk_writep+0xb8>
 424:	ec 01       	movw	r28, r24
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	0e 94 58 00 	call	0xb0	; 0xb0 <xmit_spi>
 42c:	ce 01       	movw	r24, r28
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	21 96       	adiw	r28, 0x01	; 1
 432:	c1 f7       	brne	.-16     	; 0x424 <disk_writep+0xa8>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 300ms */
 434:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
 438:	8f 71       	andi	r24, 0x1F	; 31
 43a:	85 30       	cpi	r24, 0x05	; 5
 43c:	29 f0       	breq	.+10     	; 0x448 <disk_writep+0xcc>
	DRESULT res;
	WORD bc;
	static WORD wc;


	res = RES_ERROR;
 43e:	c1 e0       	ldi	r28, 0x01	; 1
 440:	10 c0       	rjmp	.+32     	; 0x462 <disk_writep+0xe6>
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 300ms */
				for (bc = 65000; rcv_spi() != 0xFF && bc; bc--) ;	/* Wait ready */
 442:	01 50       	subi	r16, 0x01	; 1
 444:	11 09       	sbc	r17, r1
 446:	02 c0       	rjmp	.+4      	; 0x44c <disk_writep+0xd0>
 448:	08 ee       	ldi	r16, 0xE8	; 232
 44a:	1d ef       	ldi	r17, 0xFD	; 253
 44c:	0e 94 5e 00 	call	0xbc	; 0xbc <rcv_spi>
 450:	8f 3f       	cpi	r24, 0xFF	; 255
 452:	19 f0       	breq	.+6      	; 0x45a <disk_writep+0xde>
 454:	01 15       	cp	r16, r1
 456:	11 05       	cpc	r17, r1
 458:	a1 f7       	brne	.-24     	; 0x442 <disk_writep+0xc6>
				if (bc) res = RES_OK;
 45a:	c1 e0       	ldi	r28, 0x01	; 1
 45c:	01 2b       	or	r16, r17
 45e:	09 f0       	breq	.+2      	; 0x462 <disk_writep+0xe6>
 460:	c0 e0       	ldi	r28, 0x00	; 0
			}
			release_spi();
 462:	0e 94 a4 00 	call	0x148	; 0x148 <release_spi>
 466:	07 c0       	rjmp	.+14     	; 0x476 <disk_writep+0xfa>
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
 468:	c0 e0       	ldi	r28, 0x00	; 0
 46a:	05 c0       	rjmp	.+10     	; 0x476 <disk_writep+0xfa>
 46c:	c0 e0       	ldi	r28, 0x00	; 0
 46e:	03 c0       	rjmp	.+6      	; 0x476 <disk_writep+0xfa>
 470:	c0 e0       	ldi	r28, 0x00	; 0
 472:	01 c0       	rjmp	.+2      	; 0x476 <disk_writep+0xfa>
	DRESULT res;
	WORD bc;
	static WORD wc;


	res = RES_ERROR;
 474:	c1 e0       	ldi	r28, 0x01	; 1
			release_spi();
		}
	}

	return res;
}
 476:	8c 2f       	mov	r24, r28
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	ff 90       	pop	r15
 482:	ef 90       	pop	r14
 484:	08 95       	ret

00000486 <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 486:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
 48a:	87 e6       	ldi	r24, 0x67	; 103
 48c:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
#else
  UCSR0A &= ~(1 << U2X0);
 490:	e0 ec       	ldi	r30, 0xC0	; 192
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	8d 7f       	andi	r24, 0xFD	; 253
 498:	80 83       	st	Z, r24
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 49a:	88 e1       	ldi	r24, 0x18	; 24
 49c:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 4a0:	86 e0       	ldi	r24, 0x06	; 6
 4a2:	80 93 c2 00 	sts	0x00C2, r24
 4a6:	08 95       	ret

000004a8 <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 4a8:	e0 ec       	ldi	r30, 0xC0	; 192
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	90 81       	ld	r25, Z
 4ae:	95 ff       	sbrs	r25, 5
 4b0:	fd cf       	rjmp	.-6      	; 0x4ac <transmitByte+0x4>
  UDR0 = data;                                            /* send data */
 4b2:	80 93 c6 00 	sts	0x00C6, r24
 4b6:	08 95       	ret

000004b8 <printLine>:
    transmitByte(myString[i]);
    i++;
  }
}

void printLine(const char myString[]) {
 4b8:	0f 93       	push	r16
 4ba:	1f 93       	push	r17
 4bc:	cf 93       	push	r28
 4be:	8c 01       	movw	r16, r24
	uint8_t i = 0;
	while (myString[i]) {
 4c0:	fc 01       	movw	r30, r24
 4c2:	80 81       	ld	r24, Z
 4c4:	88 23       	and	r24, r24
 4c6:	51 f0       	breq	.+20     	; 0x4dc <printLine+0x24>
 4c8:	c0 e0       	ldi	r28, 0x00	; 0
		transmitByte(myString[i]);
 4ca:	0e 94 54 02 	call	0x4a8	; 0x4a8 <transmitByte>
		i++;
 4ce:	cf 5f       	subi	r28, 0xFF	; 255
  }
}

void printLine(const char myString[]) {
	uint8_t i = 0;
	while (myString[i]) {
 4d0:	f8 01       	movw	r30, r16
 4d2:	ec 0f       	add	r30, r28
 4d4:	f1 1d       	adc	r31, r1
 4d6:	80 81       	ld	r24, Z
 4d8:	81 11       	cpse	r24, r1
 4da:	f7 cf       	rjmp	.-18     	; 0x4ca <printLine+0x12>
		transmitByte(myString[i]);
		i++;
	}
	transmitByte(10);
 4dc:	8a e0       	ldi	r24, 0x0A	; 10
 4de:	0e 94 54 02 	call	0x4a8	; 0x4a8 <transmitByte>
}
 4e2:	cf 91       	pop	r28
 4e4:	1f 91       	pop	r17
 4e6:	0f 91       	pop	r16
 4e8:	08 95       	ret

000004ea <main>:

#include <util/delay.h>
#include "USART.h"

int main(void)
{
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	cd b7       	in	r28, 0x3d	; 61
 4f0:	de b7       	in	r29, 0x3e	; 62
 4f2:	a1 97       	sbiw	r28, 0x21	; 33
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	f8 94       	cli
 4f8:	de bf       	out	0x3e, r29	; 62
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	cd bf       	out	0x3d, r28	; 61
	char byte_string[16];
	
	DSTATUS statInit;
	
    //DRESULT resReceive;
	BYTE outBuff[7] = {0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x7A};
 4fe:	87 e0       	ldi	r24, 0x07	; 7
 500:	e0 e0       	ldi	r30, 0x00	; 0
 502:	f1 e0       	ldi	r31, 0x01	; 1
 504:	de 01       	movw	r26, r28
 506:	5b 96       	adiw	r26, 0x1b	; 27
 508:	01 90       	ld	r0, Z+
 50a:	0d 92       	st	X+, r0
 50c:	8a 95       	dec	r24
 50e:	e1 f7       	brne	.-8      	; 0x508 <main+0x1e>
	
	BYTE buff[readSize];
	DWORD sector = 0;
	UINT offset = 446;
	UINT count = readSize;
	initUSART();
 510:	0e 94 43 02 	call	0x486	; 0x486 <initUSART>
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	80 e8       	ldi	r24, 0x80	; 128
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	f8 94       	cli
 51c:	80 93 61 00 	sts	0x0061, r24
 520:	90 93 61 00 	sts	0x0061, r25
 524:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(clock_div_1); // set clock to 16MHz
	
	do {
		statInit = disk_initialize();
 526:	0e 94 a8 00 	call	0x150	; 0x150 <disk_initialize>
 52a:	18 2f       	mov	r17, r24
		
		if (statInit == 0x01) {
 52c:	81 30       	cpi	r24, 0x01	; 1
 52e:	29 f4       	brne	.+10     	; 0x53a <main+0x50>
			printLine("Card not initialized");
 530:	87 e0       	ldi	r24, 0x07	; 7
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <printLine>
 538:	59 c0       	rjmp	.+178    	; 0x5ec <main+0x102>
			} else if (statInit == 0x02) {
 53a:	82 30       	cpi	r24, 0x02	; 2
 53c:	29 f4       	brne	.+10     	; 0x548 <main+0x5e>
			printLine("Card not found");
 53e:	8c e1       	ldi	r24, 0x1C	; 28
 540:	91 e0       	ldi	r25, 0x01	; 1
 542:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <printLine>
 546:	52 c0       	rjmp	.+164    	; 0x5ec <main+0x102>
			} else {
			printLine("Card initialized");
 548:	8b e2       	ldi	r24, 0x2B	; 43
 54a:	91 e0       	ldi	r25, 0x01	; 1
 54c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <printLine>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 550:	2f ef       	ldi	r18, 0xFF	; 255
 552:	81 ee       	ldi	r24, 0xE1	; 225
 554:	94 e0       	ldi	r25, 0x04	; 4
 556:	21 50       	subi	r18, 0x01	; 1
 558:	80 40       	sbci	r24, 0x00	; 0
 55a:	90 40       	sbci	r25, 0x00	; 0
 55c:	e1 f7       	brne	.-8      	; 0x556 <main+0x6c>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <main+0x76>
 560:	00 00       	nop
		}
		_delay_ms(100);
	} while(statInit);
 562:	11 11       	cpse	r17, r1
 564:	e0 cf       	rjmp	.-64     	; 0x526 <main+0x3c>
 566:	ef ef       	ldi	r30, 0xFF	; 255
 568:	f3 ed       	ldi	r31, 0xD3	; 211
 56a:	20 e3       	ldi	r18, 0x30	; 48
 56c:	e1 50       	subi	r30, 0x01	; 1
 56e:	f0 40       	sbci	r31, 0x00	; 0
 570:	20 40       	sbci	r18, 0x00	; 0
 572:	e1 f7       	brne	.-8      	; 0x56c <main+0x82>
 574:	00 c0       	rjmp	.+0      	; 0x576 <main+0x8c>
 576:	00 00       	nop
 578:	6e 01       	movw	r12, r28
 57a:	8b e0       	ldi	r24, 0x0B	; 11
 57c:	c8 0e       	add	r12, r24
 57e:	d1 1c       	adc	r13, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 580:	ec 2c       	mov	r14, r12
 582:	fd 2c       	mov	r15, r13
	
	_delay_ms(1000);
	
    while (1) 
    {
		printLine("=== MAIN LOOP ===");
 584:	8c e3       	ldi	r24, 0x3C	; 60
 586:	91 e0       	ldi	r25, 0x01	; 1
 588:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <printLine>
		
		disk_readp(buff,sector,offset,count);
 58c:	0a e0       	ldi	r16, 0x0A	; 10
 58e:	10 e0       	ldi	r17, 0x00	; 0
 590:	2e eb       	ldi	r18, 0xBE	; 190
 592:	31 e0       	ldi	r19, 0x01	; 1
 594:	40 e0       	ldi	r20, 0x00	; 0
 596:	50 e0       	ldi	r21, 0x00	; 0
 598:	ba 01       	movw	r22, r20
 59a:	ce 01       	movw	r24, r28
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	0e 94 67 01 	call	0x2ce	; 0x2ce <disk_readp>
 5a2:	8e 01       	movw	r16, r28
 5a4:	0f 5f       	subi	r16, 0xFF	; 255
 5a6:	1f 4f       	sbci	r17, 0xFF	; 255
		
		for(uint8_t i=0; i<readSize; i++){
			utoa(buff[i],byte_string,16);
 5a8:	f8 01       	movw	r30, r16
 5aa:	81 91       	ld	r24, Z+
 5ac:	8f 01       	movw	r16, r30
 5ae:	40 e1       	ldi	r20, 0x10	; 16
 5b0:	6e 2d       	mov	r22, r14
 5b2:	7f 2d       	mov	r23, r15
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 00 03 	call	0x600	; 0x600 <__utoa_ncheck>
			printLine(byte_string);
 5ba:	8e 2d       	mov	r24, r14
 5bc:	9f 2d       	mov	r25, r15
 5be:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <printLine>
    {
		printLine("=== MAIN LOOP ===");
		
		disk_readp(buff,sector,offset,count);
		
		for(uint8_t i=0; i<readSize; i++){
 5c2:	0c 15       	cp	r16, r12
 5c4:	1d 05       	cpc	r17, r13
 5c6:	81 f7       	brne	.-32     	; 0x5a8 <main+0xbe>
			utoa(buff[i],byte_string,16);
			printLine(byte_string);
		}
	    
		disk_writep(outBuff,2);
 5c8:	42 e0       	ldi	r20, 0x02	; 2
 5ca:	50 e0       	ldi	r21, 0x00	; 0
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	ce 01       	movw	r24, r28
 5d2:	4b 96       	adiw	r24, 0x1b	; 27
 5d4:	0e 94 be 01 	call	0x37c	; 0x37c <disk_writep>
 5d8:	ff ef       	ldi	r31, 0xFF	; 255
 5da:	23 ed       	ldi	r18, 0xD3	; 211
 5dc:	80 e3       	ldi	r24, 0x30	; 48
 5de:	f1 50       	subi	r31, 0x01	; 1
 5e0:	20 40       	sbci	r18, 0x00	; 0
 5e2:	80 40       	sbci	r24, 0x00	; 0
 5e4:	e1 f7       	brne	.-8      	; 0x5de <main+0xf4>
 5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <main+0xfe>
 5e8:	00 00       	nop
 5ea:	cc cf       	rjmp	.-104    	; 0x584 <main+0x9a>
 5ec:	9f ef       	ldi	r25, 0xFF	; 255
 5ee:	e1 ee       	ldi	r30, 0xE1	; 225
 5f0:	f4 e0       	ldi	r31, 0x04	; 4
 5f2:	91 50       	subi	r25, 0x01	; 1
 5f4:	e0 40       	sbci	r30, 0x00	; 0
 5f6:	f0 40       	sbci	r31, 0x00	; 0
 5f8:	e1 f7       	brne	.-8      	; 0x5f2 <main+0x108>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <main+0x112>
 5fc:	00 00       	nop
 5fe:	93 cf       	rjmp	.-218    	; 0x526 <main+0x3c>

00000600 <__utoa_ncheck>:
 600:	bb 27       	eor	r27, r27

00000602 <__utoa_common>:
 602:	fb 01       	movw	r30, r22
 604:	55 27       	eor	r21, r21
 606:	aa 27       	eor	r26, r26
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	aa 1f       	adc	r26, r26
 60e:	a4 17       	cp	r26, r20
 610:	10 f0       	brcs	.+4      	; 0x616 <__utoa_common+0x14>
 612:	a4 1b       	sub	r26, r20
 614:	83 95       	inc	r24
 616:	50 51       	subi	r21, 0x10	; 16
 618:	b9 f7       	brne	.-18     	; 0x608 <__utoa_common+0x6>
 61a:	a0 5d       	subi	r26, 0xD0	; 208
 61c:	aa 33       	cpi	r26, 0x3A	; 58
 61e:	08 f0       	brcs	.+2      	; 0x622 <__utoa_common+0x20>
 620:	a9 5d       	subi	r26, 0xD9	; 217
 622:	a1 93       	st	Z+, r26
 624:	00 97       	sbiw	r24, 0x00	; 0
 626:	79 f7       	brne	.-34     	; 0x606 <__utoa_common+0x4>
 628:	b1 11       	cpse	r27, r1
 62a:	b1 93       	st	Z+, r27
 62c:	11 92       	st	Z+, r1
 62e:	cb 01       	movw	r24, r22
 630:	0c 94 1a 03 	jmp	0x634	; 0x634 <strrev>

00000634 <strrev>:
 634:	dc 01       	movw	r26, r24
 636:	fc 01       	movw	r30, r24
 638:	67 2f       	mov	r22, r23
 63a:	71 91       	ld	r23, Z+
 63c:	77 23       	and	r23, r23
 63e:	e1 f7       	brne	.-8      	; 0x638 <strrev+0x4>
 640:	32 97       	sbiw	r30, 0x02	; 2
 642:	04 c0       	rjmp	.+8      	; 0x64c <strrev+0x18>
 644:	7c 91       	ld	r23, X
 646:	6d 93       	st	X+, r22
 648:	70 83       	st	Z, r23
 64a:	62 91       	ld	r22, -Z
 64c:	ae 17       	cp	r26, r30
 64e:	bf 07       	cpc	r27, r31
 650:	c8 f3       	brcs	.-14     	; 0x644 <strrev+0x10>
 652:	08 95       	ret

00000654 <_exit>:
 654:	f8 94       	cli

00000656 <__stop_program>:
 656:	ff cf       	rjmp	.-2      	; 0x656 <__stop_program>
