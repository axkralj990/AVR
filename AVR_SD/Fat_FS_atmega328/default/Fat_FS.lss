
Fat_FS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  0000b8fc  0000b990  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000b8fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000091d  00800186  00800186  0000ba16  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  0000ba18  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000338  00000000  00000000  0000baf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003fdf  00000000  00000000  0000be30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099a  00000000  00000000  0000fe0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003e96  00000000  00000000  000107a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004c0  00000000  00000000  00014640  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000869  00000000  00000000  00014b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006062  00000000  00000000  00015369  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  0001b3cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c1 21 	jmp	0x4382	; 0x4382 <__ctors_end>
       4:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
       8:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
       c:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      10:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      14:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      18:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      1c:	0c 94 e4 55 	jmp	0xabc8	; 0xabc8 <__vector_7>
      20:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      24:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      28:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      2c:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      30:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      34:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      38:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      3c:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      40:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      44:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      48:	0c 94 f3 5a 	jmp	0xb5e6	; 0xb5e6 <__vector_18>
      4c:	0c 94 1b 5b 	jmp	0xb636	; 0xb636 <__vector_19>
      50:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      54:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      58:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      5c:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      60:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      64:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__bad_interrupt>
      68:	56 53       	subi	r21, 0x36	; 54
      6a:	2d 4b       	sbci	r18, 0xBD	; 189
      6c:	3d 51       	subi	r19, 0x1D	; 29
      6e:	1b 52       	subi	r17, 0x2B	; 43
      70:	42 51       	subi	r20, 0x12	; 18
      72:	2d 4b       	sbci	r18, 0xBD	; 189
      74:	fb 54       	subi	r31, 0x4B	; 75
      76:	2d 4b       	sbci	r18, 0xBD	; 189
      78:	7c 4e       	sbci	r23, 0xEC	; 236
      7a:	04 55       	subi	r16, 0x54	; 84
      7c:	4d 53       	subi	r20, 0x3D	; 61
      7e:	a1 4f       	sbci	r26, 0xF1	; 241
      80:	2c 55       	subi	r18, 0x5C	; 92
      82:	23 53       	subi	r18, 0x33	; 51
      84:	23 51       	subi	r18, 0x13	; 19
      86:	2d 4b       	sbci	r18, 0xBD	; 189
      88:	13 55       	subi	r17, 0x53	; 83
      8a:	77 51       	subi	r23, 0x17	; 23
      8c:	9b 4e       	sbci	r25, 0xEB	; 235
      8e:	7c 53       	subi	r23, 0x3C	; 60
      90:	41 53       	subi	r20, 0x31	; 49
      92:	1b 53       	subi	r17, 0x3B	; 59
      94:	77 52       	subi	r23, 0x27	; 39
      96:	26 54       	subi	r18, 0x46	; 70

00000098 <__c.2047>:
      98:	25 75 2f 25 75 2f 25 75 20 25 30 32 75 3a 25 30     %u/%u/%u %02u:%0
      a8:	32 75 3a 25 30 32 75 0a 00                          2u:%02u..

000000b1 <__c.2044>:
      b1:	54 68 65 20 64 72 69 76 65 20 25 75 20 77 69 6c     The drive %u wil
      c1:	6c 20 62 65 20 66 6f 72 6d 61 74 74 65 64 2e 20     l be formatted. 
      d1:	41 72 65 20 79 6f 75 20 73 75 72 65 3f 20 28 59     Are you sure? (Y
      e1:	2f 6e 29 3d 00                                      /n)=.

000000e6 <__c.2035>:
      e6:	0a 25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65     .%lu bytes copie
      f6:	64 2e 0a 00                                         d...

000000fa <__c.2031>:
      fa:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 00                 .Copying....

00000106 <__c.2029>:
     106:	0a 43 72 65 61 74 69 6e 67 20 22 25 73 22 00        .Creating "%s".

00000115 <__c.2027>:
     115:	4f 70 65 6e 69 6e 67 20 22 25 73 22 00              Opening "%s".

00000122 <__c.1994>:
     122:	25 6c 75 20 62 79 74 65 73 20 77 72 69 74 74 65     %lu bytes writte
     132:	6e 20 77 69 74 68 20 25 6c 75 20 62 79 74 65 73     n with %lu bytes
     142:	2f 73 65 63 2e 0a 00                                /sec...

00000149 <__c.1984>:
     149:	25 6c 75 20 62 79 74 65 73 20 72 65 61 64 20 77     %lu bytes read w
     159:	69 74 68 20 25 6c 75 20 62 79 74 65 73 2f 73 65     ith %lu bytes/se
     169:	63 2e 0a 00                                         c...

0000016d <__c.1978>:
     16d:	66 70 74 72 20 3d 20 25 6c 75 28 30 78 25 6c 58     fptr = %lu(0x%lX
     17d:	29 0a 00                                            )..

00000180 <__c.1970>:
     180:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     190:	72 65 65 0a 00                                      ree..

00000195 <__c.1968>:
     195:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     1a5:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     1b5:	75 20 44 69 72 28 73 29 00                          u Dir(s).

000001be <__c.1965>:
     1be:	25 73 0a 00                                         %s..

000001c2 <__c.1960>:
     1c2:	25 63 25 63 25 63 25 63 25 63 20 25 75 2f 25 30     %c%c%c%c%c %u/%0
     1d2:	32 75 2f 25 30 32 75 20 25 30 32 75 3a 25 30 32     2u/%02u %02u:%02
     1e2:	75 20 25 39 6c 75 20 20 25 73 00                    u %9lu  %s.

000001ed <__c.1953>:
     1ed:	0d 25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62     .%u files, %lu b
     1fd:	79 74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73     ytes..%u folders
     20d:	2e 0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64     ..%lu KB total d
     21d:	69 73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b     isk space..%lu K
     22d:	42 20 61 76 61 69 6c 61 62 6c 65 2e 0a 00           B available...

0000023b <__c.1951>:
     23b:	46 41 54 20 74 79 70 65 20 3d 20 46 41 54 25 75     FAT type = FAT%u
     24b:	0a 42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 3d     .Bytes/Cluster =
     25b:	20 25 6c 75 0a 4e 75 6d 62 65 72 20 6f 66 20 46      %lu.Number of F
     26b:	41 54 73 20 3d 20 25 75 0a 52 6f 6f 74 20 44 49     ATs = %u.Root DI
     27b:	52 20 65 6e 74 72 69 65 73 20 3d 20 25 75 0a 53     R entries = %u.S
     28b:	65 63 74 6f 72 73 2f 46 41 54 20 3d 20 25 6c 75     ectors/FAT = %lu
     29b:	0a 4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74     .Number of clust
     2ab:	65 72 73 20 3d 20 25 6c 75 0a 46 41 54 20 73 74     ers = %lu.FAT st
     2bb:	61 72 74 20 28 6c 62 61 29 20 3d 20 25 6c 75 0a     art (lba) = %lu.
     2cb:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     2db:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 44 61     lustor) = %lu.Da
     2eb:	74 61 20 73 74 61 72 74 20 28 6c 62 61 29 20 3d     ta start (lba) =
     2fb:	20 25 6c 75 0a 0a 2e 2e 2e 00                        %lu......

00000305 <__c.1941>:
     305:	72 63 3d 25 75 0a 00                                rc=%u..

0000030c <__c.1938>:
     30c:	72 63 3d 25 75 0a 00                                rc=%u..

00000313 <__c.1934>:
     313:	3f 3f 3f 0a 00                                      ???..

00000318 <__c.1930>:
     318:	25 30 34 58 20 25 30 32 58 2d 00                    %04X %02X-.

00000323 <__c.1918>:
     323:	53 2f 4e 3a 20 25 73 0a 00                          S/N: %s..

0000032c <__c.1916>:
     32c:	4d 6f 64 65 6c 3a 20 25 73 0a 00                    Model: %s..

00000337 <__c.1911>:
     337:	53 44 20 53 74 61 74 75 73 3a 0a 00                 SD Status:..

00000343 <__c.1909>:
     343:	4f 43 52 3a 0a 00                                   OCR:..

00000349 <__c.1907>:
     349:	43 49 44 3a 0a 00                                   CID:..

0000034f <__c.1905>:
     34f:	43 53 44 3a 0a 00                                   CSD:..

00000355 <__c.1903>:
     355:	43 61 72 64 20 74 79 70 65 3a 20 25 75 0a 00        Card type: %u..

00000364 <__c.1901>:
     364:	45 72 61 73 65 20 62 6c 6f 63 6b 3a 20 25 6c 75     Erase block: %lu
     374:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

0000037e <__c.1899>:
     37e:	53 65 63 74 6f 72 20 73 69 7a 65 3a 20 25 75 0a     Sector size: %u.
	...

0000038f <__c.1897>:
     38f:	44 72 69 76 65 20 73 69 7a 65 3a 20 25 6c 75 20     Drive size: %lu 
     39f:	73 65 63 74 6f 72 73 0a 00                          sectors..

000003a8 <__c.1894>:
     3a8:	72 63 3d 25 64 0a 00                                rc=%d..

000003af <__c.1888>:
     3af:	53 65 63 74 6f 72 3a 25 6c 75 0a 00                 Sector:%lu..

000003bb <__c.1886>:
     3bb:	72 63 3d 25 64 0a 00                                rc=%d..

000003c2 <__c.1881>:
     3c2:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000003d3 <__c.1877>:
     3d3:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000003df <__c.1875>:
     3df:	0a 46 61 74 46 73 20 6d 6f 64 75 6c 65 20 74 65     .FatFs module te
     3ef:	73 74 20 6d 6f 6e 69 74 6f 72 20 66 6f 72 20 41     st monitor for A
     3ff:	56 52 0a 00                                         VR..

00000403 <__c.1765>:
     403:	20 25 30 32 58 00                                    %02X.

00000409 <__c.1763>:
     409:	25 30 38 6c 58 20 00                                %08lX .

00000410 <__c.1843>:
     410:	72 63 3d 25 75 20 46 52 5f 25 53 0a 00              rc=%u FR_%S..

0000041d <str.1829>:
     41d:	4f 4b 00 44 49 53 4b 5f 45 52 52 00 49 4e 54 5f     OK.DISK_ERR.INT_
     42d:	45 52 52 00 4e 4f 54 5f 52 45 41 44 59 00 4e 4f     ERR.NOT_READY.NO
     43d:	5f 46 49 4c 45 00 4e 4f 5f 50 41 54 48 00 49 4e     _FILE.NO_PATH.IN
     44d:	56 41 4c 49 44 5f 4e 41 4d 45 00 44 45 4e 49 45     VALID_NAME.DENIE
     45d:	44 00 45 58 49 53 54 00 49 4e 56 41 4c 49 44 5f     D.EXIST.INVALID_
     46d:	4f 42 4a 45 43 54 00 57 52 49 54 45 5f 50 52 4f     OBJECT.WRITE_PRO
     47d:	54 45 43 54 45 44 00 49 4e 56 41 4c 49 44 5f 44     TECTED.INVALID_D
     48d:	52 49 56 45 00 4e 4f 54 5f 45 4e 41 42 4c 45 44     RIVE.NOT_ENABLED
     49d:	00 4e 4f 5f 46 49 4c 45 5f 53 59 53 54 45 4d 00     .NO_FILE_SYSTEM.
     4ad:	4d 4b 46 53 5f 41 42 4f 52 54 45 44 00 54 49 4d     MKFS_ABORTED.TIM
     4bd:	45 4f 55 54 00 4c 4f 43 4b 45 44 00 4e 4f 54 5f     EOUT.LOCKED.NOT_
     4cd:	45 4e 4f 55 47 48 5f 43 4f 52 45 00 54 4f 4f 5f     ENOUGH_CORE.TOO_
     4dd:	4d 41 4e 59 5f 4f 50 45 4e 5f 46 49 4c 45 53 00     MANY_OPEN_FILES.
	...

000004ee <tbl_upper.1553>:
     4ee:	41 00 42 00 43 00 44 00 45 00 46 00 47 00 48 00     A.B.C.D.E.F.G.H.
     4fe:	49 00 4a 00 4b 00 4c 00 4d 00 4e 00 4f 00 50 00     I.J.K.L.M.N.O.P.
     50e:	51 00 52 00 53 00 54 00 55 00 56 00 57 00 58 00     Q.R.S.T.U.V.W.X.
     51e:	59 00 5a 00 91 03 92 03 93 03 94 03 95 03 96 03     Y.Z.............
     52e:	97 03 98 03 99 03 9a 03 9b 03 9c 03 9d 03 9e 03     ................
     53e:	9f 03 a0 03 a1 03 a3 03 a4 03 a5 03 a6 03 a7 03     ................
     54e:	a8 03 a9 03 10 04 11 04 12 04 13 04 14 04 15 04     ................
     55e:	16 04 17 04 18 04 19 04 1a 04 1b 04 1c 04 1d 04     ................
     56e:	1e 04 1f 04 20 04 21 04 22 04 23 04 24 04 25 04     .... .!.".#.$.%.
     57e:	26 04 27 04 28 04 29 04 2a 04 2b 04 2c 04 2d 04     &.'.(.).*.+.,.-.
     58e:	2e 04 2f 04 01 04 60 21 61 21 62 21 63 21 64 21     ../...`!a!b!c!d!
     59e:	65 21 66 21 67 21 68 21 69 21 21 ff 22 ff 23 ff     e!f!g!h!i!!.".#.
     5ae:	24 ff 25 ff 26 ff 27 ff 28 ff 29 ff 2a ff 2b ff     $.%.&.'.(.).*.+.
     5be:	2c ff 2d ff 2e ff 2f ff 30 ff 31 ff 32 ff 33 ff     ,.-.../.0.1.2.3.
     5ce:	34 ff 35 ff 36 ff 37 ff 38 ff 39 ff 3a ff 00 00     4.5.6.7.8.9.:...

000005de <tbl_lower.1552>:
     5de:	61 00 62 00 63 00 64 00 65 00 66 00 67 00 68 00     a.b.c.d.e.f.g.h.
     5ee:	69 00 6a 00 6b 00 6c 00 6d 00 6e 00 6f 00 70 00     i.j.k.l.m.n.o.p.
     5fe:	71 00 72 00 73 00 74 00 75 00 76 00 77 00 78 00     q.r.s.t.u.v.w.x.
     60e:	79 00 7a 00 b1 03 b2 03 b3 03 b4 03 b5 03 b6 03     y.z.............
     61e:	b7 03 b8 03 b9 03 ba 03 bb 03 bc 03 bd 03 be 03     ................
     62e:	bf 03 c0 03 c1 03 c3 03 c4 03 c5 03 c6 03 c7 03     ................
     63e:	c8 03 c9 03 30 04 31 04 32 04 33 04 34 04 35 04     ....0.1.2.3.4.5.
     64e:	36 04 37 04 38 04 39 04 3a 04 3b 04 3c 04 3d 04     6.7.8.9.:.;.<.=.
     65e:	3e 04 3f 04 40 04 41 04 42 04 43 04 44 04 45 04     >.?.@.A.B.C.D.E.
     66e:	46 04 47 04 48 04 49 04 4a 04 4b 04 4c 04 4d 04     F.G.H.I.J.K.L.M.
     67e:	4e 04 4f 04 51 04 70 21 71 21 72 21 73 21 74 21     N.O.Q.p!q!r!s!t!
     68e:	75 21 76 21 77 21 78 21 79 21 41 ff 42 ff 43 ff     u!v!w!x!y!A.B.C.
     69e:	44 ff 45 ff 46 ff 47 ff 48 ff 49 ff 4a ff 4b ff     D.E.F.G.H.I.J.K.
     6ae:	4c ff 4d ff 4e ff 4f ff 50 ff 51 ff 52 ff 53 ff     L.M.N.O.P.Q.R.S.
     6be:	54 ff 55 ff 56 ff 57 ff 58 ff 59 ff 5a ff 00 00     T.U.V.W.X.Y.Z...

000006ce <uni2sjis>:
     6ce:	a7 00 98 81 a8 00 4e 81 b0 00 8b 81 b1 00 7d 81     ......N.......}.
     6de:	b4 00 4c 81 b6 00 f7 81 d7 00 7e 81 f7 00 80 81     ..L.......~.....
     6ee:	91 03 9f 83 92 03 a0 83 93 03 a1 83 94 03 a2 83     ................
     6fe:	95 03 a3 83 96 03 a4 83 97 03 a5 83 98 03 a6 83     ................
     70e:	99 03 a7 83 9a 03 a8 83 9b 03 a9 83 9c 03 aa 83     ................
     71e:	9d 03 ab 83 9e 03 ac 83 9f 03 ad 83 a0 03 ae 83     ................
     72e:	a1 03 af 83 a3 03 b0 83 a4 03 b1 83 a5 03 b2 83     ................
     73e:	a6 03 b3 83 a7 03 b4 83 a8 03 b5 83 a9 03 b6 83     ................
     74e:	b1 03 bf 83 b2 03 c0 83 b3 03 c1 83 b4 03 c2 83     ................
     75e:	b5 03 c3 83 b6 03 c4 83 b7 03 c5 83 b8 03 c6 83     ................
     76e:	b9 03 c7 83 ba 03 c8 83 bb 03 c9 83 bc 03 ca 83     ................
     77e:	bd 03 cb 83 be 03 cc 83 bf 03 cd 83 c0 03 ce 83     ................
     78e:	c1 03 cf 83 c3 03 d0 83 c4 03 d1 83 c5 03 d2 83     ................
     79e:	c6 03 d3 83 c7 03 d4 83 c8 03 d5 83 c9 03 d6 83     ................
     7ae:	01 04 46 84 10 04 40 84 11 04 41 84 12 04 42 84     ..F...@...A...B.
     7be:	13 04 43 84 14 04 44 84 15 04 45 84 16 04 47 84     ..C...D...E...G.
     7ce:	17 04 48 84 18 04 49 84 19 04 4a 84 1a 04 4b 84     ..H...I...J...K.
     7de:	1b 04 4c 84 1c 04 4d 84 1d 04 4e 84 1e 04 4f 84     ..L...M...N...O.
     7ee:	1f 04 50 84 20 04 51 84 21 04 52 84 22 04 53 84     ..P. .Q.!.R.".S.
     7fe:	23 04 54 84 24 04 55 84 25 04 56 84 26 04 57 84     #.T.$.U.%.V.&.W.
     80e:	27 04 58 84 28 04 59 84 29 04 5a 84 2a 04 5b 84     '.X.(.Y.).Z.*.[.
     81e:	2b 04 5c 84 2c 04 5d 84 2d 04 5e 84 2e 04 5f 84     +.\.,.].-.^..._.
     82e:	2f 04 60 84 30 04 70 84 31 04 71 84 32 04 72 84     /.`.0.p.1.q.2.r.
     83e:	33 04 73 84 34 04 74 84 35 04 75 84 36 04 77 84     3.s.4.t.5.u.6.w.
     84e:	37 04 78 84 38 04 79 84 39 04 7a 84 3a 04 7b 84     7.x.8.y.9.z.:.{.
     85e:	3b 04 7c 84 3c 04 7d 84 3d 04 7e 84 3e 04 80 84     ;.|.<.}.=.~.>...
     86e:	3f 04 81 84 40 04 82 84 41 04 83 84 42 04 84 84     ?...@...A...B...
     87e:	43 04 85 84 44 04 86 84 45 04 87 84 46 04 88 84     C...D...E...F...
     88e:	47 04 89 84 48 04 8a 84 49 04 8b 84 4a 04 8c 84     G...H...I...J...
     89e:	4b 04 8d 84 4c 04 8e 84 4d 04 8f 84 4e 04 90 84     K...L...M...N...
     8ae:	4f 04 91 84 51 04 76 84 10 20 5d 81 15 20 5c 81     O...Q.v.. ].. \.
     8be:	18 20 65 81 19 20 66 81 1c 20 67 81 1d 20 68 81     . e.. f.. g.. h.
     8ce:	20 20 f5 81 21 20 f6 81 25 20 64 81 26 20 63 81       ..! ..% d.& c.
     8de:	30 20 f1 81 32 20 8c 81 33 20 8d 81 3b 20 a6 81     0 ..2 ..3 ..; ..
     8ee:	03 21 8e 81 16 21 82 87 21 21 84 87 2b 21 f0 81     .!...!..!!..+!..
     8fe:	60 21 54 87 61 21 55 87 62 21 56 87 63 21 57 87     `!T.a!U.b!V.c!W.
     90e:	64 21 58 87 65 21 59 87 66 21 5a 87 67 21 5b 87     d!X.e!Y.f!Z.g![.
     91e:	68 21 5c 87 69 21 5d 87 90 21 a9 81 91 21 aa 81     h!\.i!]..!...!..
     92e:	92 21 a8 81 93 21 ab 81 d2 21 cb 81 d4 21 cc 81     .!...!...!...!..
     93e:	00 22 cd 81 02 22 dd 81 03 22 ce 81 07 22 de 81     ."..."..."..."..
     94e:	08 22 b8 81 0b 22 b9 81 11 22 94 87 1a 22 e3 81     ."..."..."..."..
     95e:	1d 22 e5 81 1e 22 87 81 1f 22 98 87 20 22 da 81     ."..."...".. "..
     96e:	25 22 61 81 27 22 c8 81 28 22 c9 81 29 22 bf 81     %"a.'"..("..)"..
     97e:	2a 22 be 81 2b 22 e7 81 2c 22 e8 81 2e 22 93 87     *"..+"..,"..."..
     98e:	34 22 88 81 35 22 e6 81 3d 22 e4 81 52 22 e0 81     4"..5"..="..R"..
     99e:	60 22 82 81 61 22 df 81 66 22 85 81 67 22 86 81     `"..a"..f"..g"..
     9ae:	6a 22 e1 81 6b 22 e2 81 82 22 bc 81 83 22 bd 81     j"..k"..."..."..
     9be:	86 22 ba 81 87 22 bb 81 a5 22 db 81 bf 22 99 87     ."..."..."..."..
     9ce:	12 23 dc 81 60 24 40 87 61 24 41 87 62 24 42 87     .#..`$@.a$A.b$B.
     9de:	63 24 43 87 64 24 44 87 65 24 45 87 66 24 46 87     c$C.d$D.e$E.f$F.
     9ee:	67 24 47 87 68 24 48 87 69 24 49 87 6a 24 4a 87     g$G.h$H.i$I.j$J.
     9fe:	6b 24 4b 87 6c 24 4c 87 6d 24 4d 87 6e 24 4e 87     k$K.l$L.m$M.n$N.
     a0e:	6f 24 4f 87 70 24 50 87 71 24 51 87 72 24 52 87     o$O.p$P.q$Q.r$R.
     a1e:	73 24 53 87 00 25 9f 84 01 25 aa 84 02 25 a0 84     s$S..%...%...%..
     a2e:	03 25 ab 84 0c 25 a1 84 0f 25 ac 84 10 25 a2 84     .%...%...%...%..
     a3e:	13 25 ad 84 14 25 a4 84 17 25 af 84 18 25 a3 84     .%...%...%...%..
     a4e:	1b 25 ae 84 1c 25 a5 84 1d 25 ba 84 20 25 b5 84     .%...%...%.. %..
     a5e:	23 25 b0 84 24 25 a7 84 25 25 bc 84 28 25 b7 84     #%..$%..%%..(%..
     a6e:	2b 25 b2 84 2c 25 a6 84 2f 25 b6 84 30 25 bb 84     +%..,%../%..0%..
     a7e:	33 25 b1 84 34 25 a8 84 37 25 b8 84 38 25 bd 84     3%..4%..7%..8%..
     a8e:	3b 25 b3 84 3c 25 a9 84 3f 25 b9 84 42 25 be 84     ;%..<%..?%..B%..
     a9e:	4b 25 b4 84 a0 25 a1 81 a1 25 a0 81 b2 25 a3 81     K%...%...%...%..
     aae:	b3 25 a2 81 bc 25 a5 81 bd 25 a4 81 c6 25 9f 81     .%...%...%...%..
     abe:	c7 25 9e 81 cb 25 9b 81 ce 25 9d 81 cf 25 9c 81     .%...%...%...%..
     ace:	ef 25 fc 81 05 26 9a 81 06 26 99 81 40 26 8a 81     .%...&...&..@&..
     ade:	42 26 89 81 6a 26 f4 81 6d 26 f3 81 6f 26 f2 81     B&..j&..m&..o&..
     aee:	00 30 40 81 01 30 41 81 02 30 42 81 03 30 56 81     .0@..0A..0B..0V.
     afe:	05 30 58 81 06 30 59 81 07 30 5a 81 08 30 71 81     .0X..0Y..0Z..0q.
     b0e:	09 30 72 81 0a 30 73 81 0b 30 74 81 0c 30 75 81     .0r..0s..0t..0u.
     b1e:	0d 30 76 81 0e 30 77 81 0f 30 78 81 10 30 79 81     .0v..0w..0x..0y.
     b2e:	11 30 7a 81 12 30 a7 81 13 30 ac 81 14 30 6b 81     .0z..0...0...0k.
     b3e:	15 30 6c 81 1d 30 80 87 1f 30 81 87 41 30 9f 82     .0l..0...0..A0..
     b4e:	42 30 a0 82 43 30 a1 82 44 30 a2 82 45 30 a3 82     B0..C0..D0..E0..
     b5e:	46 30 a4 82 47 30 a5 82 48 30 a6 82 49 30 a7 82     F0..G0..H0..I0..
     b6e:	4a 30 a8 82 4b 30 a9 82 4c 30 aa 82 4d 30 ab 82     J0..K0..L0..M0..
     b7e:	4e 30 ac 82 4f 30 ad 82 50 30 ae 82 51 30 af 82     N0..O0..P0..Q0..
     b8e:	52 30 b0 82 53 30 b1 82 54 30 b2 82 55 30 b3 82     R0..S0..T0..U0..
     b9e:	56 30 b4 82 57 30 b5 82 58 30 b6 82 59 30 b7 82     V0..W0..X0..Y0..
     bae:	5a 30 b8 82 5b 30 b9 82 5c 30 ba 82 5d 30 bb 82     Z0..[0..\0..]0..
     bbe:	5e 30 bc 82 5f 30 bd 82 60 30 be 82 61 30 bf 82     ^0.._0..`0..a0..
     bce:	62 30 c0 82 63 30 c1 82 64 30 c2 82 65 30 c3 82     b0..c0..d0..e0..
     bde:	66 30 c4 82 67 30 c5 82 68 30 c6 82 69 30 c7 82     f0..g0..h0..i0..
     bee:	6a 30 c8 82 6b 30 c9 82 6c 30 ca 82 6d 30 cb 82     j0..k0..l0..m0..
     bfe:	6e 30 cc 82 6f 30 cd 82 70 30 ce 82 71 30 cf 82     n0..o0..p0..q0..
     c0e:	72 30 d0 82 73 30 d1 82 74 30 d2 82 75 30 d3 82     r0..s0..t0..u0..
     c1e:	76 30 d4 82 77 30 d5 82 78 30 d6 82 79 30 d7 82     v0..w0..x0..y0..
     c2e:	7a 30 d8 82 7b 30 d9 82 7c 30 da 82 7d 30 db 82     z0..{0..|0..}0..
     c3e:	7e 30 dc 82 7f 30 dd 82 80 30 de 82 81 30 df 82     ~0...0...0...0..
     c4e:	82 30 e0 82 83 30 e1 82 84 30 e2 82 85 30 e3 82     .0...0...0...0..
     c5e:	86 30 e4 82 87 30 e5 82 88 30 e6 82 89 30 e7 82     .0...0...0...0..
     c6e:	8a 30 e8 82 8b 30 e9 82 8c 30 ea 82 8d 30 eb 82     .0...0...0...0..
     c7e:	8e 30 ec 82 8f 30 ed 82 90 30 ee 82 91 30 ef 82     .0...0...0...0..
     c8e:	92 30 f0 82 93 30 f1 82 9b 30 4a 81 9c 30 4b 81     .0...0...0J..0K.
     c9e:	9d 30 54 81 9e 30 55 81 a1 30 40 83 a2 30 41 83     .0T..0U..0@..0A.
     cae:	a3 30 42 83 a4 30 43 83 a5 30 44 83 a6 30 45 83     .0B..0C..0D..0E.
     cbe:	a7 30 46 83 a8 30 47 83 a9 30 48 83 aa 30 49 83     .0F..0G..0H..0I.
     cce:	ab 30 4a 83 ac 30 4b 83 ad 30 4c 83 ae 30 4d 83     .0J..0K..0L..0M.
     cde:	af 30 4e 83 b0 30 4f 83 b1 30 50 83 b2 30 51 83     .0N..0O..0P..0Q.
     cee:	b3 30 52 83 b4 30 53 83 b5 30 54 83 b6 30 55 83     .0R..0S..0T..0U.
     cfe:	b7 30 56 83 b8 30 57 83 b9 30 58 83 ba 30 59 83     .0V..0W..0X..0Y.
     d0e:	bb 30 5a 83 bc 30 5b 83 bd 30 5c 83 be 30 5d 83     .0Z..0[..0\..0].
     d1e:	bf 30 5e 83 c0 30 5f 83 c1 30 60 83 c2 30 61 83     .0^..0_..0`..0a.
     d2e:	c3 30 62 83 c4 30 63 83 c5 30 64 83 c6 30 65 83     .0b..0c..0d..0e.
     d3e:	c7 30 66 83 c8 30 67 83 c9 30 68 83 ca 30 69 83     .0f..0g..0h..0i.
     d4e:	cb 30 6a 83 cc 30 6b 83 cd 30 6c 83 ce 30 6d 83     .0j..0k..0l..0m.
     d5e:	cf 30 6e 83 d0 30 6f 83 d1 30 70 83 d2 30 71 83     .0n..0o..0p..0q.
     d6e:	d3 30 72 83 d4 30 73 83 d5 30 74 83 d6 30 75 83     .0r..0s..0t..0u.
     d7e:	d7 30 76 83 d8 30 77 83 d9 30 78 83 da 30 79 83     .0v..0w..0x..0y.
     d8e:	db 30 7a 83 dc 30 7b 83 dd 30 7c 83 de 30 7d 83     .0z..0{..0|..0}.
     d9e:	df 30 7e 83 e0 30 80 83 e1 30 81 83 e2 30 82 83     .0~..0...0...0..
     dae:	e3 30 83 83 e4 30 84 83 e5 30 85 83 e6 30 86 83     .0...0...0...0..
     dbe:	e7 30 87 83 e8 30 88 83 e9 30 89 83 ea 30 8a 83     .0...0...0...0..
     dce:	eb 30 8b 83 ec 30 8c 83 ed 30 8d 83 ee 30 8e 83     .0...0...0...0..
     dde:	ef 30 8f 83 f0 30 90 83 f1 30 91 83 f2 30 92 83     .0...0...0...0..
     dee:	f3 30 93 83 f4 30 94 83 f5 30 95 83 f6 30 96 83     .0...0...0...0..
     dfe:	fb 30 45 81 fc 30 5b 81 fd 30 52 81 fe 30 53 81     .0E..0[..0R..0S.
     e0e:	31 32 8a 87 32 32 8b 87 39 32 8c 87 a4 32 85 87     12..22..92...2..
     e1e:	a5 32 86 87 a6 32 87 87 a7 32 88 87 a8 32 89 87     .2...2...2...2..
     e2e:	03 33 65 87 0d 33 69 87 14 33 60 87 18 33 63 87     .3e..3i..3`..3c.
     e3e:	22 33 61 87 23 33 6b 87 26 33 6a 87 27 33 64 87     "3a.#3k.&3j.'3d.
     e4e:	2b 33 6c 87 36 33 66 87 3b 33 6e 87 49 33 5f 87     +3l.63f.;3n.I3_.
     e5e:	4a 33 6d 87 4d 33 62 87 51 33 67 87 57 33 68 87     J3m.M3b.Q3g.W3h.
     e6e:	7b 33 7e 87 7c 33 8f 87 7d 33 8e 87 7e 33 8d 87     {3~.|3..}3..~3..
     e7e:	8e 33 72 87 8f 33 73 87 9c 33 6f 87 9d 33 70 87     .3r..3s..3o..3p.
     e8e:	9e 33 71 87 a1 33 75 87 c4 33 74 87 cd 33 83 87     .3q..3u..3t..3..
     e9e:	00 4e ea 88 01 4e 9a 92 03 4e b5 8e 07 4e 9c 96     .N...N...N...N..
     eae:	08 4e e4 8f 09 4e 4f 8e 0a 4e e3 8f 0b 4e ba 89     .N...NO..N...N..
     ebe:	0d 4e 73 95 0e 4e 5e 97 11 4e 4e 89 14 4e 8e 8a     .Ns..N^..NN..N..
     ece:	15 4e a1 98 16 4e a2 90 18 4e 75 8b 19 4e b8 95     .N...N...Nu..N..
     ede:	1e 4e e5 8f 21 4e bc 97 26 4e c0 95 2a 4e a2 98     .N..!N..&N..*N..
     eee:	2d 4e 86 92 32 4e f8 8b 38 4e db 8a 39 4e 4f 92     -N..2N..8N..9NO.
     efe:	3b 4e e5 8e 3c 4e a5 98 43 4e 54 94 45 4e 76 8b     ;N..<N..CNT.ENv.
     f0e:	4b 4e 56 94 4d 4e e1 93 4e 4e c1 8c 4f 4e 52 96     KNV.MN..NN..ONR.
     f1e:	56 4e a8 98 57 4e e6 8f 59 4e b3 89 5d 4e e3 8b     VN..WN..YN..]N..
     f2e:	5e 4e ee 8c 5f 4e e7 96 71 4e 90 97 73 4e fb 93     ^N.._N..qN..sN..
     f3e:	7e 4e a3 8a 80 4e 54 8b 86 4e b9 97 88 4e 5c 97     ~N...NT..N...N\.
     f4e:	89 4e 88 91 8b 4e 96 8e 8c 4e f1 93 8e 4e b0 98     .N...N...N...N..
     f5e:	91 4e 5d 89 92 4e dd 8c 94 4e dc 8c 95 4e e4 88     .N]..N...N...N..
     f6e:	98 4e 6a 98 99 4e 69 98 9b 4e b1 8d 9c 4e 9f 88     .Nj..Ni..N...N..
     f7e:	9e 4e b1 98 a1 4e 53 96 a4 4e f0 8c a5 4e e5 88     .N...NS..N...N..
     f8e:	a6 4e 92 96 a8 4e 9c 8b ab 4e 9d 8b ac 4e 9e 8b     .N...N...N...N..
     f9e:	ad 4e e0 92 ae 4e ba 97 ba 4e 6c 90 c0 4e 59 8f     .N...N...Nl..NY.
     fae:	c1 4e 6d 90 c7 4e 77 8b ca 4e a1 8d cb 4e ee 89     .Nm..Nw..N...N..
     fbe:	cf 4e a7 95 d4 4e 65 8e d5 4e 64 8e d6 4e bc 91     .N...Ne..Nd..N..
     fce:	d8 4e 74 95 d9 4e e5 90 dd 4e 57 81 e3 4e e3 91     .Nt..N...NW..N..
     fde:	e4 4e df 97 e5 4e c8 88 ee 4e bc 89 f0 4e c2 8b     .N...N...N...N..
     fee:	f2 4e 87 92 f6 4e 8f 8c fb 4e 43 94 01 4f e9 8a     .N...N...NC..O..
     ffe:	0a 4f c9 88 0d 4f de 8c 0e 4f ea 8a 0f 4f 9a 95     .O...O...O...O..
    100e:	10 4f b0 94 11 4f 78 8b 1a 4f ef 89 1d 4f 60 93     .O...Ox..O...O`.
    101e:	2f 4f 8c 94 34 4f ba 94 36 4f e0 97 38 4f 4c 90     /O..4O..6O..8OL.
    102e:	3a 4f 66 8e 3c 4f 97 8e 3d 4f be 89 43 4f cf 92     :Of.<O..=O..CO..
    103e:	46 4f 41 92 47 4f c8 98 4d 4f ca 88 4e 4f e1 92     FOA.GO..MO..NO..
    104e:	4f 4f 5a 8f 50 4f b2 8d 51 4f 43 97 53 4f cc 91     OOZ.PO..QOC.SO..
    105e:	55 4f bd 89 57 4f c7 98 59 4f 5d 97 5b 4f c5 98     UO..WO..YO].[O..
    106e:	5c 4f ec 8d 73 4f c0 89 75 4f b9 95 7c 4f f1 8c     \O..sO..uO..|O..
    107e:	7f 4f 67 8e 83 4f a4 8a 86 4f d2 98 8b 4f e1 97     .Og..O...O...O..
    108e:	8d 4f 98 8e 9b 4f 9f 8b 9d 4f cb 88 a0 4f a0 8b     .O...O...O...O..
    109e:	a1 4f bf 89 ad 4f 99 96 ae 4f 8e 95 af 4f f2 8c     .O...O...O...O..
    10ae:	b5 4f 4e 90 b6 4f b5 97 bf 4f d6 95 c2 4f 57 8c     .ON..O...O...OW.
    10be:	c3 4f a3 91 c4 4f e2 89 ca 4f 72 8f d7 4f ad 91     .O...O...Or..O..
    10ce:	dd 4f db 95 e1 4f 4d 90 e3 4f 93 96 ee 4f 43 8f     .O...OM..O...OC.
    10de:	f3 4f 6f 94 f5 4f 55 95 f8 4f ee 95 fa 4f b4 89     .Oo..OU..O...O..
    10ee:	09 50 71 91 0b 50 c2 8c 0d 50 7b 94 12 50 7c 93     .Pq..P...P{..P|.
    10fe:	16 50 f4 8c 19 50 f3 8c 1f 50 d8 8e 23 50 ed 95     .P...P...P..#P..
    110e:	24 50 6c 92 26 50 91 8c 2b 50 cf 97 2d 50 60 98     $Pl.&P..+P..-P`.
    111e:	36 50 e4 8b 39 50 90 8c 49 50 cc 88 4f 50 ce 95     6P..9P..IP..OP..
    112e:	55 50 f1 98 5c 50 e2 92 65 50 92 8c 72 50 c3 8e     UP..\P..eP..rP..
    113e:	74 50 a4 91 75 50 e3 92 76 50 f4 8b 7d 50 55 8b     tP..uP..vP..}PU.
    114e:	8d 50 54 96 91 50 86 8c 98 50 50 8e 99 50 f5 94     .PT..P...PP..P..
    115e:	ac 50 c3 8d ad 50 62 97 b5 50 c2 8d b7 50 9d 8f     .P...Pb..P...P..
    116e:	be 50 58 8c c5 50 cd 8b cd 50 ad 93 cf 50 9c 91     .PX..P...P...P..
    117e:	d1 50 a1 8b d5 50 6c 96 da 50 bb 97 e7 50 6d 91     .P...Pl..P...Pm.
    118e:	fb 50 c6 95 00 51 56 8b 04 51 ad 89 12 51 f2 8e     .P...QV..Q...Q..
    119e:	1a 51 52 99 1f 51 9e 8f 2a 51 44 97 32 51 d7 96     .QR..Q..*QD.2Q..
    11ae:	41 51 f2 88 43 51 b3 8c 44 51 5a 8c 45 51 5b 8f     AQ..CQ..DQZ.EQ[.
    11be:	46 51 9b 92 47 51 a2 8b 48 51 e6 90 49 51 f5 8c     FQ..GQ..HQ..IQ..
    11ce:	4b 51 8e 8d 4c 51 5b 99 4d 51 c6 96 4e 51 65 93     KQ..LQ[.MQ..NQe.
    11de:	50 51 99 8e 52 51 5a 99 54 51 5c 99 5a 51 7d 93     PQ..RQZ.TQ\.ZQ}.
    11ee:	5c 51 95 8a 65 51 fc 93 68 51 53 91 6b 51 aa 94     \Q..eQ..hQS.kQ..
    11fe:	6c 51 f6 8c 6d 51 5a 98 71 51 a4 8b 75 51 ba 95     lQ..mQZ.qQ..uQ..
    120e:	76 51 b4 91 77 51 ef 8b 78 51 54 93 7c 51 93 8c     vQ..wQ..xQT.|Q..
    121e:	85 51 e0 93 86 51 7e 89 8a 51 fb 8d 8d 51 c4 8d     .Q...Q~..Q...Q..
    122e:	91 51 68 99 92 51 60 96 97 51 e7 8f 99 51 ca 8e     .Qh..Q`..Q...Q..
    123e:	a0 51 a5 8a a4 51 6c 99 a5 51 bb 96 a8 51 79 95     .Q...Ql..Q...Qy.
    124e:	ac 51 7e 93 b4 51 e1 8d b6 51 e8 96 b7 51 e2 97     .Q~..Q...Q...Q..
    125e:	c4 51 a6 90 c6 51 79 8f cb 51 9c 92 cc 51 bd 97     .Q...Qy..Q...Q..
    126e:	cd 51 80 93 dc 51 a3 ea dd 51 c3 8b e0 51 7b 99     .Q...Q...Q...Q{.
    127e:	e1 51 7d 96 e6 51 88 8f e7 51 fa 91 ea 51 e2 93     .Q}..Q...Q...Q..
    128e:	f1 51 4d 8a f6 51 a5 8b f8 51 ca 93 f9 51 9a 89     .QM..Q...Q...Q..
    129e:	fa 51 6f 8f fd 51 9f 94 00 52 81 93 03 52 6e 90     .Qo..Q...R...Rn.
    12ae:	06 52 aa 95 07 52 d8 90 08 52 a0 8a 0a 52 a7 8a     .R...R...R...R..
    12be:	11 52 59 8c 17 52 f1 97 1d 52 89 8f 24 52 bb 94     .RY..R...R..$R..
    12ce:	25 52 ca 95 29 52 98 97 30 52 9e 93 36 52 a7 90     %R..)R..0R..6R..
    12de:	37 52 fc 8d 38 52 94 8c 39 52 8b 99 3a 52 68 8e     7R..8R..9R..:Rh.
    12ee:	3b 52 8f 8d 43 52 e4 92 47 52 a5 91 4a 52 ed 8d     ;R..CR..GR..JR..
    12fe:	4d 52 4f 91 56 52 55 96 5b 52 84 8d 63 52 95 8c     MRO.VRU.[R..cR..
    130e:	64 52 dc 8d 65 52 8d 94 6a 52 92 99 6f 52 9b 95     dR..eR..jR..oR..
    131e:	70 52 e8 8f 72 52 84 8a 74 52 93 99 75 52 6e 91     pR..rR..tR..uRn.
    132e:	83 52 63 8a 87 52 80 8c 88 52 9c 99 89 52 ab 97     .Rc..R...R...R..
    133e:	9b 52 cd 97 9f 52 f7 8c a0 52 c1 89 a3 52 f2 97     .R...R...R...R..
    134e:	a9 52 95 8f aa 52 77 93 ab 52 85 8d b1 52 e3 97     .R...Rw..R...R..
    135e:	b4 52 4a 98 b9 52 f8 8c be 52 4e 8a c3 52 75 96     .RJ..R...RN..Ru.
    136e:	c5 52 ba 92 c7 52 45 97 c9 52 d7 95 d5 52 ae 93     .R...RE..R...R..
    137e:	d8 52 a8 8a d9 52 b1 96 dd 52 9f 8f df 52 e5 95     .R...R...R...R..
    138e:	e2 52 a8 90 e4 52 ce 8b e7 52 a9 8a f2 52 4d 8c     .R...R...R...RM.
    139e:	fa 52 d9 8e fe 52 f9 8c ff 52 dc 96 01 53 e6 96     .R...R...R...S..
    13ae:	02 53 f5 93 05 53 ef 95 16 53 bb 89 17 53 6b 96     .S...S...S...Sk.
    13be:	19 53 fa 8d 1d 53 78 91 20 53 a0 8f 21 53 a7 8b     .S...Sx. S..!S..
    13ce:	2a 53 d9 94 39 53 43 95 3a 53 e6 8b 3b 53 e3 88     *S..9SC.:S..;S..
    13de:	3f 53 bd 93 40 53 bd 99 41 53 5c 8f 43 53 e7 90     ?S..@S..AS\.CS..
    13ee:	47 53 a1 8f 48 53 df 8c 4a 53 bc 94 4d 53 c2 99     GS..HS..JS..MS..
    13fe:	51 53 da 94 52 53 b2 91 53 53 ec 91 54 53 a6 8b     QS..RS..SS..TS..
    140e:	57 53 ec 93 58 53 50 92 5a 53 8e 94 5c 53 6d 96     WS..XSP.ZS..\Sm.
    141e:	60 53 e8 90 66 53 54 8c 6f 53 4b 89 70 53 f3 88     `S..fST.oSK.pS..
    142e:	71 53 eb 8a 73 53 a6 91 74 53 70 8b 75 53 91 97     qS..sS..tSp.uS..
    143e:	78 53 b5 89 7f 53 a8 8b 82 53 ca 99 84 53 ef 96     xS...S...S...S..
    144e:	98 53 d0 97 9a 53 fa 8c 9f 53 b4 8c a0 53 cc 99     .S...S...S...S..
    145e:	a8 53 7e 90 a9 53 58 89 ad 53 7d 89 b3 53 b5 8c     .S~..SX..S}..S..
    146e:	bb 53 8e 8b c2 53 51 8e c8 53 94 96 c9 53 b3 8d     .S...SQ..S...S..
    147e:	ca 53 79 8b cb 53 46 97 cc 53 6f 91 cd 53 bd 94     .Sy..SF..So..S..
    148e:	ce 53 fb 8e d4 53 66 8f d6 53 e6 8e d7 53 f3 8e     .S...Sf..S...S..
    149e:	d9 53 96 8f db 53 be 94 e1 53 62 89 e2 53 70 91     .S...S...Sb..Sp.
    14ae:	e3 53 fb 8c e4 53 c3 8c e5 53 e5 8b e9 53 40 92     .S...S...S...S@.
    14be:	ea 53 fc 91 eb 53 a9 8b ec 53 a2 8f ef 53 c2 89     .S...S...S...S..
    14ce:	f0 53 e4 91 f1 53 b6 8e f2 53 6a 8e f3 53 45 89     .S...S...Sj..SE.
    14de:	f6 53 90 8a f7 53 86 8d f8 53 69 8e 03 54 68 8b     .S...S...Si..Th.
    14ee:	04 54 65 8a 08 54 87 8d 09 54 67 8b 0a 54 dd 92     .Te..T...Tg..T..
    14fe:	0b 54 44 89 0c 54 af 93 0d 54 bc 96 0e 54 40 8d     .TD..T...T...T@.
    150e:	0f 54 99 97 10 54 66 93 11 54 fc 8c 1b 54 4e 8c     .T...Tf..T...TN.
    151e:	1f 54 e1 8b 20 54 69 96 26 54 db 94 2b 54 dc 8a     .T.. Ti.&T..+T..
    152e:	38 54 7a 8b 39 54 81 90 3b 54 ab 95 3e 54 e1 8c     8Tz.9T..;T..>T..
    153e:	42 54 43 98 46 54 f0 95 48 54 e6 92 49 54 e0 8c     BTC.FT..HT..IT..
    154e:	4a 54 90 8d 51 54 db 93 68 54 fc 8e 6a 54 f4 8e     JT..QT..hT..jT..
    155e:	73 54 a1 96 7b 54 ef 99 7c 54 c4 8c 7d 54 bd 96     sT..{T..|T..}T..
    156e:	80 54 f0 99 8b 54 ee 8d 8c 54 61 98 8e 54 e9 99     .T...T...Ta..T..
    157e:	ac 54 f9 99 b2 54 e7 8d b3 54 50 8a bd 54 f4 88     .T...T...TP..T..
    158e:	c0 54 a3 88 c1 54 69 95 c9 54 c6 8d e1 54 f5 88     .T...Ti..T...T..
    159e:	e8 54 a3 8f e9 54 89 96 f2 54 4e 93 04 55 53 89     .T...T...TN..US.
    15ae:	06 55 b4 8d 07 55 4f 90 10 55 82 93 16 55 a0 88     .U...UO..U...U..
    15be:	2f 55 42 97 31 55 a5 8f 3e 55 c1 91 44 55 ed 91     /UB.1U..>U..DU..
    15ce:	46 55 a4 8f 4f 55 e2 96 53 55 5b 8c 84 55 50 91     FU..OU..SU[..UP.
    15de:	89 55 41 8d 8b 55 9d 92 98 55 62 9a 9a 55 ab 8a     .UA..U...Ub..U..
    15ee:	9c 55 ec 8a 9d 55 85 8a a7 55 96 8c aa 55 72 91     .U...U...U...Ur.
    15fe:	ab 55 69 8b ac 55 aa 8b ae 55 64 9a b0 55 f2 8b     .Ui..U...Ud..U..
    160e:	b6 55 63 89 e3 55 6b 8e 06 56 51 92 09 56 c3 89     .Uc..Uk..VQ..V..
    161e:	14 56 71 9a 17 56 a6 8f 18 56 52 89 29 56 dc 89     .Vq..V...VR.)V..
    162e:	31 56 fa 8f 42 56 5c 89 4c 56 58 91 5b 56 9a 8a     1V..BV\.LVX.[V..
    163e:	68 56 ed 8a 74 56 ac 95 78 56 d3 93 7a 56 b6 94     hV..tV..xV..zV..
    164e:	87 56 64 8a a2 56 58 94 c0 56 93 9a c1 56 91 9a     .Vd..VX..V...V..
    165e:	c3 56 92 9a d3 56 97 9a da 56 fa 8e db 56 6c 8e     .V...V...V...Vl.
    166e:	de 56 f1 89 e0 56 f6 88 e3 56 63 92 ee 56 99 9a     .V...V...Vc..V..
    167e:	f0 56 a2 8d f2 56 cd 88 f3 56 7d 90 fa 56 c5 8c     .V...V...V}..V..
    168e:	fd 56 91 8d 03 57 de 95 0b 57 a0 9a 0f 57 97 8c     .V...W...W...W..
    169e:	12 57 80 89 13 57 a2 9a 1f 57 79 93 27 57 b3 88     .W...W...Wy.'W..
    16ae:	28 57 dd 8d 2d 57 5c 8c 30 57 6e 92 42 57 e2 8d     (W..-W\.0Wn.BW..
    16be:	47 57 cf 8b 4a 57 56 96 50 57 bf 8d 51 57 42 8d     GW..JWV.PW..QWB.
    16ce:	64 57 a3 8d 66 57 52 92 6a 57 d8 92 82 57 82 90     dW..fWR.jW...W..
    16de:	8b 57 5e 8c a2 57 43 8d a3 57 5f 8a c3 57 ba 9a     .W^..WC..W_..W..
    16ee:	cb 57 84 96 ce 57 e9 8f dc 57 57 94 df 57 e6 88     .W...W...WW..W..
    16fe:	e0 57 75 95 f4 57 fb 8f f7 57 b7 8e f9 57 7c 94     .Wu..W...W...W|.
    170e:	fa 57 ee 8a fc 57 e9 8d 00 58 78 96 02 58 b0 93     .W...W...Xx..X..
    171e:	05 58 98 8c 06 58 cd 91 15 58 c2 91 21 58 c6 9a     .X...X...X..!X..
    172e:	24 58 e7 92 2a 58 ac 8a 30 58 81 89 31 58 f1 95     $X..*X..0X..1X..
    173e:	34 58 ea 8f 35 58 67 93 3a 58 e4 8d 40 58 bb 95     4X..5Xg.:X..@X..
    174e:	41 58 db 97 4a 58 f2 89 51 58 59 91 54 58 83 93     AX..JX..QXY.TX..
    175e:	57 58 68 93 58 58 84 93 59 58 b7 94 5a 58 cb 92     WXh.XX..YX..ZX..
    176e:	5e 58 c7 8d 69 58 96 89 6b 58 55 93 75 58 6f 90     ^X..iX..kXU.uXo.
    177e:	79 58 cd 9a 7e 58 6d 8f 83 58 ab 8b 93 58 e6 95     yX..~Xm..X...X..
    178e:	97 58 9d 91 9c 58 c4 92 9f 58 d0 9a a8 58 6e 96     .X...X...X...Xn.
    179e:	b3 58 ad 95 be 58 a4 8d c1 58 c7 95 c7 58 64 92     .X...X...X...Xd.
    17ae:	ca 58 f3 89 cc 58 eb 8f d5 58 88 8d eb 58 6d 8e     .X...X...X...Xm.
    17be:	ec 58 70 90 ee 58 73 91 f0 58 ba 90 f1 58 eb 88     .Xp..Xs..X...X..
    17ce:	f2 58 84 94 f7 58 d9 92 09 59 cf 95 0f 59 c4 89     .X...X...Y...Y..
    17de:	15 59 5b 97 16 59 4f 8a 19 59 67 8f 1a 59 bd 91     .Y[..YO..Yg..Y..
    17ee:	1c 59 e9 96 22 59 b2 96 27 59 e5 91 29 59 56 93     .Y.."Y..'Y..)YV.
    17fe:	2a 59 be 91 2b 59 76 95 2e 59 9b 89 31 59 b8 8e     *Y..+Yv..Y..1Y..
    180e:	37 59 ce 88 44 59 82 89 47 59 ef 8a 48 59 de 93     7Y..DY..GY..HY..
    181e:	49 59 f2 95 4f 59 74 91 51 59 5f 8c 54 59 7a 96     IY..OYt.QY_.TYz.
    182e:	57 59 85 93 65 59 9c 89 68 59 a7 8f 6a 59 44 92     WY..eY..hY..jYD.
    183e:	6e 59 b1 95 73 59 97 8f 74 59 7a 93 7d 59 44 8d     nY..sY..tYz.}YD.
    184e:	82 59 40 94 83 59 dc 94 84 59 cf 96 8a 59 44 94     .Y@..Y...Y...YD.
    185e:	93 59 57 8b 96 59 64 97 99 59 ad 96 a5 59 c3 91     .YW..Yd..Y...Y..
    186e:	a8 59 57 96 ac 59 69 93 b9 59 85 96 bb 59 c8 8d     .YW..Yi..Y...Y..
    187e:	be 59 a8 8f c9 59 6f 8e cb 59 6e 8e d0 59 b7 88     .Y...Yo..Yn..Y..
    188e:	d1 59 c6 8c d3 59 a9 90 d4 59 cf 88 e5 59 57 89     .Y...Y...Y...YW.
    189e:	e6 59 ad 8a ea 59 c3 96 eb 59 50 95 f6 59 a6 88     .Y...Y...YP..Y..
    18ae:	fb 59 f7 88 ff 59 70 8e 01 5a d0 88 03 5a a1 88     .Y...Yp..Z...Z..
    18be:	18 5a ba 96 20 5a 50 90 29 5a d8 95 2f 5a e2 8c     .Z.. ZP.)Z../Z..
    18ce:	3c 5a a9 8f 41 5a 4b 98 46 5a 6b 94 5a 5a a5 8d     <Z..AZK.FZk.ZZ..
    18de:	66 5a 77 95 7f 5a b9 96 92 5a 7d 94 9b 5a 51 95     fZw..Z...Z}..ZQ.
    18ee:	c1 5a c5 89 c9 5a b9 8e cc 5a 99 8c e1 5a 84 92     .Z...Z...Z...Z..
    18fe:	09 5b f0 8a 22 5b ec 8f 2c 5b da 92 30 5b 64 89     .[.."[..,[..0[d.
    190e:	50 5b 71 8e 54 5b 45 8d 57 5b 9a 8e 58 5b b6 91     P[q.T[E.W[..X[..
    191e:	5c 5b 79 8e 5d 5b 46 8d 5f 5b d0 96 63 5b 47 8b     \[y.][F._[..c[G.
    192e:	64 5b c7 8c 66 5b 77 8a 6b 5b b7 91 78 5b 7b 9b     d[..f[w.k[..x[{.
    193e:	85 5b ee 91 87 5b 46 89 88 5b e7 8e 89 5b c0 88     .[...[F..[...[..
    194e:	8b 5b 76 91 8c 5b ae 8a 8d 5b b3 8e 8f 5b 47 8d     .[v..[...[...[G.
    195e:	95 5b 86 93 97 5b 40 8f 98 5b af 8a 99 5b 88 92     .[...[@..[...[..
    196e:	9a 5b e8 92 9b 5b b6 88 9c 5b 58 8b 9d 5b f3 95     .[...[...[X..[..
    197e:	9f 5b c0 8e a2 5b 71 8b a3 5b e9 90 a4 5b ba 8e     .[...[q..[...[..
    198e:	a5 5b 47 97 ae 5b 7b 8b b0 5b c9 8d b3 5b 51 8a     .[G..[{..[...[Q.
    199e:	b4 5b 83 89 b5 5b aa 8f b6 5b c6 89 b9 5b 65 97     .[...[...[...[e.
    19ae:	bf 5b 68 8f c2 5b e2 8e c4 5b f1 8a c5 5b d0 93     .[h..[...[...[..
    19be:	c6 5b a7 96 cc 5b 78 95 d2 5b a6 8a d3 5b f5 8b     .[...[x..[...[..
    19ce:	db 5b b0 8a dd 5b 51 90 df 5b 40 8e e1 5b c7 89     .[...[Q..[@..[..
    19de:	e7 5b 4a 94 e9 5b 52 90 ee 5b be 97 f5 5b 9e 92     .[J..[R..[...[..
    19ee:	f8 5b a1 90 fa 5b 9b 8e fe 5b ce 91 ff 5b f5 8e     .[...[...[...[..
    19fe:	01 5c 95 95 02 5c ea 90 04 5c cb 8e 06 5c ab 8f     .\...\...\...\..
    1a0e:	09 5c d1 88 0a 5c b8 91 0b 5c 71 90 0e 5c b1 93     .\...\...\q..\..
    1a1e:	0f 5c ac 8f 11 5c ad 8f 16 5c eb 90 1a 5c ae 8f     .\...\...\...\..
    1a2e:	24 5c de 96 2d 5c c4 8b 31 5c 41 8f 3a 5c da 8e     $\..-\..1\A.:\..
    1a3e:	3b 5c 4b 90 3c 5c f2 93 3d 5c 73 90 3e 5c f6 94     ;\K.<\..=\s.>\..
    1a4e:	3f 5c 41 94 40 5c c7 8b 41 5c 9b 9b 45 5c 8f 8b     ?\A.@\..A\..E\..
    1a5e:	48 5c fc 8b 4a 5c cd 93 4b 5c ae 89 4d 5c 72 8e     H\..J\..K\..M\r.
    1a6e:	51 5c fb 8b 55 5c 57 93 5e 5c ae 91 60 5c 6a 93     Q\..U\W.^\..`\j.
    1a7e:	61 5c c6 8e 64 5c 77 91 65 5c 9a 97 6f 5c d4 93     a\..d\w.e\..o\..
    1a8e:	71 5c 52 8e 79 5c a6 9b 90 5c f2 8a a1 5c aa 89     q\R.y\...\...\..
    1a9e:	a8 5c 5a 91 a9 5c e2 8a ac 5c a6 96 b1 5c d0 91     .\Z..\...\...\..
    1aae:	b3 5c 78 8a b8 5c dd 8a e0 5c bb 93 e1 5c ac 8b     .\x..\...\...\..
    1abe:	e8 5c e3 89 ef 5c f5 95 f0 5c f4 95 f6 5c 87 93     .\...\...\...\..
    1ace:	fb 5c 73 8f 07 5d 92 90 0e 5d e8 8d 16 5d 52 8a     .\s..]...]...]R.
    1ade:	29 5d f6 95 50 5d 92 97 69 5d 93 90 6f 5d b5 8d     )]..P]..i]..o]..
    1aee:	8b 5d 88 93 ba 5d e4 97 cc 5d de 8a dd 5d ec 90     .]...]...]...]..
    1afe:	de 5d 42 8f e1 5d 84 8f e3 5d 83 91 e5 5d 48 8d     .]B..]...]...]H.
    1b0e:	e6 5d b6 8d e7 5d 49 8d e8 5d 90 8b eb 5d de 9b     .]...]I..]...]..
    1b1e:	ee 5d b7 8d f1 5d c8 8c f3 5d a4 96 f4 5d 62 94     .]...]...]...]b.
    1b2e:	f7 5d 4a 8d fb 5d aa 8a fd 5d 46 92 fe 5d d0 8b     .]J..]...]F..]..
    1b3e:	02 5e 73 8e 03 5e 7a 95 06 5e bf 94 0c 5e f3 8a     .^s..^z..^...^..
    1b4e:	16 5e 9f 92 1d 5e e9 92 25 5e 83 90 2b 5e 74 8e     .^...^..%^..+^t.
    1b5e:	2d 5e c8 90 2f 5e d1 91 30 5e 41 8b 33 5e a0 92     -^../^..0^A.3^..
    1b6e:	38 5e ed 8f 3d 5e 58 96 45 5e 9d 95 4c 5e 79 96     8^..=^X.E^..L^y.
    1b7e:	55 5e 8b 96 61 5e a6 94 63 5e bc 95 72 5e b1 8a     U^..a^..c^..r^..
    1b8e:	73 5e bd 95 74 5e 4e 94 78 5e 4b 8d 79 5e b2 8a     s^..t^N.x^K.y^..
    1b9e:	7b 5e b6 8c 7c 5e 63 97 7d 5e 48 97 7e 5e f4 8a     {^..|^c.}^H.~^..
    1bae:	81 5e a1 92 83 5e 4c 8d 84 5e af 8f 87 5e dd 94     .^...^L..^...^..
    1bbe:	8a 5e b0 8f 8f 5e 98 8f 95 5e ea 92 96 5e f7 95     .^...^...^...^..
    1bce:	97 5e 58 93 9a 5e 4d 8d 9c 5e 7b 95 a6 5e 78 93     .^X..^M..^{..^x.
    1bde:	a7 5e c0 8d ab 5e c9 8c ad 5e eb 92 b5 5e c1 88     .^...^...^...^..
    1bee:	b6 5e 8e 8f b7 5e 4e 8d b8 5e 66 97 c3 5e 70 94     .^...^N..^f..^p.
    1bfe:	c9 5e f5 97 ca 5e 4c 98 d3 5e 66 8a df 5e 5f 95     .^...^L..^f..^_.
    1c0e:	e0 5e b1 8f e2 5e 45 9c e3 5e 41 9c f6 5e 84 89     .^...^E..^A..^..
    1c1e:	f7 5e ec 92 fa 5e 9a 8c fb 5e f4 89 fc 5e 55 94     .^...^...^...^U.
    1c2e:	ff 5e f9 93 01 5f d9 95 04 5f 4d 98 0a 5f be 95     .^..._..._M.._..
    1c3e:	0d 5f af 98 0f 5f ae 8e 10 5f f3 93 13 5f 7c 8b     ._..._..._..._|.
    1c4e:	14 5f a2 92 15 5f f8 88 17 5f a4 95 18 5f 4f 8d     ._..._..._..._O.
    1c5e:	1b 5f 6f 92 1f 5f ed 92 25 5f ed 96 26 5f b7 8c     ._o.._..%_..&_..
    1c6e:	27 5f ca 8c 31 5f e3 8e 35 5f a3 92 37 5f ad 8b     '_..1_..5_..7_..
    1c7e:	3c 5f 4a 95 3e 5f 65 92 4a 5f ae 8b 53 5f 96 93     <_J.>_e.J_..S_..
    1c8e:	57 5f 61 9c 59 5f 62 9c 61 5f 63 9c 62 5f 60 8c     W_a.Y_b.a_c.b_`.
    1c9e:	66 5f 46 95 69 5f ca 8d 6a 5f 56 95 6b 5f a4 92     f_F.i_..j_V.k_..
    1cae:	6c 5f 6a 95 70 5f b2 8f 71 5f 65 89 77 5f 66 9c     l_j.p_..q_e.w_f.
    1cbe:	79 5f f0 96 7c 5f de 94 80 5f 9d 89 81 5f aa 90     y_..|_..._..._..
    1cce:	84 5f 61 8c 85 5f d2 91 8a 5f 6a 9c 8b 5f a5 97     ._a.._..._j.._..
    1cde:	8c 5f e3 8c 90 5f 99 8f 92 5f 6b 93 93 5f 5d 8f     ._..._..._k.._].
    1cee:	97 5f be 93 98 5f 70 9c a1 5f e4 8c a9 5f 9c 95     ._..._p.._..._..
    1cfe:	aa 5f 7a 8f ae 5f f7 94 b3 5f bf 93 b4 5f a5 92     ._z.._..._..._..
    1d0e:	b9 5f 4f 93 bd 5f 4a 8b c3 5f 53 90 c5 5f 4b 95     ._O.._J.._S.._K.
    1d1e:	cc 5f f5 8a cd 5f 45 94 d7 5f 75 8e d8 5f 59 96     ._..._E.._u.._Y.
    1d2e:	d9 5f 5a 96 dc 5f 9e 89 e0 5f 89 92 eb 5f f5 89     ._Z.._..._..._..
    1d3e:	f5 5f 4f 94 fd 5f 9a 8d 12 60 7b 93 16 60 7c 95     ._O.._...`{..`|.
    1d4e:	1c 60 e5 97 1d 60 76 8e 20 60 d3 91 25 60 7d 8b     .`...`v. `..%`}.
    1d5e:	27 60 ab 90 28 60 85 89 2a 60 f6 89 2f 60 af 8b     '`..(`..*`../`..
    1d6e:	4b 60 f6 97 4d 60 92 9c 50 60 b0 8b 52 60 50 8d     K`..M`..P`..R`P.
    1d7e:	55 60 9a 8f 62 60 f8 89 65 60 70 92 68 60 a6 8d     U`..b`..e`p.h`..
    1d8e:	69 60 b6 89 6b 60 98 9c 6d 60 b1 8b 6f 60 a7 91     i`..k`..m`..o`..
    1d9e:	70 60 86 8a 75 60 62 8c 89 60 bb 8e 8c 60 ee 92     p`..u`b..`...`..
    1dae:	94 60 f7 89 9f 60 e5 8c a0 60 49 97 a3 60 b3 8a     .`...`...`I..`..
    1dbe:	a6 60 78 89 a9 60 59 94 aa 60 ab 88 b2 60 df 94     .`x..`Y..`...`..
    1dce:	b6 60 e3 96 bc 60 89 93 c5 60 ee 8f c7 60 d5 93     .`...`...`...`..
    1dde:	d1 60 66 98 da 60 9b 8d dc 60 c9 90 df 60 d2 88     .`f..`...`...`..
    1dee:	e3 60 79 91 e8 60 53 8e f0 60 c4 91 f3 60 7a 91     .`y..`S..`...`z.
    1dfe:	f9 60 e4 8e 01 61 44 8f 08 61 fa 96 09 61 f9 96     .`...aD..a...a..
    1e0e:	0f 61 d3 88 1a 61 f0 8b 1b 61 a4 88 1f 61 b4 8a     .a...a...a...a..
    1e1e:	48 61 9c 8e 4b 61 d4 91 4c 61 51 8d 4e 61 54 90     Ha..Ka..LaQ.NaT.
    1e2e:	55 61 e7 95 62 61 9d 96 63 61 b5 8a 67 61 64 8c     Ua..ba..ca..gad.
    1e3e:	68 61 53 8a 6e 61 b6 97 70 61 d4 88 76 61 63 8c     haS.na..pa..vac.
    1e4e:	7e 61 7c 97 82 61 4a 97 8e 61 9e 91 90 61 f7 97     ~a|..aJ..a...a..
    1e5e:	91 61 df 9c 94 61 dc 9c a4 61 ae 95 a7 61 b2 93     .a...a...a...a..
    1e6e:	a9 61 65 8c b2 61 9b 8c b6 61 af 89 be 61 b6 8a     .ae..a...a...a..
    1e7e:	c7 61 a7 8d d0 61 f9 89 f2 61 a6 92 f8 61 9c 8c     .a...a...a...a..
    1e8e:	0a 62 e8 95 0e 62 5e 8f 10 62 ac 90 11 62 e4 89     .b...b^..b...b..
    1e9e:	12 62 fa 89 16 62 bd 88 1a 62 ca 90 1f 62 81 8c     .b...b...b...b..
    1eae:	26 62 ed 90 2e 62 43 9d 2f 62 59 8b 30 62 44 9d     &b...bC./bY.0bD.
    1ebe:	34 62 d5 91 38 62 cb 8c 3b 62 df 96 3f 62 5b 96     4b..8b..;b..?b[.
    1ece:	40 62 8a 8f 47 62 ee 90 49 62 e0 94 4b 62 e8 8e     @b..Gb..Ib..Kb..
    1ede:	4d 62 cb 8d 53 62 c5 91 55 62 a5 95 58 62 ef 91     Mb..Sb..Ub..Xb..
    1eee:	6e 62 af 95 71 62 b5 88 76 62 7d 95 79 62 e1 94     nb..qb..vb}.yb..
    1efe:	7f 62 b3 8f 80 62 5a 8b 84 62 b4 8f 8a 62 63 94     .b...bZ..b...bc.
    1f0e:	91 62 7d 97 95 62 8a 93 97 62 52 8d 98 62 dc 90     .b}..b...bR..b..
    1f1e:	9c 62 b2 94 9e 62 f0 91 ab 62 e2 94 b1 62 f8 95     .b...b...b...b..
    1f2e:	b5 62 ef 92 b9 62 95 96 bc 62 9f 89 bd 62 8a 92     .b...b...b...b..
    1f3e:	c5 62 53 92 c9 62 66 9d cd 62 8f 94 d0 62 fb 89     .bS..bf..b...b..
    1f4e:	d2 62 91 8b d3 62 f1 91 d8 62 53 8d d9 62 d9 90     .b...b...bS..b..
    1f5e:	db 62 b5 8f dd 62 71 94 e0 62 92 8b e1 62 67 8a     .b...bq..b...bg.
    1f6e:	ec 62 87 8a ed 62 40 90 f3 62 9d 8c f6 62 41 8e     .b...b@..b...bA.
    1f7e:	f7 62 89 8d fe 62 45 8f 01 63 9d 8e 07 63 77 8e     .b...bE..c...cw.
    1f8e:	09 63 c2 88 11 63 a7 92 19 63 93 8b 1f 63 b2 8b     .c...c...c...c..
    1f9e:	28 63 a5 88 2b 63 c1 8d 2f 63 55 90 3a 63 f0 92     (c..+c../cU.:c..
    1fae:	3d 63 d2 94 3f 63 7d 91 49 63 a8 91 4c 63 4a 8e     =c..?c}.Ic..LcJ.
    1fbe:	55 63 df 95 57 63 bb 92 5c 63 7b 91 67 63 f9 95     Uc..Wc..\c{.gc..
    1fce:	68 63 cc 8e 6e 63 98 90 72 63 9e 8c 77 63 b7 8f     hc..nc..rc..wc..
    1fde:	7a 63 e6 93 7b 63 50 94 83 63 7c 91 88 63 f6 8e     zc..{cP..c|..c..
    1fee:	8c 63 b6 8f 92 63 72 94 98 63 40 8c 9b 63 7c 8a     .c...cr..c@..c|.
    1ffe:	a0 63 a9 97 a1 63 cc 8d a2 63 54 92 a5 63 da 90     .c...c...cT..c..
    200e:	a7 63 54 8d a8 63 84 90 a9 63 86 89 aa 63 5b 91     .cT..c...c...c[.
    201e:	ac 63 64 8b b2 63 66 8c b4 63 cd 92 bb 63 7e 91     .cd..cf..c...c~.
    202e:	c3 63 b5 91 c4 63 89 9d c9 63 86 9d cf 63 60 95     .c...c...c...c`.
    203e:	d0 63 f1 92 d6 63 4b 97 da 63 67 97 db 63 b7 8a     .c...cK..cg..c..
    204e:	e1 63 ac 88 ee 63 f6 8a f4 63 87 89 f6 63 88 9d     .c...c...c...c..
    205e:	fa 63 68 97 0d 64 b9 91 16 64 8a 9d 2c 64 c0 94     .ch..d...d..,d..
    206e:	2d 64 8b 93 3a 64 67 8c 3e 64 ef 8d 42 64 db 90     -d..:dg.>d..Bd..
    207e:	58 64 45 93 69 64 80 96 78 64 cc 96 7a 64 a0 90     XdE.id..xd..zd..
    208e:	83 64 82 8c 92 64 54 8e 9a 64 51 94 9e 64 b3 93     .d...dT..dQ..d..
    209e:	a4 64 50 93 a5 64 9b 9d ab 64 8f 95 ad 64 64 94     .dP..d...d...dd.
    20ae:	ae 64 42 8e b0 64 ef 90 b2 64 6f 96 b9 64 68 8a     .dB..d...do..dh.
    20be:	c1 64 69 97 cd 64 80 91 e2 64 46 93 e6 64 43 8e     .di..d...dF..dC.
    20ce:	ec 64 5b 8b fe 64 ef 8f 2a 65 98 9d 2f 65 78 8e     .d[..d..*e../ex.
    20de:	39 65 fc 89 3b 65 55 8d 3e 65 fa 95 3f 65 ad 90     9e..;eU.>e..?e..
    20ee:	45 65 cc 8c 4f 65 71 95 51 65 7e 8b 57 65 73 94     Ee..Oeq.Qe~.Wes.
    20fe:	59 65 b3 8b 62 65 b8 8a 63 65 55 8e 66 65 d6 93     Ye..be..ceU.fe..
    210e:	6c 65 68 8c 70 65 94 90 74 65 ae 90 75 65 47 93     leh.pe..te..ueG.
    211e:	77 65 7e 95 87 65 b6 95 89 65 c4 90 8c 65 6b 95     we~..e...e...ek.
    212e:	8e 65 d6 8d 90 65 e3 94 91 65 c1 94 97 65 6c 93     .e...e...e...el.
    213e:	99 65 bf 97 9c 65 ce 8e a1 65 b4 88 a4 65 d2 8b     .e...e...e...e..
    214e:	a5 65 cb 90 a7 65 80 95 ac 65 61 8e ad 65 66 92     .e...e...ea..ef.
    215e:	af 65 7a 8e b0 65 56 90 b9 65 fb 95 bc 65 97 89     .ez..eV..e...e..
    216e:	bd 65 7b 8e c5 65 b7 97 cb 65 f9 90 cf 65 b0 91     .e{..e...e...e..
    217e:	d7 65 f8 8a e2 65 f9 8a e5 65 fa 93 e6 65 55 92     .e...e...e...eU.
    218e:	e7 65 8c 8b e8 65 7c 8e e9 65 81 91 ec 65 7b 8f     .e...e|..e...e{.
    219e:	ed 65 ae 88 fa 65 a0 89 02 66 56 8d 06 66 a9 8d     .e...e...fV..f..
    21ae:	07 66 b8 8f 0c 66 b9 8f 0e 66 be 96 0f 66 a8 8d     .f...f...f...f..
    21be:	13 66 d5 88 14 66 cc 90 1f 66 af 90 20 66 66 89     .f...f...f.. ff.
    21ce:	25 66 74 8f 27 66 86 96 28 66 f0 8d 2d 66 ba 8f     %ft.'f..(f..-f..
    21de:	2f 66 a5 90 34 66 e3 9d 3c 66 8b 92 42 66 9e 8e     /f..4f..<f..Bf..
    21ee:	43 66 57 8d 4b 66 57 90 52 66 4e 8e 66 66 41 8a     CfW.KfW.RfN.ffA.
    21fe:	69 66 d3 94 6e 66 81 95 6f 66 69 8c 74 66 b0 90     if..nf..ofi.tf..
    220e:	76 66 bb 8f 7a 66 71 92 81 66 c5 8b 87 66 c9 89     vf..zfq..f...f..
    221e:	91 66 8b 8f 96 66 67 92 97 66 c3 88 a2 66 a8 92     .f...fg..f...f..
    222e:	a6 66 ef 97 ab 66 62 8e ae 66 e9 95 b4 66 5c 96     .f...fb..f...f\.
    223e:	c7 66 dc 93 d9 66 8c 8f dc 66 6a 97 dd 66 98 94     .f...f...fj..f..
    224e:	f2 66 c8 8b f3 66 67 89 f4 66 58 8d f8 66 91 8f     .f...fg..fX..f..
    225e:	f9 66 82 91 fd 66 5d 91 fe 66 5c 91 ff 66 d6 91     .f...f]..f\..f..
    226e:	00 67 c5 8d 03 67 f0 98 08 67 8e 8c 09 67 4c 97     .g...g...g...gL.
    227e:	0b 67 fc 95 0d 67 9e 95 14 67 f1 8d 15 67 bd 92     .g...g...g...g..
    228e:	17 67 4e 98 1b 67 5d 96 1d 67 a9 92 1f 67 fa 8a     .gN..g]..g...g..
    229e:	28 67 d8 96 2a 67 a2 96 2b 67 96 96 2c 67 7b 96     (g..*g..+g..,g{.
    22ae:	2d 67 44 8e 31 67 e9 8e 34 67 70 96 3a 67 f7 8a     -gD.1g..4gp.:g..
    22be:	3d 67 80 8b 46 67 57 9e 49 67 99 90 4e 67 9b 97     =g..FgW.Ig..Ng..
    22ce:	4f 67 c7 88 50 67 de 8d 51 67 ba 91 53 67 db 8e     Og..Pg..Qg..Sg..
    22de:	56 67 f1 8f 5c 67 6d 93 5e 67 58 9e 5f 67 a9 91     Vg..\gm.^gX._g..
    22ee:	61 67 f0 8f 62 67 db 96 65 67 88 97 6d 67 59 8d     ag..bg..eg..mgY.
    22fe:	6f 67 74 94 71 67 8c 93 75 67 6e 8b 77 67 66 94     ogt.qg..ugn.wgf.
    230e:	7e 67 bc 8f 7f 67 c2 94 87 67 f8 94 90 67 cd 90     ~g...g...g...g..
    231e:	95 67 8d 96 97 67 d1 97 9a 67 87 96 9c 67 ca 89     .g...g...g...g..
    232e:	9d 67 7d 8e a0 67 67 98 a2 67 95 90 af 67 cd 8c     .g}..gg..g...g..
    233e:	b6 67 cb 89 c1 67 c6 91 c4 67 bf 95 ca 67 41 95     .g...g...g...gA.
    234e:	cf 67 90 94 d0 67 5e 96 d1 67 b9 8a d3 67 f5 90     .g...g^..g...g..
    235e:	d4 67 5f 8f d8 67 d1 92 da 67 4d 97 f1 67 8c 92     .g_..g...gM..g..
    236e:	f3 67 f6 96 f4 67 c4 8e f5 67 f2 8d fb 67 b8 8d     .g...g...g...g..
    237e:	fe 67 8f 96 ff 67 60 8a 02 68 cc 92 03 68 c8 93     .g...g`..h...h..
    238e:	04 68 68 89 13 68 f0 90 16 68 b2 90 17 68 49 8c     .hh..h...h...hI.
    239e:	21 68 5a 8d 22 68 9c 8a 2a 68 94 8a 34 68 f1 90     !hZ."h..*h..4h..
    23ae:	38 68 6a 8a 39 68 aa 8d 3c 68 69 8a 3d 68 cd 8d     8hj.9h..<hi.=h..
    23be:	41 68 85 8c 42 68 6a 8c 43 68 8d 93 48 68 c4 88     Ah..Bhj.Ch..Hh..
    23ce:	50 68 cb 8b 51 68 4b 8c 53 68 ba 8a 54 68 6a 8b     Ph..QhK.Sh..Thj.
    23de:	5c 68 f7 8d 5d 68 91 96 5f 68 56 8e 67 68 4f 95     \h..]h.._hV.ghO.
    23ee:	76 68 b1 89 81 68 c0 97 85 68 7e 94 93 68 b2 88     vh...h...h~..h..
    23fe:	97 68 5b 8d a2 68 bd 8f a7 68 e6 8c a8 68 9c 97     .h[..h...h...h..
    240e:	af 68 f2 92 b0 68 42 8a b1 68 ab 8d b5 68 90 9e     .h...hB..h...h..
    241e:	b6 68 81 8a bc 68 8e 93 c4 68 fc 8a c9 68 c7 96     .h...h...h...h..
    242e:	cb 68 fb 8a cd 68 9e 9e d2 68 5f 96 da 68 49 92     .h...h...h_..hI.
    243e:	df 68 8f 93 ee 68 58 90 f2 68 b1 90 fa 68 bb 8a     .h...hX..h...h..
    244e:	00 69 6f 98 05 69 d6 88 0b 69 b8 96 0d 69 41 90     .io..i...i...iA.
    245e:	0e 69 c5 92 19 69 9a 90 1b 69 91 8a 1c 69 9f 8c     .i...i...i...i..
    246e:	34 69 cc 93 3f 69 d6 92 4a 69 6b 97 53 69 96 95     4i..?i..Jik.Si..
    247e:	55 69 c8 91 5a 69 5e 91 60 69 ed 93 62 69 e8 93     Ui..Zi^.`i..bi..
    248e:	6d 69 c6 8b 6f 69 7c 8f 73 69 80 94 75 69 c9 8b     mi..oi|.si..ui..
    249e:	7c 69 4f 98 7d 69 79 8a 82 69 54 8a 8a 69 e5 8d     |iO.}iy..iT..i..
    24ae:	8e 69 7c 89 94 69 50 98 9b 69 59 90 ae 69 c4 9e     .i|..iP..iY..i..
    24be:	c7 69 a0 ea cb 69 5c 8d cc 69 c6 92 cd 69 84 91     .i...i\..i...i..
    24ce:	d8 69 6c 97 d9 69 8a 96 fb 69 ce 92 fd 69 85 91     .il..i...i...i..
    24de:	0b 6a f3 94 17 6a 94 92 19 6a 57 95 1f 6a be 8f     .j...j...jW..j..
    24ee:	21 6a cd 96 29 6a a0 8c 2a 6a a1 89 2b 6a 7e 8a     !j..)j..*j..+j~.
    24fe:	35 6a bf 8f 39 6a f7 8e 3a 6a 92 8a 3d 6a 4d 92     5j..9j..:j..=jM.
    250e:	4b 6a b4 8b 58 6a 6b 8b 59 6a f2 9e 5f 6a 40 8b     Kj..Xjk.Yj.._j@.
    251e:	61 6a c9 93 7f 6a 80 8a 80 6a 68 92 8e 6a e7 8c     aj...j...jh..j..
    252e:	ac 6a 47 9f b8 6a 45 9f bb 6a 42 9f c2 6a 44 9f     .jG..jE..jB..jD.
    253e:	d3 6a 45 98 db 6a f9 8b e8 6a a5 94 04 6b 93 97     .jE..j...j...k..
    254e:	05 6b 4f 9f 1d 6b 54 89 20 6b 87 8c 21 6b 9f 8e     .kO..kT. k..!k..
    255e:	23 6b d3 8b 27 6b a2 89 32 6b 7e 97 3a 6b 5c 8b     #k..'k..2k~.:k\.
    256e:	3d 6b d4 8b 3e 6b bc 8a 4c 6b cc 89 4e 6b 56 92     =k..>k..Lk..NkV.
    257e:	53 6b bd 8a 62 6b 7e 8e 63 6b b3 90 64 6b 9f 8d     Sk..bk~.ck..dk..
    258e:	66 6b 90 95 69 6b e0 95 6a 6b 63 98 6f 6b 95 8e     fk..ik..jkc.ok..
    259e:	73 6b ce 8d 74 6b f0 97 7b 6b 80 8e 86 6b 77 96     sk..tk..{k...kw.
    25ae:	89 6b 7d 8f 8a 6b ea 8e 8b 6b 63 8e 96 6b 42 90     .k}..k...kc..kB.
    25be:	b2 6b 72 9f b4 6b a3 89 b5 6b 69 92 ba 6b 45 8e     .kr..k...ki..kE.
    25ce:	bb 6b 6b 8a bf 6b 61 93 c5 6b 42 8b cd 6b ea 95     .kk..ka..kB..k..
    25de:	ce 6b 88 96 d2 6b c5 93 d4 6b e4 94 d8 6b f9 94     .k...k...k...k..
    25ee:	db 6b d1 96 ec 6b 7b 9f ef 6b 7e 9f 0f 6c 81 8e     .k...k{..k~..l..
    25fe:	11 6c af 96 17 6c 43 8b 23 6c 86 9f 34 6c 85 90     .l...lC.#l..4l..
    260e:	37 6c 58 95 38 6c 69 89 3e 6c c3 94 40 6c f3 92     7lX.8li.>l..@l..
    261e:	41 6c 60 8f 42 6c 81 8b 4e 6c c4 94 50 6c ac 8e     Al`.Bl..Nl..Pl..
    262e:	57 6c be 8a 5a 6c 98 89 5d 6c f0 93 5f 6c 5d 8d     Wl..Zl..]l.._l].
    263e:	60 6c 72 92 70 6c bf 91 72 6c 82 8b 7a 6c 88 8c     `lr.pl..rl..zl..
    264e:	7d 6c 44 8b 83 6c 80 97 88 6c be 92 8c 6c d7 93     }lD..l...l...l..
    265e:	93 6c 42 8c 96 6c ab 89 99 6c b9 8d a1 6c 76 96     .lB..l...l...lv.
    266e:	a2 6c f2 91 ab 6c 97 96 b3 6c cd 89 b8 6c a6 95     .l...l...l...l..
    267e:	b9 6c fb 96 bb 6c a1 8e bc 6c c0 8f bf 6c 88 89     .l...l...l...l..
    268e:	c1 6c b5 8b c9 6c f2 90 ca 6c 91 94 cc 6c e5 94     .l...l...l...l..
    269e:	d5 6c 40 96 e1 6c 41 96 e2 6c 67 94 e3 6c 83 8b     .l@..lA..lg..l..
    26ae:	e5 6c 44 93 e8 6c 8d 92 f0 6c d7 91 f3 6c 6a 89     .lD..l...l...lj.
    26be:	0b 6d 6d 97 17 6d f4 90 1b 6d 8c 97 1e 6d b4 93     .mm..m...m...m..
    26ce:	25 6d c3 92 29 6d 6b 89 2a 6d 5e 8d 32 6d 46 8f     %m..)mk.*m^.2mF.
    26de:	3b 6d 88 8a 3e 6d 68 94 41 6d ac 97 44 6d f2 8f     ;m..>mh.Am..Dm..
    26ee:	45 6d f3 90 5c 6d 6c 95 66 6d 59 89 69 6d 5f 8d     Em..\ml.fmY.im_.
    26fe:	6a 6d 51 98 6c 6d 5c 8a 6e 6d 82 95 74 6d 81 97     jmQ.lm\.nm..tm..
    270e:	77 6d 43 8a 78 6d 5a 90 88 6d c1 8f 8c 6d 4f 97     wmC.xmZ..m...mO.
    271e:	99 6d dc 97 9b 6d 93 93 9c 6d c0 93 af 6d 55 8a     .m...m...m...mU.
    272e:	b2 6d 74 89 bc 6d c1 97 c0 6d 84 97 cb 6d d2 97     .mt..m...m...m..
    273e:	d1 6d 69 8f d8 6d 91 93 e1 6d 57 92 eb 6d fa 88     .mi..m...mW..m..
    274e:	f1 6d 5b 90 f3 6d 7e 8f f5 6d a3 95 f7 6d ac 8d     .m[..m~..m...m..
    275e:	fb 6d 59 93 05 6e b4 90 07 6e 89 8a 08 6e cf 8d     .mY..n...n...n..
    276e:	09 6e c2 8f 0b 6e 61 8f 13 6e 6b 8c 1a 6e 8d 8f     .n...na..nk..n..
    277e:	1b 6e b8 8c 20 6e 94 8b 21 6e 6e 93 25 6e ad 88     .n.. n..!nn.%n..
    278e:	26 6e 51 89 29 6e b7 89 2c 6e aa 91 2f 6e 60 8d     &nQ.)n..,n../n`.
    279e:	4a 6e a9 96 56 6e ce 8c 58 6e c3 8f 5b 6e 58 92     Jn..Vn..Xn..[nX.
    27ae:	67 6e 4e 97 6f 6e 92 93 7e 6e 70 98 7f 6e bc 8e     gnN.on..~np..n..
    27be:	80 6e 9e 96 8c 6e ac 94 90 6e b9 8c 96 6e 80 8f     .n...n...n...n..
    27ce:	9c 6e ad 97 9d 6e 61 8d a2 6e ec 88 b6 6e 6e 97     .n...na..n...nn.
    27de:	ba 6e 4d 93 c5 6e c5 96 cb 6e a0 8e cc 6e fc 9f     .nM..n...n...n..
    27ee:	d1 6e 8a 8a d3 6e e6 9f dd 6e ea 91 de 6e d8 91     .n...n...n...n..
    27fe:	f2 6e f8 9f f4 6e 48 93 01 6f 99 8b 02 6f 59 95     .n...nH..o...oY.
    280e:	06 6f bd 8e 09 6f 97 8d 0f 6f 52 98 11 6f f2 9f     .o...o...oR..o..
    281e:	14 6f 89 89 15 6f 86 91 20 6f 99 94 22 6f bf 8a     .o...o.. o.."o..
    282e:	23 6f f8 97 2b 6f 9f 96 2c 6f d0 92 31 6f f9 9f     #o..+o..,o..1o..
    283e:	38 6f 51 91 45 6f c1 8a 54 6f 89 8c 5c 6f f6 90     8oQ.Eo..To..\o..
    284e:	5f 6f 83 8a 64 6f 81 8f 6e 6f aa 92 70 6f d7 92     _o..do..no..po..
    285e:	84 6f 9f 90 97 6f c0 8a a4 6f 56 e0 b1 6f 62 93     .o...o...oV..ob.
    286e:	c0 6f 83 8c c1 6f f7 91 c3 6f 5a 94 e0 6f 8a 8d     .o...o...oZ..o..
    287e:	e1 6f 47 94 eb 6f 94 97 ef 6f f3 91 15 70 6d 95     .oG..o...o...pm.
    288e:	1e 70 d2 93 26 70 95 92 27 70 eb 91 2c 70 a3 90     .p..&p..'p..,p..
    289e:	4c 70 f3 9f 58 70 e5 93 6b 70 ce 89 6f 70 94 93     Lp..Xp..kp..op..
    28ae:	70 70 44 8a 78 70 84 8b 7c 70 dc 8e 7d 70 d0 8d     ppD.xp..|p..}p..
    28be:	89 70 46 98 8a 70 86 90 8e 70 8a 89 92 70 75 e0     .pF..p...p...pu.
    28ce:	99 70 74 e0 ac 70 78 e0 ad 70 59 92 b8 70 79 e0     .pt..px..pY..py.
    28de:	b9 70 5f 93 ba 70 d7 88 c8 70 f3 97 cf 70 47 89     .p_..p...p...pG.
    28ee:	d9 70 80 e0 dd 70 7e e0 f9 70 42 96 09 71 81 e0     .p...p~..pB..q..
    28fe:	14 71 8b 89 19 71 84 e0 1a 71 b0 95 1c 71 83 e0     .q...q...q...q..
    290e:	21 71 b3 96 26 71 c5 8f 36 71 52 91 3c 71 c4 8f     !q..&q..6qR.<q..
    291e:	49 71 f9 97 4c 71 8a e0 4e 71 f7 90 59 71 8c 89     Iq..Lq..Nq..Yq..
    292e:	64 71 81 94 67 71 c6 8f 69 71 cf 94 6e 71 cf 8e     dq..gq..iq..nq..
    293e:	7d 71 f8 90 8a 71 46 8c 8f 71 8d e0 94 71 6f 97     }q...qF..q...qo.
    294e:	9f 71 6e 8f a8 71 91 e0 b1 71 4d 94 c3 71 52 94     .qn..q...qM..qR.
    295e:	c8 71 95 93 c9 71 97 e0 ce 71 99 e0 d0 71 d3 97     .q...q...q...q..
    296e:	d2 71 96 e0 d5 71 8d 89 d7 71 93 e0 e5 71 87 91     .q...q...q...q..
    297e:	e6 71 57 8e ed 71 43 90 fb 71 8e e0 06 72 9a 94     .qW..qC..q...r..
    298e:	2a 72 dc 92 2c 72 a6 e0 2d 72 a5 e0 32 72 a8 e0     *r..,r..-r..2r..
    299e:	35 72 dd 8e 36 72 83 95 3a 72 ea 96 3d 72 75 91     5r..6r..:r..=ru.
    29ae:	3e 72 a2 8e 47 72 d0 95 48 72 c5 94 4c 72 76 94     >r..Gr..Hr..Lrv.
    29be:	52 72 ab 92 59 72 e5 89 5b 72 8d 8b 5d 72 c4 96     Rr..Yr..[r..]r..
    29ce:	5f 72 b4 96 61 72 b2 89 62 72 53 98 67 72 71 96     _r..ar..brS.grq.
    29de:	69 72 a8 95 72 72 b5 90 79 72 c1 93 7d 72 a1 8c     ir..rr..yr..}r..
    29ee:	80 72 d2 8d a0 72 5d 8b ac 72 a2 8c af 72 c6 94     .r...r]..r...r..
    29fe:	b6 72 f3 8f c2 72 b6 8b d0 72 cf 8c d7 72 e7 8b     .r...r...r...r..
    2a0e:	d9 72 5f 91 db 72 9d 8d e1 72 c2 e0 e2 72 c0 e0     .r_..r...r...r..
    2a1e:	e9 72 eb 8e ec 72 c6 93 ed 72 b7 8b f8 72 4b 92     .r...r...r...rK.
    2a2e:	f9 72 c3 e0 fc 72 54 98 fd 72 82 94 1b 73 d2 96     .r...rT..r...s..
    2a3e:	1f 73 c2 97 25 73 ce e0 2a 73 96 92 2b 73 4c 94     .s..%s..*s..+sL.
    2a4e:	2e 73 a3 8c 36 73 50 97 37 73 51 97 3e 73 cf e0     .s..6sP.7sQ.>s..
    2a5e:	3f 73 8e 89 44 73 96 8d 45 73 82 8e 63 73 62 8f     ?s..Ds..Es..csb.
    2a6e:	68 73 d5 e0 70 73 d6 e0 72 73 6c 8a 84 73 ba 8c     hs..ps..rsl..s..
    2a7e:	87 73 a6 97 89 73 ca 8b 8b 73 a4 89 96 73 e8 8b     .s...s...s...s..
    2a8e:	a9 73 df 8a b2 73 e6 97 c0 73 df e0 c2 73 cf 89     .s...s...s...s..
    2a9e:	ca 73 58 8e cd 73 bf 92 e0 73 ec 8e ea 73 5d 8c     .sX..s...s...s].
    2aae:	ed 73 c7 94 fe 73 bb 8c 03 74 85 8b 06 74 9d 97     .s...s...t...t..
    2abe:	09 74 ae 97 22 74 f4 91 33 74 d4 97 34 74 d5 8b     .t.."t..3t..4t..
    2ace:	35 74 fa 94 36 74 69 94 5a 74 e8 8c 5b 74 6c 89     5t..6ti.Zt..[tl.
    2ade:	5e 74 90 90 60 74 da 97 6a 74 f3 e0 73 74 ba 8d     ^t..`t..jt..st..
    2aee:	83 74 9e 97 b0 74 c2 8a bd 74 a3 8e dc 74 5a 89     .t...t...t...tZ.
    2afe:	e2 74 5a 95 e6 74 a2 8a f6 74 72 95 11 75 99 8d     .tZ..t...tr..u..
    2b0e:	18 75 c3 8a 1a 75 72 90 1c 75 5b 93 1f 75 b6 90     .u...ur..u[..u..
    2b1e:	23 75 59 8e 25 75 99 89 26 75 53 e1 28 75 70 97     #uY.%u..&uS.(up.
    2b2e:	2b 75 e1 95 30 75 63 93 31 75 52 97 32 75 62 8d     +u..0uc.1uR.2ub.
    2b3e:	33 75 5c 90 37 75 6a 92 3a 75 ac 92 3b 75 e6 89     3u\.7uj.:u..;u..
    2b4e:	46 75 5b e1 4c 75 45 8a 4f 75 d8 88 51 75 a8 94     Fu[.LuE.Ou..Qu..
    2b5e:	54 75 c8 94 59 75 af 97 5c 75 7b 92 5d 75 a4 90     Tu..Yu..\u{.]u..
    2b6e:	60 75 a9 94 62 75 4c 95 65 75 aa 97 66 75 6c 8c     `u..buL.eu..ful.
    2b7e:	6a 75 d4 94 70 75 d9 88 73 75 f4 8f 77 75 eb 93     ju..pu..su..wu..
    2b8e:	7f 75 45 8b 8b 75 44 95 8e 75 61 91 8f 75 60 91     .uE..uD..ua..u`.
    2b9e:	91 75 5e 8b ab 75 75 89 b2 75 e6 94 b5 75 72 e1     .u^..uu..u...ur.
    2bae:	b9 75 5d 90 bd 75 73 e1 be 75 be 8e c5 75 61 95     .u]..us..u...ua.
    2bbe:	c7 75 c7 8f d2 75 79 e1 d4 75 a4 8e d5 75 ad 8d     .u...uy..u...u..
    2bce:	d8 75 97 93 db 75 c9 92 e2 75 9f 97 e9 75 89 91     .u...u...u...u..
    2bde:	f4 75 73 92 42 76 c3 97 4c 76 e0 8a 52 76 fc 96     .us.Bv..Lv..Rv..
    2bee:	56 76 c8 95 7a 76 ad 94 7b 76 6f 93 7d 76 92 94     Vv..zv..{vo.}v..
    2bfe:	7e 76 53 95 84 76 49 93 86 76 46 8a 87 76 63 8d     ~vS..vI..vF..vc.
    2c0e:	90 76 48 8e ae 76 e7 94 bf 76 4d 8e c3 76 75 94     .vH..v...vM..vu.
    2c1e:	c6 76 7e 96 c8 76 6d 89 ca 76 76 89 d7 76 90 93     .v~..vm..vv..v..
    2c2e:	db 76 b7 90 df 76 bf 96 e3 76 c4 8a e4 76 d5 94     .v...v...v...v..
    2c3e:	ee 76 da 96 f2 76 d3 96 f4 76 bc 92 f8 76 8a 91     .v...v...v...v..
    2c4e:	fe 76 82 8f 01 77 c8 8f 09 77 fb 94 0b 77 c5 8a     .v...w...w...w..
    2c5e:	0c 77 a7 8c 1f 77 5e 90 20 77 b0 96 37 77 c5 e1     .w...w^. w..7w..
    2c6e:	3a 77 ad 92 3c 77 e1 8a 40 77 85 92 61 77 87 90     :w..<w..@w..aw..
    2c7e:	63 77 c2 93 66 77 72 96 68 77 c9 e1 6b 77 ca e1     cw..fwr.hw..kw..
    2c8e:	7e 77 ce e1 91 77 d2 e1 a5 77 cb 95 ac 77 75 8f     ~w...w...w...wu.
    2c9e:	ad 77 c4 97 b3 77 b5 93 bc 77 d9 e1 db 77 b5 96     .w...w...w...w..
    2cae:	e2 77 ee 96 e5 77 6d 92 e7 77 8a 94 e9 77 e9 8b     .w...wm..w...w..
    2cbe:	ed 77 5a 92 ee 77 e2 e1 ef 77 b8 8b f3 77 ce 90     .wZ..w...w...w..
    2cce:	02 78 bb 8d 12 78 e5 e1 14 78 a4 8c 15 78 d3 8d     .x...x...x...x..
    2cde:	25 78 75 93 26 78 d4 8d 27 78 6d 8b 32 78 43 96     %xu.&x..'xm.2xC.
    2cee:	34 78 6a 94 3a 78 76 93 3f 78 7b 8d 45 78 e9 e1     4xj.:xv.?x{.Ex..
    2cfe:	5d 78 c9 8f 6b 78 b0 97 6c 78 64 8d 6f 78 a5 8c     ]x..kx..lxd.ox..
    2d0e:	72 78 a1 94 7c 78 ed e1 81 78 e9 8c 87 78 f4 92     rx..|x...x...x..
    2d1e:	8d 78 56 8a 91 78 e8 94 93 78 4f 89 95 78 ea 8d     .xV..x...xO..x..
    2d2e:	97 78 71 98 a7 78 c9 95 a9 78 d7 90 af 78 f3 e1     .xq..x...x...x..
    2d3e:	ba 78 6d 8a c1 78 a5 8e d0 78 d6 94 e8 78 81 96     .xm..x...x...x..
    2d4e:	ef 78 e9 88 01 79 ca 8f 0e 79 62 91 2b 79 49 e2     .x...y...yb.+yI.
    2d5e:	3a 79 a6 8e 3c 79 e7 97 3e 79 d0 8e 40 79 4a e2     :y..<y..>y..@yJ.
    2d6e:	41 79 56 8c 47 79 5f 8b 48 79 46 8b 49 79 83 8e     AyV.Gy_.HyF.Iy..
    2d7e:	50 79 53 97 53 79 50 e2 56 79 63 91 57 79 4c e2     PyS.SyP.Vyc.WyL.
    2d8e:	5d 79 6a 8f 5e 79 5f 90 5f 79 4d e2 60 79 4b e2     ]yj.^y_._yM.`yK.
    2d9e:	62 79 49 94 65 79 cb 8f 68 79 5b 95 6d 79 d5 8d     byI.ey..hy[.my..
    2dae:	77 79 98 93 81 79 d6 8b 84 79 5c 98 85 79 54 91     wy...y...y\..yT.
    2dbe:	8a 79 53 e2 8d 79 d0 89 8e 79 f5 92 8f 79 9f 95     .yS..y...y...y..
    2dce:	a6 79 9a 8b b0 79 48 94 bd 79 d7 8b be 79 d1 89     .y...yH..y...y..
    2dde:	bf 79 c3 93 c0 79 47 8f c1 79 84 8e cb 79 48 8f     .y...yG..y...yH.
    2dee:	d1 79 c8 89 d2 79 62 95 d8 79 e9 94 df 79 64 91     .y...yb..y...yd.
    2dfe:	e4 79 89 94 e6 79 60 90 e9 79 81 92 f0 79 cc 8f     .y...y`..y...y..
    2e0e:	fb 79 da 88 00 7a 48 8b 0b 7a f6 92 0e 7a c5 90     .y...zH..z...z..
    2e1e:	14 7a ab 96 17 7a 42 95 1a 7a 74 92 1c 7a c5 97     .z...zB..zt..z..
    2e2e:	1f 7a 67 e2 2e 7a ed 8e 32 7a ee 88 3c 7a d2 89     .zg..z..2z..<z..
    2e3e:	3d 7a 6d 8c 3f 7a 65 8d 40 7a 92 8d 42 7a e4 95     =zm.?ze.@z..Bz..
    2e4e:	46 7a 73 96 4d 7a cf 90 4e 7a 6e 89 4f 7a b8 89     Fzs.Mz..Nzn.Oz..
    2e5e:	50 7a aa 88 57 7a 6e e2 63 7a f5 8f 6b 7a 6e 8a     Pz..Wzn.cz..kzn.
    2e6e:	74 7a 8a 8c 76 7a 86 8b 7a 7a f3 8b 7f 7a fa 90     tz..vz..zz...z..
    2e7e:	81 7a cb 93 83 7a de 90 84 7a f3 8d 92 7a 82 92     .z...z...z...z..
    2e8e:	93 7a 8b 91 9f 7a 41 8c aa 7a 45 8c ae 7a 87 8b     .z...zA..zE..z..
    2e9e:	af 7a 71 97 ba 7a 4d 89 c3 7a 96 8a cb 7a a7 97     .zq..zM..z...z..
    2eae:	dc 7a b3 97 e0 7a cd 8f e3 7a 76 8f e5 7a b6 93     .z...z...zv..z..
    2ebe:	ea 7a 47 92 ef 7a 5b 92 f6 7a a3 8b f9 7a 7c 92     .zG..z[..z...z|.
    2ece:	fa 7a b1 8e ff 7a c6 8a 08 7b 88 8b 11 7b ce 8f     .z...z...{...{..
    2ede:	1b 7b 4a 93 20 7b 7d 8a 25 7b 79 90 26 7b 84 95     .{J. {}.%{y.&{..
    2eee:	2c 7b e6 91 39 7b f9 8d 46 7b 4d 95 48 7b a4 94     ,{..9{..F{M.H{..
    2efe:	49 7b 99 93 4b 7b d8 8b 4d 7b a1 e2 4f 7b b3 94     I{..K{..M{..O{..
    2f0e:	50 7b 9e e2 51 7b 7d 92 52 7b 9b 93 54 7b 9a 93     P{..Q{}.R{..T{..
    2f1e:	56 7b f4 8d 86 7b cd 95 87 7b d3 89 8b 7b b3 e2     V{...{...{...{..
    2f2e:	92 7b b4 e2 94 7b 93 94 95 7b a5 96 97 7b 5a 8e     .{...{...{...{Z.
    2f3e:	a1 7b c7 8a aa 7b 5c 92 ad 7b fb 90 b1 7b a0 94     .{...{\..{...{..
    2f4e:	b8 7b a2 94 c0 7b df 90 c4 7b cd 94 c7 7b d1 95     .{...{...{...{..
    2f5e:	c9 7b 7a 92 e0 7b c2 8e e4 7b c4 93 ed 7b 55 98     .{z..{...{...{U.
    2f6e:	21 7c c8 8a 38 7c f4 94 3e 7c fa 97 3f 7c eb 95     !|..8|..>|..?|..
    2f7e:	4d 7c d0 90 73 7c c4 95 7e 7c e0 96 81 7c cc 8b     M|..s|..~|...|..
    2f8e:	82 7c 48 8c 89 7c b2 95 8b 7c 88 90 8d 7c ae 96     .|H..|...|...|..
    2f9e:	92 7c b1 97 95 7c 94 94 97 7c 65 91 98 7c 53 94     .|...|...|e..|S.
    2fae:	9b 7c 6c 8f 9f 7c be 88 a5 7c 9f 8a a7 7c cf 8f     .|l..|...|...|..
    2fbe:	bd 7c ee e2 be 7c b8 90 c0 7c ef e2 ca 7c d0 8c     .|...|...|...|..
    2fce:	ce 7c 57 91 d6 7c 9c 93 de 7c b3 95 df 7c 8c 91     .|W..|...|...|..
    2fde:	e0 7c 66 8d e7 7c c6 97 f8 7c 85 8e fb 7c 6e 8c     .|f..|...|...|n.
    2fee:	fe 7c 8a 8b 00 7d 49 8b 04 7d f1 96 05 7d 67 8d     .|...}I..}...}g.
    2ffe:	0b 7d e4 96 0d 7d 5b 94 10 7d 52 95 14 7d 83 8f     .}...}[..}R..}..
    300e:	17 7d d1 8e 18 7d 68 8d 19 7d 86 8e 1a 7d 89 8b     .}...}h..}...}..
    301e:	1b 7d b4 95 20 7d 66 91 21 7d 61 96 22 7d f5 8d     .}.. }f.!}a."}..
    302e:	2b 7d 87 8e 2c 7d db 92 2f 7d dd 97 30 7d d7 8d     +}..,}../}..0}..
    303e:	33 7d 61 90 39 7d d0 8f 3a 7d ae 8d 42 7d 49 8f     3}a.9}..:}..B}I.
    304e:	43 7d bc 8c 44 7d 67 91 46 7d 4a e3 4c 7d 6f 8c     C}..D}g.F}J.L}o.
    305e:	50 7d 8b 8c 5e 7d 69 8d 61 7d 8d 97 62 7d ba 88     P}..^}i.a}..b}..
    306e:	66 7d 8b 8b 68 7d 4f e3 71 7d 9d 93 75 7d 47 8a     f}..h}O.q}..u}G.
    307e:	76 7d e2 90 79 7d a6 8c 99 7d 70 8c 9a 7d b1 91     v}..y}...}p..}..
    308e:	9c 7d 8e 91 ac 7d f8 8e ad 7d db 88 b1 7d 6a 8d     .}...}...}...}j.
    309e:	b2 7d d4 96 b4 7d d4 92 bb 7d 5d 92 be 7d bb 88     .}...}...}]..}..
    30ae:	bf 7d c8 96 ca 7d d9 8b cb 7d ea 94 cf 7d 8d 91     .}...}...}...}..
    30be:	d1 7d ce 97 d2 7d 8f 8f da 7d fc 90 e0 7d f7 92     .}...}...}...}..
    30ce:	e8 7d d2 95 e9 7d c9 8a ec 7d c9 96 ef 7d dc 88     .}...}...}...}..
    30de:	f4 7d fb 97 fb 7d 6b e3 01 7e 8f 89 04 7e ea 93     .}...}k..~...~..
    30ee:	0a 7e 6f e3 1b 7e 9b 94 1e 7e c8 8e 23 7e 70 e3     .~o..~...~..#~p.
    30fe:	26 7e 63 8f 2b 7e 44 96 2e 7e 6b 8f 3e 7e d1 90     &~c.+~D..~k.>~..
    310e:	41 7e c9 94 4a 7e 40 91 4b 7e 71 8c 4d 7e 4a 8f     A~..J~@.K~q.M~J.
    311e:	54 7e 44 90 55 7e 55 91 6d 7e 9a 96 70 7e 4a 8c     T~D.U~U.m~..p~J.
    312e:	82 7e 5b 8e 8f 7e 5a 93 36 7f ca 8a 6a 7f df 8d     .~[..~Z.6...j...
    313e:	6b 7f 72 8c 6e 7f 75 92 70 7f b1 94 72 7f 90 8f     k.r.n.u.p...r...
    314e:	75 7f 6c 94 77 7f eb 94 85 7f 85 97 8a 7f 72 97     u.l.w.........r.
    315e:	8e 7f fc 94 a4 7f 51 8c a8 7f 41 91 a9 7f 60 8b     ......Q...A...`.
    316e:	bd 7f 48 89 c1 7f a5 89 c5 7f c0 e3 c6 7f c1 e3     ..H.............
    317e:	cc 7f 82 97 d2 7f 4b 8f d4 7f c4 e3 e0 7f 89 90     ......K.........
    318e:	e6 7f c6 e3 eb 7f e3 8a f0 7f cb 8a fb 7f 7c 96     ..............|.
    319e:	fc 7f 83 97 00 80 73 97 01 80 56 98 03 80 6c 8d     ......s...V...l.
    31ae:	05 80 d2 8e 0c 80 a7 8e 10 80 cf 91 12 80 ce e3     ................
    31be:	15 80 6b 8d 17 80 d5 96 33 80 a8 8e 36 80 eb 96     ..k.....3...6...
    31ce:	3d 80 5e 92 4a 80 d6 e3 56 80 b9 90 5a 80 da e3     =.^.J...V...Z...
    31de:	5e 80 b7 95 61 80 8f 91 6f 80 fc 97 73 80 de e3     ^...a...o...s...
    31ee:	74 80 ae 92 76 80 e1 e3 77 80 45 90 7e 80 57 98     t...v...w.E.~.W.
    31fe:	87 80 a3 94 89 80 f7 93 8b 80 5d 98 8c 80 a7 94     ..........].....
    320e:	96 80 d1 8f 98 80 49 95 9b 80 e8 e3 9d 80 cc 8a     ......I.........
    321e:	a1 80 d2 8c a2 80 88 8e a5 80 ec 94 a9 80 a8 8c     ................
    322e:	aa 80 62 96 af 80 6d 8d b1 80 6e 8d b2 80 e7 88     ..b...m...n.....
    323e:	b4 80 e6 8d ba 80 78 94 c3 80 dd 88 c6 80 5f 92     ......x......._.
    324e:	cc 80 77 94 ce 80 d9 91 da 80 f3 e3 de 80 45 96     ..w...........E.
    325e:	e1 80 d3 8c e4 80 fb 88 f1 80 f7 e3 f4 80 b7 93     ................
    326e:	f8 80 b9 8b fd 80 5c 94 02 81 89 8e 05 81 ba 8b     ......\.........
    327e:	06 81 c6 90 07 81 65 98 08 81 ac 96 0a 81 d2 90     ......e.........
    328e:	1a 81 72 8b 31 81 45 92 33 81 5d 94 39 81 af 92     ..r.1.E.3.].9...
    329e:	4b 81 fc e3 4e 81 74 90 50 81 85 95 54 81 6f 8d     K...N.t.P...T.o.
    32ae:	55 81 72 98 5f 81 54 e4 6b 81 ee 8e 70 81 98 8d     U.r._.T.k...p...
    32be:	78 81 b0 92 79 81 a0 95 7a 81 42 91 7f 81 da 91     x...y...z.B.....
    32ce:	8f 81 70 8d 9a 81 86 95 9c 81 8c 96 9d 81 47 95     ..p...........G.
    32de:	a0 81 50 e4 a8 81 63 96 b3 81 56 91 b5 81 58 e4     ..P...c...V...X.
    32ee:	bf 81 5e 94 c6 81 b0 89 d3 81 9f 91 e3 81 62 90     ..^...........b.
    32fe:	e5 81 e7 89 e8 81 d5 97 ea 81 a9 8e ed 81 4c 8f     ..............L.
    330e:	f3 81 8a 8e f4 81 76 92 fc 81 50 89 08 82 bb 8b     ......v...P.....
    331e:	0c 82 e3 90 0e 82 c9 8e 10 82 72 e4 17 82 dc 95     ..........r.....
    332e:	18 82 da 8a 1b 82 43 91 1c 82 77 8f 1e 82 91 95     ......C...w.....
    333e:	1f 82 4d 8f 2a 82 71 8d 2c 82 ca 94 35 82 c7 91     ..M.*.q.,...5...
    334e:	36 82 95 94 37 82 bd 8c 39 82 44 91 47 82 f8 92     6...7...9.D.G...
    335e:	5a 82 7c e4 64 82 7e e4 66 82 cd 8a 6e 82 af 8d     Z.|.d.~.f...n...
    336e:	6f 82 c7 97 72 82 46 90 76 82 90 89 8b 82 f0 88     o...r.F.v.......
    337e:	99 82 87 95 9d 82 c5 8e a5 82 48 8a a6 82 b0 88     ..........H.....
    338e:	ad 82 6d 94 af 82 63 90 b1 82 d4 89 b3 82 46 96     ..m...c.......F.
    339e:	b8 82 7c 8c b9 82 da 8b bd 82 e8 89 c5 82 a1 8a     ..|.............
    33ae:	d1 82 91 89 d3 82 e8 97 d4 82 db 91 d7 82 63 95     ..............c.
    33be:	db 82 d5 89 e5 82 e1 8e e6 82 ea 8b e7 82 97 92     ................
    33ce:	eb 82 cf 93 f1 82 70 89 fa 82 95 e4 02 83 ce 96     ......p.........
    33de:	04 83 d6 89 05 83 9d 8a 0e 83 73 8c 1c 83 a9 88     ..........s.....
    33ee:	28 83 ef 88 2b 83 a9 e4 34 83 a0 e4 36 83 83 92     (...+...4...6...
    33fe:	38 83 f9 91 39 83 a5 e4 40 83 a4 e4 49 83 90 91     8...9...@...I...
    340e:	4a 83 74 8c 4f 83 60 89 52 83 72 8d 58 83 91 91     J.t.O.`.R.r.X...
    341e:	77 83 d7 89 7b 83 ac 89 9e 83 ce 8a a2 83 b0 e4     w...{...........
    342e:	ab 83 9c 94 b1 83 89 97 c5 83 9b 90 ca 83 65 8b     ..............e.
    343e:	cc 83 db 8b d3 83 d9 89 d6 83 d2 8f dc 83 d8 8d     ................
    344e:	df 83 70 93 e9 83 ec 95 ef 83 d8 89 f0 83 d4 8c     ..p.............
    345e:	f1 83 48 95 04 84 b8 93 0c 84 47 96 0e 84 de 88     ..H.......G.....
    346e:	29 84 8b 94 31 84 9e 8a 3d 84 8e 97 49 84 74 97     )...1...=...I.t.
    347e:	4e 84 a8 97 57 84 98 92 5b 84 8b 8a 61 84 92 95     N...W...[...a...
    348e:	63 84 9f 93 66 84 af 88 6c 84 92 91 71 84 4b 94     c...f...l...q.K.
    349e:	75 84 a8 88 7a 84 98 95 8b 84 d3 8f 90 84 4e 8f     u...z.........N.
    34ae:	94 84 aa 8e 99 84 d6 96 9c 84 66 95 9f 84 e5 e4     ..........f.....
    34be:	b2 84 97 8a b8 84 f6 8f bb 84 e8 e4 bc 84 93 91     ................
    34ce:	c4 84 7e 92 c9 84 75 97 cb 84 57 8a d1 84 aa 96     ..~...u...W.....
    34de:	ec 84 48 96 ee 84 40 98 00 85 c1 8e 11 85 cc 95     ..H...@.........
    34ee:	13 85 a0 96 1a 85 55 89 26 85 d3 92 2d 85 fc 88     ......U.&...-...
    34fe:	35 85 a0 91 3d 85 c1 95 43 85 d7 94 49 85 d4 8f     5...=...C...I...
    350e:	4a 85 c7 8e 4e 85 bc 8b 57 85 99 95 68 85 6e 98     J...N...W...h.n.
    351e:	69 85 a0 93 6a 85 93 95 7e 85 51 e5 84 85 96 94     i...j...~.Q.....
    352e:	97 85 92 89 99 85 e3 93 a6 85 45 91 a9 85 46 8e     ..........E...F.
    353e:	aa 85 64 90 ab 85 4f 8c ac 85 f2 96 ae 85 f7 96     ..d...O.........
    354e:	af 85 92 8f c1 85 6d 98 cd 85 95 97 e4 85 a1 93     ......m.........
    355e:	e9 85 cb 94 f7 85 93 8f fb 85 94 91 07 86 68 91     ..............h.
    356e:	2d 86 96 97 4e 86 d5 8c 50 86 73 8b 5a 86 95 8b     -...N...P.s.Z...
    357e:	5c 86 b8 97 5e 86 f1 8b 6b 86 8e 92 79 86 f8 93     \...^...k...y...
    358e:	7b 86 b8 88 8a 86 e1 89 95 86 5c 8e a4 86 61 94     {.........\...a.
    359e:	c7 86 d6 8e cb 86 60 92 cd 86 75 8c ce 86 61 8a     ......`...u...a.
    35ae:	d9 86 5e 8a db 86 81 e5 e4 86 b8 94 ed 86 67 95     ..^...........g.
    35be:	ee 86 d8 94 f8 86 fb 91 f9 86 8c e5 fe 86 e9 89     ................
    35ce:	02 87 49 96 18 87 77 92 1c 87 a8 96 49 87 e4 90     ..I...w.....I...
    35de:	4b 87 58 98 55 87 49 90 66 87 da 89 76 87 b1 92     K.X.U.I.f...v...
    35ee:	7f 87 88 94 82 87 a5 e5 8d 87 5a 97 a2 87 a3 e5     ..........Z.....
    35fe:	ba 87 86 97 f2 87 b3 e5 f9 87 49 8a fb 87 61 8b     ..........I...a.
    360e:	05 88 a2 e5 22 88 bf e5 40 88 8c 8c 46 88 4f 8f     ...."...@...F.O.
    361e:	4c 88 73 8d 53 88 70 8f 57 88 58 8a 5b 88 71 89     L.s.S.p.W.X.[.q.
    362e:	5d 88 d5 8f 61 88 74 8d 63 88 df 88 68 88 5c 95     ]...a.t.c...h.\.
    363e:	70 88 8a 90 77 88 8f 92 7f 88 dc 8b 88 88 55 8c     p...w.........U.
    364e:	8b 88 dc 91 96 88 b3 91 a2 88 d9 e5 ab 88 ed 94     ................
    365e:	b4 88 d1 8c b7 88 bf 88 c1 88 d9 8d c2 88 f4 97     ................
    366e:	c5 88 95 91 cf 88 a0 97 d4 88 e1 e5 d5 88 54 97     ..............T.
    367e:	dc 88 e2 95 df 88 be 8d e1 88 a1 97 f3 88 d6 8f     ................
    368e:	f8 88 87 97 fd 88 bb 90 fe 88 9e 90 07 89 a1 95     ................
    369e:	10 89 8c 8a 12 89 4a 96 1d 89 fa e5 56 89 a6 89     ......J.....V...
    36ae:	5e 89 fc e5 5f 89 dd 8b 66 89 40 e6 72 89 50 8f     ^..._...f.@.r.P.
    36be:	77 89 46 e6 7f 89 bc 90 81 89 76 97 86 89 a2 95     w.F.......v.....
    36ce:	87 89 65 94 8b 89 a9 8c 8f 89 4b 8b 96 89 8b 8e     ..e.......K.....
    36de:	97 89 60 94 9a 89 6f 8a a7 89 97 97 aa 89 65 90     ..`...o.......e.
    36ee:	b3 89 cf 8a d2 89 70 8a e3 89 f0 89 e6 89 47 90     ......p.......G.
    36fe:	00 8a be 8c 02 8a f9 92 08 8a 76 8c 0a 8a 75 90     ..........v...u.
    370e:	0e 8a a2 93 13 8a 50 8c 17 8a f5 91 18 8a 4c 8b     ......P.......L.
    371e:	1b 8a 61 e6 1d 8a 62 e6 1f 8a d7 8f 23 8a 8d 8c     ..a...b.....#...
    372e:	2a 8a 4b 96 2d 8a dd 90 31 8a 96 8b 33 8a f3 96     *.K.-...1...3...
    373e:	34 8a 69 91 36 8a 64 e6 3a 8a 66 90 3b 8a 90 92     4.i.6.d.:.f.;...
    374e:	3c 8a d8 8f 50 8a bc 8d 51 8a c0 91 54 8a d9 8f     <...P...Q...T...
    375e:	55 8a 5d 95 5e 8a 8c 8e 60 8a 72 89 63 8a 77 8c     U.].^...`.r.c.w.
    376e:	66 8a 8e 8e 69 8a 8d 8e 6b 8a 6c 98 6e 8a 46 91     f...i...k.l.n.F.
    377e:	70 8a 6c 8b 71 8a 62 98 72 8a 59 8a 73 8a da 8f     p.l.q.b.r.Y.s...
    378e:	87 8a d6 8c 89 8a 5f 97 8c 8a 8f 8e 8d 8a 46 94     ......_.......F.
    379e:	93 8a be 90 95 8a 61 92 98 8a 55 97 9e 8a ea 8c     ......a...U.....
    37ae:	a0 8a bd 90 a4 8a eb 8c ac 8a e0 90 ad 8a c7 93     ................
    37be:	b0 8a 4e 92 b2 8a db 89 b9 8a ee 94 bc 8a 62 8b     ..N...........b.
    37ce:	bf 8a b2 92 c7 8a 6b 92 cb 8a bf 90 cc 8a d0 8a     ......k.........
    37de:	cd 8a 79 e6 cf 8a 7a 90 d2 8a c8 97 d6 8a 5f 98     ..y...z......._.
    37ee:	dc 8a b3 92 e6 8a fa 92 e7 8a 7e e6 eb 8a 7c e6     ..........~...|.
    37fe:	ed 8a 40 97 ee 8a 90 8e f8 8a 94 8f fa 8a bf 8c     ..@.............
    380e:	fe 8a f8 91 00 8b 64 96 01 8b 79 89 02 8b e0 88     ......d...y.....
    381e:	04 8b a3 93 0e 8b e4 93 19 8b aa 8c 1b 8b 75 8d     ..............u.
    382e:	1d 8b d3 8e 21 8b 77 97 2c 8b 54 95 33 8b 90 e6     ....!.w.,.T.3...
    383e:	39 8b de 8b 49 8b 9a e6 58 8b af 8e 5c 8b 88 95     9...I...X...\...
    384e:	66 8b 78 8c 70 8b 63 8b 72 8b f7 8f 77 8b ec 8c     f.x.p.c.r...w...
    385e:	83 8b 5d 8e 90 8b 51 8f 37 8c 4a 92 46 8c a4 93     ..]...Q.7.J.F...
    386e:	4a 8c 4c 96 5a 8c d8 93 61 8c db 8f 6a 8c 8b 8d     J.L.Z...a...j...
    387e:	79 8c 5e 95 8c 8c 65 96 9d 8c 4c 8a 9e 8c e5 92     y.^...e...L.....
    388e:	a0 8c 89 95 a1 8c e0 8d a2 8c 76 8d a7 8c 6e 95     ..........v...n.
    389e:	a8 8c dd 89 a9 8c cc 94 ab 8c d1 8a ac 8c d3 90     ................
    38ae:	af 8c 99 92 b0 8c e1 96 b4 8c 4d 8b b6 8c c8 e6     ..........M.....
    38be:	b7 8c 83 94 b8 8c dd 91 bb 8c ef 94 bc 8c 5c 93     ..............\.
    38ce:	bf 8c 66 96 c0 8c ea 89 c2 8c 47 98 c3 8c c0 92     ..f.......G.....
    38de:	c4 8c 64 98 c7 8c 91 8e ca 8c af 91 ce 8c 47 91     ..d...........G.
    38ee:	d1 8c f6 93 d3 8c 6f 95 db 8c 5e 8e dc 8c 92 8e     ......o...^.....
    38fe:	de 8c dc 8f e0 8c 85 94 e2 8c ab 8c e6 8c 8a 95     ................
    390e:	ea 8c bf 8e ed 8c 71 93 fc 8c 77 8d 04 8d d1 e6     ......q...w.....
    391e:	05 8d d2 e6 08 8d a1 91 0b 8d e4 8a 14 8d db e6     ................
    392e:	64 8d d4 90 66 8d cd 8e 6b 8d 71 8a 70 8d 96 91     d...f...k.q.p...
    393e:	74 8d 8b 95 77 8d 4e 8b 85 8d b4 92 8a 8d 7a 89     t...w.N.......z.
    394e:	a3 8d ef 8e a8 8d 96 90 b3 8d ab 91 be 8d e4 e6     ................
    395e:	cb 8d eb e6 dd 8d 97 8b e1 8d d5 90 e8 8d d7 8c     ................
    396e:	ea 8d ec e6 ef 8d 48 98 f3 8d b5 92 f5 8d 48 91     ......H.......H.
    397e:	0a 8e 78 97 0f 8e a5 93 35 8e f9 e6 42 8e f8 e6     ..x.....5...B...
    398e:	44 8e fb 92 5f 8e d6 90 74 8e 52 8f 8d 8e f4 96     D..._...t.R.....
    399e:	ab 8e 67 90 af 8e eb 8b be 8e 5e e7 ca 8e d4 8e     ..g.......^.....
    39ae:	cb 8e 61 e7 cc 8e 4f 8b cd 8e 52 8c d2 8e ac 8c     ..a...O...R.....
    39be:	df 8e ee 93 e2 8e 5d 93 f8 8e b2 8e fd 8e 79 8c     ......].......y.
    39ce:	03 8f 72 8a 09 8f da 8d 0c 8f 71 e7 14 8f e3 95     ..r.......q.....
    39de:	1d 8f 50 8b 29 8f 79 94 2a 8f d6 97 2f 8f 53 8f     ..P.).y.*.../.S.
    39ee:	33 8f 73 e7 38 8f 41 97 3b 8f 74 e7 3f 8f 60 97     3.s.8.A.;.t.?.`.
    39fe:	44 8f 8d 8a 4d 8f 51 93 5f 8f 8c 8d 61 8f 44 8c     D...M.Q._...a.D.
    3a0e:	62 8f 80 e7 9b 8f 68 90 9e 8f ab 8e a3 8f 85 e7     b.....h.........
    3a1e:	b0 8f 43 92 b1 8f 4a 90 b2 8f 5f 94 ba 8f d3 95     ..C...J..._.....
    3a2e:	bb 8f d2 92 bc 8f 9e 8d bf 8f 48 92 c2 8f 49 89     ..........H...I.
    3a3e:	c4 8f 98 96 c5 8f 76 90 ce 8f 7d 8c d1 8f df 8b     ......v...}.....
    3a4e:	d4 8f d4 95 e6 8f de 89 e9 8f f4 93 eb 8f 97 94     ................
    3a5e:	ed 8f 52 93 f0 8f 71 8f f7 8f c0 96 fd 8f c7 92     ..R...q.........
    3a6e:	00 90 de 91 01 90 97 91 03 90 a6 93 06 90 74 8b     ..............t.
    3a7e:	0f 90 a7 93 10 90 80 92 13 90 fc 92 14 90 72 93     ..............r.
    3a8e:	17 90 80 90 19 90 87 94 1a 90 ca 92 1d 90 c0 90     ................
    3a9e:	1f 90 ac 91 20 90 a2 91 22 90 a7 88 23 90 41 98     .... ..."...#.A.
    3aae:	2e 90 df 91 31 90 54 8f 32 90 69 90 38 90 ed 88     ....1.T.2.i.8...
    3abe:	3c 90 4e 95 41 90 d9 93 42 90 8b 90 45 90 78 92     <.N.A...B...E.x.
    3ace:	47 90 f6 8b 4a 90 56 97 4b 90 5e 89 4d 90 d5 95     G...J.V.K.^.M...
    3ade:	4e 90 df 89 53 90 b9 93 54 90 42 92 55 90 e1 88     N...S...T.B.U...
    3aee:	59 90 a1 ea 5c 90 bb 91 60 90 93 89 61 90 6b 91     Y...\...`...a.k.
    3afe:	63 90 ad 8c 65 90 79 97 69 90 4b 93 6d 90 98 91     c...e.y.i.K.m...
    3b0e:	6e 90 d5 8e 75 90 85 8f 77 90 4a 91 78 90 49 91     n...u...w.J.x.I.
    3b1e:	7a 90 e2 88 7c 90 c9 97 7f 90 f0 94 84 90 d2 8a     z...|...........
    3b2e:	91 90 57 97 a3 90 df 93 a6 90 4d 96 aa 90 d7 8e     ..W.......M.....
    3b3e:	b8 90 40 93 c1 90 e8 88 ca 90 78 8d ce 90 59 98     ..@.......x...Y.
    3b4e:	e1 90 53 8c e8 90 94 95 ed 90 73 8a f5 90 58 97     ..S.......s...X.
    3b5e:	f7 90 bd 8b fd 90 73 93 2d 91 41 93 49 91 d1 93     ......s.-.A.I...
    3b6e:	4b 91 55 8f 4c 91 de 8e 4d 91 7a 94 4e 91 91 92     K.U.L...M.z.N...
    3b7e:	52 91 f0 8e 54 91 8c 90 62 91 7c 90 6a 91 8f 97     R...T...b.|.j...
    3b8e:	6c 91 56 8f 75 91 79 8d 77 91 93 8d 78 91 5f 8e     l.V.u.y.w...x._.
    3b9e:	87 91 86 8f 8d 91 e7 91 90 91 ed 8c 92 91 c1 90     ................
    3bae:	97 91 ae 94 9c 91 58 8f a4 91 dd 8f b8 91 f8 8f     ......X.........
    3bbe:	c6 91 ce 94 c7 91 d1 8d c8 91 df 8e cc 91 a2 97     ................
    3bce:	cd 91 64 8f ce 91 ec 96 cf 91 ca 97 d1 91 e0 8b     ..d.............
    3bde:	d8 91 42 93 dc 91 98 8a dd 91 6a 90 e3 91 de 92     ..B.......j.....
    3bee:	e6 91 74 96 e7 91 fa 8b 0d 92 dd 93 0e 92 62 8a     ..t...........b.
    3bfe:	34 92 e9 97 37 92 d8 8c 44 92 53 93 5b 92 94 89     4...7...D.S.[...
    3c0e:	62 92 ab 94 66 92 de 8f 71 92 7a 8d 7e 92 67 96     b...f...q.z.~.g.
    3c1e:	80 92 e2 8b 83 92 65 8f 85 92 ba 93 91 92 4c 91     ......e.......L.
    3c2e:	98 92 c1 96 9a 92 b6 92 9b 92 f3 e7 ad 92 4b 91     ..............K.
    3c3e:	cf 92 f5 e7 d2 92 4e 96 e4 92 9b 8f ea 92 dd 95     ......N.........
    3c4e:	ed 92 73 89 f2 92 65 95 f3 92 92 92 f8 92 98 8b     ..s...e.........
    3c5e:	fc 92 7c 8d 06 93 4b 8e 10 93 8d 90 18 93 8e 90     ..|...K.........
    3c6e:	20 93 f9 8f 26 93 d1 8b 28 93 64 95 2b 93 e0 8e      ...&...(.d.+...
    3c7e:	2c 93 42 98 2f 93 f6 8d 32 93 5e 98 4b 93 e7 93     ,.B./...2.^.K...
    3c8e:	4d 93 74 93 54 93 d5 92 5b 93 62 92 6c 93 4c 8c     M.t.T...[.b.l.L.
    3c9e:	75 93 ae 8c 7e 93 df 8f 8c 93 99 8a 96 93 bd 8d     u...~...........
    3cae:	97 93 99 91 9a 93 c8 92 a7 93 5a 8a ae 93 c1 92     ..........Z.....
    3cbe:	b9 93 50 e8 c3 93 56 e8 d1 93 4c 93 dd 93 57 e8     ..P...V...L...W.
    3cce:	e1 93 be 8b e8 93 53 e8 18 94 e0 8f 19 94 a8 93     ......S.........
    3cde:	38 94 f6 91 51 94 d3 8a 53 94 f8 96 77 95 b7 92     8...Q...S...w...
    3cee:	80 95 e5 96 83 95 4d 91 89 95 c2 95 8b 95 4a 8a     ......M.......J.
    3cfe:	8f 95 5b 89 91 95 d5 8a 93 95 d4 8a a2 95 d6 8a     ..[.............
    3d0e:	a3 95 74 8a a4 95 7d 8d a5 95 b4 94 b2 95 7b 89     ..t...}.......{.
    3d1e:	c7 95 c5 88 d8 95 ac 93 1c 96 8c 95 2a 96 e3 8d     ............*...
    3d2e:	32 96 68 96 3b 96 6a 91 3f 96 a2 88 40 96 c9 91     2.h.;.j.?...@...
    3d3e:	44 96 8d 95 4d 96 7e 8d 50 96 c0 8c 5b 96 c3 95     D...M.~.P...[...
    3d4e:	62 96 40 89 63 96 77 90 64 96 9c 8f 65 96 d7 8a     b.@.c.w.d...e...
    3d5e:	6a 96 86 94 70 96 41 89 73 96 c2 92 75 96 cb 97     j...p.A.s...u...
    3d6e:	76 96 a9 93 78 96 a4 97 7a 96 af 8c 7d 96 7a 97     v...x...z...}.z.
    3d7e:	85 96 f7 8b 86 96 b2 97 88 96 47 8c 8a 96 e0 91     ..........G.....
    3d8e:	8b 96 40 e4 8e 96 4b 8a 8f 96 8f 90 94 96 75 8a     ..@...K.......u.
    3d9e:	95 96 a6 e8 98 96 a5 e8 99 96 84 8c 9b 96 db 8d     ................
    3dae:	9c 96 e1 8f a0 96 42 89 a3 96 d7 97 a7 96 a9 e8     ......B.........
    3dbe:	b7 96 ea 97 bb 96 c7 90 bc 96 b9 94 c0 96 9d 90     ................
    3dce:	c1 96 e5 8a c4 96 59 97 c5 96 eb 89 c6 96 57 8f     ......Y.......W.
    3dde:	c7 96 d9 8c cc 96 93 8e d1 96 47 8e db 96 97 90     ..........G.....
    3dee:	e2 96 a3 97 e3 96 ef 93 e8 96 4a 89 ea 96 e1 90     ..........J.....
    3dfe:	eb 96 b4 8e f0 96 b5 95 f2 96 5f 89 f6 96 eb 97     .........._.....
    3e0e:	f7 96 8b 97 f9 96 b9 e8 fb 96 64 93 00 97 f9 8e     ..........d.....
    3e1e:	07 97 6b 90 0a 97 ec 97 1c 97 9a 91 1e 97 e0 89     ..k.............
    3e2e:	27 97 b6 96 32 97 49 98 52 97 c2 90 56 97 f5 96     '...2.I.R...V...
    3e3e:	59 97 c3 90 5e 97 f1 94 62 97 ca 96 69 97 76 8a     Y...^...b...i.v.
    3e4e:	6d 97 78 90 74 97 43 8c 84 97 93 8a 8b 97 dc e8     m.x.t.C.........
    3e5e:	8d 97 c6 88 98 97 e2 8f a0 97 66 8b ad 97 da 95     ..........f.....
    3e6e:	d3 97 d8 8a ee 97 42 94 f3 97 b9 89 fb 97 43 89     ......B.......C.
    3e7e:	ff 97 bf 8b 01 98 c5 95 02 98 b8 92 03 98 a0 8d     ................
    3e8e:	05 98 80 8d 06 98 87 8f 08 98 7b 90 0c 98 f1 e8     ..........{.....
    3e9e:	10 98 61 97 11 98 e6 8a 12 98 d0 94 13 98 da 93     ..a.............
    3eae:	17 98 9c 90 18 98 cc 97 1a 98 7a 8c 2c 98 6a 96     ..........z.,.j.
    3ebe:	2d 98 aa 93 34 98 6f 89 37 98 f5 e8 38 98 f2 e8     -...4.o.7...8...
    3ece:	3b 98 70 95 3c 98 8a 97 46 98 f7 e8 4c 98 e8 91     ;.p.<...F...L...
    3ede:	4d 98 7a 8a 4e 98 7b 8a 54 98 e7 8a 55 98 b0 8c     M.z.N.{.T...U...
    3eee:	58 98 e8 8a 5b 98 5e 93 5e 98 de 97 67 98 da 8c     X...[.^.^...g...
    3efe:	a8 98 97 95 af 98 44 e9 db 98 f2 94 df 98 48 90     ......D.......H.
    3f0e:	e2 98 51 8b ef 98 d1 94 f2 98 f9 88 f4 98 b9 88     ..Q.............
    3f1e:	fc 98 94 8e fd 98 4f 96 fe 98 fc 8f 05 99 dd 96     ......O.........
    3f2e:	0a 99 7b 97 0c 99 61 89 10 99 60 8e 13 99 ec 89     ..{...a...`.....
    3f3e:	21 99 51 e9 28 99 d9 8a 57 99 c0 8b 96 99 f1 8e     !.Q.(...W.......
    3f4e:	99 99 81 8d a8 99 5d 8a ac 99 6e 94 b3 99 79 92     ......]...n...y.
    3f5e:	b4 99 e9 93 c1 99 9d 94 c4 99 ca 91 c5 99 77 89     ..............w.
    3f6e:	c6 99 ec 8b c8 99 ed 8b d0 99 93 92 d2 99 ee 8b     ................
    3f7e:	d5 99 ed 89 ff 99 78 8f 0e 9a 52 8b 12 9a 9b 91     ......x...R.....
    3f8e:	13 9a b1 8c 28 9a cb 91 30 9a ab 93 55 9a 81 e9     ....(...0...U...
    3f9e:	5a 9a c1 8b a8 9a 9c 8d b8 9a 5b 8a c4 9a 91 90     Z.........[.....
    3fae:	cf 9a 90 e9 d1 9a 91 e9 d3 9a 92 e9 d4 9a 93 e9     ................
    3fbe:	d8 9a 82 8d ea 9a af 94 ed 9a 45 95 3b 9b f6 e2     ..........E.;...
    3fce:	3c 9b 53 8b 41 9b 40 8a 42 9b b0 8d 45 9b a3 96     <.S.A.@.B...E...
    3fde:	4e 9b b2 e9 54 9b 82 96 5a 9b 9b 8b 6f 9b 44 98     N...T...Z...o.D.
    3fee:	8e 9b bc 88 92 9b a9 95 aa 9b 8e 96 ab 9b 4c 8e     ..............L.
    3ffe:	ad 9b f8 8d ae 9b 4e 91 b9 9b c1 e9 c9 9b ef 8c     ......N.........
    400e:	d6 9b 49 8e db 9b e2 91 e8 9b 7e 8c f0 9b ce e9     ..I.......~.....
    401e:	f1 9b cd e9 f5 9b b1 88 0d 9c 82 8a 10 9c 6b 98     ..............k.
    402e:	24 9c dc e9 2d 9c 68 95 2f 9c f1 88 39 9c 8f 8a     $...-.h./...9...
    403e:	3a 9c cb e9 3b 9c 56 89 48 9c 4c 92 52 9c 90 96     :...;.V.H.L.R...
    404e:	57 9c d8 97 e5 9c b9 92 e9 9c b5 94 f3 9c 50 96     W.............P.
    405e:	f4 9c c2 96 f6 9c ce 93 07 9d bc 93 0e 9d a8 89     ................
    406e:	1b 9d 95 89 28 9d 9b 8a 2b 9d b0 8e 2c 9d a7 89     ....(...+...,...
    407e:	3b 9d 83 8d 5c 9d 4c 89 60 9d 94 8d 61 9d b7 96     ;...\.L.`...a...
    408e:	6c 9d 51 96 8f 9d 7b 8c b4 9d df 92 f2 9d 68 98     l.Q...{.......h.
    409e:	f9 9d e9 91 fa 9d eb 8d 78 9e b2 8c 7f 9e ad 8e     ........x.......
    40ae:	93 9e 5b 98 97 9e ed 97 9f 9e d9 97 a6 9e 9e 94     ..[.............
    40be:	b9 9e 8d 8d ba 9e cb 96 bb 9e 83 96 bf 9e 9b 96     ................
    40ce:	c4 9e a9 89 cd 9e 6f 8b d2 9e 95 8d d9 9e d9 96     ......o.........
    40de:	db 9e e1 91 0e 9f 43 93 13 9f db 8c 20 9f 6c 91     ......C..... .l.
    40ee:	3b 9f 40 95 4b 9f 56 e2 62 9f ee 97 8d 9f b4 97     ;.@.K.V.b.......
    40fe:	01 ff 49 81 03 ff 94 81 04 ff 90 81 05 ff 93 81     ..I.............
    410e:	06 ff 95 81 08 ff 69 81 09 ff 6a 81 0a ff 96 81     ......i...j.....
    411e:	0b ff 7b 81 0c ff 43 81 0d ff 7c 81 0e ff 44 81     ..{...C...|...D.
    412e:	0f ff 5e 81 10 ff 4f 82 11 ff 50 82 12 ff 51 82     ..^...O...P...Q.
    413e:	13 ff 52 82 14 ff 53 82 15 ff 54 82 16 ff 55 82     ..R...S...T...U.
    414e:	17 ff 56 82 18 ff 57 82 19 ff 58 82 1a ff 46 81     ..V...W...X...F.
    415e:	1b ff 47 81 1c ff 83 81 1d ff 81 81 1e ff 84 81     ..G.............
    416e:	1f ff 48 81 20 ff 97 81 21 ff 60 82 22 ff 61 82     ..H. ...!.`.".a.
    417e:	23 ff 62 82 24 ff 63 82 25 ff 64 82 26 ff 65 82     #.b.$.c.%.d.&.e.
    418e:	27 ff 66 82 28 ff 67 82 29 ff 68 82 2a ff 69 82     '.f.(.g.).h.*.i.
    419e:	2b ff 6a 82 2c ff 6b 82 2d ff 6c 82 2e ff 6d 82     +.j.,.k.-.l...m.
    41ae:	2f ff 6e 82 30 ff 6f 82 31 ff 70 82 32 ff 71 82     /.n.0.o.1.p.2.q.
    41be:	33 ff 72 82 34 ff 73 82 35 ff 74 82 36 ff 75 82     3.r.4.s.5.t.6.u.
    41ce:	37 ff 76 82 38 ff 77 82 39 ff 78 82 3a ff 79 82     7.v.8.w.9.x.:.y.
    41de:	3b ff 6d 81 3c ff 5f 81 3d ff 6e 81 3e ff 4f 81     ;.m.<._.=.n.>.O.
    41ee:	3f ff 51 81 40 ff 4d 81 41 ff 81 82 42 ff 82 82     ?.Q.@.M.A...B...
    41fe:	43 ff 83 82 44 ff 84 82 45 ff 85 82 46 ff 86 82     C...D...E...F...
    420e:	47 ff 87 82 48 ff 88 82 49 ff 89 82 4a ff 8a 82     G...H...I...J...
    421e:	4b ff 8b 82 4c ff 8c 82 4d ff 8d 82 4e ff 8e 82     K...L...M...N...
    422e:	4f ff 8f 82 50 ff 90 82 51 ff 91 82 52 ff 92 82     O...P...Q...R...
    423e:	53 ff 93 82 54 ff 94 82 55 ff 95 82 56 ff 96 82     S...T...U...V...
    424e:	57 ff 97 82 58 ff 98 82 59 ff 99 82 5a ff 9a 82     W...X...Y...Z...
    425e:	5b ff 6f 81 5c ff 62 81 5d ff 70 81 5e ff 60 81     [.o.\.b.].p.^.`.
    426e:	61 ff a1 00 62 ff a2 00 63 ff a3 00 64 ff a4 00     a...b...c...d...
    427e:	65 ff a5 00 66 ff a6 00 67 ff a7 00 68 ff a8 00     e...f...g...h...
    428e:	69 ff a9 00 6a ff aa 00 6b ff ab 00 6c ff ac 00     i...j...k...l...
    429e:	6d ff ad 00 6e ff ae 00 6f ff af 00 70 ff b0 00     m...n...o...p...
    42ae:	71 ff b1 00 72 ff b2 00 73 ff b3 00 74 ff b4 00     q...r...s...t...
    42be:	75 ff b5 00 76 ff b6 00 77 ff b7 00 78 ff b8 00     u...v...w...x...
    42ce:	79 ff b9 00 7a ff ba 00 7b ff bb 00 7c ff bc 00     y...z...{...|...
    42de:	7d ff bd 00 7e ff be 00 7f ff bf 00 80 ff c0 00     }...~...........
    42ee:	81 ff c1 00 82 ff c2 00 83 ff c3 00 84 ff c4 00     ................
    42fe:	85 ff c5 00 86 ff c6 00 87 ff c7 00 88 ff c8 00     ................
    430e:	89 ff c9 00 8a ff ca 00 8b ff cb 00 8c ff cc 00     ................
    431e:	8d ff cd 00 8e ff ce 00 8f ff cf 00 90 ff d0 00     ................
    432e:	91 ff d1 00 92 ff d2 00 93 ff d3 00 94 ff d4 00     ................
    433e:	95 ff d5 00 96 ff d6 00 97 ff d7 00 98 ff d8 00     ................
    434e:	99 ff d9 00 9a ff da 00 9b ff db 00 9c ff dc 00     ................
    435e:	9d ff dd 00 9e ff de 00 9f ff df 00 e0 ff 91 81     ................
    436e:	e1 ff 92 81 e2 ff ca 81 e3 ff 50 81 e5 ff 8f 81     ..........P.....
    437e:	00 00 00 00                                         ....

00004382 <__ctors_end>:
    4382:	11 24       	eor	r1, r1
    4384:	1f be       	out	0x3f, r1	; 63
    4386:	cf ef       	ldi	r28, 0xFF	; 255
    4388:	d8 e0       	ldi	r29, 0x08	; 8
    438a:	de bf       	out	0x3e, r29	; 62
    438c:	cd bf       	out	0x3d, r28	; 61

0000438e <__do_copy_data>:
    438e:	11 e0       	ldi	r17, 0x01	; 1
    4390:	a0 e0       	ldi	r26, 0x00	; 0
    4392:	b1 e0       	ldi	r27, 0x01	; 1
    4394:	ec ef       	ldi	r30, 0xFC	; 252
    4396:	f8 eb       	ldi	r31, 0xB8	; 184
    4398:	02 c0       	rjmp	.+4      	; 0x439e <.do_copy_data_start>

0000439a <.do_copy_data_loop>:
    439a:	05 90       	lpm	r0, Z+
    439c:	0d 92       	st	X+, r0

0000439e <.do_copy_data_start>:
    439e:	a6 38       	cpi	r26, 0x86	; 134
    43a0:	b1 07       	cpc	r27, r17
    43a2:	d9 f7       	brne	.-10     	; 0x439a <.do_copy_data_loop>

000043a4 <__do_clear_bss>:
    43a4:	1a e0       	ldi	r17, 0x0A	; 10
    43a6:	a6 e8       	ldi	r26, 0x86	; 134
    43a8:	b1 e0       	ldi	r27, 0x01	; 1
    43aa:	01 c0       	rjmp	.+2      	; 0x43ae <.do_clear_bss_start>

000043ac <.do_clear_bss_loop>:
    43ac:	1d 92       	st	X+, r1

000043ae <.do_clear_bss_start>:
    43ae:	a3 3a       	cpi	r26, 0xA3	; 163
    43b0:	b1 07       	cpc	r27, r17
    43b2:	e1 f7       	brne	.-8      	; 0x43ac <.do_clear_bss_loop>
    43b4:	0e 94 c5 4a 	call	0x958a	; 0x958a <main>
    43b8:	0c 94 7c 5c 	jmp	0xb8f8	; 0xb8f8 <_exit>

000043bc <__bad_interrupt>:
    43bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000043c0 <xputc>:

.global xputc
.func xputc
xputc:
#ifdef CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    43c0:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    43c2:	19 f4       	brne	.+6      	; 0x43ca <xputc+0xa>
	ldi	r24, 13		;
    43c4:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    43c6:	01 d0       	rcall	.+2      	; 0x43ca <xputc+0xa>
	ldi	r24, 10		;/
    43c8:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    43ca:	ff 93       	push	r31
	push	ZL
    43cc:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    43ce:	e0 91 86 01 	lds	r30, 0x0186
	lds	ZH, xfunc_out+1	;/
    43d2:	f0 91 87 01 	lds	r31, 0x0187
	sbiw	ZL, 0
    43d6:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f
    43d8:	09 f0       	breq	.+2      	; 0x43dc <xputc+0x1c>
	icall
    43da:	09 95       	icall
2:	pop	ZL
    43dc:	ef 91       	pop	r30
	pop	ZH
    43de:	ff 91       	pop	r31
	ret
    43e0:	08 95       	ret

000043e2 <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    43e2:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    43e4:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    43e6:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    43e8:	11 f0       	breq	.+4      	; 0x43ee <xputs+0xc>
	rcall	xputc
    43ea:	ea df       	rcall	.-44     	; 0x43c0 <xputc>
	rjmp	1b
    43ec:	fb cf       	rjmp	.-10     	; 0x43e4 <xputs+0x2>
2:	ret
    43ee:	08 95       	ret

000043f0 <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    43f0:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    43f2:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    43f4:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    43f6:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    43f8:	0c c0       	rjmp	.+24     	; 0x4412 <xitoa+0x22>
	neg	r20		;
    43fa:	41 95       	neg	r20
	sbrs	r25, 7		;
    43fc:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    43fe:	09 c0       	rjmp	.+18     	; 0x4412 <xitoa+0x22>
	ldi	r30, '-'	;
    4400:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    4402:	60 95       	com	r22
	com	r23		;
    4404:	70 95       	com	r23
	com	r24		;
    4406:	80 95       	com	r24
	com	r25		;
    4408:	90 95       	com	r25
	adc	r22, r1		;
    440a:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    440c:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    440e:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    4410:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    4412:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    4414:	02 c0       	rjmp	.+4      	; 0x441a <xitoa+0x2a>
	neg	r18		;
    4416:	21 95       	neg	r18
	ldi	r19, '0'	;/
    4418:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    441a:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    441c:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    441e:	66 0f       	add	r22, r22
	rol	r23		;
    4420:	77 1f       	adc	r23, r23
	rol	r24		;
    4422:	88 1f       	adc	r24, r24
	rol	r25		;
    4424:	99 1f       	adc	r25, r25
	rol	r26		;
    4426:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    4428:	a4 17       	cp	r26, r20
	brcs	3f		;
    442a:	10 f0       	brcs	.+4      	; 0x4430 <xitoa+0x40>
	sub	r26, r20	;
    442c:	a4 1b       	sub	r26, r20
	inc	r22		;
    442e:	63 95       	inc	r22
3:	dec	r21		;
    4430:	5a 95       	dec	r21
	brne	2b		;/
    4432:	a9 f7       	brne	.-22     	; 0x441e <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    4434:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    4436:	08 f0       	brcs	.+2      	; 0x443a <xitoa+0x4a>
	subi	r26, -7		;
    4438:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    443a:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    443c:	af 93       	push	r26
	inc	r31		;/
    443e:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    4440:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    4442:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    4444:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    4446:	91 05       	cpc	r25, r1
	brne	1b		;/
    4448:	41 f7       	brne	.-48     	; 0x441a <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    444a:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    444c:	11 f4       	brne	.+4      	; 0x4452 <xitoa+0x62>
	push	r30		;
    444e:	ef 93       	push	r30
	inc	r31		;/
    4450:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    4452:	f2 17       	cp	r31, r18
	brcc	6f		;
    4454:	18 f4       	brcc	.+6      	; 0x445c <xitoa+0x6c>
	push	r19		;
    4456:	3f 93       	push	r19
	inc	r31		;
    4458:	f3 95       	inc	r31
	rjmp	5b		;/
    445a:	fb cf       	rjmp	.-10     	; 0x4452 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    445c:	8f 91       	pop	r24
	rcall	xputc		;
    445e:	b0 df       	rcall	.-160    	; 0x43c0 <xputc>
	dec	r31		;
    4460:	fa 95       	dec	r31
	brne	6b		;/
    4462:	e1 f7       	brne	.-8      	; 0x445c <xitoa+0x6c>

	ret
    4464:	08 95       	ret

00004466 <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
    4466:	df 93       	push	r29
	push	YL
    4468:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    446a:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    446c:	de b7       	in	r29, 0x3e	; 62
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
#else
	adiw	YL, 5		;Y = pointer to arguments
    446e:	25 96       	adiw	r28, 0x05	; 5
#endif
	ld	ZL, Y+		;Z = pointer to format string
    4470:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    4472:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    4474:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    4476:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    4478:	21 f0       	breq	.+8      	; 0x4482 <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
    447a:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    447c:	29 f0       	breq	.+10     	; 0x4488 <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
    447e:	a0 df       	rcall	.-192    	; 0x43c0 <xputc>
	rjmp	0b		;/
    4480:	f9 cf       	rjmp	.-14     	; 0x4474 <xprintf+0xe>
90:	pop	YL
    4482:	cf 91       	pop	r28
	pop	YH
    4484:	df 91       	pop	r29
	ret
    4486:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    4488:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    448a:	e8 94       	clt
	_LPMI	r21		;Get flags
    448c:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    448e:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    4490:	b1 f3       	breq	.-20     	; 0x447e <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
    4492:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    4494:	11 f4       	brne	.+4      	; 0x449a <xprintf+0x34>
	set			;/
    4496:	68 94       	set
22:	_LPMI	r21		;Get width
    4498:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    449a:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    449c:	48 f4       	brcc	.+18     	; 0x44b0 <xprintf+0x4a>
	subi	r21, '0'	;
    449e:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    44a0:	80 f3       	brcs	.-32     	; 0x4482 <xprintf+0x1c>
	lsl	r18		;
    44a2:	22 0f       	add	r18, r18
	mov	r0, r18		;
    44a4:	02 2e       	mov	r0, r18
	lsl	r18		;
    44a6:	22 0f       	add	r18, r18
	lsl	r18		;
    44a8:	22 0f       	add	r18, r18
	add	r18, r0		;
    44aa:	20 0d       	add	r18, r0
	add	r18, r21	;
    44ac:	25 0f       	add	r18, r21
	rjmp	22b		;/
    44ae:	f4 cf       	rjmp	.-24     	; 0x4498 <xprintf+0x32>

24:	brtc	25f		;get value (low word)
    44b0:	0e f4       	brtc	.+2      	; 0x44b4 <xprintf+0x4e>
	neg	r18		;
    44b2:	21 95       	neg	r18
25:	ld	r24, Y+		;
    44b4:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    44b6:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    44b8:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    44ba:	09 f3       	breq	.-62     	; 0x447e <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
    44bc:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    44be:	29 f1       	breq	.+74     	; 0x450a <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
    44c0:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    44c2:	59 f1       	breq	.+86     	; 0x451a <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    44c4:	bc 01       	movw	r22, r24
	clr	r24		;
    44c6:	88 27       	eor	r24, r24
	clr	r25		;
    44c8:	99 27       	eor	r25, r25
	clt			;/
    44ca:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    44cc:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    44ce:	21 f4       	brne	.+8      	; 0x44d8 <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
    44d0:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    44d2:	99 91       	ld	r25, Y+
	set			;
    44d4:	68 94       	set
	_LPMI	r21		;/
    44d6:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    44d8:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    44da:	39 f4       	brne	.+14     	; 0x44ea <xprintf+0x84>
	ldi	r20, -10	;
    44dc:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    44de:	7e f0       	brts	.+30     	; 0x44fe <xprintf+0x98>
	sbrs	r23, 7		;
    44e0:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    44e2:	0d c0       	rjmp	.+26     	; 0x44fe <xprintf+0x98>
	ldi	r24, -1		;
    44e4:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    44e6:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    44e8:	0a c0       	rjmp	.+20     	; 0x44fe <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    44ea:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    44ec:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    44ee:	39 f0       	breq	.+14     	; 0x44fe <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
    44f0:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    44f2:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    44f4:	21 f0       	breq	.+8      	; 0x44fe <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
    44f6:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    44f8:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    44fa:	09 f0       	breq	.+2      	; 0x44fe <xprintf+0x98>
	rjmp	90b		;abort
    44fc:	c2 cf       	rjmp	.-124    	; 0x4482 <xprintf+0x1c>
40:	push	ZH		;Output the value
    44fe:	ff 93       	push	r31
	push	ZL		;
    4500:	ef 93       	push	r30
	rcall	xitoa		;
    4502:	76 df       	rcall	.-276    	; 0x43f0 <xitoa>
42:	pop	ZL		;
    4504:	ef 91       	pop	r30
	pop	ZH		;
    4506:	ff 91       	pop	r31
	rjmp	0b		;/
    4508:	b5 cf       	rjmp	.-150    	; 0x4474 <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
    450a:	ff 93       	push	r31
	push	ZL
    450c:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    450e:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    4510:	81 91       	ld	r24, Z+
	cpi	r24, 0
    4512:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    4514:	b9 f3       	breq	.-18     	; 0x4504 <xprintf+0x9e>
	rcall	xputc
    4516:	54 df       	rcall	.-344    	; 0x43c0 <xputc>
	rjmp	51b
    4518:	fb cf       	rjmp	.-10     	; 0x4510 <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
    451a:	ff 93       	push	r31
	push	ZL
    451c:	ef 93       	push	r30
	rcall	xputs
    451e:	61 df       	rcall	.-318    	; 0x43e2 <xputs>
	rjmp	42b
    4520:	f1 cf       	rjmp	.-30     	; 0x4504 <xprintf+0x9e>

00004522 <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    4522:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    4524:	dc 01       	movw	r26, r24
	ld	ZL, X+
    4526:	ed 91       	ld	r30, X+
	ld	ZH, X+
    4528:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    452a:	22 27       	eor	r18, r18
	clr	r19		;
    452c:	33 27       	eor	r19, r19
	clr	r20		;
    452e:	44 27       	eor	r20, r20
	clr	r21		;/
    4530:	55 27       	eor	r21, r21
	clt			;T = 0;
    4532:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    4534:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    4536:	01 c0       	rjmp	.+2      	; 0x453a <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    4538:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    453a:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    453c:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    453e:	e1 f3       	breq	.-8      	; 0x4538 <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    4540:	a8 f1       	brcs	.+106    	; 0x45ac <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    4542:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    4544:	11 f4       	brne	.+4      	; 0x454a <xatoi+0x28>
	set			; continue;
    4546:	68 94       	set
	rjmp	40b		;}
    4548:	f7 cf       	rjmp	.-18     	; 0x4538 <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    454a:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    454c:	78 f5       	brcc	.+94     	; 0x45ac <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    454e:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    4550:	68 f1       	brcs	.+90     	; 0x45ac <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    4552:	71 f4       	brne	.+28     	; 0x4570 <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    4554:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    4556:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    4558:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    455a:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    455c:	48 f1       	brcs	.+82     	; 0x45b0 <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    455e:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    4560:	11 f4       	brne	.+4      	; 0x4566 <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    4562:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    4564:	03 c0       	rjmp	.+6      	; 0x456c <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    4566:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    4568:	19 f4       	brne	.+6      	; 0x4570 <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    456a:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    456c:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    456e:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    4570:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    4572:	f0 f0       	brcs	.+60     	; 0x45b0 <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    4574:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    4576:	08 f0       	brcs	.+2      	; 0x457a <xatoi+0x58>
	subi	r22, 0x20	;/
    4578:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    457a:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    457c:	b8 f0       	brcs	.+46     	; 0x45ac <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    457e:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    4580:	18 f0       	brcs	.+6      	; 0x4588 <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    4582:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    4584:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    4586:	90 f0       	brcs	.+36     	; 0x45ac <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    4588:	69 17       	cp	r22, r25
	brcc	70f		;/
    458a:	80 f4       	brcc	.+32     	; 0x45ac <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    458c:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    458e:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    4590:	08 f4       	brcc	.+2      	; 0x4594 <xatoi+0x72>
	add	r23, r25	;
    4592:	79 0f       	add	r23, r25
62:	lsr	r23		;
    4594:	76 95       	lsr	r23
	ror	r21		;
    4596:	57 95       	ror	r21
	ror	r20		;
    4598:	47 95       	ror	r20
	ror	r19		;
    459a:	37 95       	ror	r19
	ror	r18		;
    459c:	27 95       	ror	r18
	dec	r24		;
    459e:	8a 95       	dec	r24
	brne	61b		;/
    45a0:	b9 f7       	brne	.-18     	; 0x4590 <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    45a2:	26 0f       	add	r18, r22
	adc	r19, r24	;
    45a4:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    45a6:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    45a8:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    45aa:	e0 cf       	rjmp	.-64     	; 0x456c <xatoi+0x4a>

70:	ldi	r24, 0
    45ac:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    45ae:	01 c0       	rjmp	.+2      	; 0x45b2 <xatoi+0x90>
80:	ldi	r24, 1
    45b0:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    45b2:	4e f4       	brtc	.+18     	; 0x45c6 <xatoi+0xa4>
	clr	r22
    45b4:	66 27       	eor	r22, r22
	com	r18
    45b6:	20 95       	com	r18
	com	r19
    45b8:	30 95       	com	r19
	com	r20
    45ba:	40 95       	com	r20
	com	r21
    45bc:	50 95       	com	r21
	adc	r18, r22
    45be:	26 1f       	adc	r18, r22
	adc	r19, r22
    45c0:	36 1f       	adc	r19, r22
	adc	r20, r22
    45c2:	46 1f       	adc	r20, r22
	adc	r21, r22
    45c4:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    45c6:	fe 93       	st	-X, r31
	st	-X, ZL
    45c8:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    45ca:	d0 01       	movw	r26, r0
	st	X+, r18
    45cc:	2d 93       	st	X+, r18
	st	X+, r19
    45ce:	3d 93       	st	X+, r19
	st	X+, r20
    45d0:	4d 93       	st	X+, r20
	st	X+, r21
    45d2:	5d 93       	st	X+, r21
	clr	r1
    45d4:	11 24       	eor	r1, r1
	ret
    45d6:	08 95       	ret

000045d8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    45d8:	0f 93       	push	r16
    45da:	1f 93       	push	r17
    45dc:	cf 93       	push	r28
    45de:	df 93       	push	r29
    45e0:	8c 01       	movw	r16, r24
    45e2:	eb 01       	movw	r28, r22
    45e4:	ba 01       	movw	r22, r20
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
    45e6:	20 e0       	ldi	r18, 0x00	; 0
    45e8:	30 e0       	ldi	r19, 0x00	; 0
    45ea:	0e c0       	rjmp	.+28     	; 0x4608 <mem_cpy+0x30>

#if _WORD_ACCESS == 1
	while (cnt >= sizeof(int)) {
		*(int*)d = *(int*)s;
    45ec:	f8 01       	movw	r30, r16
    45ee:	e2 0f       	add	r30, r18
    45f0:	f3 1f       	adc	r31, r19
    45f2:	de 01       	movw	r26, r28
    45f4:	a2 0f       	add	r26, r18
    45f6:	b3 1f       	adc	r27, r19
    45f8:	8d 91       	ld	r24, X+
    45fa:	9c 91       	ld	r25, X
    45fc:	91 83       	std	Z+1, r25	; 0x01
    45fe:	80 83       	st	Z, r24
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
    4600:	42 50       	subi	r20, 0x02	; 2
    4602:	50 40       	sbci	r21, 0x00	; 0
    4604:	2e 5f       	subi	r18, 0xFE	; 254
    4606:	3f 4f       	sbci	r19, 0xFF	; 255
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof(int)) {
    4608:	42 30       	cpi	r20, 0x02	; 2
    460a:	51 05       	cpc	r21, r1
    460c:	78 f7       	brcc	.-34     	; 0x45ec <mem_cpy+0x14>
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    460e:	cb 01       	movw	r24, r22
    4610:	8e 7f       	andi	r24, 0xFE	; 254
    4612:	de 01       	movw	r26, r28
    4614:	a8 0f       	add	r26, r24
    4616:	b9 1f       	adc	r27, r25
    4618:	f8 01       	movw	r30, r16
    461a:	e8 0f       	add	r30, r24
    461c:	f9 1f       	adc	r31, r25
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    461e:	60 ff       	sbrs	r22, 0
    4620:	02 c0       	rjmp	.+4      	; 0x4626 <mem_cpy+0x4e>
		*d++ = *s++;
    4622:	8c 91       	ld	r24, X
    4624:	80 83       	st	Z, r24
}
    4626:	df 91       	pop	r29
    4628:	cf 91       	pop	r28
    462a:	1f 91       	pop	r17
    462c:	0f 91       	pop	r16
    462e:	08 95       	ret

00004630 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    4630:	ef 92       	push	r14
    4632:	ff 92       	push	r15
    4634:	0f 93       	push	r16
    4636:	1f 93       	push	r17
    4638:	cf 93       	push	r28
    463a:	df 93       	push	r29
    463c:	ec 01       	movw	r28, r24
    463e:	7a 01       	movw	r14, r20
    4640:	8b 01       	movw	r16, r22
	clst -= 2;
    4642:	8e ef       	ldi	r24, 0xFE	; 254
    4644:	9f ef       	ldi	r25, 0xFF	; 255
    4646:	af ef       	ldi	r26, 0xFF	; 255
    4648:	bf ef       	ldi	r27, 0xFF	; 255
    464a:	e8 0e       	add	r14, r24
    464c:	f9 1e       	adc	r15, r25
    464e:	0a 1f       	adc	r16, r26
    4650:	1b 1f       	adc	r17, r27
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    4652:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4654:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4656:	ac 8d       	ldd	r26, Y+28	; 0x1c
    4658:	bd 8d       	ldd	r27, Y+29	; 0x1d
    465a:	02 97       	sbiw	r24, 0x02	; 2
    465c:	a1 09       	sbc	r26, r1
    465e:	b1 09       	sbc	r27, r1
    4660:	e8 16       	cp	r14, r24
    4662:	f9 06       	cpc	r15, r25
    4664:	0a 07       	cpc	r16, r26
    4666:	1b 07       	cpc	r17, r27
    4668:	28 f0       	brcs	.+10     	; 0x4674 <clust2sect+0x44>
    466a:	20 e0       	ldi	r18, 0x00	; 0
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	40 e0       	ldi	r20, 0x00	; 0
    4670:	50 e0       	ldi	r21, 0x00	; 0
    4672:	12 c0       	rjmp	.+36     	; 0x4698 <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    4674:	2a 81       	ldd	r18, Y+2	; 0x02
    4676:	30 e0       	ldi	r19, 0x00	; 0
    4678:	40 e0       	ldi	r20, 0x00	; 0
    467a:	50 e0       	ldi	r21, 0x00	; 0
    467c:	c8 01       	movw	r24, r16
    467e:	b7 01       	movw	r22, r14
    4680:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__mulsi3>
    4684:	9b 01       	movw	r18, r22
    4686:	ac 01       	movw	r20, r24
    4688:	8a a5       	ldd	r24, Y+42	; 0x2a
    468a:	9b a5       	ldd	r25, Y+43	; 0x2b
    468c:	ac a5       	ldd	r26, Y+44	; 0x2c
    468e:	bd a5       	ldd	r27, Y+45	; 0x2d
    4690:	28 0f       	add	r18, r24
    4692:	39 1f       	adc	r19, r25
    4694:	4a 1f       	adc	r20, r26
    4696:	5b 1f       	adc	r21, r27
}
    4698:	b9 01       	movw	r22, r18
    469a:	ca 01       	movw	r24, r20
    469c:	df 91       	pop	r29
    469e:	cf 91       	pop	r28
    46a0:	1f 91       	pop	r17
    46a2:	0f 91       	pop	r16
    46a4:	ff 90       	pop	r15
    46a6:	ef 90       	pop	r14
    46a8:	08 95       	ret

000046aa <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
    46aa:	cf 92       	push	r12
    46ac:	df 92       	push	r13
    46ae:	ef 92       	push	r14
    46b0:	ff 92       	push	r15
    46b2:	0f 93       	push	r16
    46b4:	1f 93       	push	r17
    46b6:	df 93       	push	r29
    46b8:	cf 93       	push	r28
    46ba:	cd b7       	in	r28, 0x3d	; 61
    46bc:	de b7       	in	r29, 0x3e	; 62
    46be:	28 97       	sbiw	r28, 0x08	; 8
    46c0:	0f b6       	in	r0, 0x3f	; 63
    46c2:	f8 94       	cli
    46c4:	de bf       	out	0x3e, r29	; 62
    46c6:	0f be       	out	0x3f, r0	; 63
    46c8:	cd bf       	out	0x3d, r28	; 61
    46ca:	6c 01       	movw	r12, r24
    46cc:	7a 01       	movw	r14, r20
    46ce:	89 01       	movw	r16, r18
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
    46d0:	4b e0       	ldi	r20, 0x0B	; 11
    46d2:	50 e0       	ldi	r21, 0x00	; 0
    46d4:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    46d8:	06 30       	cpi	r16, 0x06	; 6
    46da:	11 05       	cpc	r17, r1
    46dc:	d0 f0       	brcs	.+52     	; 0x4712 <gen_numname+0x68>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    46de:	91 2f       	mov	r25, r17
    46e0:	97 95       	ror	r25
    46e2:	99 27       	eor	r25, r25
    46e4:	97 95       	ror	r25
    46e6:	80 2f       	mov	r24, r16
    46e8:	86 95       	lsr	r24
    46ea:	49 2f       	mov	r20, r25
    46ec:	48 2b       	or	r20, r24
    46ee:	90 2f       	mov	r25, r16
    46f0:	97 95       	ror	r25
    46f2:	99 27       	eor	r25, r25
    46f4:	97 95       	ror	r25
    46f6:	81 2f       	mov	r24, r17
    46f8:	86 95       	lsr	r24
    46fa:	59 2f       	mov	r21, r25
    46fc:	58 2b       	or	r21, r24
    46fe:	f7 01       	movw	r30, r14
    4700:	01 91       	ld	r16, Z+
    4702:	11 91       	ld	r17, Z+
    4704:	7f 01       	movw	r14, r30
    4706:	04 0f       	add	r16, r20
    4708:	15 1f       	adc	r17, r21
    470a:	80 81       	ld	r24, Z
    470c:	91 81       	ldd	r25, Z+1	; 0x01
    470e:	89 2b       	or	r24, r25
    4710:	31 f7       	brne	.-52     	; 0x46de <gen_numname+0x34>
    4712:	47 e0       	ldi	r20, 0x07	; 7
    4714:	50 e0       	ldi	r21, 0x00	; 0
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (seq % 16) + '0';
		if (c > '9') c += 7;
		ns[i--] = c;
    4716:	de 01       	movw	r26, r28
    4718:	11 96       	adiw	r26, 0x01	; 1
	}

	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (seq % 16) + '0';
    471a:	90 2f       	mov	r25, r16
    471c:	9f 70       	andi	r25, 0x0F	; 15
    471e:	89 2f       	mov	r24, r25
    4720:	80 5d       	subi	r24, 0xD0	; 208
		if (c > '9') c += 7;
    4722:	8a 33       	cpi	r24, 0x3A	; 58
    4724:	08 f0       	brcs	.+2      	; 0x4728 <gen_numname+0x7e>
    4726:	89 5f       	subi	r24, 0xF9	; 249
		ns[i--] = c;
    4728:	fd 01       	movw	r30, r26
    472a:	e4 0f       	add	r30, r20
    472c:	f5 1f       	adc	r31, r21
    472e:	80 83       	st	Z, r24
    4730:	41 50       	subi	r20, 0x01	; 1
    4732:	50 40       	sbci	r21, 0x00	; 0
		seq /= 16;
    4734:	84 e0       	ldi	r24, 0x04	; 4
    4736:	16 95       	lsr	r17
    4738:	07 95       	ror	r16
    473a:	8a 95       	dec	r24
    473c:	e1 f7       	brne	.-8      	; 0x4736 <gen_numname+0x8c>
	} while (seq);
    473e:	01 15       	cp	r16, r1
    4740:	11 05       	cpc	r17, r1
    4742:	59 f7       	brne	.-42     	; 0x471a <gen_numname+0x70>
	ns[i] = '~';
    4744:	a4 0f       	add	r26, r20
    4746:	b5 1f       	adc	r27, r21
    4748:	8e e7       	ldi	r24, 0x7E	; 126
    474a:	8c 93       	st	X, r24
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	30 e0       	ldi	r19, 0x00	; 0

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
		if (IsDBCS1(dst[j])) {
			if (j == i - 1) break;
    4750:	ba 01       	movw	r22, r20
    4752:	61 50       	subi	r22, 0x01	; 1
    4754:	70 40       	sbci	r23, 0x00	; 0
    4756:	14 c0       	rjmp	.+40     	; 0x4780 <gen_numname+0xd6>
	} while (seq);
	ns[i] = '~';

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
		if (IsDBCS1(dst[j])) {
    4758:	8e 2f       	mov	r24, r30
    475a:	81 58       	subi	r24, 0x81	; 129
    475c:	8f 31       	cpi	r24, 0x1F	; 31
    475e:	18 f0       	brcs	.+6      	; 0x4766 <gen_numname+0xbc>
    4760:	e0 5e       	subi	r30, 0xE0	; 224
    4762:	ed 31       	cpi	r30, 0x1D	; 29
    4764:	58 f4       	brcc	.+22     	; 0x477c <gen_numname+0xd2>
			if (j == i - 1) break;
    4766:	26 17       	cp	r18, r22
    4768:	37 07       	cpc	r19, r23
    476a:	31 f4       	brne	.+12     	; 0x4778 <gen_numname+0xce>
    476c:	d6 01       	movw	r26, r12
    476e:	a2 0f       	add	r26, r18
    4770:	b3 1f       	adc	r27, r19
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4772:	ce 01       	movw	r24, r28
    4774:	01 96       	adiw	r24, 0x01	; 1
    4776:	0e c0       	rjmp	.+28     	; 0x4794 <gen_numname+0xea>

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
		if (IsDBCS1(dst[j])) {
			if (j == i - 1) break;
			j++;
    4778:	2f 5f       	subi	r18, 0xFF	; 255
    477a:	3f 4f       	sbci	r19, 0xFF	; 255
		seq /= 16;
	} while (seq);
	ns[i] = '~';

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
    477c:	2f 5f       	subi	r18, 0xFF	; 255
    477e:	3f 4f       	sbci	r19, 0xFF	; 255
    4780:	24 17       	cp	r18, r20
    4782:	35 07       	cpc	r19, r21
    4784:	98 f7       	brcc	.-26     	; 0x476c <gen_numname+0xc2>
    4786:	f6 01       	movw	r30, r12
    4788:	e2 0f       	add	r30, r18
    478a:	f3 1f       	adc	r31, r19
    478c:	e0 81       	ld	r30, Z
    478e:	e0 32       	cpi	r30, 0x20	; 32
    4790:	19 f7       	brne	.-58     	; 0x4758 <gen_numname+0xae>
    4792:	ec cf       	rjmp	.-40     	; 0x476c <gen_numname+0xc2>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4794:	48 30       	cpi	r20, 0x08	; 8
    4796:	51 05       	cpc	r21, r1
    4798:	10 f0       	brcs	.+4      	; 0x479e <gen_numname+0xf4>
    479a:	e0 e2       	ldi	r30, 0x20	; 32
    479c:	06 c0       	rjmp	.+12     	; 0x47aa <gen_numname+0x100>
    479e:	fc 01       	movw	r30, r24
    47a0:	e4 0f       	add	r30, r20
    47a2:	f5 1f       	adc	r31, r21
    47a4:	e0 81       	ld	r30, Z
    47a6:	4f 5f       	subi	r20, 0xFF	; 255
    47a8:	5f 4f       	sbci	r21, 0xFF	; 255
    47aa:	ed 93       	st	X+, r30
    47ac:	2f 5f       	subi	r18, 0xFF	; 255
    47ae:	3f 4f       	sbci	r19, 0xFF	; 255
	} while (j < 8);
    47b0:	28 30       	cpi	r18, 0x08	; 8
    47b2:	31 05       	cpc	r19, r1
    47b4:	78 f3       	brcs	.-34     	; 0x4794 <gen_numname+0xea>
}
    47b6:	28 96       	adiw	r28, 0x08	; 8
    47b8:	0f b6       	in	r0, 0x3f	; 63
    47ba:	f8 94       	cli
    47bc:	de bf       	out	0x3e, r29	; 62
    47be:	0f be       	out	0x3f, r0	; 63
    47c0:	cd bf       	out	0x3d, r28	; 61
    47c2:	cf 91       	pop	r28
    47c4:	df 91       	pop	r29
    47c6:	1f 91       	pop	r17
    47c8:	0f 91       	pop	r16
    47ca:	ff 90       	pop	r15
    47cc:	ef 90       	pop	r14
    47ce:	df 90       	pop	r13
    47d0:	cf 90       	pop	r12
    47d2:	08 95       	ret

000047d4 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    47d4:	cf 93       	push	r28
    47d6:	df 93       	push	r29
    47d8:	eb 01       	movw	r28, r22
	FATFS *rfs;


	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
    47da:	82 30       	cpi	r24, 0x02	; 2
    47dc:	10 f0       	brcs	.+4      	; 0x47e2 <f_mount+0xe>
    47de:	8b e0       	ldi	r24, 0x0B	; 11
    47e0:	17 c0       	rjmp	.+46     	; 0x4810 <f_mount+0x3c>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    47e2:	a8 2f       	mov	r26, r24
    47e4:	b0 e0       	ldi	r27, 0x00	; 0
    47e6:	fd 01       	movw	r30, r26
    47e8:	ee 0f       	add	r30, r30
    47ea:	ff 1f       	adc	r31, r31
    47ec:	e8 57       	subi	r30, 0x78	; 120
    47ee:	fe 4f       	sbci	r31, 0xFE	; 254
    47f0:	01 90       	ld	r0, Z+
    47f2:	f0 81       	ld	r31, Z
    47f4:	e0 2d       	mov	r30, r0

	if (rfs) {
    47f6:	30 97       	sbiw	r30, 0x00	; 0
    47f8:	09 f0       	breq	.+2      	; 0x47fc <f_mount+0x28>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    47fa:	10 82       	st	Z, r1
	}

	if (fs) {
    47fc:	20 97       	sbiw	r28, 0x00	; 0
    47fe:	09 f0       	breq	.+2      	; 0x4802 <f_mount+0x2e>
		fs->fs_type = 0;			/* Clear new fs object */
    4800:	18 82       	st	Y, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    4802:	aa 0f       	add	r26, r26
    4804:	bb 1f       	adc	r27, r27
    4806:	a8 57       	subi	r26, 0x78	; 120
    4808:	be 4f       	sbci	r27, 0xFE	; 254
    480a:	cd 93       	st	X+, r28
    480c:	dc 93       	st	X, r29
    480e:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    4810:	df 91       	pop	r29
    4812:	cf 91       	pop	r28
    4814:	08 95       	ret

00004816 <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
    4816:	82 30       	cpi	r24, 0x02	; 2
    4818:	10 f0       	brcs	.+4      	; 0x481e <f_chdrive+0x8>
    481a:	8b e0       	ldi	r24, 0x0B	; 11
    481c:	08 95       	ret

	CurrVol = drv;
    481e:	80 93 8e 01 	sts	0x018E, r24
    4822:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    4824:	08 95       	ret

00004826 <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,		/* Logical drive number */
	BYTE sfd,		/* Partitioning rule 0:FDISK, 1:SFD */
	UINT au			/* Allocation unit size [bytes] */
)
{
    4826:	2f 92       	push	r2
    4828:	3f 92       	push	r3
    482a:	4f 92       	push	r4
    482c:	5f 92       	push	r5
    482e:	6f 92       	push	r6
    4830:	7f 92       	push	r7
    4832:	8f 92       	push	r8
    4834:	9f 92       	push	r9
    4836:	af 92       	push	r10
    4838:	bf 92       	push	r11
    483a:	cf 92       	push	r12
    483c:	df 92       	push	r13
    483e:	ef 92       	push	r14
    4840:	ff 92       	push	r15
    4842:	0f 93       	push	r16
    4844:	1f 93       	push	r17
    4846:	df 93       	push	r29
    4848:	cf 93       	push	r28
    484a:	cd b7       	in	r28, 0x3d	; 61
    484c:	de b7       	in	r29, 0x3e	; 62
    484e:	a9 97       	sbiw	r28, 0x29	; 41
    4850:	0f b6       	in	r0, 0x3f	; 63
    4852:	f8 94       	cli
    4854:	de bf       	out	0x3e, r29	; 62
    4856:	0f be       	out	0x3f, r0	; 63
    4858:	cd bf       	out	0x3d, r28	; 61
    485a:	8c a3       	std	Y+36, r24	; 0x24
    485c:	6d a3       	std	Y+37, r22	; 0x25
    485e:	8a 01       	movw	r16, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check mounted drive and clear work area */
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
    4860:	82 30       	cpi	r24, 0x02	; 2
    4862:	10 f0       	brcs	.+4      	; 0x4868 <f_mkfs+0x42>
    4864:	8b e0       	ldi	r24, 0x0B	; 11
    4866:	67 c4       	rjmp	.+2254   	; 0x5136 <f_mkfs+0x910>
	fs = FatFs[drv];
    4868:	cc a0       	ldd	r12, Y+36	; 0x24
    486a:	ec 2d       	mov	r30, r12
    486c:	f0 e0       	ldi	r31, 0x00	; 0
    486e:	ee 0f       	add	r30, r30
    4870:	ff 1f       	adc	r31, r31
    4872:	e8 57       	subi	r30, 0x78	; 120
    4874:	fe 4f       	sbci	r31, 0xFE	; 254
    4876:	60 80       	ld	r6, Z
    4878:	71 80       	ldd	r7, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    487a:	61 14       	cp	r6, r1
    487c:	71 04       	cpc	r7, r1
    487e:	11 f4       	brne	.+4      	; 0x4884 <f_mkfs+0x5e>
    4880:	8c e0       	ldi	r24, 0x0C	; 12
    4882:	59 c4       	rjmp	.+2226   	; 0x5136 <f_mkfs+0x910>
	fs->fs_type = 0;
    4884:	d3 01       	movw	r26, r6
    4886:	1c 92       	st	X, r1
	drv = LD2PD(drv);

	/* Get disk statics */
	stat = disk_initialize(drv);
    4888:	8c a1       	ldd	r24, Y+36	; 0x24
    488a:	0e 94 32 57 	call	0xae64	; 0xae64 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    488e:	80 ff       	sbrs	r24, 0
    4890:	02 c0       	rjmp	.+4      	; 0x4896 <f_mkfs+0x70>
    4892:	83 e0       	ldi	r24, 0x03	; 3
    4894:	50 c4       	rjmp	.+2208   	; 0x5136 <f_mkfs+0x910>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    4896:	82 ff       	sbrs	r24, 2
    4898:	02 c0       	rjmp	.+4      	; 0x489e <f_mkfs+0x78>
    489a:	8a e0       	ldi	r24, 0x0A	; 10
    489c:	4c c4       	rjmp	.+2200   	; 0x5136 <f_mkfs+0x910>
#if _MAX_SS != 512					/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK)
		return FR_DISK_ERR;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
    489e:	8c a1       	ldd	r24, Y+36	; 0x24
    48a0:	61 e0       	ldi	r22, 0x01	; 1
    48a2:	ae 01       	movw	r20, r28
    48a4:	4b 5f       	subi	r20, 0xFB	; 251
    48a6:	5f 4f       	sbci	r21, 0xFF	; 255
    48a8:	0e 94 df 58 	call	0xb1be	; 0xb1be <disk_ioctl>
    48ac:	88 23       	and	r24, r24
    48ae:	09 f0       	breq	.+2      	; 0x48b2 <f_mkfs+0x8c>
    48b0:	3f c4       	rjmp	.+2174   	; 0x5130 <f_mkfs+0x90a>
    48b2:	6d 81       	ldd	r22, Y+5	; 0x05
    48b4:	7e 81       	ldd	r23, Y+6	; 0x06
    48b6:	8f 81       	ldd	r24, Y+7	; 0x07
    48b8:	98 85       	ldd	r25, Y+8	; 0x08
    48ba:	60 38       	cpi	r22, 0x80	; 128
    48bc:	71 05       	cpc	r23, r1
    48be:	81 05       	cpc	r24, r1
    48c0:	91 05       	cpc	r25, r1
    48c2:	08 f4       	brcc	.+2      	; 0x48c6 <f_mkfs+0xa0>
    48c4:	35 c4       	rjmp	.+2154   	; 0x5130 <f_mkfs+0x90a>
		return FR_DISK_ERR;
	b_vol = (sfd) ? 0 : 63;	/* Volume start sector */
    48c6:	bd a1       	ldd	r27, Y+37	; 0x25
    48c8:	bb 23       	and	r27, r27
    48ca:	51 f4       	brne	.+20     	; 0x48e0 <f_mkfs+0xba>
    48cc:	3f e3       	ldi	r19, 0x3F	; 63
    48ce:	c3 2e       	mov	r12, r19
    48d0:	d1 2c       	mov	r13, r1
    48d2:	e1 2c       	mov	r14, r1
    48d4:	f1 2c       	mov	r15, r1
    48d6:	cd 8a       	std	Y+21, r12	; 0x15
    48d8:	de 8a       	std	Y+22, r13	; 0x16
    48da:	ef 8a       	std	Y+23, r14	; 0x17
    48dc:	f8 8e       	std	Y+24, r15	; 0x18
    48de:	04 c0       	rjmp	.+8      	; 0x48e8 <f_mkfs+0xc2>
    48e0:	1d 8a       	std	Y+21, r1	; 0x15
    48e2:	1e 8a       	std	Y+22, r1	; 0x16
    48e4:	1f 8a       	std	Y+23, r1	; 0x17
    48e6:	18 8e       	std	Y+24, r1	; 0x18
	n_vol -= b_vol;
    48e8:	9b 01       	movw	r18, r22
    48ea:	ac 01       	movw	r20, r24
    48ec:	cd 88       	ldd	r12, Y+21	; 0x15
    48ee:	de 88       	ldd	r13, Y+22	; 0x16
    48f0:	ef 88       	ldd	r14, Y+23	; 0x17
    48f2:	f8 8c       	ldd	r15, Y+24	; 0x18
    48f4:	2c 19       	sub	r18, r12
    48f6:	3d 09       	sbc	r19, r13
    48f8:	4e 09       	sbc	r20, r14
    48fa:	5f 09       	sbc	r21, r15
    48fc:	28 a3       	std	Y+32, r18	; 0x20
    48fe:	39 a3       	std	Y+33, r19	; 0x21
    4900:	4a a3       	std	Y+34, r20	; 0x22
    4902:	5b a3       	std	Y+35, r21	; 0x23
	if (au & (au - 1)) au = 0;	/* Check validity of the AU size */
    4904:	c8 01       	movw	r24, r16
    4906:	01 97       	sbiw	r24, 0x01	; 1
    4908:	80 23       	and	r24, r16
    490a:	91 23       	and	r25, r17
    490c:	89 2b       	or	r24, r25
    490e:	19 f4       	brne	.+6      	; 0x4916 <f_mkfs+0xf0>
	if (!au) {					/* AU auto selection */
    4910:	01 15       	cp	r16, r1
    4912:	11 05       	cpc	r17, r1
    4914:	19 f5       	brne	.+70     	; 0x495c <f_mkfs+0x136>
		vs = n_vol / (2000 / (SS(fs) / 512));
    4916:	68 a1       	ldd	r22, Y+32	; 0x20
    4918:	79 a1       	ldd	r23, Y+33	; 0x21
    491a:	8a a1       	ldd	r24, Y+34	; 0x22
    491c:	9b a1       	ldd	r25, Y+35	; 0x23
    491e:	20 ed       	ldi	r18, 0xD0	; 208
    4920:	37 e0       	ldi	r19, 0x07	; 7
    4922:	40 e0       	ldi	r20, 0x00	; 0
    4924:	50 e0       	ldi	r21, 0x00	; 0
    4926:	0e 94 26 5c 	call	0xb84c	; 0xb84c <__udivmodsi4>
    492a:	79 01       	movw	r14, r18
    492c:	8a 01       	movw	r16, r20
    492e:	2a e5       	ldi	r18, 0x5A	; 90
    4930:	31 e0       	ldi	r19, 0x01	; 1
    4932:	e0 e0       	ldi	r30, 0x00	; 0
    4934:	f0 e0       	ldi	r31, 0x00	; 0
    4936:	01 c0       	rjmp	.+2      	; 0x493a <f_mkfs+0x114>
		for (i = 0; vs < vst[i]; i++) ;
    4938:	31 96       	adiw	r30, 0x01	; 1
    493a:	d9 01       	movw	r26, r18
    493c:	8d 91       	ld	r24, X+
    493e:	9d 91       	ld	r25, X+
    4940:	9d 01       	movw	r18, r26
    4942:	a0 e0       	ldi	r26, 0x00	; 0
    4944:	b0 e0       	ldi	r27, 0x00	; 0
    4946:	e8 16       	cp	r14, r24
    4948:	f9 06       	cpc	r15, r25
    494a:	0a 07       	cpc	r16, r26
    494c:	1b 07       	cpc	r17, r27
    494e:	a0 f3       	brcs	.-24     	; 0x4938 <f_mkfs+0x112>
		au = cst[i];
    4950:	ee 0f       	add	r30, r30
    4952:	ff 1f       	adc	r31, r31
    4954:	ec 5b       	subi	r30, 0xBC	; 188
    4956:	fe 4f       	sbci	r31, 0xFE	; 254
    4958:	00 81       	ld	r16, Z
    495a:	11 81       	ldd	r17, Z+1	; 0x01
	}
	au /= SS(fs);		/* Number of sectors per cluster */
    495c:	48 01       	movw	r8, r16
    495e:	89 2c       	mov	r8, r9
    4960:	99 24       	eor	r9, r9
    4962:	86 94       	lsr	r8
	if (au == 0) au = 1;
    4964:	81 14       	cp	r8, r1
    4966:	91 04       	cpc	r9, r1
    4968:	19 f4       	brne	.+6      	; 0x4970 <f_mkfs+0x14a>
    496a:	81 e0       	ldi	r24, 0x01	; 1
    496c:	88 2e       	mov	r8, r24
    496e:	91 2c       	mov	r9, r1
	if (au > 128) au = 128;

	/* Pre-compute number of clusters and FAT syb-type */
	n_clst = n_vol / au;
    4970:	64 01       	movw	r12, r8
    4972:	ee 24       	eor	r14, r14
    4974:	ff 24       	eor	r15, r15
    4976:	cc 8e       	std	Y+28, r12	; 0x1c
    4978:	dd 8e       	std	Y+29, r13	; 0x1d
    497a:	ee 8e       	std	Y+30, r14	; 0x1e
    497c:	ff 8e       	std	Y+31, r15	; 0x1f
    497e:	68 a1       	ldd	r22, Y+32	; 0x20
    4980:	79 a1       	ldd	r23, Y+33	; 0x21
    4982:	8a a1       	ldd	r24, Y+34	; 0x22
    4984:	9b a1       	ldd	r25, Y+35	; 0x23
    4986:	a7 01       	movw	r20, r14
    4988:	96 01       	movw	r18, r12
    498a:	0e 94 26 5c 	call	0xb84c	; 0xb84c <__udivmodsi4>
    498e:	c9 01       	movw	r24, r18
    4990:	da 01       	movw	r26, r20
	fmt = FS_FAT12;
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
    4992:	86 3f       	cpi	r24, 0xF6	; 246
    4994:	2f e0       	ldi	r18, 0x0F	; 15
    4996:	92 07       	cpc	r25, r18
    4998:	20 e0       	ldi	r18, 0x00	; 0
    499a:	a2 07       	cpc	r26, r18
    499c:	20 e0       	ldi	r18, 0x00	; 0
    499e:	b2 07       	cpc	r27, r18
    49a0:	50 f0       	brcs	.+20     	; 0x49b6 <f_mkfs+0x190>
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
    49a2:	86 3f       	cpi	r24, 0xF6	; 246
    49a4:	3f ef       	ldi	r19, 0xFF	; 255
    49a6:	93 07       	cpc	r25, r19
    49a8:	30 e0       	ldi	r19, 0x00	; 0
    49aa:	a3 07       	cpc	r26, r19
    49ac:	30 e0       	ldi	r19, 0x00	; 0
    49ae:	b3 07       	cpc	r27, r19
    49b0:	08 f0       	brcs	.+2      	; 0x49b4 <f_mkfs+0x18e>
    49b2:	da c3       	rjmp	.+1972   	; 0x5168 <f_mkfs+0x942>
    49b4:	02 c4       	rjmp	.+2052   	; 0x51ba <f_mkfs+0x994>
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 32;
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
    49b6:	9c 01       	movw	r18, r24
    49b8:	ad 01       	movw	r20, r26
    49ba:	22 0f       	add	r18, r18
    49bc:	33 1f       	adc	r19, r19
    49be:	44 1f       	adc	r20, r20
    49c0:	55 1f       	adc	r21, r21
    49c2:	28 0f       	add	r18, r24
    49c4:	39 1f       	adc	r19, r25
    49c6:	4a 1f       	adc	r20, r26
    49c8:	5b 1f       	adc	r21, r27
    49ca:	2f 5f       	subi	r18, 0xFF	; 255
    49cc:	3f 4f       	sbci	r19, 0xFF	; 255
    49ce:	4f 4f       	sbci	r20, 0xFF	; 255
    49d0:	5f 4f       	sbci	r21, 0xFF	; 255
    49d2:	56 95       	lsr	r21
    49d4:	47 95       	ror	r20
    49d6:	37 95       	ror	r19
    49d8:	27 95       	ror	r18
    49da:	2d 5f       	subi	r18, 0xFD	; 253
    49dc:	3f 4f       	sbci	r19, 0xFF	; 255
    49de:	4f 4f       	sbci	r20, 0xFF	; 255
    49e0:	5f 4f       	sbci	r21, 0xFF	; 255
    49e2:	81 e0       	ldi	r24, 0x01	; 1
    49e4:	89 8f       	std	Y+25, r24	; 0x19
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
    49e6:	bf ef       	ldi	r27, 0xFF	; 255
    49e8:	2b 2e       	mov	r2, r27
    49ea:	b1 e0       	ldi	r27, 0x01	; 1
    49ec:	3b 2e       	mov	r3, r27
    49ee:	41 2c       	mov	r4, r1
    49f0:	51 2c       	mov	r5, r1
    49f2:	22 0e       	add	r2, r18
    49f4:	33 1e       	adc	r3, r19
    49f6:	44 1e       	adc	r4, r20
    49f8:	55 1e       	adc	r5, r21
    49fa:	a9 e0       	ldi	r26, 0x09	; 9
    49fc:	56 94       	lsr	r5
    49fe:	47 94       	ror	r4
    4a00:	37 94       	ror	r3
    4a02:	27 94       	ror	r2
    4a04:	aa 95       	dec	r26
    4a06:	d1 f7       	brne	.-12     	; 0x49fc <f_mkfs+0x1d6>
    4a08:	f1 e0       	ldi	r31, 0x01	; 1
    4a0a:	cf 2e       	mov	r12, r31
    4a0c:	d1 2c       	mov	r13, r1
    4a0e:	e1 2c       	mov	r14, r1
    4a10:	f1 2c       	mov	r15, r1
    4a12:	cd 86       	std	Y+13, r12	; 0x0d
    4a14:	de 86       	std	Y+14, r13	; 0x0e
    4a16:	ef 86       	std	Y+15, r14	; 0x0f
    4a18:	f8 8a       	std	Y+16, r15	; 0x10
    4a1a:	20 e2       	ldi	r18, 0x20	; 32
    4a1c:	30 e0       	ldi	r19, 0x00	; 0
    4a1e:	40 e0       	ldi	r20, 0x00	; 0
    4a20:	50 e0       	ldi	r21, 0x00	; 0
    4a22:	29 87       	std	Y+9, r18	; 0x09
    4a24:	3a 87       	std	Y+10, r19	; 0x0a
    4a26:	4b 87       	std	Y+11, r20	; 0x0b
    4a28:	5c 87       	std	Y+12, r21	; 0x0c
		n_rsv = 1;
		n_dir = (DWORD)N_ROOTDIR * SZ_DIR / SS(fs);
	}
	b_fat = b_vol + n_rsv;				/* FAT area start sector */
    4a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a2e:	af 85       	ldd	r26, Y+15	; 0x0f
    4a30:	b8 89       	ldd	r27, Y+16	; 0x10
    4a32:	cd 88       	ldd	r12, Y+21	; 0x15
    4a34:	de 88       	ldd	r13, Y+22	; 0x16
    4a36:	ef 88       	ldd	r14, Y+23	; 0x17
    4a38:	f8 8c       	ldd	r15, Y+24	; 0x18
    4a3a:	8c 0d       	add	r24, r12
    4a3c:	9d 1d       	adc	r25, r13
    4a3e:	ae 1d       	adc	r26, r14
    4a40:	bf 1d       	adc	r27, r15
    4a42:	89 8b       	std	Y+17, r24	; 0x11
    4a44:	9a 8b       	std	Y+18, r25	; 0x12
    4a46:	ab 8b       	std	Y+19, r26	; 0x13
    4a48:	bc 8b       	std	Y+20, r27	; 0x14
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
	b_data = b_dir + n_dir;				/* Data area start sector */
    4a4a:	a9 84       	ldd	r10, Y+9	; 0x09
    4a4c:	ba 84       	ldd	r11, Y+10	; 0x0a
    4a4e:	cb 84       	ldd	r12, Y+11	; 0x0b
    4a50:	dc 84       	ldd	r13, Y+12	; 0x0c
    4a52:	a2 0c       	add	r10, r2
    4a54:	b3 1c       	adc	r11, r3
    4a56:	c4 1c       	adc	r12, r4
    4a58:	d5 1c       	adc	r13, r5
    4a5a:	a8 0e       	add	r10, r24
    4a5c:	b9 1e       	adc	r11, r25
    4a5e:	ca 1e       	adc	r12, r26
    4a60:	db 1e       	adc	r13, r27
	if (n_vol < b_data + au) return FR_MKFS_ABORTED;	/* Too small volume */
    4a62:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4a64:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4a66:	ae 8d       	ldd	r26, Y+30	; 0x1e
    4a68:	bf 8d       	ldd	r27, Y+31	; 0x1f
    4a6a:	8a 0d       	add	r24, r10
    4a6c:	9b 1d       	adc	r25, r11
    4a6e:	ac 1d       	adc	r26, r12
    4a70:	bd 1d       	adc	r27, r13
    4a72:	28 a1       	ldd	r18, Y+32	; 0x20
    4a74:	39 a1       	ldd	r19, Y+33	; 0x21
    4a76:	4a a1       	ldd	r20, Y+34	; 0x22
    4a78:	5b a1       	ldd	r21, Y+35	; 0x23
    4a7a:	28 17       	cp	r18, r24
    4a7c:	39 07       	cpc	r19, r25
    4a7e:	4a 07       	cpc	r20, r26
    4a80:	5b 07       	cpc	r21, r27
    4a82:	08 f4       	brcc	.+2      	; 0x4a86 <f_mkfs+0x260>
    4a84:	57 c3       	rjmp	.+1710   	; 0x5134 <f_mkfs+0x90e>
		return FR_DISK_ERR;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
		return FR_DISK_ERR;
	b_vol = (sfd) ? 0 : 63;	/* Volume start sector */
	n_vol -= b_vol;
    4a86:	2d 83       	std	Y+5, r18	; 0x05
    4a88:	3e 83       	std	Y+6, r19	; 0x06
    4a8a:	4f 83       	std	Y+7, r20	; 0x07
    4a8c:	58 87       	std	Y+8, r21	; 0x08
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
	b_data = b_dir + n_dir;				/* Data area start sector */
	if (n_vol < b_data + au) return FR_MKFS_ABORTED;	/* Too small volume */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
    4a8e:	8c a1       	ldd	r24, Y+36	; 0x24
    4a90:	63 e0       	ldi	r22, 0x03	; 3
    4a92:	ae 01       	movw	r20, r28
    4a94:	4f 5f       	subi	r20, 0xFF	; 255
    4a96:	5f 4f       	sbci	r21, 0xFF	; 255
    4a98:	0e 94 df 58 	call	0xb1be	; 0xb1be <disk_ioctl>
    4a9c:	88 23       	and	r24, r24
    4a9e:	69 f4       	brne	.+26     	; 0x4aba <f_mkfs+0x294>
    4aa0:	89 81       	ldd	r24, Y+1	; 0x01
    4aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    4aa4:	ab 81       	ldd	r26, Y+3	; 0x03
    4aa6:	bc 81       	ldd	r27, Y+4	; 0x04
    4aa8:	00 97       	sbiw	r24, 0x00	; 0
    4aaa:	a1 05       	cpc	r26, r1
    4aac:	b1 05       	cpc	r27, r1
    4aae:	29 f0       	breq	.+10     	; 0x4aba <f_mkfs+0x294>
    4ab0:	81 50       	subi	r24, 0x01	; 1
    4ab2:	90 48       	sbci	r25, 0x80	; 128
    4ab4:	a0 40       	sbci	r26, 0x00	; 0
    4ab6:	b0 40       	sbci	r27, 0x00	; 0
    4ab8:	40 f0       	brcs	.+16     	; 0x4aca <f_mkfs+0x2a4>
    4aba:	81 e0       	ldi	r24, 0x01	; 1
    4abc:	90 e0       	ldi	r25, 0x00	; 0
    4abe:	a0 e0       	ldi	r26, 0x00	; 0
    4ac0:	b0 e0       	ldi	r27, 0x00	; 0
    4ac2:	89 83       	std	Y+1, r24	; 0x01
    4ac4:	9a 83       	std	Y+2, r25	; 0x02
    4ac6:	ab 83       	std	Y+3, r26	; 0x03
    4ac8:	bc 83       	std	Y+4, r27	; 0x04
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
    4aca:	89 81       	ldd	r24, Y+1	; 0x01
    4acc:	9a 81       	ldd	r25, Y+2	; 0x02
    4ace:	ab 81       	ldd	r26, Y+3	; 0x03
    4ad0:	bc 81       	ldd	r27, Y+4	; 0x04
	n = (n - b_data) / N_FATS;
    4ad2:	7c 01       	movw	r14, r24
    4ad4:	8d 01       	movw	r16, r26
    4ad6:	08 94       	sec
    4ad8:	e1 08       	sbc	r14, r1
    4ada:	f1 08       	sbc	r15, r1
    4adc:	01 09       	sbc	r16, r1
    4ade:	11 09       	sbc	r17, r1
    4ae0:	ea 0c       	add	r14, r10
    4ae2:	fb 1c       	adc	r15, r11
    4ae4:	0c 1d       	adc	r16, r12
    4ae6:	1d 1d       	adc	r17, r13
    4ae8:	b0 95       	com	r27
    4aea:	a0 95       	com	r26
    4aec:	90 95       	com	r25
    4aee:	81 95       	neg	r24
    4af0:	9f 4f       	sbci	r25, 0xFF	; 255
    4af2:	af 4f       	sbci	r26, 0xFF	; 255
    4af4:	bf 4f       	sbci	r27, 0xFF	; 255
    4af6:	e8 22       	and	r14, r24
    4af8:	f9 22       	and	r15, r25
    4afa:	0a 23       	and	r16, r26
    4afc:	1b 23       	and	r17, r27
    4afe:	ea 18       	sub	r14, r10
    4b00:	fb 08       	sbc	r15, r11
    4b02:	0c 09       	sbc	r16, r12
    4b04:	1d 09       	sbc	r17, r13
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
    4b06:	49 8d       	ldd	r20, Y+25	; 0x19
    4b08:	43 30       	cpi	r20, 0x03	; 3
    4b0a:	c9 f4       	brne	.+50     	; 0x4b3e <f_mkfs+0x318>
		n_rsv += n;
    4b0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b10:	af 85       	ldd	r26, Y+15	; 0x0f
    4b12:	b8 89       	ldd	r27, Y+16	; 0x10
    4b14:	8e 0d       	add	r24, r14
    4b16:	9f 1d       	adc	r25, r15
    4b18:	a0 1f       	adc	r26, r16
    4b1a:	b1 1f       	adc	r27, r17
    4b1c:	8d 87       	std	Y+13, r24	; 0x0d
    4b1e:	9e 87       	std	Y+14, r25	; 0x0e
    4b20:	af 87       	std	Y+15, r26	; 0x0f
    4b22:	b8 8b       	std	Y+16, r27	; 0x10
		b_fat += n;
    4b24:	29 89       	ldd	r18, Y+17	; 0x11
    4b26:	3a 89       	ldd	r19, Y+18	; 0x12
    4b28:	4b 89       	ldd	r20, Y+19	; 0x13
    4b2a:	5c 89       	ldd	r21, Y+20	; 0x14
    4b2c:	2e 0d       	add	r18, r14
    4b2e:	3f 1d       	adc	r19, r15
    4b30:	40 1f       	adc	r20, r16
    4b32:	51 1f       	adc	r21, r17
    4b34:	29 8b       	std	Y+17, r18	; 0x11
    4b36:	3a 8b       	std	Y+18, r19	; 0x12
    4b38:	4b 8b       	std	Y+19, r20	; 0x13
    4b3a:	5c 8b       	std	Y+20, r21	; 0x14
    4b3c:	04 c0       	rjmp	.+8      	; 0x4b46 <f_mkfs+0x320>
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
    4b3e:	2e 0c       	add	r2, r14
    4b40:	3f 1c       	adc	r3, r15
    4b42:	40 1e       	adc	r4, r16
    4b44:	51 1e       	adc	r5, r17
	}

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
    4b46:	ad 80       	ldd	r10, Y+5	; 0x05
    4b48:	be 80       	ldd	r11, Y+6	; 0x06
    4b4a:	cf 80       	ldd	r12, Y+7	; 0x07
    4b4c:	d8 84       	ldd	r13, Y+8	; 0x08
    4b4e:	c6 01       	movw	r24, r12
    4b50:	b5 01       	movw	r22, r10
    4b52:	2d 85       	ldd	r18, Y+13	; 0x0d
    4b54:	3e 85       	ldd	r19, Y+14	; 0x0e
    4b56:	4f 85       	ldd	r20, Y+15	; 0x0f
    4b58:	58 89       	ldd	r21, Y+16	; 0x10
    4b5a:	62 1b       	sub	r22, r18
    4b5c:	73 0b       	sbc	r23, r19
    4b5e:	84 0b       	sbc	r24, r20
    4b60:	95 0b       	sbc	r25, r21
    4b62:	62 19       	sub	r22, r2
    4b64:	73 09       	sbc	r23, r3
    4b66:	84 09       	sbc	r24, r4
    4b68:	95 09       	sbc	r25, r5
    4b6a:	29 85       	ldd	r18, Y+9	; 0x09
    4b6c:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b6e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4b70:	5c 85       	ldd	r21, Y+12	; 0x0c
    4b72:	62 1b       	sub	r22, r18
    4b74:	73 0b       	sbc	r23, r19
    4b76:	84 0b       	sbc	r24, r20
    4b78:	95 0b       	sbc	r25, r21
    4b7a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    4b7c:	3d 8d       	ldd	r19, Y+29	; 0x1d
    4b7e:	4e 8d       	ldd	r20, Y+30	; 0x1e
    4b80:	5f 8d       	ldd	r21, Y+31	; 0x1f
    4b82:	0e 94 26 5c 	call	0xb84c	; 0xb84c <__udivmodsi4>
    4b86:	2e a3       	std	Y+38, r18	; 0x26
    4b88:	3f a3       	std	Y+39, r19	; 0x27
    4b8a:	48 a7       	std	Y+40, r20	; 0x28
    4b8c:	59 a7       	std	Y+41, r21	; 0x29
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
    4b8e:	39 8d       	ldd	r19, Y+25	; 0x19
    4b90:	32 30       	cpi	r19, 0x02	; 2
    4b92:	51 f4       	brne	.+20     	; 0x4ba8 <f_mkfs+0x382>
    4b94:	8e a1       	ldd	r24, Y+38	; 0x26
    4b96:	9f a1       	ldd	r25, Y+39	; 0x27
    4b98:	a8 a5       	ldd	r26, Y+40	; 0x28
    4b9a:	b9 a5       	ldd	r27, Y+41	; 0x29
    4b9c:	86 5f       	subi	r24, 0xF6	; 246
    4b9e:	9f 40       	sbci	r25, 0x0F	; 15
    4ba0:	a0 40       	sbci	r26, 0x00	; 0
    4ba2:	b0 40       	sbci	r27, 0x00	; 0
    4ba4:	70 f4       	brcc	.+28     	; 0x4bc2 <f_mkfs+0x39c>
    4ba6:	c6 c2       	rjmp	.+1420   	; 0x5134 <f_mkfs+0x90e>
    4ba8:	f9 8d       	ldd	r31, Y+25	; 0x19
    4baa:	f3 30       	cpi	r31, 0x03	; 3
    4bac:	51 f4       	brne	.+20     	; 0x4bc2 <f_mkfs+0x39c>
    4bae:	2e a1       	ldd	r18, Y+38	; 0x26
    4bb0:	3f a1       	ldd	r19, Y+39	; 0x27
    4bb2:	48 a5       	ldd	r20, Y+40	; 0x28
    4bb4:	59 a5       	ldd	r21, Y+41	; 0x29
    4bb6:	26 5f       	subi	r18, 0xF6	; 246
    4bb8:	3f 4f       	sbci	r19, 0xFF	; 255
    4bba:	40 40       	sbci	r20, 0x00	; 0
    4bbc:	50 40       	sbci	r21, 0x00	; 0
    4bbe:	08 f4       	brcc	.+2      	; 0x4bc2 <f_mkfs+0x39c>
    4bc0:	b9 c2       	rjmp	.+1394   	; 0x5134 <f_mkfs+0x90e>
	if (n_vol < b_data + au) return FR_MKFS_ABORTED;	/* Too small volume */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
	n = (n - b_data) / N_FATS;
    4bc2:	e9 82       	std	Y+1, r14	; 0x01
    4bc4:	fa 82       	std	Y+2, r15	; 0x02
    4bc6:	0b 83       	std	Y+3, r16	; 0x03
    4bc8:	1c 83       	std	Y+4, r17	; 0x04
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
		return FR_MKFS_ABORTED;

	/* Create partition table if required */
	if (sfd) {	/* No patition table (SFD) */
    4bca:	9d a1       	ldd	r25, Y+37	; 0x25
    4bcc:	99 23       	and	r25, r25
    4bce:	11 f0       	breq	.+4      	; 0x4bd4 <f_mkfs+0x3ae>
    4bd0:	10 ef       	ldi	r17, 0xF0	; 240
    4bd2:	8d c0       	rjmp	.+282    	; 0x4cee <f_mkfs+0x4c8>
		md = 0xF0;
	} else {	/* With patition table (FDISK) */
		DWORD n_disk = b_vol + n_vol;
    4bd4:	4d 89       	ldd	r20, Y+21	; 0x15
    4bd6:	5e 89       	ldd	r21, Y+22	; 0x16
    4bd8:	6f 89       	ldd	r22, Y+23	; 0x17
    4bda:	78 8d       	ldd	r23, Y+24	; 0x18
    4bdc:	4a 0d       	add	r20, r10
    4bde:	5b 1d       	adc	r21, r11
    4be0:	6c 1d       	adc	r22, r12
    4be2:	7d 1d       	adc	r23, r13
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    4be4:	e2 e3       	ldi	r30, 0x32	; 50
    4be6:	ee 2e       	mov	r14, r30
    4be8:	f1 2c       	mov	r15, r1
    4bea:	e6 0c       	add	r14, r6
    4bec:	f7 1c       	adc	r15, r7
    4bee:	f7 01       	movw	r30, r14
    4bf0:	20 e0       	ldi	r18, 0x00	; 0
    4bf2:	32 e0       	ldi	r19, 0x02	; 2
    4bf4:	01 c0       	rjmp	.+2      	; 0x4bf8 <f_mkfs+0x3d2>

	while (cnt--)
		*d++ = (BYTE)val;
    4bf6:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    4bf8:	21 50       	subi	r18, 0x01	; 1
    4bfa:	30 40       	sbci	r19, 0x00	; 0
    4bfc:	af ef       	ldi	r26, 0xFF	; 255
    4bfe:	2f 3f       	cpi	r18, 0xFF	; 255
    4c00:	3a 07       	cpc	r19, r26
    4c02:	c9 f7       	brne	.-14     	; 0x4bf6 <f_mkfs+0x3d0>
		md = 0xF0;
	} else {	/* With patition table (FDISK) */
		DWORD n_disk = b_vol + n_vol;

		mem_set(fs->win, 0, SS(fs));
		tbl = fs->win+MBR_Table;
    4c04:	83 01       	movw	r16, r6
    4c06:	00 51       	subi	r16, 0x10	; 16
    4c08:	1e 4f       	sbci	r17, 0xFE	; 254
		ST_DWORD(tbl, 0x00010180);			/* Partition start in CHS */
    4c0a:	80 e8       	ldi	r24, 0x80	; 128
    4c0c:	91 e0       	ldi	r25, 0x01	; 1
    4c0e:	a1 e0       	ldi	r26, 0x01	; 1
    4c10:	b0 e0       	ldi	r27, 0x00	; 0
    4c12:	f8 01       	movw	r30, r16
    4c14:	80 83       	st	Z, r24
    4c16:	91 83       	std	Z+1, r25	; 0x01
    4c18:	a2 83       	std	Z+2, r26	; 0x02
    4c1a:	b3 83       	std	Z+3, r27	; 0x03
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    4c1c:	40 30       	cpi	r20, 0x00	; 0
    4c1e:	f4 e0       	ldi	r31, 0x04	; 4
    4c20:	5f 07       	cpc	r21, r31
    4c22:	fb ef       	ldi	r31, 0xFB	; 251
    4c24:	6f 07       	cpc	r22, r31
    4c26:	f0 e0       	ldi	r31, 0x00	; 0
    4c28:	7f 07       	cpc	r23, r31
    4c2a:	b0 f4       	brcc	.+44     	; 0x4c58 <f_mkfs+0x432>
			n_disk = n_disk / 63 / 255;
    4c2c:	cb 01       	movw	r24, r22
    4c2e:	ba 01       	movw	r22, r20
    4c30:	21 ec       	ldi	r18, 0xC1	; 193
    4c32:	3e e3       	ldi	r19, 0x3E	; 62
    4c34:	40 e0       	ldi	r20, 0x00	; 0
    4c36:	50 e0       	ldi	r21, 0x00	; 0
    4c38:	0e 94 26 5c 	call	0xb84c	; 0xb84c <__udivmodsi4>
    4c3c:	c9 01       	movw	r24, r18
    4c3e:	da 01       	movw	r26, r20
			tbl[7] = (BYTE)n_disk;
    4c40:	f8 01       	movw	r30, r16
    4c42:	27 83       	std	Z+7, r18	; 0x07
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    4c44:	32 e0       	ldi	r19, 0x02	; 2
    4c46:	b6 95       	lsr	r27
    4c48:	a7 95       	ror	r26
    4c4a:	97 95       	ror	r25
    4c4c:	87 95       	ror	r24
    4c4e:	3a 95       	dec	r19
    4c50:	d1 f7       	brne	.-12     	; 0x4c46 <f_mkfs+0x420>
    4c52:	8f 63       	ori	r24, 0x3F	; 63
    4c54:	86 83       	std	Z+6, r24	; 0x06
    4c56:	05 c0       	rjmp	.+10     	; 0x4c62 <f_mkfs+0x43c>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);	/* CHS saturated */
    4c58:	d8 01       	movw	r26, r16
    4c5a:	17 96       	adiw	r26, 0x07	; 7
    4c5c:	3c 93       	st	X, r19
    4c5e:	2e 93       	st	-X, r18
    4c60:	16 97       	sbiw	r26, 0x06	; 6
		}
		tbl[5] = 254;
    4c62:	8e ef       	ldi	r24, 0xFE	; 254
    4c64:	f8 01       	movw	r30, r16
    4c66:	85 83       	std	Z+5, r24	; 0x05
		if (fmt != FS_FAT32)				/* System ID */
    4c68:	f9 8d       	ldd	r31, Y+25	; 0x19
    4c6a:	f3 30       	cpi	r31, 0x03	; 3
    4c6c:	81 f0       	breq	.+32     	; 0x4c8e <f_mkfs+0x468>
			tbl[4] = (n_vol < 0x10000) ? 0x04 : 0x06;
    4c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c70:	9e 81       	ldd	r25, Y+6	; 0x06
    4c72:	af 81       	ldd	r26, Y+7	; 0x07
    4c74:	b8 85       	ldd	r27, Y+8	; 0x08
    4c76:	80 50       	subi	r24, 0x00	; 0
    4c78:	90 40       	sbci	r25, 0x00	; 0
    4c7a:	a1 40       	sbci	r26, 0x01	; 1
    4c7c:	b0 40       	sbci	r27, 0x00	; 0
    4c7e:	10 f0       	brcs	.+4      	; 0x4c84 <f_mkfs+0x45e>
    4c80:	86 e0       	ldi	r24, 0x06	; 6
    4c82:	01 c0       	rjmp	.+2      	; 0x4c86 <f_mkfs+0x460>
    4c84:	84 e0       	ldi	r24, 0x04	; 4
    4c86:	d8 01       	movw	r26, r16
    4c88:	14 96       	adiw	r26, 0x04	; 4
    4c8a:	8c 93       	st	X, r24
    4c8c:	03 c0       	rjmp	.+6      	; 0x4c94 <f_mkfs+0x46e>
		else
			tbl[4] = 0x0c;
    4c8e:	8c e0       	ldi	r24, 0x0C	; 12
    4c90:	f8 01       	movw	r30, r16
    4c92:	84 83       	std	Z+4, r24	; 0x04
		ST_DWORD(tbl+8, 63);				/* Partition start in LBA */
    4c94:	8f e3       	ldi	r24, 0x3F	; 63
    4c96:	90 e0       	ldi	r25, 0x00	; 0
    4c98:	a0 e0       	ldi	r26, 0x00	; 0
    4c9a:	b0 e0       	ldi	r27, 0x00	; 0
    4c9c:	f8 01       	movw	r30, r16
    4c9e:	80 87       	std	Z+8, r24	; 0x08
    4ca0:	91 87       	std	Z+9, r25	; 0x09
    4ca2:	a2 87       	std	Z+10, r26	; 0x0a
    4ca4:	b3 87       	std	Z+11, r27	; 0x0b
		ST_DWORD(tbl+12, n_vol);			/* Partition size in LBA */
    4ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    4caa:	af 81       	ldd	r26, Y+7	; 0x07
    4cac:	b8 85       	ldd	r27, Y+8	; 0x08
    4cae:	84 87       	std	Z+12, r24	; 0x0c
    4cb0:	95 87       	std	Z+13, r25	; 0x0d
    4cb2:	a6 87       	std	Z+14, r26	; 0x0e
    4cb4:	b7 87       	std	Z+15, r27	; 0x0f
		ST_WORD(fs->win+BS_55AA, 0xAA55);	/* MBR signature */
    4cb6:	20 e3       	ldi	r18, 0x30	; 48
    4cb8:	c2 2e       	mov	r12, r18
    4cba:	22 e0       	ldi	r18, 0x02	; 2
    4cbc:	d2 2e       	mov	r13, r18
    4cbe:	6c 0c       	add	r6, r12
    4cc0:	7d 1c       	adc	r7, r13
    4cc2:	85 e5       	ldi	r24, 0x55	; 85
    4cc4:	9a ea       	ldi	r25, 0xAA	; 170
    4cc6:	d3 01       	movw	r26, r6
    4cc8:	8d 93       	st	X+, r24
    4cca:	9c 93       	st	X, r25
    4ccc:	e0 ed       	ldi	r30, 0xD0	; 208
    4cce:	fd ef       	ldi	r31, 0xFD	; 253
    4cd0:	6e 0e       	add	r6, r30
    4cd2:	7f 1e       	adc	r7, r31
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)	/* Put the MBR into first physical sector */
    4cd4:	8c a1       	ldd	r24, Y+36	; 0x24
    4cd6:	b7 01       	movw	r22, r14
    4cd8:	20 e0       	ldi	r18, 0x00	; 0
    4cda:	30 e0       	ldi	r19, 0x00	; 0
    4cdc:	40 e0       	ldi	r20, 0x00	; 0
    4cde:	50 e0       	ldi	r21, 0x00	; 0
    4ce0:	01 e0       	ldi	r16, 0x01	; 1
    4ce2:	0e 94 6e 58 	call	0xb0dc	; 0xb0dc <disk_write>
    4ce6:	88 23       	and	r24, r24
    4ce8:	09 f0       	breq	.+2      	; 0x4cec <f_mkfs+0x4c6>
    4cea:	22 c2       	rjmp	.+1092   	; 0x5130 <f_mkfs+0x90a>
    4cec:	18 ef       	ldi	r17, 0xF8	; 248
			return FR_DISK_ERR;
		md = 0xF8;
	}

	/* Create volume boot record */
	tbl = fs->win;							/* Clear sector */
    4cee:	92 e3       	ldi	r25, 0x32	; 50
    4cf0:	e9 2e       	mov	r14, r25
    4cf2:	f1 2c       	mov	r15, r1
    4cf4:	e6 0c       	add	r14, r6
    4cf6:	f7 1c       	adc	r15, r7
    4cf8:	f7 01       	movw	r30, r14
    4cfa:	80 e0       	ldi	r24, 0x00	; 0
    4cfc:	92 e0       	ldi	r25, 0x02	; 2
    4cfe:	01 c0       	rjmp	.+2      	; 0x4d02 <f_mkfs+0x4dc>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    4d00:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    4d02:	01 97       	sbiw	r24, 0x01	; 1
    4d04:	2f ef       	ldi	r18, 0xFF	; 255
    4d06:	8f 3f       	cpi	r24, 0xFF	; 255
    4d08:	92 07       	cpc	r25, r18
    4d0a:	d1 f7       	brne	.-12     	; 0x4d00 <f_mkfs+0x4da>
	}

	/* Create volume boot record */
	tbl = fs->win;							/* Clear sector */
	mem_set(tbl, 0, SS(fs));
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
    4d0c:	c7 01       	movw	r24, r14
    4d0e:	60 e0       	ldi	r22, 0x00	; 0
    4d10:	71 e0       	ldi	r23, 0x01	; 1
    4d12:	4b e0       	ldi	r20, 0x0B	; 11
    4d14:	50 e0       	ldi	r21, 0x00	; 0
    4d16:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <mem_cpy>
	i = SS(fs);								/* Sector size */
	ST_WORD(tbl+BPB_BytsPerSec, i);
    4d1a:	80 e0       	ldi	r24, 0x00	; 0
    4d1c:	92 e0       	ldi	r25, 0x02	; 2
    4d1e:	d7 01       	movw	r26, r14
    4d20:	1c 96       	adiw	r26, 0x0c	; 12
    4d22:	9c 93       	st	X, r25
    4d24:	8e 93       	st	-X, r24
    4d26:	1b 97       	sbiw	r26, 0x0b	; 11
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
    4d28:	f3 01       	movw	r30, r6
    4d2a:	87 ae       	std	Z+63, r8	; 0x3f
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
    4d2c:	cd 84       	ldd	r12, Y+13	; 0x0d
    4d2e:	de 84       	ldd	r13, Y+14	; 0x0e
    4d30:	1f 96       	adiw	r26, 0x0f	; 15
    4d32:	dc 92       	st	X, r13
    4d34:	ce 92       	st	-X, r12
    4d36:	1e 97       	sbiw	r26, 0x0e	; 14
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
    4d38:	22 e4       	ldi	r18, 0x42	; 66
    4d3a:	30 e0       	ldi	r19, 0x00	; 0
    4d3c:	62 0e       	add	r6, r18
    4d3e:	73 1e       	adc	r7, r19
    4d40:	81 e0       	ldi	r24, 0x01	; 1
    4d42:	d3 01       	movw	r26, r6
    4d44:	8c 93       	st	X, r24
    4d46:	ee eb       	ldi	r30, 0xBE	; 190
    4d48:	ff ef       	ldi	r31, 0xFF	; 255
    4d4a:	6e 0e       	add	r6, r30
    4d4c:	7f 1e       	adc	r7, r31
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of rootdir entries */
    4d4e:	f9 8d       	ldd	r31, Y+25	; 0x19
    4d50:	f3 30       	cpi	r31, 0x03	; 3
    4d52:	19 f0       	breq	.+6      	; 0x4d5a <f_mkfs+0x534>
    4d54:	80 e0       	ldi	r24, 0x00	; 0
    4d56:	92 e0       	ldi	r25, 0x02	; 2
    4d58:	02 c0       	rjmp	.+4      	; 0x4d5e <f_mkfs+0x538>
    4d5a:	80 e0       	ldi	r24, 0x00	; 0
    4d5c:	90 e0       	ldi	r25, 0x00	; 0
	ST_WORD(tbl+BPB_RootEntCnt, i);
    4d5e:	d7 01       	movw	r26, r14
    4d60:	52 96       	adiw	r26, 0x12	; 18
    4d62:	9c 93       	st	X, r25
    4d64:	8e 93       	st	-X, r24
    4d66:	51 97       	sbiw	r26, 0x11	; 17
	if (n_vol < 0x10000) {					/* Number of total sectors */
    4d68:	8d 81       	ldd	r24, Y+5	; 0x05
    4d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d6c:	af 81       	ldd	r26, Y+7	; 0x07
    4d6e:	b8 85       	ldd	r27, Y+8	; 0x08
    4d70:	80 30       	cpi	r24, 0x00	; 0
    4d72:	e0 e0       	ldi	r30, 0x00	; 0
    4d74:	9e 07       	cpc	r25, r30
    4d76:	e1 e0       	ldi	r30, 0x01	; 1
    4d78:	ae 07       	cpc	r26, r30
    4d7a:	e0 e0       	ldi	r30, 0x00	; 0
    4d7c:	be 07       	cpc	r27, r30
    4d7e:	20 f4       	brcc	.+8      	; 0x4d88 <f_mkfs+0x562>
		ST_WORD(tbl+BPB_TotSec16, n_vol);
    4d80:	f7 01       	movw	r30, r14
    4d82:	94 8b       	std	Z+20, r25	; 0x14
    4d84:	83 8b       	std	Z+19, r24	; 0x13
    4d86:	05 c0       	rjmp	.+10     	; 0x4d92 <f_mkfs+0x56c>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_vol);
    4d88:	f7 01       	movw	r30, r14
    4d8a:	80 a3       	std	Z+32, r24	; 0x20
    4d8c:	91 a3       	std	Z+33, r25	; 0x21
    4d8e:	a2 a3       	std	Z+34, r26	; 0x22
    4d90:	b3 a3       	std	Z+35, r27	; 0x23
	}
	tbl[BPB_Media] = md;					/* Media descriptor */
    4d92:	87 e4       	ldi	r24, 0x47	; 71
    4d94:	c8 2e       	mov	r12, r24
    4d96:	d1 2c       	mov	r13, r1
    4d98:	6c 0c       	add	r6, r12
    4d9a:	7d 1c       	adc	r7, r13
    4d9c:	d3 01       	movw	r26, r6
    4d9e:	1c 93       	st	X, r17
    4da0:	e9 eb       	ldi	r30, 0xB9	; 185
    4da2:	ff ef       	ldi	r31, 0xFF	; 255
    4da4:	6e 0e       	add	r6, r30
    4da6:	7f 1e       	adc	r7, r31
	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
    4da8:	8f e3       	ldi	r24, 0x3F	; 63
    4daa:	90 e0       	ldi	r25, 0x00	; 0
    4dac:	d7 01       	movw	r26, r14
    4dae:	59 96       	adiw	r26, 0x19	; 25
    4db0:	9c 93       	st	X, r25
    4db2:	8e 93       	st	-X, r24
    4db4:	58 97       	sbiw	r26, 0x18	; 24
	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
    4db6:	8f ef       	ldi	r24, 0xFF	; 255
    4db8:	90 e0       	ldi	r25, 0x00	; 0
    4dba:	5b 96       	adiw	r26, 0x1b	; 27
    4dbc:	9c 93       	st	X, r25
    4dbe:	8e 93       	st	-X, r24
    4dc0:	5a 97       	sbiw	r26, 0x1a	; 26
	ST_DWORD(tbl+BPB_HiddSec, b_vol);		/* Hidden sectors */
    4dc2:	2d 89       	ldd	r18, Y+21	; 0x15
    4dc4:	3e 89       	ldd	r19, Y+22	; 0x16
    4dc6:	4f 89       	ldd	r20, Y+23	; 0x17
    4dc8:	58 8d       	ldd	r21, Y+24	; 0x18
    4dca:	5c 96       	adiw	r26, 0x1c	; 28
    4dcc:	2d 93       	st	X+, r18
    4dce:	3d 93       	st	X+, r19
    4dd0:	4d 93       	st	X+, r20
    4dd2:	5c 93       	st	X, r21
    4dd4:	5f 97       	sbiw	r26, 0x1f	; 31
	n = get_fattime();						/* Use current time as VSN */
    4dd6:	0e 94 8f 49 	call	0x931e	; 0x931e <get_fattime>
    4dda:	69 83       	std	Y+1, r22	; 0x01
    4ddc:	7a 83       	std	Y+2, r23	; 0x02
    4dde:	8b 83       	std	Y+3, r24	; 0x03
    4de0:	9c 83       	std	Y+4, r25	; 0x04
	if (fmt == FS_FAT32) {
    4de2:	b9 8d       	ldd	r27, Y+25	; 0x19
    4de4:	b3 30       	cpi	r27, 0x03	; 3
    4de6:	09 f0       	breq	.+2      	; 0x4dea <f_mkfs+0x5c4>
    4de8:	3f c0       	rjmp	.+126    	; 0x4e68 <f_mkfs+0x642>
		ST_DWORD(tbl+BS_VolID32, n);		/* VSN */
    4dea:	e3 e4       	ldi	r30, 0x43	; 67
    4dec:	f0 e0       	ldi	r31, 0x00	; 0
    4dee:	ee 0e       	add	r14, r30
    4df0:	ff 1e       	adc	r15, r31
    4df2:	d7 01       	movw	r26, r14
    4df4:	6d 93       	st	X+, r22
    4df6:	7d 93       	st	X+, r23
    4df8:	8d 93       	st	X+, r24
    4dfa:	9c 93       	st	X, r25
    4dfc:	13 97       	sbiw	r26, 0x03	; 3
    4dfe:	ed eb       	ldi	r30, 0xBD	; 189
    4e00:	ff ef       	ldi	r31, 0xFF	; 255
    4e02:	ee 0e       	add	r14, r30
    4e04:	ff 1e       	adc	r15, r31
		ST_DWORD(tbl+BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
    4e06:	d7 01       	movw	r26, r14
    4e08:	94 96       	adiw	r26, 0x24	; 36
    4e0a:	2d 92       	st	X+, r2
    4e0c:	3d 92       	st	X+, r3
    4e0e:	4d 92       	st	X+, r4
    4e10:	5c 92       	st	X, r5
    4e12:	97 97       	sbiw	r26, 0x27	; 39
		ST_DWORD(tbl+BPB_RootClus, 2);		/* Root directory start cluster (2) */
    4e14:	82 e0       	ldi	r24, 0x02	; 2
    4e16:	90 e0       	ldi	r25, 0x00	; 0
    4e18:	a0 e0       	ldi	r26, 0x00	; 0
    4e1a:	b0 e0       	ldi	r27, 0x00	; 0
    4e1c:	f7 01       	movw	r30, r14
    4e1e:	84 a7       	std	Z+44, r24	; 0x2c
    4e20:	95 a7       	std	Z+45, r25	; 0x2d
    4e22:	a6 a7       	std	Z+46, r26	; 0x2e
    4e24:	b7 a7       	std	Z+47, r27	; 0x2f
		ST_WORD(tbl+BPB_FSInfo, 1);			/* FSInfo record offset (VBR+1) */
    4e26:	81 e0       	ldi	r24, 0x01	; 1
    4e28:	90 e0       	ldi	r25, 0x00	; 0
    4e2a:	91 ab       	std	Z+49, r25	; 0x31
    4e2c:	80 ab       	std	Z+48, r24	; 0x30
		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
    4e2e:	86 e0       	ldi	r24, 0x06	; 6
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	93 ab       	std	Z+51, r25	; 0x33
    4e34:	82 ab       	std	Z+50, r24	; 0x32
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
    4e36:	02 e7       	ldi	r16, 0x72	; 114
    4e38:	c0 2e       	mov	r12, r16
    4e3a:	d1 2c       	mov	r13, r1
    4e3c:	6c 0c       	add	r6, r12
    4e3e:	7d 1c       	adc	r7, r13
    4e40:	80 e8       	ldi	r24, 0x80	; 128
    4e42:	d3 01       	movw	r26, r6
    4e44:	8c 93       	st	X, r24
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
    4e46:	e2 e0       	ldi	r30, 0x02	; 2
    4e48:	f0 e0       	ldi	r31, 0x00	; 0
    4e4a:	6e 0e       	add	r6, r30
    4e4c:	7f 1e       	adc	r7, r31
    4e4e:	89 e2       	ldi	r24, 0x29	; 41
    4e50:	d3 01       	movw	r26, r6
    4e52:	8c 93       	st	X, r24
    4e54:	ec e8       	ldi	r30, 0x8C	; 140
    4e56:	ff ef       	ldi	r31, 0xFF	; 255
    4e58:	6e 0e       	add	r6, r30
    4e5a:	7f 1e       	adc	r7, r31
		mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
    4e5c:	c7 01       	movw	r24, r14
    4e5e:	89 5b       	subi	r24, 0xB9	; 185
    4e60:	9f 4f       	sbci	r25, 0xFF	; 255
    4e62:	6c e0       	ldi	r22, 0x0C	; 12
    4e64:	71 e0       	ldi	r23, 0x01	; 1
    4e66:	21 c0       	rjmp	.+66     	; 0x4eaa <f_mkfs+0x684>
	} else {
		ST_DWORD(tbl+BS_VolID, n);			/* VSN */
    4e68:	d7 01       	movw	r26, r14
    4e6a:	97 96       	adiw	r26, 0x27	; 39
    4e6c:	6d 93       	st	X+, r22
    4e6e:	7d 93       	st	X+, r23
    4e70:	8d 93       	st	X+, r24
    4e72:	9c 93       	st	X, r25
    4e74:	9a 97       	sbiw	r26, 0x2a	; 42
		ST_WORD(tbl+BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
    4e76:	57 96       	adiw	r26, 0x17	; 23
    4e78:	3c 92       	st	X, r3
    4e7a:	2e 92       	st	-X, r2
    4e7c:	56 97       	sbiw	r26, 0x16	; 22
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
    4e7e:	e6 e5       	ldi	r30, 0x56	; 86
    4e80:	f0 e0       	ldi	r31, 0x00	; 0
    4e82:	6e 0e       	add	r6, r30
    4e84:	7f 1e       	adc	r7, r31
    4e86:	80 e8       	ldi	r24, 0x80	; 128
    4e88:	d3 01       	movw	r26, r6
    4e8a:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
    4e8c:	e2 e0       	ldi	r30, 0x02	; 2
    4e8e:	f0 e0       	ldi	r31, 0x00	; 0
    4e90:	6e 0e       	add	r6, r30
    4e92:	7f 1e       	adc	r7, r31
    4e94:	89 e2       	ldi	r24, 0x29	; 41
    4e96:	d3 01       	movw	r26, r6
    4e98:	8c 93       	st	X, r24
    4e9a:	e8 ea       	ldi	r30, 0xA8	; 168
    4e9c:	ff ef       	ldi	r31, 0xFF	; 255
    4e9e:	6e 0e       	add	r6, r30
    4ea0:	7f 1e       	adc	r7, r31
		mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
    4ea2:	c7 01       	movw	r24, r14
    4ea4:	8b 96       	adiw	r24, 0x2b	; 43
    4ea6:	60 e2       	ldi	r22, 0x20	; 32
    4ea8:	71 e0       	ldi	r23, 0x01	; 1
    4eaa:	43 e1       	ldi	r20, 0x13	; 19
    4eac:	50 e0       	ldi	r21, 0x00	; 0
    4eae:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <mem_cpy>
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
    4eb2:	97 01       	movw	r18, r14
    4eb4:	22 50       	subi	r18, 0x02	; 2
    4eb6:	3e 4f       	sbci	r19, 0xFE	; 254
    4eb8:	3b 8f       	std	Y+27, r19	; 0x1b
    4eba:	2a 8f       	std	Y+26, r18	; 0x1a
    4ebc:	85 e5       	ldi	r24, 0x55	; 85
    4ebe:	9a ea       	ldi	r25, 0xAA	; 170
    4ec0:	d9 01       	movw	r26, r18
    4ec2:	8d 93       	st	X+, r24
    4ec4:	9c 93       	st	X, r25
	if (disk_write(drv, tbl, b_vol, 1) != RES_OK)	/* Write VBR */
    4ec6:	8c a1       	ldd	r24, Y+36	; 0x24
    4ec8:	b7 01       	movw	r22, r14
    4eca:	2d 89       	ldd	r18, Y+21	; 0x15
    4ecc:	3e 89       	ldd	r19, Y+22	; 0x16
    4ece:	4f 89       	ldd	r20, Y+23	; 0x17
    4ed0:	58 8d       	ldd	r21, Y+24	; 0x18
    4ed2:	01 e0       	ldi	r16, 0x01	; 1
    4ed4:	0e 94 6e 58 	call	0xb0dc	; 0xb0dc <disk_write>
    4ed8:	88 23       	and	r24, r24
    4eda:	09 f0       	breq	.+2      	; 0x4ede <f_mkfs+0x6b8>
    4edc:	29 c1       	rjmp	.+594    	; 0x5130 <f_mkfs+0x90a>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)							/* Write backup VBR if needed (VBR+6) */
    4ede:	b9 8d       	ldd	r27, Y+25	; 0x19
    4ee0:	b3 30       	cpi	r27, 0x03	; 3
    4ee2:	61 f4       	brne	.+24     	; 0x4efc <f_mkfs+0x6d6>
		disk_write(drv, tbl, b_vol + 6, 1);
    4ee4:	2d 89       	ldd	r18, Y+21	; 0x15
    4ee6:	3e 89       	ldd	r19, Y+22	; 0x16
    4ee8:	4f 89       	ldd	r20, Y+23	; 0x17
    4eea:	58 8d       	ldd	r21, Y+24	; 0x18
    4eec:	2a 5f       	subi	r18, 0xFA	; 250
    4eee:	3f 4f       	sbci	r19, 0xFF	; 255
    4ef0:	4f 4f       	sbci	r20, 0xFF	; 255
    4ef2:	5f 4f       	sbci	r21, 0xFF	; 255
    4ef4:	8c a1       	ldd	r24, Y+36	; 0x24
    4ef6:	b7 01       	movw	r22, r14
    4ef8:	0e 94 6e 58 	call	0xb0dc	; 0xb0dc <disk_write>
    4efc:	f7 01       	movw	r30, r14
    4efe:	80 e0       	ldi	r24, 0x00	; 0
    4f00:	92 e0       	ldi	r25, 0x02	; 2
    4f02:	01 c0       	rjmp	.+2      	; 0x4f06 <f_mkfs+0x6e0>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    4f04:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    4f06:	01 97       	sbiw	r24, 0x01	; 1
    4f08:	2f ef       	ldi	r18, 0xFF	; 255
    4f0a:	8f 3f       	cpi	r24, 0xFF	; 255
    4f0c:	92 07       	cpc	r25, r18
    4f0e:	d1 f7       	brne	.-12     	; 0x4f04 <f_mkfs+0x6de>

	/* Initialize FAT area */
	wsect = b_fat;
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
		n = md;								/* Media descriptor byte */
    4f10:	21 2f       	mov	r18, r17
    4f12:	30 e0       	ldi	r19, 0x00	; 0
    4f14:	40 e0       	ldi	r20, 0x00	; 0
    4f16:	50 e0       	ldi	r21, 0x00	; 0
		if (fmt != FS_FAT32) {
    4f18:	89 8d       	ldd	r24, Y+25	; 0x19
    4f1a:	83 30       	cpi	r24, 0x03	; 3
    4f1c:	c9 f0       	breq	.+50     	; 0x4f50 <f_mkfs+0x72a>
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    4f1e:	81 30       	cpi	r24, 0x01	; 1
    4f20:	29 f0       	breq	.+10     	; 0x4f2c <f_mkfs+0x706>
    4f22:	80 e0       	ldi	r24, 0x00	; 0
    4f24:	9f ef       	ldi	r25, 0xFF	; 255
    4f26:	af ef       	ldi	r26, 0xFF	; 255
    4f28:	bf ef       	ldi	r27, 0xFF	; 255
    4f2a:	04 c0       	rjmp	.+8      	; 0x4f34 <f_mkfs+0x70e>
    4f2c:	80 e0       	ldi	r24, 0x00	; 0
    4f2e:	9f ef       	ldi	r25, 0xFF	; 255
    4f30:	af ef       	ldi	r26, 0xFF	; 255
    4f32:	b0 e0       	ldi	r27, 0x00	; 0
    4f34:	82 2b       	or	r24, r18
    4f36:	93 2b       	or	r25, r19
    4f38:	a4 2b       	or	r26, r20
    4f3a:	b5 2b       	or	r27, r21
    4f3c:	89 83       	std	Y+1, r24	; 0x01
    4f3e:	9a 83       	std	Y+2, r25	; 0x02
    4f40:	ab 83       	std	Y+3, r26	; 0x03
    4f42:	bc 83       	std	Y+4, r27	; 0x04
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT12/16) */
    4f44:	f3 01       	movw	r30, r6
    4f46:	82 ab       	std	Z+50, r24	; 0x32
    4f48:	93 ab       	std	Z+51, r25	; 0x33
    4f4a:	a4 ab       	std	Z+52, r26	; 0x34
    4f4c:	b5 ab       	std	Z+53, r27	; 0x35
    4f4e:	1f c0       	rjmp	.+62     	; 0x4f8e <f_mkfs+0x768>
		} else {
			n |= 0xFFFFFF00;
    4f50:	da 01       	movw	r26, r20
    4f52:	c9 01       	movw	r24, r18
    4f54:	9f 6f       	ori	r25, 0xFF	; 255
    4f56:	af 6f       	ori	r26, 0xFF	; 255
    4f58:	bf 6f       	ori	r27, 0xFF	; 255
    4f5a:	89 83       	std	Y+1, r24	; 0x01
    4f5c:	9a 83       	std	Y+2, r25	; 0x02
    4f5e:	ab 83       	std	Y+3, r26	; 0x03
    4f60:	bc 83       	std	Y+4, r27	; 0x04
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
    4f62:	f3 01       	movw	r30, r6
    4f64:	82 ab       	std	Z+50, r24	; 0x32
    4f66:	93 ab       	std	Z+51, r25	; 0x33
    4f68:	a4 ab       	std	Z+52, r26	; 0x34
    4f6a:	b5 ab       	std	Z+53, r27	; 0x35
			ST_DWORD(tbl+4, 0xFFFFFFFF);
    4f6c:	8f ef       	ldi	r24, 0xFF	; 255
    4f6e:	9f ef       	ldi	r25, 0xFF	; 255
    4f70:	af ef       	ldi	r26, 0xFF	; 255
    4f72:	bf ef       	ldi	r27, 0xFF	; 255
    4f74:	f7 01       	movw	r30, r14
    4f76:	84 83       	std	Z+4, r24	; 0x04
    4f78:	95 83       	std	Z+5, r25	; 0x05
    4f7a:	a6 83       	std	Z+6, r26	; 0x06
    4f7c:	b7 83       	std	Z+7, r27	; 0x07
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    4f7e:	8f ef       	ldi	r24, 0xFF	; 255
    4f80:	9f ef       	ldi	r25, 0xFF	; 255
    4f82:	af ef       	ldi	r26, 0xFF	; 255
    4f84:	bf e0       	ldi	r27, 0x0F	; 15
    4f86:	80 87       	std	Z+8, r24	; 0x08
    4f88:	91 87       	std	Z+9, r25	; 0x09
    4f8a:	a2 87       	std	Z+10, r26	; 0x0a
    4f8c:	b3 87       	std	Z+11, r27	; 0x0b
		}
		if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
    4f8e:	8c a1       	ldd	r24, Y+36	; 0x24
    4f90:	b7 01       	movw	r22, r14
    4f92:	29 89       	ldd	r18, Y+17	; 0x11
    4f94:	3a 89       	ldd	r19, Y+18	; 0x12
    4f96:	4b 89       	ldd	r20, Y+19	; 0x13
    4f98:	5c 89       	ldd	r21, Y+20	; 0x14
    4f9a:	01 e0       	ldi	r16, 0x01	; 1
    4f9c:	0e 94 6e 58 	call	0xb0dc	; 0xb0dc <disk_write>
    4fa0:	88 23       	and	r24, r24
    4fa2:	09 f0       	breq	.+2      	; 0x4fa6 <f_mkfs+0x780>
    4fa4:	c5 c0       	rjmp	.+394    	; 0x5130 <f_mkfs+0x90a>
    4fa6:	f7 01       	movw	r30, r14
    4fa8:	80 e0       	ldi	r24, 0x00	; 0
    4faa:	92 e0       	ldi	r25, 0x02	; 2
    4fac:	01 c0       	rjmp	.+2      	; 0x4fb0 <f_mkfs+0x78a>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    4fae:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    4fb0:	01 97       	sbiw	r24, 0x01	; 1
    4fb2:	2f ef       	ldi	r18, 0xFF	; 255
    4fb4:	8f 3f       	cpi	r24, 0xFF	; 255
    4fb6:	92 07       	cpc	r25, r18
    4fb8:	d1 f7       	brne	.-12     	; 0x4fae <f_mkfs+0x788>
			n |= 0xFFFFFF00;
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
    4fba:	a9 88       	ldd	r10, Y+17	; 0x11
    4fbc:	ba 88       	ldd	r11, Y+18	; 0x12
    4fbe:	cb 88       	ldd	r12, Y+19	; 0x13
    4fc0:	dc 88       	ldd	r13, Y+20	; 0x14
    4fc2:	08 94       	sec
    4fc4:	a1 1c       	adc	r10, r1
    4fc6:	b1 1c       	adc	r11, r1
    4fc8:	c1 1c       	adc	r12, r1
    4fca:	d1 1c       	adc	r13, r1
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
    4fcc:	81 e0       	ldi	r24, 0x01	; 1
    4fce:	90 e0       	ldi	r25, 0x00	; 0
    4fd0:	a0 e0       	ldi	r26, 0x00	; 0
    4fd2:	b0 e0       	ldi	r27, 0x00	; 0
    4fd4:	16 c0       	rjmp	.+44     	; 0x5002 <f_mkfs+0x7dc>
			if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
    4fd6:	8c a1       	ldd	r24, Y+36	; 0x24
    4fd8:	b7 01       	movw	r22, r14
    4fda:	a6 01       	movw	r20, r12
    4fdc:	95 01       	movw	r18, r10
    4fde:	01 e0       	ldi	r16, 0x01	; 1
    4fe0:	0e 94 6e 58 	call	0xb0dc	; 0xb0dc <disk_write>
    4fe4:	88 23       	and	r24, r24
    4fe6:	09 f0       	breq	.+2      	; 0x4fea <f_mkfs+0x7c4>
    4fe8:	a3 c0       	rjmp	.+326    	; 0x5130 <f_mkfs+0x90a>
    4fea:	08 94       	sec
    4fec:	a1 1c       	adc	r10, r1
    4fee:	b1 1c       	adc	r11, r1
    4ff0:	c1 1c       	adc	r12, r1
    4ff2:	d1 1c       	adc	r13, r1
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
    4ff4:	89 81       	ldd	r24, Y+1	; 0x01
    4ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ff8:	ab 81       	ldd	r26, Y+3	; 0x03
    4ffa:	bc 81       	ldd	r27, Y+4	; 0x04
    4ffc:	01 96       	adiw	r24, 0x01	; 1
    4ffe:	a1 1d       	adc	r26, r1
    5000:	b1 1d       	adc	r27, r1
    5002:	89 83       	std	Y+1, r24	; 0x01
    5004:	9a 83       	std	Y+2, r25	; 0x02
    5006:	ab 83       	std	Y+3, r26	; 0x03
    5008:	bc 83       	std	Y+4, r27	; 0x04
    500a:	89 81       	ldd	r24, Y+1	; 0x01
    500c:	9a 81       	ldd	r25, Y+2	; 0x02
    500e:	ab 81       	ldd	r26, Y+3	; 0x03
    5010:	bc 81       	ldd	r27, Y+4	; 0x04
    5012:	82 15       	cp	r24, r2
    5014:	93 05       	cpc	r25, r3
    5016:	a4 05       	cpc	r26, r4
    5018:	b5 05       	cpc	r27, r5
    501a:	e8 f2       	brcs	.-70     	; 0x4fd6 <f_mkfs+0x7b0>
				return FR_DISK_ERR;
		}
	}

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : n_dir;
    501c:	39 8d       	ldd	r19, Y+25	; 0x19
    501e:	33 30       	cpi	r19, 0x03	; 3
    5020:	11 f0       	breq	.+4      	; 0x5026 <f_mkfs+0x800>
    5022:	89 84       	ldd	r8, Y+9	; 0x09
    5024:	9a 84       	ldd	r9, Y+10	; 0x0a
	do {
		if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
    5026:	15 01       	movw	r2, r10
    5028:	26 01       	movw	r4, r12
    502a:	08 94       	sec
    502c:	21 1c       	adc	r2, r1
    502e:	31 1c       	adc	r3, r1
    5030:	41 1c       	adc	r4, r1
    5032:	51 1c       	adc	r5, r1
    5034:	8c a1       	ldd	r24, Y+36	; 0x24
    5036:	b7 01       	movw	r22, r14
    5038:	a6 01       	movw	r20, r12
    503a:	95 01       	movw	r18, r10
    503c:	01 e0       	ldi	r16, 0x01	; 1
    503e:	0e 94 6e 58 	call	0xb0dc	; 0xb0dc <disk_write>
    5042:	88 23       	and	r24, r24
    5044:	09 f0       	breq	.+2      	; 0x5048 <f_mkfs+0x822>
    5046:	74 c0       	rjmp	.+232    	; 0x5130 <f_mkfs+0x90a>
			return FR_DISK_ERR;
	} while (--i);
    5048:	08 94       	sec
    504a:	81 08       	sbc	r8, r1
    504c:	91 08       	sbc	r9, r1
    504e:	81 14       	cp	r8, r1
    5050:	91 04       	cpc	r9, r1
    5052:	19 f0       	breq	.+6      	; 0x505a <f_mkfs+0x834>
    5054:	62 01       	movw	r12, r4
    5056:	51 01       	movw	r10, r2
    5058:	e6 cf       	rjmp	.-52     	; 0x5026 <f_mkfs+0x800>
		disk_ioctl(drv, CTRL_ERASE_SECTOR, eb);
	}
#endif

	/* Create FSInfo if needed */
	if (fmt == FS_FAT32) {
    505a:	49 8d       	ldd	r20, Y+25	; 0x19
    505c:	43 30       	cpi	r20, 0x03	; 3
    505e:	09 f0       	breq	.+2      	; 0x5062 <f_mkfs+0x83c>
    5060:	5f c0       	rjmp	.+190    	; 0x5120 <f_mkfs+0x8fa>
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    5062:	82 e5       	ldi	r24, 0x52	; 82
    5064:	92 e5       	ldi	r25, 0x52	; 82
    5066:	a1 e6       	ldi	r26, 0x61	; 97
    5068:	b1 e4       	ldi	r27, 0x41	; 65
    506a:	f3 01       	movw	r30, r6
    506c:	82 ab       	std	Z+50, r24	; 0x32
    506e:	93 ab       	std	Z+51, r25	; 0x33
    5070:	a4 ab       	std	Z+52, r26	; 0x34
    5072:	b5 ab       	std	Z+53, r27	; 0x35
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    5074:	b4 ee       	ldi	r27, 0xE4	; 228
    5076:	cb 2e       	mov	r12, r27
    5078:	b1 e0       	ldi	r27, 0x01	; 1
    507a:	db 2e       	mov	r13, r27
    507c:	ec 0c       	add	r14, r12
    507e:	fd 1c       	adc	r15, r13
    5080:	82 e7       	ldi	r24, 0x72	; 114
    5082:	92 e7       	ldi	r25, 0x72	; 114
    5084:	a1 e4       	ldi	r26, 0x41	; 65
    5086:	b1 e6       	ldi	r27, 0x61	; 97
    5088:	f7 01       	movw	r30, r14
    508a:	81 93       	st	Z+, r24
    508c:	91 93       	st	Z+, r25
    508e:	a1 93       	st	Z+, r26
    5090:	b1 93       	st	Z+, r27
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
    5092:	2e a1       	ldd	r18, Y+38	; 0x26
    5094:	3f a1       	ldd	r19, Y+39	; 0x27
    5096:	48 a5       	ldd	r20, Y+40	; 0x28
    5098:	59 a5       	ldd	r21, Y+41	; 0x29
    509a:	21 50       	subi	r18, 0x01	; 1
    509c:	30 40       	sbci	r19, 0x00	; 0
    509e:	40 40       	sbci	r20, 0x00	; 0
    50a0:	50 40       	sbci	r21, 0x00	; 0
    50a2:	df 01       	movw	r26, r30
    50a4:	2d 93       	st	X+, r18
    50a6:	3d 93       	st	X+, r19
    50a8:	4d 93       	st	X+, r20
    50aa:	5d 93       	st	X+, r21
    50ac:	7d 01       	movw	r14, r26
		ST_DWORD(tbl+FSI_Nxt_Free, 2);				/* Last allocated cluster# */
    50ae:	82 e0       	ldi	r24, 0x02	; 2
    50b0:	90 e0       	ldi	r25, 0x00	; 0
    50b2:	a0 e0       	ldi	r26, 0x00	; 0
    50b4:	b0 e0       	ldi	r27, 0x00	; 0
    50b6:	f7 01       	movw	r30, r14
    50b8:	80 83       	st	Z, r24
    50ba:	91 83       	std	Z+1, r25	; 0x01
    50bc:	a2 83       	std	Z+2, r26	; 0x02
    50be:	b3 83       	std	Z+3, r27	; 0x03
    50c0:	a4 e1       	ldi	r26, 0x14	; 20
    50c2:	ca 2e       	mov	r12, r26
    50c4:	ae ef       	ldi	r26, 0xFE	; 254
    50c6:	da 2e       	mov	r13, r26
    50c8:	ec 0c       	add	r14, r12
    50ca:	fd 1c       	adc	r15, r13
		ST_WORD(tbl+BS_55AA, 0xAA55);
    50cc:	85 e5       	ldi	r24, 0x55	; 85
    50ce:	9a ea       	ldi	r25, 0xAA	; 170
    50d0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    50d2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    50d4:	8d 93       	st	X+, r24
    50d6:	9c 93       	st	X, r25
		disk_write(drv, tbl, b_vol + 1, 1);	/* Write original (VBR+1) */
    50d8:	2d 89       	ldd	r18, Y+21	; 0x15
    50da:	3e 89       	ldd	r19, Y+22	; 0x16
    50dc:	4f 89       	ldd	r20, Y+23	; 0x17
    50de:	58 8d       	ldd	r21, Y+24	; 0x18
    50e0:	2f 5f       	subi	r18, 0xFF	; 255
    50e2:	3f 4f       	sbci	r19, 0xFF	; 255
    50e4:	4f 4f       	sbci	r20, 0xFF	; 255
    50e6:	5f 4f       	sbci	r21, 0xFF	; 255
    50e8:	2d 8b       	std	Y+21, r18	; 0x15
    50ea:	3e 8b       	std	Y+22, r19	; 0x16
    50ec:	4f 8b       	std	Y+23, r20	; 0x17
    50ee:	58 8f       	std	Y+24, r21	; 0x18
    50f0:	8c a1       	ldd	r24, Y+36	; 0x24
    50f2:	b7 01       	movw	r22, r14
    50f4:	01 e0       	ldi	r16, 0x01	; 1
    50f6:	0e 94 6e 58 	call	0xb0dc	; 0xb0dc <disk_write>
		disk_write(drv, tbl, b_vol + 7, 1);	/* Write backup (VBR+7) */
    50fa:	8d 89       	ldd	r24, Y+21	; 0x15
    50fc:	9e 89       	ldd	r25, Y+22	; 0x16
    50fe:	af 89       	ldd	r26, Y+23	; 0x17
    5100:	b8 8d       	ldd	r27, Y+24	; 0x18
    5102:	06 96       	adiw	r24, 0x06	; 6
    5104:	a1 1d       	adc	r26, r1
    5106:	b1 1d       	adc	r27, r1
    5108:	8d 8b       	std	Y+21, r24	; 0x15
    510a:	9e 8b       	std	Y+22, r25	; 0x16
    510c:	af 8b       	std	Y+23, r26	; 0x17
    510e:	b8 8f       	std	Y+24, r27	; 0x18
    5110:	8c a1       	ldd	r24, Y+36	; 0x24
    5112:	b7 01       	movw	r22, r14
    5114:	2d 89       	ldd	r18, Y+21	; 0x15
    5116:	3e 89       	ldd	r19, Y+22	; 0x16
    5118:	4f 89       	ldd	r20, Y+23	; 0x17
    511a:	58 8d       	ldd	r21, Y+24	; 0x18
    511c:	0e 94 6e 58 	call	0xb0dc	; 0xb0dc <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)0) == RES_OK) ? FR_OK : FR_DISK_ERR;
    5120:	8c a1       	ldd	r24, Y+36	; 0x24
    5122:	60 e0       	ldi	r22, 0x00	; 0
    5124:	40 e0       	ldi	r20, 0x00	; 0
    5126:	50 e0       	ldi	r21, 0x00	; 0
    5128:	0e 94 df 58 	call	0xb1be	; 0xb1be <disk_ioctl>
    512c:	88 23       	and	r24, r24
    512e:	19 f0       	breq	.+6      	; 0x5136 <f_mkfs+0x910>
    5130:	81 e0       	ldi	r24, 0x01	; 1
    5132:	01 c0       	rjmp	.+2      	; 0x5136 <f_mkfs+0x910>
    5134:	8e e0       	ldi	r24, 0x0E	; 14
}
    5136:	a9 96       	adiw	r28, 0x29	; 41
    5138:	0f b6       	in	r0, 0x3f	; 63
    513a:	f8 94       	cli
    513c:	de bf       	out	0x3e, r29	; 62
    513e:	0f be       	out	0x3f, r0	; 63
    5140:	cd bf       	out	0x3d, r28	; 61
    5142:	cf 91       	pop	r28
    5144:	df 91       	pop	r29
    5146:	1f 91       	pop	r17
    5148:	0f 91       	pop	r16
    514a:	ff 90       	pop	r15
    514c:	ef 90       	pop	r14
    514e:	df 90       	pop	r13
    5150:	cf 90       	pop	r12
    5152:	bf 90       	pop	r11
    5154:	af 90       	pop	r10
    5156:	9f 90       	pop	r9
    5158:	8f 90       	pop	r8
    515a:	7f 90       	pop	r7
    515c:	6f 90       	pop	r6
    515e:	5f 90       	pop	r5
    5160:	4f 90       	pop	r4
    5162:	3f 90       	pop	r3
    5164:	2f 90       	pop	r2
    5166:	08 95       	ret
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    5168:	1c 01       	movw	r2, r24
    516a:	2d 01       	movw	r4, r26
    516c:	f2 e0       	ldi	r31, 0x02	; 2
    516e:	22 0c       	add	r2, r2
    5170:	33 1c       	adc	r3, r3
    5172:	44 1c       	adc	r4, r4
    5174:	55 1c       	adc	r5, r5
    5176:	fa 95       	dec	r31
    5178:	d1 f7       	brne	.-12     	; 0x516e <f_mkfs+0x948>
    517a:	e7 e0       	ldi	r30, 0x07	; 7
    517c:	ce 2e       	mov	r12, r30
    517e:	e2 e0       	ldi	r30, 0x02	; 2
    5180:	de 2e       	mov	r13, r30
    5182:	e1 2c       	mov	r14, r1
    5184:	f1 2c       	mov	r15, r1
    5186:	2c 0c       	add	r2, r12
    5188:	3d 1c       	adc	r3, r13
    518a:	4e 1c       	adc	r4, r14
    518c:	5f 1c       	adc	r5, r15
    518e:	79 e0       	ldi	r23, 0x09	; 9
    5190:	56 94       	lsr	r5
    5192:	47 94       	ror	r4
    5194:	37 94       	ror	r3
    5196:	27 94       	ror	r2
    5198:	7a 95       	dec	r23
    519a:	d1 f7       	brne	.-12     	; 0x5190 <f_mkfs+0x96a>
    519c:	20 e2       	ldi	r18, 0x20	; 32
    519e:	30 e0       	ldi	r19, 0x00	; 0
    51a0:	40 e0       	ldi	r20, 0x00	; 0
    51a2:	50 e0       	ldi	r21, 0x00	; 0
    51a4:	2d 87       	std	Y+13, r18	; 0x0d
    51a6:	3e 87       	std	Y+14, r19	; 0x0e
    51a8:	4f 87       	std	Y+15, r20	; 0x0f
    51aa:	58 8b       	std	Y+16, r21	; 0x10
    51ac:	19 86       	std	Y+9, r1	; 0x09
    51ae:	1a 86       	std	Y+10, r1	; 0x0a
    51b0:	1b 86       	std	Y+11, r1	; 0x0b
    51b2:	1c 86       	std	Y+12, r1	; 0x0c
    51b4:	33 e0       	ldi	r19, 0x03	; 3
    51b6:	39 8f       	std	Y+25, r19	; 0x19
    51b8:	38 cc       	rjmp	.-1936   	; 0x4a2a <f_mkfs+0x204>
		n_rsv = 32;
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
    51ba:	9c 01       	movw	r18, r24
    51bc:	ad 01       	movw	r20, r26
    51be:	2e 5f       	subi	r18, 0xFE	; 254
    51c0:	3f 4f       	sbci	r19, 0xFF	; 255
    51c2:	4f 4f       	sbci	r20, 0xFF	; 255
    51c4:	5f 4f       	sbci	r21, 0xFF	; 255
    51c6:	22 0f       	add	r18, r18
    51c8:	33 1f       	adc	r19, r19
    51ca:	44 1f       	adc	r20, r20
    51cc:	55 1f       	adc	r21, r21
    51ce:	82 e0       	ldi	r24, 0x02	; 2
    51d0:	09 cc       	rjmp	.-2030   	; 0x49e4 <f_mkfs+0x1be>

000051d2 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    51d2:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    51d4:	00 97       	sbiw	r24, 0x00	; 0
    51d6:	89 f0       	breq	.+34     	; 0x51fa <validate+0x28>
    51d8:	80 81       	ld	r24, Z
    51da:	88 23       	and	r24, r24
    51dc:	71 f0       	breq	.+28     	; 0x51fa <validate+0x28>
    51de:	86 81       	ldd	r24, Z+6	; 0x06
    51e0:	97 81       	ldd	r25, Z+7	; 0x07
    51e2:	86 17       	cp	r24, r22
    51e4:	97 07       	cpc	r25, r23
    51e6:	49 f4       	brne	.+18     	; 0x51fa <validate+0x28>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    51e8:	81 81       	ldd	r24, Z+1	; 0x01
    51ea:	0e 94 0e 58 	call	0xb01c	; 0xb01c <disk_status>
    51ee:	80 fd       	sbrc	r24, 0
    51f0:	02 c0       	rjmp	.+4      	; 0x51f6 <validate+0x24>
    51f2:	80 e0       	ldi	r24, 0x00	; 0
    51f4:	08 95       	ret
    51f6:	83 e0       	ldi	r24, 0x03	; 3
    51f8:	08 95       	ret
    51fa:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
    51fc:	08 95       	ret

000051fe <check_fs>:
static
BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    51fe:	0f 93       	push	r16
    5200:	cf 93       	push	r28
    5202:	df 93       	push	r29
    5204:	ec 01       	movw	r28, r24
    5206:	9a 01       	movw	r18, r20
    5208:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    520a:	bc 01       	movw	r22, r24
    520c:	6e 5c       	subi	r22, 0xCE	; 206
    520e:	7f 4f       	sbci	r23, 0xFF	; 255
    5210:	89 81       	ldd	r24, Y+1	; 0x01
    5212:	01 e0       	ldi	r16, 0x01	; 1
    5214:	0e 94 15 58 	call	0xb02a	; 0xb02a <disk_read>
    5218:	88 23       	and	r24, r24
    521a:	11 f0       	breq	.+4      	; 0x5220 <check_fs+0x22>
    521c:	23 e0       	ldi	r18, 0x03	; 3
    521e:	29 c0       	rjmp	.+82     	; 0x5272 <check_fs+0x74>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    5220:	c0 5d       	subi	r28, 0xD0	; 208
    5222:	dd 4f       	sbci	r29, 0xFD	; 253
    5224:	88 81       	ld	r24, Y
    5226:	99 81       	ldd	r25, Y+1	; 0x01
    5228:	c0 53       	subi	r28, 0x30	; 48
    522a:	d2 40       	sbci	r29, 0x02	; 2
    522c:	85 55       	subi	r24, 0x55	; 85
    522e:	9a 4a       	sbci	r25, 0xAA	; 170
    5230:	11 f0       	breq	.+4      	; 0x5236 <check_fs+0x38>
    5232:	22 e0       	ldi	r18, 0x02	; 2
    5234:	1e c0       	rjmp	.+60     	; 0x5272 <check_fs+0x74>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    5236:	c8 59       	subi	r28, 0x98	; 152
    5238:	df 4f       	sbci	r29, 0xFF	; 255
    523a:	88 81       	ld	r24, Y
    523c:	99 81       	ldd	r25, Y+1	; 0x01
    523e:	aa 81       	ldd	r26, Y+2	; 0x02
    5240:	bb 81       	ldd	r27, Y+3	; 0x03
    5242:	c8 56       	subi	r28, 0x68	; 104
    5244:	d0 40       	sbci	r29, 0x00	; 0
    5246:	b0 70       	andi	r27, 0x00	; 0
    5248:	86 54       	subi	r24, 0x46	; 70
    524a:	91 44       	sbci	r25, 0x41	; 65
    524c:	a4 45       	sbci	r26, 0x54	; 84
    524e:	b0 40       	sbci	r27, 0x00	; 0
    5250:	11 f4       	brne	.+4      	; 0x5256 <check_fs+0x58>
    5252:	20 e0       	ldi	r18, 0x00	; 0
    5254:	0e c0       	rjmp	.+28     	; 0x5272 <check_fs+0x74>
    5256:	20 e0       	ldi	r18, 0x00	; 0
    5258:	cc 57       	subi	r28, 0x7C	; 124
    525a:	df 4f       	sbci	r29, 0xFF	; 255
    525c:	88 81       	ld	r24, Y
    525e:	99 81       	ldd	r25, Y+1	; 0x01
    5260:	aa 81       	ldd	r26, Y+2	; 0x02
    5262:	bb 81       	ldd	r27, Y+3	; 0x03
    5264:	b0 70       	andi	r27, 0x00	; 0
    5266:	86 54       	subi	r24, 0x46	; 70
    5268:	91 44       	sbci	r25, 0x41	; 65
    526a:	a4 45       	sbci	r26, 0x54	; 84
    526c:	b0 40       	sbci	r27, 0x00	; 0
    526e:	09 f0       	breq	.+2      	; 0x5272 <check_fs+0x74>
    5270:	21 e0       	ldi	r18, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    5272:	82 2f       	mov	r24, r18
    5274:	df 91       	pop	r29
    5276:	cf 91       	pop	r28
    5278:	0f 91       	pop	r16
    527a:	08 95       	ret

0000527c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    527c:	2f 92       	push	r2
    527e:	3f 92       	push	r3
    5280:	4f 92       	push	r4
    5282:	5f 92       	push	r5
    5284:	6f 92       	push	r6
    5286:	7f 92       	push	r7
    5288:	8f 92       	push	r8
    528a:	9f 92       	push	r9
    528c:	af 92       	push	r10
    528e:	bf 92       	push	r11
    5290:	cf 92       	push	r12
    5292:	df 92       	push	r13
    5294:	ef 92       	push	r14
    5296:	ff 92       	push	r15
    5298:	0f 93       	push	r16
    529a:	1f 93       	push	r17
    529c:	df 93       	push	r29
    529e:	cf 93       	push	r28
    52a0:	cd b7       	in	r28, 0x3d	; 61
    52a2:	de b7       	in	r29, 0x3e	; 62
    52a4:	2a 97       	sbiw	r28, 0x0a	; 10
    52a6:	0f b6       	in	r0, 0x3f	; 63
    52a8:	f8 94       	cli
    52aa:	de bf       	out	0x3e, r29	; 62
    52ac:	0f be       	out	0x3f, r0	; 63
    52ae:	cd bf       	out	0x3d, r28	; 61
    52b0:	fc 01       	movw	r30, r24
    52b2:	9b 01       	movw	r18, r22
    52b4:	f4 2e       	mov	r15, r20
	BYTE fmt, b, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    52b6:	a0 81       	ld	r26, Z
    52b8:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    52ba:	8c 91       	ld	r24, X
    52bc:	08 2f       	mov	r16, r24
    52be:	10 e0       	ldi	r17, 0x00	; 0
    52c0:	00 53       	subi	r16, 0x30	; 48
    52c2:	10 40       	sbci	r17, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    52c4:	0a 30       	cpi	r16, 0x0A	; 10
    52c6:	11 05       	cpc	r17, r1
    52c8:	48 f4       	brcc	.+18     	; 0x52dc <chk_mounted+0x60>
    52ca:	11 96       	adiw	r26, 0x01	; 1
    52cc:	8c 91       	ld	r24, X
    52ce:	11 97       	sbiw	r26, 0x01	; 1
    52d0:	8a 33       	cpi	r24, 0x3A	; 58
    52d2:	21 f4       	brne	.+8      	; 0x52dc <chk_mounted+0x60>
		p += 2; *path = p;				/* Return pointer to the path name */
    52d4:	12 96       	adiw	r26, 0x02	; 2
    52d6:	b1 83       	std	Z+1, r27	; 0x01
    52d8:	a0 83       	st	Z, r26
    52da:	04 c0       	rjmp	.+8      	; 0x52e4 <chk_mounted+0x68>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
    52dc:	80 91 8e 01 	lds	r24, 0x018E
    52e0:	08 2f       	mov	r16, r24
    52e2:	10 e0       	ldi	r17, 0x00	; 0
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    52e4:	02 30       	cpi	r16, 0x02	; 2
    52e6:	11 05       	cpc	r17, r1
    52e8:	10 f0       	brcs	.+4      	; 0x52ee <chk_mounted+0x72>
    52ea:	8b e0       	ldi	r24, 0x0B	; 11
    52ec:	5c c2       	rjmp	.+1208   	; 0x57a6 <chk_mounted+0x52a>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    52ee:	f8 01       	movw	r30, r16
    52f0:	ee 0f       	add	r30, r30
    52f2:	ff 1f       	adc	r31, r31
    52f4:	e8 57       	subi	r30, 0x78	; 120
    52f6:	fe 4f       	sbci	r31, 0xFE	; 254
    52f8:	40 81       	ld	r20, Z
    52fa:	51 81       	ldd	r21, Z+1	; 0x01
    52fc:	5a 87       	std	Y+10, r21	; 0x0a
    52fe:	49 87       	std	Y+9, r20	; 0x09
    5300:	d9 01       	movw	r26, r18
    5302:	4d 93       	st	X+, r20
    5304:	5c 93       	st	X, r21
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    5306:	45 2b       	or	r20, r21
    5308:	11 f4       	brne	.+4      	; 0x530e <chk_mounted+0x92>
    530a:	8c e0       	ldi	r24, 0x0C	; 12
    530c:	4c c2       	rjmp	.+1176   	; 0x57a6 <chk_mounted+0x52a>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    530e:	e9 85       	ldd	r30, Y+9	; 0x09
    5310:	fa 85       	ldd	r31, Y+10	; 0x0a
    5312:	80 81       	ld	r24, Z
    5314:	88 23       	and	r24, r24
    5316:	59 f0       	breq	.+22     	; 0x532e <chk_mounted+0xb2>
		stat = disk_status(fs->drv);
    5318:	81 81       	ldd	r24, Z+1	; 0x01
    531a:	0e 94 0e 58 	call	0xb01c	; 0xb01c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    531e:	80 fd       	sbrc	r24, 0
    5320:	06 c0       	rjmp	.+12     	; 0x532e <chk_mounted+0xb2>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    5322:	ff 20       	and	r15, r15
    5324:	09 f4       	brne	.+2      	; 0x5328 <chk_mounted+0xac>
    5326:	3c c2       	rjmp	.+1144   	; 0x57a0 <chk_mounted+0x524>
    5328:	82 fd       	sbrc	r24, 2
    532a:	38 c2       	rjmp	.+1136   	; 0x579c <chk_mounted+0x520>
    532c:	39 c2       	rjmp	.+1138   	; 0x57a0 <chk_mounted+0x524>
	}

	/* The logical drive must be mounted. */
	/* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    532e:	a9 85       	ldd	r26, Y+9	; 0x09
    5330:	ba 85       	ldd	r27, Y+10	; 0x0a
    5332:	1c 92       	st	X, r1
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
    5334:	11 96       	adiw	r26, 0x01	; 1
    5336:	0c 93       	st	X, r16
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    5338:	80 2f       	mov	r24, r16
    533a:	0e 94 32 57 	call	0xae64	; 0xae64 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    533e:	80 ff       	sbrs	r24, 0
    5340:	02 c0       	rjmp	.+4      	; 0x5346 <chk_mounted+0xca>
    5342:	83 e0       	ldi	r24, 0x03	; 3
    5344:	30 c2       	rjmp	.+1120   	; 0x57a6 <chk_mounted+0x52a>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    5346:	ff 20       	and	r15, r15
    5348:	11 f0       	breq	.+4      	; 0x534e <chk_mounted+0xd2>
    534a:	82 fd       	sbrc	r24, 2
    534c:	27 c2       	rjmp	.+1102   	; 0x579c <chk_mounted+0x520>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
    534e:	89 85       	ldd	r24, Y+9	; 0x09
    5350:	9a 85       	ldd	r25, Y+10	; 0x0a
    5352:	40 e0       	ldi	r20, 0x00	; 0
    5354:	50 e0       	ldi	r21, 0x00	; 0
    5356:	60 e0       	ldi	r22, 0x00	; 0
    5358:	70 e0       	ldi	r23, 0x00	; 0
    535a:	0e 94 ff 28 	call	0x51fe	; 0x51fe <check_fs>
	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
    535e:	81 30       	cpi	r24, 0x01	; 1
    5360:	21 f0       	breq	.+8      	; 0x536a <chk_mounted+0xee>
    5362:	22 24       	eor	r2, r2
    5364:	33 24       	eor	r3, r3
    5366:	21 01       	movw	r4, r2
    5368:	12 c0       	rjmp	.+36     	; 0x538e <chk_mounted+0x112>
		/* Check the partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * SZ_PTE];/* Partition table */
    536a:	e9 85       	ldd	r30, Y+9	; 0x09
    536c:	fa 85       	ldd	r31, Y+10	; 0x0a
    536e:	e0 51       	subi	r30, 0x10	; 16
    5370:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {									/* Is the partition existing? */
    5372:	84 81       	ldd	r24, Z+4	; 0x04
    5374:	88 23       	and	r24, r24
    5376:	09 f4       	brne	.+2      	; 0x537a <chk_mounted+0xfe>
    5378:	15 c2       	rjmp	.+1066   	; 0x57a4 <chk_mounted+0x528>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    537a:	20 84       	ldd	r2, Z+8	; 0x08
    537c:	31 84       	ldd	r3, Z+9	; 0x09
    537e:	42 84       	ldd	r4, Z+10	; 0x0a
    5380:	53 84       	ldd	r5, Z+11	; 0x0b
			fmt = check_fs(fs, bsect);					/* Check the partition */
    5382:	89 85       	ldd	r24, Y+9	; 0x09
    5384:	9a 85       	ldd	r25, Y+10	; 0x0a
    5386:	b2 01       	movw	r22, r4
    5388:	a1 01       	movw	r20, r2
    538a:	0e 94 ff 28 	call	0x51fe	; 0x51fe <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    538e:	83 30       	cpi	r24, 0x03	; 3
    5390:	11 f4       	brne	.+4      	; 0x5396 <chk_mounted+0x11a>
    5392:	81 e0       	ldi	r24, 0x01	; 1
    5394:	08 c2       	rjmp	.+1040   	; 0x57a6 <chk_mounted+0x52a>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
    5396:	88 23       	and	r24, r24
    5398:	09 f0       	breq	.+2      	; 0x539c <chk_mounted+0x120>
    539a:	04 c2       	rjmp	.+1032   	; 0x57a4 <chk_mounted+0x528>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    539c:	e9 85       	ldd	r30, Y+9	; 0x09
    539e:	fa 85       	ldd	r31, Y+10	; 0x0a
    53a0:	85 ad       	ldd	r24, Z+61	; 0x3d
    53a2:	96 ad       	ldd	r25, Z+62	; 0x3e
    53a4:	80 50       	subi	r24, 0x00	; 0
    53a6:	92 40       	sbci	r25, 0x02	; 2
    53a8:	09 f0       	breq	.+2      	; 0x53ac <chk_mounted+0x130>
    53aa:	fc c1       	rjmp	.+1016   	; 0x57a4 <chk_mounted+0x528>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    53ac:	29 85       	ldd	r18, Y+9	; 0x09
    53ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    53b0:	28 5b       	subi	r18, 0xB8	; 184
    53b2:	3f 4f       	sbci	r19, 0xFF	; 255
    53b4:	d9 01       	movw	r26, r18
    53b6:	8d 91       	ld	r24, X+
    53b8:	9c 91       	ld	r25, X
    53ba:	11 97       	sbiw	r26, 0x01	; 1
    53bc:	a8 54       	subi	r26, 0x48	; 72
    53be:	b0 40       	sbci	r27, 0x00	; 0
    53c0:	ba 87       	std	Y+10, r27	; 0x0a
    53c2:	a9 87       	std	Y+9, r26	; 0x09
    53c4:	5c 01       	movw	r10, r24
    53c6:	cc 24       	eor	r12, r12
    53c8:	dd 24       	eor	r13, r13
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    53ca:	a1 14       	cp	r10, r1
    53cc:	b1 04       	cpc	r11, r1
    53ce:	c1 04       	cpc	r12, r1
    53d0:	d1 04       	cpc	r13, r1
    53d2:	59 f4       	brne	.+22     	; 0x53ea <chk_mounted+0x16e>
    53d4:	aa 5a       	subi	r26, 0xAA	; 170
    53d6:	bf 4f       	sbci	r27, 0xFF	; 255
    53d8:	ad 90       	ld	r10, X+
    53da:	bd 90       	ld	r11, X+
    53dc:	cd 90       	ld	r12, X+
    53de:	dc 90       	ld	r13, X
    53e0:	13 97       	sbiw	r26, 0x03	; 3
    53e2:	a6 55       	subi	r26, 0x56	; 86
    53e4:	b0 40       	sbci	r27, 0x00	; 0
    53e6:	ba 87       	std	Y+10, r27	; 0x0a
    53e8:	a9 87       	std	Y+9, r26	; 0x09
	fs->fsize = fasize;
    53ea:	e9 85       	ldd	r30, Y+9	; 0x09
    53ec:	fa 85       	ldd	r31, Y+10	; 0x0a
    53ee:	a6 8e       	std	Z+30, r10	; 0x1e
    53f0:	b7 8e       	std	Z+31, r11	; 0x1f
    53f2:	c0 a2       	std	Z+32, r12	; 0x20
    53f4:	d1 a2       	std	Z+33, r13	; 0x21

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    53f6:	ee 5b       	subi	r30, 0xBE	; 190
    53f8:	ff 4f       	sbci	r31, 0xFF	; 255
    53fa:	40 81       	ld	r20, Z
    53fc:	e2 54       	subi	r30, 0x42	; 66
    53fe:	f0 40       	sbci	r31, 0x00	; 0
    5400:	fa 87       	std	Y+10, r31	; 0x0a
    5402:	e9 87       	std	Y+9, r30	; 0x09
    5404:	43 83       	std	Z+3, r20	; 0x03
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    5406:	84 2f       	mov	r24, r20
    5408:	81 50       	subi	r24, 0x01	; 1
    540a:	82 30       	cpi	r24, 0x02	; 2
    540c:	08 f0       	brcs	.+2      	; 0x5410 <chk_mounted+0x194>
    540e:	ca c1       	rjmp	.+916    	; 0x57a4 <chk_mounted+0x528>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    5410:	27 ad       	ldd	r18, Z+63	; 0x3f
    5412:	22 83       	std	Z+2, r18	; 0x02
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    5414:	22 23       	and	r18, r18
    5416:	09 f4       	brne	.+2      	; 0x541a <chk_mounted+0x19e>
    5418:	c5 c1       	rjmp	.+906    	; 0x57a4 <chk_mounted+0x528>
    541a:	30 e0       	ldi	r19, 0x00	; 0
    541c:	c9 01       	movw	r24, r18
    541e:	01 97       	sbiw	r24, 0x01	; 1
    5420:	82 23       	and	r24, r18
    5422:	93 23       	and	r25, r19
    5424:	89 2b       	or	r24, r25
    5426:	09 f0       	breq	.+2      	; 0x542a <chk_mounted+0x1ae>
    5428:	bd c1       	rjmp	.+890    	; 0x57a4 <chk_mounted+0x528>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    542a:	ed 5b       	subi	r30, 0xBD	; 189
    542c:	ff 4f       	sbci	r31, 0xFF	; 255
    542e:	80 80       	ld	r8, Z
    5430:	91 80       	ldd	r9, Z+1	; 0x01
    5432:	e3 54       	subi	r30, 0x43	; 67
    5434:	f0 40       	sbci	r31, 0x00	; 0
    5436:	fa 87       	std	Y+10, r31	; 0x0a
    5438:	e9 87       	std	Y+9, r30	; 0x09
    543a:	91 86       	std	Z+9, r9	; 0x09
    543c:	80 86       	std	Z+8, r8	; 0x08
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    543e:	c4 01       	movw	r24, r8
    5440:	8f 70       	andi	r24, 0x0F	; 15
    5442:	90 70       	andi	r25, 0x00	; 0
    5444:	89 2b       	or	r24, r25
    5446:	09 f0       	breq	.+2      	; 0x544a <chk_mounted+0x1ce>
    5448:	ad c1       	rjmp	.+858    	; 0x57a4 <chk_mounted+0x528>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    544a:	eb 5b       	subi	r30, 0xBB	; 187
    544c:	ff 4f       	sbci	r31, 0xFF	; 255
    544e:	80 81       	ld	r24, Z
    5450:	91 81       	ldd	r25, Z+1	; 0x01
    5452:	e5 54       	subi	r30, 0x45	; 69
    5454:	f0 40       	sbci	r31, 0x00	; 0
    5456:	fa 87       	std	Y+10, r31	; 0x0a
    5458:	e9 87       	std	Y+9, r30	; 0x09
    545a:	7c 01       	movw	r14, r24
    545c:	00 e0       	ldi	r16, 0x00	; 0
    545e:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    5460:	e1 14       	cp	r14, r1
    5462:	f1 04       	cpc	r15, r1
    5464:	01 05       	cpc	r16, r1
    5466:	11 05       	cpc	r17, r1
    5468:	51 f4       	brne	.+20     	; 0x547e <chk_mounted+0x202>
    546a:	ee 5a       	subi	r30, 0xAE	; 174
    546c:	ff 4f       	sbci	r31, 0xFF	; 255
    546e:	e0 80       	ld	r14, Z
    5470:	f1 80       	ldd	r15, Z+1	; 0x01
    5472:	02 81       	ldd	r16, Z+2	; 0x02
    5474:	13 81       	ldd	r17, Z+3	; 0x03
    5476:	e2 55       	subi	r30, 0x52	; 82
    5478:	f0 40       	sbci	r31, 0x00	; 0
    547a:	fa 87       	std	Y+10, r31	; 0x0a
    547c:	e9 87       	std	Y+9, r30	; 0x09

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    547e:	29 85       	ldd	r18, Y+9	; 0x09
    5480:	3a 85       	ldd	r19, Y+10	; 0x0a
    5482:	20 5c       	subi	r18, 0xC0	; 192
    5484:	3f 4f       	sbci	r19, 0xFF	; 255
    5486:	d9 01       	movw	r26, r18
    5488:	6d 90       	ld	r6, X+
    548a:	7c 90       	ld	r7, X
    548c:	11 97       	sbiw	r26, 0x01	; 1
    548e:	a0 54       	subi	r26, 0x40	; 64
    5490:	b0 40       	sbci	r27, 0x00	; 0
    5492:	ba 87       	std	Y+10, r27	; 0x0a
    5494:	a9 87       	std	Y+9, r26	; 0x09
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    5496:	61 14       	cp	r6, r1
    5498:	71 04       	cpc	r7, r1
    549a:	09 f4       	brne	.+2      	; 0x549e <chk_mounted+0x222>
    549c:	83 c1       	rjmp	.+774    	; 0x57a4 <chk_mounted+0x528>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    549e:	24 2f       	mov	r18, r20
    54a0:	30 e0       	ldi	r19, 0x00	; 0
    54a2:	40 e0       	ldi	r20, 0x00	; 0
    54a4:	50 e0       	ldi	r21, 0x00	; 0
    54a6:	c6 01       	movw	r24, r12
    54a8:	b5 01       	movw	r22, r10
    54aa:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__mulsi3>
    54ae:	69 83       	std	Y+1, r22	; 0x01
    54b0:	7a 83       	std	Y+2, r23	; 0x02
    54b2:	8b 83       	std	Y+3, r24	; 0x03
    54b4:	9c 83       	std	Y+4, r25	; 0x04

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    54b6:	93 01       	movw	r18, r6
    54b8:	40 e0       	ldi	r20, 0x00	; 0
    54ba:	50 e0       	ldi	r21, 0x00	; 0
    54bc:	2d 83       	std	Y+5, r18	; 0x05
    54be:	3e 83       	std	Y+6, r19	; 0x06
    54c0:	4f 83       	std	Y+7, r20	; 0x07
    54c2:	58 87       	std	Y+8, r21	; 0x08
    54c4:	e4 e0       	ldi	r30, 0x04	; 4
    54c6:	96 94       	lsr	r9
    54c8:	87 94       	ror	r8
    54ca:	ea 95       	dec	r30
    54cc:	e1 f7       	brne	.-8      	; 0x54c6 <chk_mounted+0x24a>
    54ce:	54 01       	movw	r10, r8
    54d0:	cc 24       	eor	r12, r12
    54d2:	dd 24       	eor	r13, r13
    54d4:	a2 0e       	add	r10, r18
    54d6:	b3 1e       	adc	r11, r19
    54d8:	c4 1e       	adc	r12, r20
    54da:	d5 1e       	adc	r13, r21
    54dc:	a6 0e       	add	r10, r22
    54de:	b7 1e       	adc	r11, r23
    54e0:	c8 1e       	adc	r12, r24
    54e2:	d9 1e       	adc	r13, r25
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    54e4:	ea 14       	cp	r14, r10
    54e6:	fb 04       	cpc	r15, r11
    54e8:	0c 05       	cpc	r16, r12
    54ea:	1d 05       	cpc	r17, r13
    54ec:	08 f4       	brcc	.+2      	; 0x54f0 <chk_mounted+0x274>
    54ee:	5a c1       	rjmp	.+692    	; 0x57a4 <chk_mounted+0x528>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    54f0:	ea 18       	sub	r14, r10
    54f2:	fb 08       	sbc	r15, r11
    54f4:	0c 09       	sbc	r16, r12
    54f6:	1d 09       	sbc	r17, r13
    54f8:	a9 85       	ldd	r26, Y+9	; 0x09
    54fa:	ba 85       	ldd	r27, Y+10	; 0x0a
    54fc:	12 96       	adiw	r26, 0x02	; 2
    54fe:	2c 91       	ld	r18, X
    5500:	30 e0       	ldi	r19, 0x00	; 0
    5502:	40 e0       	ldi	r20, 0x00	; 0
    5504:	50 e0       	ldi	r21, 0x00	; 0
    5506:	c8 01       	movw	r24, r16
    5508:	b7 01       	movw	r22, r14
    550a:	0e 94 26 5c 	call	0xb84c	; 0xb84c <__udivmodsi4>
    550e:	c9 01       	movw	r24, r18
    5510:	da 01       	movw	r26, r20
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    5512:	00 97       	sbiw	r24, 0x00	; 0
    5514:	a1 05       	cpc	r26, r1
    5516:	b1 05       	cpc	r27, r1
    5518:	09 f4       	brne	.+2      	; 0x551c <chk_mounted+0x2a0>
    551a:	44 c1       	rjmp	.+648    	; 0x57a4 <chk_mounted+0x528>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    551c:	86 3f       	cpi	r24, 0xF6	; 246
    551e:	ef e0       	ldi	r30, 0x0F	; 15
    5520:	9e 07       	cpc	r25, r30
    5522:	e0 e0       	ldi	r30, 0x00	; 0
    5524:	ae 07       	cpc	r26, r30
    5526:	e0 e0       	ldi	r30, 0x00	; 0
    5528:	be 07       	cpc	r27, r30
    552a:	18 f4       	brcc	.+6      	; 0x5532 <chk_mounted+0x2b6>
    552c:	99 24       	eor	r9, r9
    552e:	93 94       	inc	r9
    5530:	0d c0       	rjmp	.+26     	; 0x554c <chk_mounted+0x2d0>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    5532:	86 3f       	cpi	r24, 0xF6	; 246
    5534:	ff ef       	ldi	r31, 0xFF	; 255
    5536:	9f 07       	cpc	r25, r31
    5538:	f0 e0       	ldi	r31, 0x00	; 0
    553a:	af 07       	cpc	r26, r31
    553c:	f0 e0       	ldi	r31, 0x00	; 0
    553e:	bf 07       	cpc	r27, r31
    5540:	18 f0       	brcs	.+6      	; 0x5548 <chk_mounted+0x2cc>
    5542:	43 e0       	ldi	r20, 0x03	; 3
    5544:	94 2e       	mov	r9, r20
    5546:	02 c0       	rjmp	.+4      	; 0x554c <chk_mounted+0x2d0>
    5548:	32 e0       	ldi	r19, 0x02	; 2
    554a:	93 2e       	mov	r9, r19

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    554c:	22 e0       	ldi	r18, 0x02	; 2
    554e:	e2 2e       	mov	r14, r18
    5550:	f1 2c       	mov	r15, r1
    5552:	01 2d       	mov	r16, r1
    5554:	11 2d       	mov	r17, r1
    5556:	e8 0e       	add	r14, r24
    5558:	f9 1e       	adc	r15, r25
    555a:	0a 1f       	adc	r16, r26
    555c:	1b 1f       	adc	r17, r27
    555e:	a9 85       	ldd	r26, Y+9	; 0x09
    5560:	ba 85       	ldd	r27, Y+10	; 0x0a
    5562:	5a 96       	adiw	r26, 0x1a	; 26
    5564:	ed 92       	st	X+, r14
    5566:	fd 92       	st	X+, r15
    5568:	0d 93       	st	X+, r16
    556a:	1c 93       	st	X, r17
    556c:	5d 97       	sbiw	r26, 0x1d	; 29
	fs->database = bsect + sysect;						/* Data start sector */
    556e:	a2 0c       	add	r10, r2
    5570:	b3 1c       	adc	r11, r3
    5572:	c4 1c       	adc	r12, r4
    5574:	d5 1c       	adc	r13, r5
    5576:	fd 01       	movw	r30, r26
    5578:	a2 a6       	std	Z+42, r10	; 0x2a
    557a:	b3 a6       	std	Z+43, r11	; 0x2b
    557c:	c4 a6       	std	Z+44, r12	; 0x2c
    557e:	d5 a6       	std	Z+45, r13	; 0x2d
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    5580:	8d 81       	ldd	r24, Y+5	; 0x05
    5582:	9e 81       	ldd	r25, Y+6	; 0x06
    5584:	af 81       	ldd	r26, Y+7	; 0x07
    5586:	b8 85       	ldd	r27, Y+8	; 0x08
    5588:	82 0d       	add	r24, r2
    558a:	93 1d       	adc	r25, r3
    558c:	a4 1d       	adc	r26, r4
    558e:	b5 1d       	adc	r27, r5
    5590:	82 a3       	std	Z+34, r24	; 0x22
    5592:	93 a3       	std	Z+35, r25	; 0x23
    5594:	a4 a3       	std	Z+36, r26	; 0x24
    5596:	b5 a3       	std	Z+37, r27	; 0x25
    5598:	20 85       	ldd	r18, Z+8	; 0x08
    559a:	31 85       	ldd	r19, Z+9	; 0x09
	if (fmt == FS_FAT32) {
    559c:	f3 e0       	ldi	r31, 0x03	; 3
    559e:	9f 16       	cp	r9, r31
    55a0:	f1 f4       	brne	.+60     	; 0x55de <chk_mounted+0x362>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    55a2:	23 2b       	or	r18, r19
    55a4:	09 f0       	breq	.+2      	; 0x55a8 <chk_mounted+0x32c>
    55a6:	fe c0       	rjmp	.+508    	; 0x57a4 <chk_mounted+0x528>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    55a8:	29 85       	ldd	r18, Y+9	; 0x09
    55aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    55ac:	22 5a       	subi	r18, 0xA2	; 162
    55ae:	3f 4f       	sbci	r19, 0xFF	; 255
    55b0:	f9 01       	movw	r30, r18
    55b2:	80 81       	ld	r24, Z
    55b4:	91 81       	ldd	r25, Z+1	; 0x01
    55b6:	a2 81       	ldd	r26, Z+2	; 0x02
    55b8:	b3 81       	ldd	r27, Z+3	; 0x03
    55ba:	ee 55       	subi	r30, 0x5E	; 94
    55bc:	f0 40       	sbci	r31, 0x00	; 0
    55be:	fa 87       	std	Y+10, r31	; 0x0a
    55c0:	e9 87       	std	Y+9, r30	; 0x09
    55c2:	86 a3       	std	Z+38, r24	; 0x26
    55c4:	97 a3       	std	Z+39, r25	; 0x27
    55c6:	a0 a7       	std	Z+40, r26	; 0x28
    55c8:	b1 a7       	std	Z+41, r27	; 0x29
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    55ca:	a8 01       	movw	r20, r16
    55cc:	97 01       	movw	r18, r14
    55ce:	f2 e0       	ldi	r31, 0x02	; 2
    55d0:	22 0f       	add	r18, r18
    55d2:	33 1f       	adc	r19, r19
    55d4:	44 1f       	adc	r20, r20
    55d6:	55 1f       	adc	r21, r21
    55d8:	fa 95       	dec	r31
    55da:	d1 f7       	brne	.-12     	; 0x55d0 <chk_mounted+0x354>
    55dc:	33 c0       	rjmp	.+102    	; 0x5644 <chk_mounted+0x3c8>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    55de:	23 2b       	or	r18, r19
    55e0:	09 f4       	brne	.+2      	; 0x55e4 <chk_mounted+0x368>
    55e2:	e0 c0       	rjmp	.+448    	; 0x57a4 <chk_mounted+0x528>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    55e4:	29 81       	ldd	r18, Y+1	; 0x01
    55e6:	3a 81       	ldd	r19, Y+2	; 0x02
    55e8:	4b 81       	ldd	r20, Y+3	; 0x03
    55ea:	5c 81       	ldd	r21, Y+4	; 0x04
    55ec:	82 0f       	add	r24, r18
    55ee:	93 1f       	adc	r25, r19
    55f0:	a4 1f       	adc	r26, r20
    55f2:	b5 1f       	adc	r27, r21
    55f4:	e9 85       	ldd	r30, Y+9	; 0x09
    55f6:	fa 85       	ldd	r31, Y+10	; 0x0a
    55f8:	86 a3       	std	Z+38, r24	; 0x26
    55fa:	97 a3       	std	Z+39, r25	; 0x27
    55fc:	a0 a7       	std	Z+40, r26	; 0x28
    55fe:	b1 a7       	std	Z+41, r27	; 0x29
    5600:	d8 01       	movw	r26, r16
    5602:	c7 01       	movw	r24, r14
    5604:	88 0f       	add	r24, r24
    5606:	99 1f       	adc	r25, r25
    5608:	aa 1f       	adc	r26, r26
    560a:	bb 1f       	adc	r27, r27
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    560c:	f2 e0       	ldi	r31, 0x02	; 2
    560e:	9f 16       	cp	r9, r31
    5610:	19 f4       	brne	.+6      	; 0x5618 <chk_mounted+0x39c>
    5612:	9c 01       	movw	r18, r24
    5614:	ad 01       	movw	r20, r26
    5616:	16 c0       	rjmp	.+44     	; 0x5644 <chk_mounted+0x3c8>
    5618:	9c 01       	movw	r18, r24
    561a:	ad 01       	movw	r20, r26
    561c:	2e 0d       	add	r18, r14
    561e:	3f 1d       	adc	r19, r15
    5620:	40 1f       	adc	r20, r16
    5622:	51 1f       	adc	r21, r17
    5624:	56 95       	lsr	r21
    5626:	47 95       	ror	r20
    5628:	37 95       	ror	r19
    562a:	27 95       	ror	r18
    562c:	81 e0       	ldi	r24, 0x01	; 1
    562e:	90 e0       	ldi	r25, 0x00	; 0
    5630:	a0 e0       	ldi	r26, 0x00	; 0
    5632:	b0 e0       	ldi	r27, 0x00	; 0
    5634:	e8 22       	and	r14, r24
    5636:	f9 22       	and	r15, r25
    5638:	0a 23       	and	r16, r26
    563a:	1b 23       	and	r17, r27
    563c:	2e 0d       	add	r18, r14
    563e:	3f 1d       	adc	r19, r15
    5640:	40 1f       	adc	r20, r16
    5642:	51 1f       	adc	r21, r17
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    5644:	21 50       	subi	r18, 0x01	; 1
    5646:	3e 4f       	sbci	r19, 0xFE	; 254
    5648:	4f 4f       	sbci	r20, 0xFF	; 255
    564a:	5f 4f       	sbci	r21, 0xFF	; 255
    564c:	69 e0       	ldi	r22, 0x09	; 9
    564e:	56 95       	lsr	r21
    5650:	47 95       	ror	r20
    5652:	37 95       	ror	r19
    5654:	27 95       	ror	r18
    5656:	6a 95       	dec	r22
    5658:	d1 f7       	brne	.-12     	; 0x564e <chk_mounted+0x3d2>
    565a:	e9 85       	ldd	r30, Y+9	; 0x09
    565c:	fa 85       	ldd	r31, Y+10	; 0x0a
    565e:	86 8d       	ldd	r24, Z+30	; 0x1e
    5660:	97 8d       	ldd	r25, Z+31	; 0x1f
    5662:	a0 a1       	ldd	r26, Z+32	; 0x20
    5664:	b1 a1       	ldd	r27, Z+33	; 0x21
    5666:	82 17       	cp	r24, r18
    5668:	93 07       	cpc	r25, r19
    566a:	a4 07       	cpc	r26, r20
    566c:	b5 07       	cpc	r27, r21
    566e:	08 f4       	brcc	.+2      	; 0x5672 <chk_mounted+0x3f6>
    5670:	99 c0       	rjmp	.+306    	; 0x57a4 <chk_mounted+0x528>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    5672:	8f ef       	ldi	r24, 0xFF	; 255
    5674:	9f ef       	ldi	r25, 0xFF	; 255
    5676:	af ef       	ldi	r26, 0xFF	; 255
    5678:	bf ef       	ldi	r27, 0xFF	; 255
    567a:	86 87       	std	Z+14, r24	; 0x0e
    567c:	97 87       	std	Z+15, r25	; 0x0f
    567e:	a0 8b       	std	Z+16, r26	; 0x10
    5680:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
    5682:	12 86       	std	Z+10, r1	; 0x0a
    5684:	13 86       	std	Z+11, r1	; 0x0b
    5686:	14 86       	std	Z+12, r1	; 0x0c
    5688:	15 86       	std	Z+13, r1	; 0x0d

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    568a:	b3 e0       	ldi	r27, 0x03	; 3
    568c:	9b 16       	cp	r9, r27
    568e:	09 f0       	breq	.+2      	; 0x5692 <chk_mounted+0x416>
    5690:	65 c0       	rjmp	.+202    	; 0x575c <chk_mounted+0x4e0>
	 	fs->fsi_flag = 0;
    5692:	15 82       	std	Z+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    5694:	ee 59       	subi	r30, 0x9E	; 158
    5696:	ff 4f       	sbci	r31, 0xFF	; 255
    5698:	20 81       	ld	r18, Z
    569a:	31 81       	ldd	r19, Z+1	; 0x01
    569c:	e2 56       	subi	r30, 0x62	; 98
    569e:	f0 40       	sbci	r31, 0x00	; 0
    56a0:	fa 87       	std	Y+10, r31	; 0x0a
    56a2:	e9 87       	std	Y+9, r30	; 0x09
    56a4:	40 e0       	ldi	r20, 0x00	; 0
    56a6:	50 e0       	ldi	r21, 0x00	; 0
    56a8:	22 0d       	add	r18, r2
    56aa:	33 1d       	adc	r19, r3
    56ac:	44 1d       	adc	r20, r4
    56ae:	55 1d       	adc	r21, r5
    56b0:	22 8b       	std	Z+18, r18	; 0x12
    56b2:	33 8b       	std	Z+19, r19	; 0x13
    56b4:	44 8b       	std	Z+20, r20	; 0x14
    56b6:	55 8b       	std	Z+21, r21	; 0x15
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    56b8:	bf 01       	movw	r22, r30
    56ba:	6e 5c       	subi	r22, 0xCE	; 206
    56bc:	7f 4f       	sbci	r23, 0xFF	; 255
    56be:	81 81       	ldd	r24, Z+1	; 0x01
    56c0:	01 e0       	ldi	r16, 0x01	; 1
    56c2:	0e 94 15 58 	call	0xb02a	; 0xb02a <disk_read>
    56c6:	88 23       	and	r24, r24
    56c8:	09 f0       	breq	.+2      	; 0x56cc <chk_mounted+0x450>
    56ca:	48 c0       	rjmp	.+144    	; 0x575c <chk_mounted+0x4e0>
    56cc:	e9 85       	ldd	r30, Y+9	; 0x09
    56ce:	fa 85       	ldd	r31, Y+10	; 0x0a
    56d0:	e0 5d       	subi	r30, 0xD0	; 208
    56d2:	fd 4f       	sbci	r31, 0xFD	; 253
    56d4:	80 81       	ld	r24, Z
    56d6:	91 81       	ldd	r25, Z+1	; 0x01
    56d8:	e0 53       	subi	r30, 0x30	; 48
    56da:	f2 40       	sbci	r31, 0x02	; 2
    56dc:	fa 87       	std	Y+10, r31	; 0x0a
    56de:	e9 87       	std	Y+9, r30	; 0x09
    56e0:	85 55       	subi	r24, 0x55	; 85
    56e2:	9a 4a       	sbci	r25, 0xAA	; 170
    56e4:	09 f0       	breq	.+2      	; 0x56e8 <chk_mounted+0x46c>
    56e6:	3a c0       	rjmp	.+116    	; 0x575c <chk_mounted+0x4e0>
    56e8:	e9 85       	ldd	r30, Y+9	; 0x09
    56ea:	fa 85       	ldd	r31, Y+10	; 0x0a
    56ec:	82 a9       	ldd	r24, Z+50	; 0x32
    56ee:	93 a9       	ldd	r25, Z+51	; 0x33
    56f0:	a4 a9       	ldd	r26, Z+52	; 0x34
    56f2:	b5 a9       	ldd	r27, Z+53	; 0x35
    56f4:	82 55       	subi	r24, 0x52	; 82
    56f6:	92 45       	sbci	r25, 0x52	; 82
    56f8:	a1 46       	sbci	r26, 0x61	; 97
    56fa:	b1 44       	sbci	r27, 0x41	; 65
    56fc:	79 f5       	brne	.+94     	; 0x575c <chk_mounted+0x4e0>
    56fe:	29 85       	ldd	r18, Y+9	; 0x09
    5700:	3a 85       	ldd	r19, Y+10	; 0x0a
    5702:	2a 5e       	subi	r18, 0xEA	; 234
    5704:	3d 4f       	sbci	r19, 0xFD	; 253
    5706:	f9 01       	movw	r30, r18
    5708:	80 81       	ld	r24, Z
    570a:	91 81       	ldd	r25, Z+1	; 0x01
    570c:	a2 81       	ldd	r26, Z+2	; 0x02
    570e:	b3 81       	ldd	r27, Z+3	; 0x03
    5710:	e6 51       	subi	r30, 0x16	; 22
    5712:	f2 40       	sbci	r31, 0x02	; 2
    5714:	fa 87       	std	Y+10, r31	; 0x0a
    5716:	e9 87       	std	Y+9, r30	; 0x09
    5718:	82 57       	subi	r24, 0x72	; 114
    571a:	92 47       	sbci	r25, 0x72	; 114
    571c:	a1 44       	sbci	r26, 0x41	; 65
    571e:	b1 46       	sbci	r27, 0x61	; 97
    5720:	e9 f4       	brne	.+58     	; 0x575c <chk_mounted+0x4e0>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    5722:	29 85       	ldd	r18, Y+9	; 0x09
    5724:	3a 85       	ldd	r19, Y+10	; 0x0a
    5726:	22 5e       	subi	r18, 0xE2	; 226
    5728:	3d 4f       	sbci	r19, 0xFD	; 253
    572a:	f9 01       	movw	r30, r18
    572c:	80 81       	ld	r24, Z
    572e:	91 81       	ldd	r25, Z+1	; 0x01
    5730:	a2 81       	ldd	r26, Z+2	; 0x02
    5732:	b3 81       	ldd	r27, Z+3	; 0x03
    5734:	ee 51       	subi	r30, 0x1E	; 30
    5736:	f2 40       	sbci	r31, 0x02	; 2
    5738:	82 87       	std	Z+10, r24	; 0x0a
    573a:	93 87       	std	Z+11, r25	; 0x0b
    573c:	a4 87       	std	Z+12, r26	; 0x0c
    573e:	b5 87       	std	Z+13, r27	; 0x0d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    5740:	e6 5e       	subi	r30, 0xE6	; 230
    5742:	fd 4f       	sbci	r31, 0xFD	; 253
    5744:	80 81       	ld	r24, Z
    5746:	91 81       	ldd	r25, Z+1	; 0x01
    5748:	a2 81       	ldd	r26, Z+2	; 0x02
    574a:	b3 81       	ldd	r27, Z+3	; 0x03
    574c:	ea 51       	subi	r30, 0x1A	; 26
    574e:	f2 40       	sbci	r31, 0x02	; 2
    5750:	fa 87       	std	Y+10, r31	; 0x0a
    5752:	e9 87       	std	Y+9, r30	; 0x09
    5754:	86 87       	std	Z+14, r24	; 0x0e
    5756:	97 87       	std	Z+15, r25	; 0x0f
    5758:	a0 8b       	std	Z+16, r26	; 0x10
    575a:	b1 8b       	std	Z+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    575c:	a9 85       	ldd	r26, Y+9	; 0x09
    575e:	ba 85       	ldd	r27, Y+10	; 0x0a
    5760:	9c 92       	st	X, r9
	fs->id = ++Fsid;		/* File system mount ID */
    5762:	80 91 8c 01 	lds	r24, 0x018C
    5766:	90 91 8d 01 	lds	r25, 0x018D
    576a:	01 96       	adiw	r24, 0x01	; 1
    576c:	90 93 8d 01 	sts	0x018D, r25
    5770:	80 93 8c 01 	sts	0x018C, r24
    5774:	17 96       	adiw	r26, 0x07	; 7
    5776:	9c 93       	st	X, r25
    5778:	8e 93       	st	-X, r24
    577a:	16 97       	sbiw	r26, 0x06	; 6
	fs->winsect = 0;		/* Invalidate sector cache */
    577c:	e9 85       	ldd	r30, Y+9	; 0x09
    577e:	fa 85       	ldd	r31, Y+10	; 0x0a
    5780:	16 a6       	std	Z+46, r1	; 0x2e
    5782:	17 a6       	std	Z+47, r1	; 0x2f
    5784:	10 aa       	std	Z+48, r1	; 0x30
    5786:	11 aa       	std	Z+49, r1	; 0x31
	fs->wflag = 0;
    5788:	14 82       	std	Z+4, r1	; 0x04
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    578a:	a9 85       	ldd	r26, Y+9	; 0x09
    578c:	ba 85       	ldd	r27, Y+10	; 0x0a
    578e:	56 96       	adiw	r26, 0x16	; 22
    5790:	1d 92       	st	X+, r1
    5792:	1d 92       	st	X+, r1
    5794:	1d 92       	st	X+, r1
    5796:	1c 92       	st	X, r1
    5798:	59 97       	sbiw	r26, 0x19	; 25
    579a:	02 c0       	rjmp	.+4      	; 0x57a0 <chk_mounted+0x524>
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    579c:	8a e0       	ldi	r24, 0x0A	; 10
    579e:	03 c0       	rjmp	.+6      	; 0x57a6 <chk_mounted+0x52a>
    57a0:	80 e0       	ldi	r24, 0x00	; 0
    57a2:	01 c0       	rjmp	.+2      	; 0x57a6 <chk_mounted+0x52a>
    57a4:	8d e0       	ldi	r24, 0x0D	; 13
}
    57a6:	2a 96       	adiw	r28, 0x0a	; 10
    57a8:	0f b6       	in	r0, 0x3f	; 63
    57aa:	f8 94       	cli
    57ac:	de bf       	out	0x3e, r29	; 62
    57ae:	0f be       	out	0x3f, r0	; 63
    57b0:	cd bf       	out	0x3d, r28	; 61
    57b2:	cf 91       	pop	r28
    57b4:	df 91       	pop	r29
    57b6:	1f 91       	pop	r17
    57b8:	0f 91       	pop	r16
    57ba:	ff 90       	pop	r15
    57bc:	ef 90       	pop	r14
    57be:	df 90       	pop	r13
    57c0:	cf 90       	pop	r12
    57c2:	bf 90       	pop	r11
    57c4:	af 90       	pop	r10
    57c6:	9f 90       	pop	r9
    57c8:	8f 90       	pop	r8
    57ca:	7f 90       	pop	r7
    57cc:	6f 90       	pop	r6
    57ce:	5f 90       	pop	r5
    57d0:	4f 90       	pop	r4
    57d2:	3f 90       	pop	r3
    57d4:	2f 90       	pop	r2
    57d6:	08 95       	ret

000057d8 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    57d8:	6f 92       	push	r6
    57da:	7f 92       	push	r7
    57dc:	8f 92       	push	r8
    57de:	9f 92       	push	r9
    57e0:	af 92       	push	r10
    57e2:	bf 92       	push	r11
    57e4:	cf 92       	push	r12
    57e6:	df 92       	push	r13
    57e8:	ef 92       	push	r14
    57ea:	ff 92       	push	r15
    57ec:	0f 93       	push	r16
    57ee:	1f 93       	push	r17
    57f0:	cf 93       	push	r28
    57f2:	df 93       	push	r29
    57f4:	ec 01       	movw	r28, r24
    57f6:	4a 01       	movw	r8, r20
    57f8:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    57fa:	ce a4       	ldd	r12, Y+46	; 0x2e
    57fc:	df a4       	ldd	r13, Y+47	; 0x2f
    57fe:	e8 a8       	ldd	r14, Y+48	; 0x30
    5800:	f9 a8       	ldd	r15, Y+49	; 0x31
	if (wsect != sector) {	/* Changed current window */
    5802:	c4 16       	cp	r12, r20
    5804:	d5 06       	cpc	r13, r21
    5806:	e6 06       	cpc	r14, r22
    5808:	f7 06       	cpc	r15, r23
    580a:	09 f4       	brne	.+2      	; 0x580e <move_window+0x36>
    580c:	4e c0       	rjmp	.+156    	; 0x58aa <move_window+0xd2>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    580e:	8c 81       	ldd	r24, Y+4	; 0x04
    5810:	88 23       	and	r24, r24
    5812:	a1 f1       	breq	.+104    	; 0x587c <move_window+0xa4>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    5814:	b2 e3       	ldi	r27, 0x32	; 50
    5816:	6b 2e       	mov	r6, r27
    5818:	71 2c       	mov	r7, r1
    581a:	6c 0e       	add	r6, r28
    581c:	7d 1e       	adc	r7, r29
    581e:	89 81       	ldd	r24, Y+1	; 0x01
    5820:	b3 01       	movw	r22, r6
    5822:	a7 01       	movw	r20, r14
    5824:	96 01       	movw	r18, r12
    5826:	01 e0       	ldi	r16, 0x01	; 1
    5828:	0e 94 6e 58 	call	0xb0dc	; 0xb0dc <disk_write>
    582c:	88 23       	and	r24, r24
    582e:	d9 f5       	brne	.+118    	; 0x58a6 <move_window+0xce>
				return FR_DISK_ERR;
			fs->wflag = 0;
    5830:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    5832:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5834:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5836:	a8 a1       	ldd	r26, Y+32	; 0x20
    5838:	b9 a1       	ldd	r27, Y+33	; 0x21
    583a:	2a a1       	ldd	r18, Y+34	; 0x22
    583c:	3b a1       	ldd	r19, Y+35	; 0x23
    583e:	4c a1       	ldd	r20, Y+36	; 0x24
    5840:	5d a1       	ldd	r21, Y+37	; 0x25
    5842:	82 0f       	add	r24, r18
    5844:	93 1f       	adc	r25, r19
    5846:	a4 1f       	adc	r26, r20
    5848:	b5 1f       	adc	r27, r21
    584a:	c8 16       	cp	r12, r24
    584c:	d9 06       	cpc	r13, r25
    584e:	ea 06       	cpc	r14, r26
    5850:	fb 06       	cpc	r15, r27
    5852:	a0 f4       	brcc	.+40     	; 0x587c <move_window+0xa4>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5854:	1b 81       	ldd	r17, Y+3	; 0x03
    5856:	10 c0       	rjmp	.+32     	; 0x5878 <move_window+0xa0>
					wsect += fs->fsize;
    5858:	8e 8d       	ldd	r24, Y+30	; 0x1e
    585a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    585c:	a8 a1       	ldd	r26, Y+32	; 0x20
    585e:	b9 a1       	ldd	r27, Y+33	; 0x21
    5860:	c8 0e       	add	r12, r24
    5862:	d9 1e       	adc	r13, r25
    5864:	ea 1e       	adc	r14, r26
    5866:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    5868:	89 81       	ldd	r24, Y+1	; 0x01
    586a:	b3 01       	movw	r22, r6
    586c:	a7 01       	movw	r20, r14
    586e:	96 01       	movw	r18, r12
    5870:	01 e0       	ldi	r16, 0x01	; 1
    5872:	0e 94 6e 58 	call	0xb0dc	; 0xb0dc <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    5876:	11 50       	subi	r17, 0x01	; 1
    5878:	12 30       	cpi	r17, 0x02	; 2
    587a:	70 f7       	brcc	.-36     	; 0x5858 <move_window+0x80>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    587c:	81 14       	cp	r8, r1
    587e:	91 04       	cpc	r9, r1
    5880:	a1 04       	cpc	r10, r1
    5882:	b1 04       	cpc	r11, r1
    5884:	91 f0       	breq	.+36     	; 0x58aa <move_window+0xd2>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    5886:	be 01       	movw	r22, r28
    5888:	6e 5c       	subi	r22, 0xCE	; 206
    588a:	7f 4f       	sbci	r23, 0xFF	; 255
    588c:	89 81       	ldd	r24, Y+1	; 0x01
    588e:	a5 01       	movw	r20, r10
    5890:	94 01       	movw	r18, r8
    5892:	01 e0       	ldi	r16, 0x01	; 1
    5894:	0e 94 15 58 	call	0xb02a	; 0xb02a <disk_read>
    5898:	88 23       	and	r24, r24
    589a:	29 f4       	brne	.+10     	; 0x58a6 <move_window+0xce>
				return FR_DISK_ERR;
			fs->winsect = sector;
    589c:	8e a6       	std	Y+46, r8	; 0x2e
    589e:	9f a6       	std	Y+47, r9	; 0x2f
    58a0:	a8 aa       	std	Y+48, r10	; 0x30
    58a2:	b9 aa       	std	Y+49, r11	; 0x31
    58a4:	03 c0       	rjmp	.+6      	; 0x58ac <move_window+0xd4>
    58a6:	81 e0       	ldi	r24, 0x01	; 1
    58a8:	01 c0       	rjmp	.+2      	; 0x58ac <move_window+0xd4>
    58aa:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    58ac:	df 91       	pop	r29
    58ae:	cf 91       	pop	r28
    58b0:	1f 91       	pop	r17
    58b2:	0f 91       	pop	r16
    58b4:	ff 90       	pop	r15
    58b6:	ef 90       	pop	r14
    58b8:	df 90       	pop	r13
    58ba:	cf 90       	pop	r12
    58bc:	bf 90       	pop	r11
    58be:	af 90       	pop	r10
    58c0:	9f 90       	pop	r9
    58c2:	8f 90       	pop	r8
    58c4:	7f 90       	pop	r7
    58c6:	6f 90       	pop	r6
    58c8:	08 95       	ret

000058ca <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    58ca:	0f 93       	push	r16
    58cc:	cf 93       	push	r28
    58ce:	df 93       	push	r29
    58d0:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    58d2:	40 e0       	ldi	r20, 0x00	; 0
    58d4:	50 e0       	ldi	r21, 0x00	; 0
    58d6:	60 e0       	ldi	r22, 0x00	; 0
    58d8:	70 e0       	ldi	r23, 0x00	; 0
    58da:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
	if (res == FR_OK) {
    58de:	88 23       	and	r24, r24
    58e0:	09 f0       	breq	.+2      	; 0x58e4 <sync+0x1a>
    58e2:	5e c0       	rjmp	.+188    	; 0x59a0 <sync+0xd6>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    58e4:	88 81       	ld	r24, Y
    58e6:	83 30       	cpi	r24, 0x03	; 3
    58e8:	09 f0       	breq	.+2      	; 0x58ec <sync+0x22>
    58ea:	52 c0       	rjmp	.+164    	; 0x5990 <sync+0xc6>
    58ec:	8d 81       	ldd	r24, Y+5	; 0x05
    58ee:	88 23       	and	r24, r24
    58f0:	09 f4       	brne	.+2      	; 0x58f4 <sync+0x2a>
    58f2:	4e c0       	rjmp	.+156    	; 0x5990 <sync+0xc6>
			fs->winsect = 0;
    58f4:	1e a6       	std	Y+46, r1	; 0x2e
    58f6:	1f a6       	std	Y+47, r1	; 0x2f
    58f8:	18 aa       	std	Y+48, r1	; 0x30
    58fa:	19 aa       	std	Y+49, r1	; 0x31
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    58fc:	be 01       	movw	r22, r28
    58fe:	6e 5c       	subi	r22, 0xCE	; 206
    5900:	7f 4f       	sbci	r23, 0xFF	; 255
    5902:	fb 01       	movw	r30, r22
    5904:	80 e0       	ldi	r24, 0x00	; 0
    5906:	92 e0       	ldi	r25, 0x02	; 2
    5908:	01 c0       	rjmp	.+2      	; 0x590c <sync+0x42>

	while (cnt--)
		*d++ = (BYTE)val;
    590a:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    590c:	01 97       	sbiw	r24, 0x01	; 1
    590e:	2f ef       	ldi	r18, 0xFF	; 255
    5910:	8f 3f       	cpi	r24, 0xFF	; 255
    5912:	92 07       	cpc	r25, r18
    5914:	d1 f7       	brne	.-12     	; 0x590a <sync+0x40>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    5916:	c0 5d       	subi	r28, 0xD0	; 208
    5918:	dd 4f       	sbci	r29, 0xFD	; 253
    591a:	85 e5       	ldi	r24, 0x55	; 85
    591c:	9a ea       	ldi	r25, 0xAA	; 170
    591e:	99 83       	std	Y+1, r25	; 0x01
    5920:	88 83       	st	Y, r24
    5922:	c0 53       	subi	r28, 0x30	; 48
    5924:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    5926:	82 e5       	ldi	r24, 0x52	; 82
    5928:	92 e5       	ldi	r25, 0x52	; 82
    592a:	a1 e6       	ldi	r26, 0x61	; 97
    592c:	b1 e4       	ldi	r27, 0x41	; 65
    592e:	8a ab       	std	Y+50, r24	; 0x32
    5930:	9b ab       	std	Y+51, r25	; 0x33
    5932:	ac ab       	std	Y+52, r26	; 0x34
    5934:	bd ab       	std	Y+53, r27	; 0x35
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    5936:	ca 5e       	subi	r28, 0xEA	; 234
    5938:	dd 4f       	sbci	r29, 0xFD	; 253
    593a:	82 e7       	ldi	r24, 0x72	; 114
    593c:	92 e7       	ldi	r25, 0x72	; 114
    593e:	a1 e4       	ldi	r26, 0x41	; 65
    5940:	b1 e6       	ldi	r27, 0x61	; 97
    5942:	88 83       	st	Y, r24
    5944:	99 83       	std	Y+1, r25	; 0x01
    5946:	aa 83       	std	Y+2, r26	; 0x02
    5948:	bb 83       	std	Y+3, r27	; 0x03
    594a:	c6 51       	subi	r28, 0x16	; 22
    594c:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    594e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5950:	9f 85       	ldd	r25, Y+15	; 0x0f
    5952:	a8 89       	ldd	r26, Y+16	; 0x10
    5954:	b9 89       	ldd	r27, Y+17	; 0x11
    5956:	c6 5e       	subi	r28, 0xE6	; 230
    5958:	dd 4f       	sbci	r29, 0xFD	; 253
    595a:	88 83       	st	Y, r24
    595c:	99 83       	std	Y+1, r25	; 0x01
    595e:	aa 83       	std	Y+2, r26	; 0x02
    5960:	bb 83       	std	Y+3, r27	; 0x03
    5962:	ca 51       	subi	r28, 0x1A	; 26
    5964:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    5966:	8a 85       	ldd	r24, Y+10	; 0x0a
    5968:	9b 85       	ldd	r25, Y+11	; 0x0b
    596a:	ac 85       	ldd	r26, Y+12	; 0x0c
    596c:	bd 85       	ldd	r27, Y+13	; 0x0d
    596e:	c2 5e       	subi	r28, 0xE2	; 226
    5970:	dd 4f       	sbci	r29, 0xFD	; 253
    5972:	88 83       	st	Y, r24
    5974:	99 83       	std	Y+1, r25	; 0x01
    5976:	aa 83       	std	Y+2, r26	; 0x02
    5978:	bb 83       	std	Y+3, r27	; 0x03
    597a:	ce 51       	subi	r28, 0x1E	; 30
    597c:	d2 40       	sbci	r29, 0x02	; 2
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    597e:	2a 89       	ldd	r18, Y+18	; 0x12
    5980:	3b 89       	ldd	r19, Y+19	; 0x13
    5982:	4c 89       	ldd	r20, Y+20	; 0x14
    5984:	5d 89       	ldd	r21, Y+21	; 0x15
    5986:	89 81       	ldd	r24, Y+1	; 0x01
    5988:	01 e0       	ldi	r16, 0x01	; 1
    598a:	0e 94 6e 58 	call	0xb0dc	; 0xb0dc <disk_write>
			fs->fsi_flag = 0;
    598e:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
    5990:	89 81       	ldd	r24, Y+1	; 0x01
    5992:	60 e0       	ldi	r22, 0x00	; 0
    5994:	40 e0       	ldi	r20, 0x00	; 0
    5996:	50 e0       	ldi	r21, 0x00	; 0
    5998:	0e 94 df 58 	call	0xb1be	; 0xb1be <disk_ioctl>
    599c:	81 11       	cpse	r24, r1
    599e:	81 e0       	ldi	r24, 0x01	; 1
			res = FR_DISK_ERR;
	}

	return res;
}
    59a0:	df 91       	pop	r29
    59a2:	cf 91       	pop	r28
    59a4:	0f 91       	pop	r16
    59a6:	08 95       	ret

000059a8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    59a8:	0f 93       	push	r16
    59aa:	1f 93       	push	r17
    59ac:	cf 93       	push	r28
    59ae:	df 93       	push	r29
    59b0:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    59b2:	6a 81       	ldd	r22, Y+2	; 0x02
    59b4:	7b 81       	ldd	r23, Y+3	; 0x03
    59b6:	88 81       	ld	r24, Y
    59b8:	99 81       	ldd	r25, Y+1	; 0x01
    59ba:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <validate>
    59be:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    59c0:	88 23       	and	r24, r24
    59c2:	e1 f5       	brne	.+120    	; 0x5a3c <f_sync+0x94>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    59c4:	8c 81       	ldd	r24, Y+4	; 0x04
    59c6:	85 ff       	sbrs	r24, 5
    59c8:	39 c0       	rjmp	.+114    	; 0x5a3c <f_sync+0x94>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    59ca:	4a 8d       	ldd	r20, Y+26	; 0x1a
    59cc:	5b 8d       	ldd	r21, Y+27	; 0x1b
    59ce:	6c 8d       	ldd	r22, Y+28	; 0x1c
    59d0:	7d 8d       	ldd	r23, Y+29	; 0x1d
    59d2:	88 81       	ld	r24, Y
    59d4:	99 81       	ldd	r25, Y+1	; 0x01
    59d6:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    59da:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    59dc:	88 23       	and	r24, r24
    59de:	71 f5       	brne	.+92     	; 0x5a3c <f_sync+0x94>
				dir = fp->dir_ptr;
    59e0:	0e 8d       	ldd	r16, Y+30	; 0x1e
    59e2:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    59e4:	f8 01       	movw	r30, r16
    59e6:	83 85       	ldd	r24, Z+11	; 0x0b
    59e8:	80 62       	ori	r24, 0x20	; 32
    59ea:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    59ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    59ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    59f0:	ac 85       	ldd	r26, Y+12	; 0x0c
    59f2:	bd 85       	ldd	r27, Y+13	; 0x0d
    59f4:	84 8f       	std	Z+28, r24	; 0x1c
    59f6:	95 8f       	std	Z+29, r25	; 0x1d
    59f8:	a6 8f       	std	Z+30, r26	; 0x1e
    59fa:	b7 8f       	std	Z+31, r27	; 0x1f
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    59fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    59fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    5a00:	93 8f       	std	Z+27, r25	; 0x1b
    5a02:	82 8f       	std	Z+26, r24	; 0x1a
    5a04:	8e 85       	ldd	r24, Y+14	; 0x0e
    5a06:	9f 85       	ldd	r25, Y+15	; 0x0f
    5a08:	a8 89       	ldd	r26, Y+16	; 0x10
    5a0a:	b9 89       	ldd	r27, Y+17	; 0x11
    5a0c:	cd 01       	movw	r24, r26
    5a0e:	aa 27       	eor	r26, r26
    5a10:	bb 27       	eor	r27, r27
    5a12:	95 8b       	std	Z+21, r25	; 0x15
    5a14:	84 8b       	std	Z+20, r24	; 0x14
				tim = get_fattime();						/* Update updated time */
    5a16:	0e 94 8f 49 	call	0x931e	; 0x931e <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    5a1a:	f8 01       	movw	r30, r16
    5a1c:	66 8b       	std	Z+22, r22	; 0x16
    5a1e:	77 8b       	std	Z+23, r23	; 0x17
    5a20:	80 8f       	std	Z+24, r24	; 0x18
    5a22:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    5a24:	8c 81       	ldd	r24, Y+4	; 0x04
    5a26:	8f 7d       	andi	r24, 0xDF	; 223
    5a28:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    5a2a:	e8 81       	ld	r30, Y
    5a2c:	f9 81       	ldd	r31, Y+1	; 0x01
    5a2e:	81 e0       	ldi	r24, 0x01	; 1
    5a30:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    5a32:	88 81       	ld	r24, Y
    5a34:	99 81       	ldd	r25, Y+1	; 0x01
    5a36:	0e 94 65 2c 	call	0x58ca	; 0x58ca <sync>
    5a3a:	98 2f       	mov	r25, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    5a3c:	89 2f       	mov	r24, r25
    5a3e:	df 91       	pop	r29
    5a40:	cf 91       	pop	r28
    5a42:	1f 91       	pop	r17
    5a44:	0f 91       	pop	r16
    5a46:	08 95       	ret

00005a48 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    5a48:	cf 93       	push	r28
    5a4a:	df 93       	push	r29
    5a4c:	ec 01       	movw	r28, r24
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    5a4e:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <f_sync>
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    5a52:	88 23       	and	r24, r24
    5a54:	11 f4       	brne	.+4      	; 0x5a5a <f_close+0x12>
    5a56:	19 82       	std	Y+1, r1	; 0x01
    5a58:	18 82       	st	Y, r1
	return res;
#endif
}
    5a5a:	df 91       	pop	r29
    5a5c:	cf 91       	pop	r28
    5a5e:	08 95       	ret

00005a60 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    5a60:	8f 92       	push	r8
    5a62:	9f 92       	push	r9
    5a64:	af 92       	push	r10
    5a66:	bf 92       	push	r11
    5a68:	cf 92       	push	r12
    5a6a:	df 92       	push	r13
    5a6c:	ef 92       	push	r14
    5a6e:	ff 92       	push	r15
    5a70:	0f 93       	push	r16
    5a72:	1f 93       	push	r17
    5a74:	cf 93       	push	r28
    5a76:	df 93       	push	r29
    5a78:	ec 01       	movw	r28, r24
    5a7a:	6a 01       	movw	r12, r20
    5a7c:	7b 01       	movw	r14, r22
    5a7e:	48 01       	movw	r8, r16
    5a80:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    5a82:	42 30       	cpi	r20, 0x02	; 2
    5a84:	51 05       	cpc	r21, r1
    5a86:	61 05       	cpc	r22, r1
    5a88:	71 05       	cpc	r23, r1
    5a8a:	08 f4       	brcc	.+2      	; 0x5a8e <put_fat+0x2e>
    5a8c:	d1 c0       	rjmp	.+418    	; 0x5c30 <put_fat+0x1d0>
    5a8e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5a90:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5a92:	ac 8d       	ldd	r26, Y+28	; 0x1c
    5a94:	bd 8d       	ldd	r27, Y+29	; 0x1d
    5a96:	48 17       	cp	r20, r24
    5a98:	59 07       	cpc	r21, r25
    5a9a:	6a 07       	cpc	r22, r26
    5a9c:	7b 07       	cpc	r23, r27
    5a9e:	08 f0       	brcs	.+2      	; 0x5aa2 <put_fat+0x42>
    5aa0:	c7 c0       	rjmp	.+398    	; 0x5c30 <put_fat+0x1d0>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    5aa2:	88 81       	ld	r24, Y
    5aa4:	82 30       	cpi	r24, 0x02	; 2
    5aa6:	09 f4       	brne	.+2      	; 0x5aaa <put_fat+0x4a>
    5aa8:	70 c0       	rjmp	.+224    	; 0x5b8a <put_fat+0x12a>
    5aaa:	83 30       	cpi	r24, 0x03	; 3
    5aac:	09 f4       	brne	.+2      	; 0x5ab0 <put_fat+0x50>
    5aae:	8c c0       	rjmp	.+280    	; 0x5bc8 <put_fat+0x168>
    5ab0:	81 30       	cpi	r24, 0x01	; 1
    5ab2:	11 f0       	breq	.+4      	; 0x5ab8 <put_fat+0x58>
    5ab4:	22 e0       	ldi	r18, 0x02	; 2
    5ab6:	b9 c0       	rjmp	.+370    	; 0x5c2a <put_fat+0x1ca>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    5ab8:	8a 01       	movw	r16, r20
    5aba:	16 95       	lsr	r17
    5abc:	07 95       	ror	r16
    5abe:	04 0f       	add	r16, r20
    5ac0:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    5ac2:	a8 01       	movw	r20, r16
    5ac4:	45 2f       	mov	r20, r21
    5ac6:	55 27       	eor	r21, r21
    5ac8:	46 95       	lsr	r20
    5aca:	60 e0       	ldi	r22, 0x00	; 0
    5acc:	70 e0       	ldi	r23, 0x00	; 0
    5ace:	8a a1       	ldd	r24, Y+34	; 0x22
    5ad0:	9b a1       	ldd	r25, Y+35	; 0x23
    5ad2:	ac a1       	ldd	r26, Y+36	; 0x24
    5ad4:	bd a1       	ldd	r27, Y+37	; 0x25
    5ad6:	48 0f       	add	r20, r24
    5ad8:	59 1f       	adc	r21, r25
    5ada:	6a 1f       	adc	r22, r26
    5adc:	7b 1f       	adc	r23, r27
    5ade:	ce 01       	movw	r24, r28
    5ae0:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    5ae4:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    5ae6:	88 23       	and	r24, r24
    5ae8:	09 f0       	breq	.+2      	; 0x5aec <put_fat+0x8c>
    5aea:	9f c0       	rjmp	.+318    	; 0x5c2a <put_fat+0x1ca>
			p = &fs->win[bc % SS(fs)];
    5aec:	d8 01       	movw	r26, r16
    5aee:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    5af0:	91 e0       	ldi	r25, 0x01	; 1
    5af2:	e9 2e       	mov	r14, r25
    5af4:	f1 2c       	mov	r15, r1
    5af6:	ec 20       	and	r14, r12
    5af8:	fd 20       	and	r15, r13
    5afa:	e1 14       	cp	r14, r1
    5afc:	f1 04       	cpc	r15, r1
    5afe:	51 f0       	breq	.+20     	; 0x5b14 <put_fat+0xb4>
    5b00:	fe 01       	movw	r30, r28
    5b02:	ea 0f       	add	r30, r26
    5b04:	fb 1f       	adc	r31, r27
    5b06:	82 a9       	ldd	r24, Z+50	; 0x32
    5b08:	8f 70       	andi	r24, 0x0F	; 15
    5b0a:	98 2d       	mov	r25, r8
    5b0c:	92 95       	swap	r25
    5b0e:	90 7f       	andi	r25, 0xF0	; 240
    5b10:	98 2b       	or	r25, r24
    5b12:	01 c0       	rjmp	.+2      	; 0x5b16 <put_fat+0xb6>
    5b14:	98 2d       	mov	r25, r8
    5b16:	ac 0f       	add	r26, r28
    5b18:	bd 1f       	adc	r27, r29
    5b1a:	d2 96       	adiw	r26, 0x32	; 50
    5b1c:	9c 93       	st	X, r25
			bc++;
    5b1e:	0f 5f       	subi	r16, 0xFF	; 255
    5b20:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
    5b22:	81 e0       	ldi	r24, 0x01	; 1
    5b24:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    5b26:	a8 01       	movw	r20, r16
    5b28:	45 2f       	mov	r20, r21
    5b2a:	55 27       	eor	r21, r21
    5b2c:	46 95       	lsr	r20
    5b2e:	60 e0       	ldi	r22, 0x00	; 0
    5b30:	70 e0       	ldi	r23, 0x00	; 0
    5b32:	8a a1       	ldd	r24, Y+34	; 0x22
    5b34:	9b a1       	ldd	r25, Y+35	; 0x23
    5b36:	ac a1       	ldd	r26, Y+36	; 0x24
    5b38:	bd a1       	ldd	r27, Y+37	; 0x25
    5b3a:	48 0f       	add	r20, r24
    5b3c:	59 1f       	adc	r21, r25
    5b3e:	6a 1f       	adc	r22, r26
    5b40:	7b 1f       	adc	r23, r27
    5b42:	ce 01       	movw	r24, r28
    5b44:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    5b48:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    5b4a:	88 23       	and	r24, r24
    5b4c:	09 f0       	breq	.+2      	; 0x5b50 <put_fat+0xf0>
    5b4e:	6d c0       	rjmp	.+218    	; 0x5c2a <put_fat+0x1ca>
			p = &fs->win[bc % SS(fs)];
    5b50:	a8 01       	movw	r20, r16
    5b52:	51 70       	andi	r21, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    5b54:	ef 28       	or	r14, r15
    5b56:	49 f0       	breq	.+18     	; 0x5b6a <put_fat+0x10a>
    5b58:	14 e0       	ldi	r17, 0x04	; 4
    5b5a:	b6 94       	lsr	r11
    5b5c:	a7 94       	ror	r10
    5b5e:	97 94       	ror	r9
    5b60:	87 94       	ror	r8
    5b62:	1a 95       	dec	r17
    5b64:	d1 f7       	brne	.-12     	; 0x5b5a <put_fat+0xfa>
    5b66:	68 2d       	mov	r22, r8
    5b68:	0b c0       	rjmp	.+22     	; 0x5b80 <put_fat+0x120>
    5b6a:	fe 01       	movw	r30, r28
    5b6c:	e4 0f       	add	r30, r20
    5b6e:	f5 1f       	adc	r31, r21
    5b70:	62 a9       	ldd	r22, Z+50	; 0x32
    5b72:	60 7f       	andi	r22, 0xF0	; 240
    5b74:	bb 27       	eor	r27, r27
    5b76:	ab 2d       	mov	r26, r11
    5b78:	9a 2d       	mov	r25, r10
    5b7a:	89 2d       	mov	r24, r9
    5b7c:	8f 70       	andi	r24, 0x0F	; 15
    5b7e:	68 2b       	or	r22, r24
    5b80:	4c 0f       	add	r20, r28
    5b82:	5d 1f       	adc	r21, r29
    5b84:	fa 01       	movw	r30, r20
    5b86:	62 ab       	std	Z+50, r22	; 0x32
    5b88:	50 c0       	rjmp	.+160    	; 0x5c2a <put_fat+0x1ca>
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    5b8a:	45 2f       	mov	r20, r21
    5b8c:	56 2f       	mov	r21, r22
    5b8e:	67 2f       	mov	r22, r23
    5b90:	77 27       	eor	r23, r23
    5b92:	8a a1       	ldd	r24, Y+34	; 0x22
    5b94:	9b a1       	ldd	r25, Y+35	; 0x23
    5b96:	ac a1       	ldd	r26, Y+36	; 0x24
    5b98:	bd a1       	ldd	r27, Y+37	; 0x25
    5b9a:	48 0f       	add	r20, r24
    5b9c:	59 1f       	adc	r21, r25
    5b9e:	6a 1f       	adc	r22, r26
    5ba0:	7b 1f       	adc	r23, r27
    5ba2:	ce 01       	movw	r24, r28
    5ba4:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    5ba8:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    5baa:	88 23       	and	r24, r24
    5bac:	09 f0       	breq	.+2      	; 0x5bb0 <put_fat+0x150>
    5bae:	3d c0       	rjmp	.+122    	; 0x5c2a <put_fat+0x1ca>
			p = &fs->win[clst * 2 % SS(fs)];
			ST_WORD(p, (WORD)val);
    5bb0:	cc 0c       	add	r12, r12
    5bb2:	dd 1c       	adc	r13, r13
    5bb4:	ee 1c       	adc	r14, r14
    5bb6:	ff 1c       	adc	r15, r15
    5bb8:	f6 01       	movw	r30, r12
    5bba:	f1 70       	andi	r31, 0x01	; 1
    5bbc:	f2 96       	adiw	r30, 0x32	; 50
    5bbe:	ec 0f       	add	r30, r28
    5bc0:	fd 1f       	adc	r31, r29
    5bc2:	91 82       	std	Z+1, r9	; 0x01
    5bc4:	80 82       	st	Z, r8
    5bc6:	31 c0       	rjmp	.+98     	; 0x5c2a <put_fat+0x1ca>
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    5bc8:	e7 e0       	ldi	r30, 0x07	; 7
    5bca:	76 95       	lsr	r23
    5bcc:	67 95       	ror	r22
    5bce:	57 95       	ror	r21
    5bd0:	47 95       	ror	r20
    5bd2:	ea 95       	dec	r30
    5bd4:	d1 f7       	brne	.-12     	; 0x5bca <put_fat+0x16a>
    5bd6:	8a a1       	ldd	r24, Y+34	; 0x22
    5bd8:	9b a1       	ldd	r25, Y+35	; 0x23
    5bda:	ac a1       	ldd	r26, Y+36	; 0x24
    5bdc:	bd a1       	ldd	r27, Y+37	; 0x25
    5bde:	48 0f       	add	r20, r24
    5be0:	59 1f       	adc	r21, r25
    5be2:	6a 1f       	adc	r22, r26
    5be4:	7b 1f       	adc	r23, r27
    5be6:	ce 01       	movw	r24, r28
    5be8:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    5bec:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    5bee:	88 23       	and	r24, r24
    5bf0:	e1 f4       	brne	.+56     	; 0x5c2a <put_fat+0x1ca>
			p = &fs->win[clst * 4 % SS(fs)];
			val |= LD_DWORD(p) & 0xF0000000;
    5bf2:	32 e0       	ldi	r19, 0x02	; 2
    5bf4:	cc 0c       	add	r12, r12
    5bf6:	dd 1c       	adc	r13, r13
    5bf8:	ee 1c       	adc	r14, r14
    5bfa:	ff 1c       	adc	r15, r15
    5bfc:	3a 95       	dec	r19
    5bfe:	d1 f7       	brne	.-12     	; 0x5bf4 <put_fat+0x194>
    5c00:	f6 01       	movw	r30, r12
    5c02:	f1 70       	andi	r31, 0x01	; 1
    5c04:	f2 96       	adiw	r30, 0x32	; 50
    5c06:	ec 0f       	add	r30, r28
    5c08:	fd 1f       	adc	r31, r29
			ST_DWORD(p, val);
    5c0a:	80 81       	ld	r24, Z
    5c0c:	91 81       	ldd	r25, Z+1	; 0x01
    5c0e:	a2 81       	ldd	r26, Z+2	; 0x02
    5c10:	b3 81       	ldd	r27, Z+3	; 0x03
    5c12:	80 70       	andi	r24, 0x00	; 0
    5c14:	90 70       	andi	r25, 0x00	; 0
    5c16:	a0 70       	andi	r26, 0x00	; 0
    5c18:	b0 7f       	andi	r27, 0xF0	; 240
    5c1a:	88 29       	or	r24, r8
    5c1c:	99 29       	or	r25, r9
    5c1e:	aa 29       	or	r26, r10
    5c20:	bb 29       	or	r27, r11
    5c22:	80 83       	st	Z, r24
    5c24:	91 83       	std	Z+1, r25	; 0x01
    5c26:	a2 83       	std	Z+2, r26	; 0x02
    5c28:	b3 83       	std	Z+3, r27	; 0x03
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    5c2a:	81 e0       	ldi	r24, 0x01	; 1
    5c2c:	8c 83       	std	Y+4, r24	; 0x04
    5c2e:	01 c0       	rjmp	.+2      	; 0x5c32 <put_fat+0x1d2>
    5c30:	22 e0       	ldi	r18, 0x02	; 2
	}

	return res;
}
    5c32:	82 2f       	mov	r24, r18
    5c34:	df 91       	pop	r29
    5c36:	cf 91       	pop	r28
    5c38:	1f 91       	pop	r17
    5c3a:	0f 91       	pop	r16
    5c3c:	ff 90       	pop	r15
    5c3e:	ef 90       	pop	r14
    5c40:	df 90       	pop	r13
    5c42:	cf 90       	pop	r12
    5c44:	bf 90       	pop	r11
    5c46:	af 90       	pop	r10
    5c48:	9f 90       	pop	r9
    5c4a:	8f 90       	pop	r8
    5c4c:	08 95       	ret

00005c4e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    5c4e:	bf 92       	push	r11
    5c50:	cf 92       	push	r12
    5c52:	df 92       	push	r13
    5c54:	ef 92       	push	r14
    5c56:	ff 92       	push	r15
    5c58:	0f 93       	push	r16
    5c5a:	1f 93       	push	r17
    5c5c:	cf 93       	push	r28
    5c5e:	df 93       	push	r29
    5c60:	6c 01       	movw	r12, r24
    5c62:	7a 01       	movw	r14, r20
    5c64:	8b 01       	movw	r16, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    5c66:	42 30       	cpi	r20, 0x02	; 2
    5c68:	51 05       	cpc	r21, r1
    5c6a:	61 05       	cpc	r22, r1
    5c6c:	71 05       	cpc	r23, r1
    5c6e:	08 f4       	brcc	.+2      	; 0x5c72 <get_fat+0x24>
    5c70:	ac c0       	rjmp	.+344    	; 0x5dca <get_fat+0x17c>
    5c72:	f6 01       	movw	r30, r12
    5c74:	82 8d       	ldd	r24, Z+26	; 0x1a
    5c76:	93 8d       	ldd	r25, Z+27	; 0x1b
    5c78:	a4 8d       	ldd	r26, Z+28	; 0x1c
    5c7a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    5c7c:	48 17       	cp	r20, r24
    5c7e:	59 07       	cpc	r21, r25
    5c80:	6a 07       	cpc	r22, r26
    5c82:	7b 07       	cpc	r23, r27
    5c84:	08 f0       	brcs	.+2      	; 0x5c88 <get_fat+0x3a>
    5c86:	a1 c0       	rjmp	.+322    	; 0x5dca <get_fat+0x17c>
		return 1;

	switch (fs->fs_type) {
    5c88:	80 81       	ld	r24, Z
    5c8a:	82 30       	cpi	r24, 0x02	; 2
    5c8c:	09 f4       	brne	.+2      	; 0x5c90 <get_fat+0x42>
    5c8e:	57 c0       	rjmp	.+174    	; 0x5d3e <get_fat+0xf0>
    5c90:	83 30       	cpi	r24, 0x03	; 3
    5c92:	09 f4       	brne	.+2      	; 0x5c96 <get_fat+0x48>
    5c94:	74 c0       	rjmp	.+232    	; 0x5d7e <get_fat+0x130>
    5c96:	81 30       	cpi	r24, 0x01	; 1
    5c98:	09 f0       	breq	.+2      	; 0x5c9c <get_fat+0x4e>
    5c9a:	9c c0       	rjmp	.+312    	; 0x5dd4 <get_fat+0x186>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    5c9c:	ea 01       	movw	r28, r20
    5c9e:	d6 95       	lsr	r29
    5ca0:	c7 95       	ror	r28
    5ca2:	c4 0f       	add	r28, r20
    5ca4:	d5 1f       	adc	r29, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    5ca6:	ae 01       	movw	r20, r28
    5ca8:	45 2f       	mov	r20, r21
    5caa:	55 27       	eor	r21, r21
    5cac:	46 95       	lsr	r20
    5cae:	60 e0       	ldi	r22, 0x00	; 0
    5cb0:	70 e0       	ldi	r23, 0x00	; 0
    5cb2:	f6 01       	movw	r30, r12
    5cb4:	82 a1       	ldd	r24, Z+34	; 0x22
    5cb6:	93 a1       	ldd	r25, Z+35	; 0x23
    5cb8:	a4 a1       	ldd	r26, Z+36	; 0x24
    5cba:	b5 a1       	ldd	r27, Z+37	; 0x25
    5cbc:	48 0f       	add	r20, r24
    5cbe:	59 1f       	adc	r21, r25
    5cc0:	6a 1f       	adc	r22, r26
    5cc2:	7b 1f       	adc	r23, r27
    5cc4:	c6 01       	movw	r24, r12
    5cc6:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    5cca:	88 23       	and	r24, r24
    5ccc:	09 f0       	breq	.+2      	; 0x5cd0 <get_fat+0x82>
    5cce:	82 c0       	rjmp	.+260    	; 0x5dd4 <get_fat+0x186>
		wc = fs->win[bc % SS(fs)]; bc++;
    5cd0:	fe 01       	movw	r30, r28
    5cd2:	f1 70       	andi	r31, 0x01	; 1
    5cd4:	ec 0d       	add	r30, r12
    5cd6:	fd 1d       	adc	r31, r13
    5cd8:	b2 a8       	ldd	r11, Z+50	; 0x32
    5cda:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    5cdc:	ae 01       	movw	r20, r28
    5cde:	45 2f       	mov	r20, r21
    5ce0:	55 27       	eor	r21, r21
    5ce2:	46 95       	lsr	r20
    5ce4:	60 e0       	ldi	r22, 0x00	; 0
    5ce6:	70 e0       	ldi	r23, 0x00	; 0
    5ce8:	f6 01       	movw	r30, r12
    5cea:	82 a1       	ldd	r24, Z+34	; 0x22
    5cec:	93 a1       	ldd	r25, Z+35	; 0x23
    5cee:	a4 a1       	ldd	r26, Z+36	; 0x24
    5cf0:	b5 a1       	ldd	r27, Z+37	; 0x25
    5cf2:	48 0f       	add	r20, r24
    5cf4:	59 1f       	adc	r21, r25
    5cf6:	6a 1f       	adc	r22, r26
    5cf8:	7b 1f       	adc	r23, r27
    5cfa:	c6 01       	movw	r24, r12
    5cfc:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    5d00:	88 23       	and	r24, r24
    5d02:	09 f0       	breq	.+2      	; 0x5d06 <get_fat+0xb8>
    5d04:	67 c0       	rjmp	.+206    	; 0x5dd4 <get_fat+0x186>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    5d06:	6b 2d       	mov	r22, r11
    5d08:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    5d0a:	d1 70       	andi	r29, 0x01	; 1
    5d0c:	cc 0d       	add	r28, r12
    5d0e:	dd 1d       	adc	r29, r13
    5d10:	9a a9       	ldd	r25, Y+50	; 0x32
    5d12:	80 e0       	ldi	r24, 0x00	; 0
    5d14:	68 2b       	or	r22, r24
    5d16:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    5d18:	c7 01       	movw	r24, r14
    5d1a:	81 70       	andi	r24, 0x01	; 1
    5d1c:	90 70       	andi	r25, 0x00	; 0
    5d1e:	89 2b       	or	r24, r25
    5d20:	39 f0       	breq	.+14     	; 0x5d30 <get_fat+0xe2>
    5d22:	b4 e0       	ldi	r27, 0x04	; 4
    5d24:	76 95       	lsr	r23
    5d26:	67 95       	ror	r22
    5d28:	ba 95       	dec	r27
    5d2a:	e1 f7       	brne	.-8      	; 0x5d24 <get_fat+0xd6>
    5d2c:	9b 01       	movw	r18, r22
    5d2e:	24 c0       	rjmp	.+72     	; 0x5d78 <get_fat+0x12a>
    5d30:	9b 01       	movw	r18, r22
    5d32:	40 e0       	ldi	r20, 0x00	; 0
    5d34:	50 e0       	ldi	r21, 0x00	; 0
    5d36:	3f 70       	andi	r19, 0x0F	; 15
    5d38:	40 70       	andi	r20, 0x00	; 0
    5d3a:	50 70       	andi	r21, 0x00	; 0
    5d3c:	4f c0       	rjmp	.+158    	; 0x5ddc <get_fat+0x18e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    5d3e:	45 2f       	mov	r20, r21
    5d40:	56 2f       	mov	r21, r22
    5d42:	67 2f       	mov	r22, r23
    5d44:	77 27       	eor	r23, r23
    5d46:	f6 01       	movw	r30, r12
    5d48:	82 a1       	ldd	r24, Z+34	; 0x22
    5d4a:	93 a1       	ldd	r25, Z+35	; 0x23
    5d4c:	a4 a1       	ldd	r26, Z+36	; 0x24
    5d4e:	b5 a1       	ldd	r27, Z+37	; 0x25
    5d50:	48 0f       	add	r20, r24
    5d52:	59 1f       	adc	r21, r25
    5d54:	6a 1f       	adc	r22, r26
    5d56:	7b 1f       	adc	r23, r27
    5d58:	c6 01       	movw	r24, r12
    5d5a:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    5d5e:	88 23       	and	r24, r24
    5d60:	c9 f5       	brne	.+114    	; 0x5dd4 <get_fat+0x186>
		p = &fs->win[clst * 2 % SS(fs)];
		return LD_WORD(p);
    5d62:	ee 0c       	add	r14, r14
    5d64:	ff 1c       	adc	r15, r15
    5d66:	00 1f       	adc	r16, r16
    5d68:	11 1f       	adc	r17, r17
    5d6a:	f7 01       	movw	r30, r14
    5d6c:	f1 70       	andi	r31, 0x01	; 1
    5d6e:	ec 0d       	add	r30, r12
    5d70:	fd 1d       	adc	r31, r13
    5d72:	82 a9       	ldd	r24, Z+50	; 0x32
    5d74:	93 a9       	ldd	r25, Z+51	; 0x33
    5d76:	9c 01       	movw	r18, r24
    5d78:	40 e0       	ldi	r20, 0x00	; 0
    5d7a:	50 e0       	ldi	r21, 0x00	; 0
    5d7c:	2f c0       	rjmp	.+94     	; 0x5ddc <get_fat+0x18e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    5d7e:	e7 e0       	ldi	r30, 0x07	; 7
    5d80:	76 95       	lsr	r23
    5d82:	67 95       	ror	r22
    5d84:	57 95       	ror	r21
    5d86:	47 95       	ror	r20
    5d88:	ea 95       	dec	r30
    5d8a:	d1 f7       	brne	.-12     	; 0x5d80 <get_fat+0x132>
    5d8c:	f6 01       	movw	r30, r12
    5d8e:	82 a1       	ldd	r24, Z+34	; 0x22
    5d90:	93 a1       	ldd	r25, Z+35	; 0x23
    5d92:	a4 a1       	ldd	r26, Z+36	; 0x24
    5d94:	b5 a1       	ldd	r27, Z+37	; 0x25
    5d96:	48 0f       	add	r20, r24
    5d98:	59 1f       	adc	r21, r25
    5d9a:	6a 1f       	adc	r22, r26
    5d9c:	7b 1f       	adc	r23, r27
    5d9e:	c6 01       	movw	r24, r12
    5da0:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    5da4:	88 23       	and	r24, r24
    5da6:	b1 f4       	brne	.+44     	; 0x5dd4 <get_fat+0x186>
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
    5da8:	42 e0       	ldi	r20, 0x02	; 2
    5daa:	ee 0c       	add	r14, r14
    5dac:	ff 1c       	adc	r15, r15
    5dae:	00 1f       	adc	r16, r16
    5db0:	11 1f       	adc	r17, r17
    5db2:	4a 95       	dec	r20
    5db4:	d1 f7       	brne	.-12     	; 0x5daa <get_fat+0x15c>
    5db6:	f7 01       	movw	r30, r14
    5db8:	f1 70       	andi	r31, 0x01	; 1
    5dba:	ec 0d       	add	r30, r12
    5dbc:	fd 1d       	adc	r31, r13
    5dbe:	22 a9       	ldd	r18, Z+50	; 0x32
    5dc0:	33 a9       	ldd	r19, Z+51	; 0x33
    5dc2:	44 a9       	ldd	r20, Z+52	; 0x34
    5dc4:	55 a9       	ldd	r21, Z+53	; 0x35
    5dc6:	5f 70       	andi	r21, 0x0F	; 15
    5dc8:	09 c0       	rjmp	.+18     	; 0x5ddc <get_fat+0x18e>
    5dca:	21 e0       	ldi	r18, 0x01	; 1
    5dcc:	30 e0       	ldi	r19, 0x00	; 0
    5dce:	40 e0       	ldi	r20, 0x00	; 0
    5dd0:	50 e0       	ldi	r21, 0x00	; 0
    5dd2:	04 c0       	rjmp	.+8      	; 0x5ddc <get_fat+0x18e>
    5dd4:	2f ef       	ldi	r18, 0xFF	; 255
    5dd6:	3f ef       	ldi	r19, 0xFF	; 255
    5dd8:	4f ef       	ldi	r20, 0xFF	; 255
    5dda:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
}
    5ddc:	b9 01       	movw	r22, r18
    5dde:	ca 01       	movw	r24, r20
    5de0:	df 91       	pop	r29
    5de2:	cf 91       	pop	r28
    5de4:	1f 91       	pop	r17
    5de6:	0f 91       	pop	r16
    5de8:	ff 90       	pop	r15
    5dea:	ef 90       	pop	r14
    5dec:	df 90       	pop	r13
    5dee:	cf 90       	pop	r12
    5df0:	bf 90       	pop	r11
    5df2:	08 95       	ret

00005df4 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    5df4:	af 92       	push	r10
    5df6:	bf 92       	push	r11
    5df8:	cf 92       	push	r12
    5dfa:	df 92       	push	r13
    5dfc:	ef 92       	push	r14
    5dfe:	ff 92       	push	r15
    5e00:	0f 93       	push	r16
    5e02:	1f 93       	push	r17
    5e04:	cf 93       	push	r28
    5e06:	df 93       	push	r29
    5e08:	5c 01       	movw	r10, r24
    5e0a:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    5e0c:	dc 01       	movw	r26, r24
    5e0e:	15 96       	adiw	r26, 0x05	; 5
    5e10:	7c 93       	st	X, r23
    5e12:	6e 93       	st	-X, r22
    5e14:	14 97       	sbiw	r26, 0x04	; 4
	clst = dj->sclust;
    5e16:	16 96       	adiw	r26, 0x06	; 6
    5e18:	4d 91       	ld	r20, X+
    5e1a:	5d 91       	ld	r21, X+
    5e1c:	6d 91       	ld	r22, X+
    5e1e:	7c 91       	ld	r23, X
    5e20:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    5e22:	41 30       	cpi	r20, 0x01	; 1
    5e24:	51 05       	cpc	r21, r1
    5e26:	61 05       	cpc	r22, r1
    5e28:	71 05       	cpc	r23, r1
    5e2a:	09 f4       	brne	.+2      	; 0x5e2e <dir_sdi+0x3a>
    5e2c:	d3 c0       	rjmp	.+422    	; 0x5fd4 <dir_sdi+0x1e0>
    5e2e:	ed 91       	ld	r30, X+
    5e30:	fc 91       	ld	r31, X
    5e32:	82 8d       	ldd	r24, Z+26	; 0x1a
    5e34:	93 8d       	ldd	r25, Z+27	; 0x1b
    5e36:	a4 8d       	ldd	r26, Z+28	; 0x1c
    5e38:	b5 8d       	ldd	r27, Z+29	; 0x1d
    5e3a:	48 17       	cp	r20, r24
    5e3c:	59 07       	cpc	r21, r25
    5e3e:	6a 07       	cpc	r22, r26
    5e40:	7b 07       	cpc	r23, r27
    5e42:	08 f0       	brcs	.+2      	; 0x5e46 <dir_sdi+0x52>
    5e44:	c7 c0       	rjmp	.+398    	; 0x5fd4 <dir_sdi+0x1e0>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    5e46:	41 15       	cp	r20, r1
    5e48:	51 05       	cpc	r21, r1
    5e4a:	61 05       	cpc	r22, r1
    5e4c:	71 05       	cpc	r23, r1
    5e4e:	81 f5       	brne	.+96     	; 0x5eb0 <dir_sdi+0xbc>
    5e50:	80 81       	ld	r24, Z
    5e52:	83 30       	cpi	r24, 0x03	; 3
    5e54:	49 f4       	brne	.+18     	; 0x5e68 <dir_sdi+0x74>
		clst = dj->fs->dirbase;
    5e56:	46 a1       	ldd	r20, Z+38	; 0x26
    5e58:	57 a1       	ldd	r21, Z+39	; 0x27
    5e5a:	60 a5       	ldd	r22, Z+40	; 0x28
    5e5c:	71 a5       	ldd	r23, Z+41	; 0x29

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    5e5e:	41 15       	cp	r20, r1
    5e60:	51 05       	cpc	r21, r1
    5e62:	61 05       	cpc	r22, r1
    5e64:	71 05       	cpc	r23, r1
    5e66:	21 f5       	brne	.+72     	; 0x5eb0 <dir_sdi+0xbc>
		dj->clust = clst;
    5e68:	f5 01       	movw	r30, r10
    5e6a:	12 86       	std	Z+10, r1	; 0x0a
    5e6c:	13 86       	std	Z+11, r1	; 0x0b
    5e6e:	14 86       	std	Z+12, r1	; 0x0c
    5e70:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    5e72:	01 90       	ld	r0, Z+
    5e74:	f0 81       	ld	r31, Z
    5e76:	e0 2d       	mov	r30, r0
    5e78:	80 85       	ldd	r24, Z+8	; 0x08
    5e7a:	91 85       	ldd	r25, Z+9	; 0x09
    5e7c:	c8 16       	cp	r12, r24
    5e7e:	d9 06       	cpc	r13, r25
    5e80:	08 f0       	brcs	.+2      	; 0x5e84 <dir_sdi+0x90>
    5e82:	a8 c0       	rjmp	.+336    	; 0x5fd4 <dir_sdi+0x1e0>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    5e84:	c6 01       	movw	r24, r12
    5e86:	a4 e0       	ldi	r26, 0x04	; 4
    5e88:	96 95       	lsr	r25
    5e8a:	87 95       	ror	r24
    5e8c:	aa 95       	dec	r26
    5e8e:	e1 f7       	brne	.-8      	; 0x5e88 <dir_sdi+0x94>
    5e90:	a0 e0       	ldi	r26, 0x00	; 0
    5e92:	b0 e0       	ldi	r27, 0x00	; 0
    5e94:	26 a1       	ldd	r18, Z+38	; 0x26
    5e96:	37 a1       	ldd	r19, Z+39	; 0x27
    5e98:	40 a5       	ldd	r20, Z+40	; 0x28
    5e9a:	51 a5       	ldd	r21, Z+41	; 0x29
    5e9c:	82 0f       	add	r24, r18
    5e9e:	93 1f       	adc	r25, r19
    5ea0:	a4 1f       	adc	r26, r20
    5ea2:	b5 1f       	adc	r27, r21
    5ea4:	f5 01       	movw	r30, r10
    5ea6:	86 87       	std	Z+14, r24	; 0x0e
    5ea8:	97 87       	std	Z+15, r25	; 0x0f
    5eaa:	a0 8b       	std	Z+16, r26	; 0x10
    5eac:	b1 8b       	std	Z+17, r27	; 0x11
    5eae:	7a c0       	rjmp	.+244    	; 0x5fa4 <dir_sdi+0x1b0>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    5eb0:	82 81       	ldd	r24, Z+2	; 0x02
    5eb2:	08 2f       	mov	r16, r24
    5eb4:	10 e0       	ldi	r17, 0x00	; 0
    5eb6:	f4 e0       	ldi	r31, 0x04	; 4
    5eb8:	00 0f       	add	r16, r16
    5eba:	11 1f       	adc	r17, r17
    5ebc:	fa 95       	dec	r31
    5ebe:	e1 f7       	brne	.-8      	; 0x5eb8 <dir_sdi+0xc4>
    5ec0:	24 c0       	rjmp	.+72     	; 0x5f0a <dir_sdi+0x116>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    5ec2:	ce 01       	movw	r24, r28
    5ec4:	0e 94 27 2e 	call	0x5c4e	; 0x5c4e <get_fat>
    5ec8:	ab 01       	movw	r20, r22
    5eca:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    5ecc:	4f 3f       	cpi	r20, 0xFF	; 255
    5ece:	ff ef       	ldi	r31, 0xFF	; 255
    5ed0:	5f 07       	cpc	r21, r31
    5ed2:	ff ef       	ldi	r31, 0xFF	; 255
    5ed4:	6f 07       	cpc	r22, r31
    5ed6:	ff ef       	ldi	r31, 0xFF	; 255
    5ed8:	7f 07       	cpc	r23, r31
    5eda:	11 f4       	brne	.+4      	; 0x5ee0 <dir_sdi+0xec>
    5edc:	81 e0       	ldi	r24, 0x01	; 1
    5ede:	7b c0       	rjmp	.+246    	; 0x5fd6 <dir_sdi+0x1e2>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    5ee0:	42 30       	cpi	r20, 0x02	; 2
    5ee2:	51 05       	cpc	r21, r1
    5ee4:	61 05       	cpc	r22, r1
    5ee6:	71 05       	cpc	r23, r1
    5ee8:	08 f4       	brcc	.+2      	; 0x5eec <dir_sdi+0xf8>
    5eea:	74 c0       	rjmp	.+232    	; 0x5fd4 <dir_sdi+0x1e0>
    5eec:	d5 01       	movw	r26, r10
    5eee:	ed 91       	ld	r30, X+
    5ef0:	fc 91       	ld	r31, X
    5ef2:	82 8d       	ldd	r24, Z+26	; 0x1a
    5ef4:	93 8d       	ldd	r25, Z+27	; 0x1b
    5ef6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    5ef8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    5efa:	48 17       	cp	r20, r24
    5efc:	59 07       	cpc	r21, r25
    5efe:	6a 07       	cpc	r22, r26
    5f00:	7b 07       	cpc	r23, r27
    5f02:	08 f0       	brcs	.+2      	; 0x5f06 <dir_sdi+0x112>
    5f04:	67 c0       	rjmp	.+206    	; 0x5fd4 <dir_sdi+0x1e0>
				return FR_INT_ERR;
			idx -= ic;
    5f06:	c0 1a       	sub	r12, r16
    5f08:	d1 0a       	sbc	r13, r17
    5f0a:	f5 01       	movw	r30, r10
    5f0c:	c0 81       	ld	r28, Z
    5f0e:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    5f10:	c0 16       	cp	r12, r16
    5f12:	d1 06       	cpc	r13, r17
    5f14:	b0 f6       	brcc	.-84     	; 0x5ec2 <dir_sdi+0xce>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    5f16:	d5 01       	movw	r26, r10
    5f18:	1a 96       	adiw	r26, 0x0a	; 10
    5f1a:	4d 93       	st	X+, r20
    5f1c:	5d 93       	st	X+, r21
    5f1e:	6d 93       	st	X+, r22
    5f20:	7c 93       	st	X, r23
    5f22:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    5f24:	ee ef       	ldi	r30, 0xFE	; 254
    5f26:	ee 2e       	mov	r14, r30
    5f28:	ef ef       	ldi	r30, 0xFF	; 255
    5f2a:	fe 2e       	mov	r15, r30
    5f2c:	ef ef       	ldi	r30, 0xFF	; 255
    5f2e:	0e 2f       	mov	r16, r30
    5f30:	ef ef       	ldi	r30, 0xFF	; 255
    5f32:	1e 2f       	mov	r17, r30
    5f34:	e4 0e       	add	r14, r20
    5f36:	f5 1e       	adc	r15, r21
    5f38:	06 1f       	adc	r16, r22
    5f3a:	17 1f       	adc	r17, r23
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    5f3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5f3e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5f40:	ac 8d       	ldd	r26, Y+28	; 0x1c
    5f42:	bd 8d       	ldd	r27, Y+29	; 0x1d
    5f44:	02 97       	sbiw	r24, 0x02	; 2
    5f46:	a1 09       	sbc	r26, r1
    5f48:	b1 09       	sbc	r27, r1
    5f4a:	e8 16       	cp	r14, r24
    5f4c:	f9 06       	cpc	r15, r25
    5f4e:	0a 07       	cpc	r16, r26
    5f50:	1b 07       	cpc	r17, r27
    5f52:	28 f0       	brcs	.+10     	; 0x5f5e <dir_sdi+0x16a>
    5f54:	20 e0       	ldi	r18, 0x00	; 0
    5f56:	30 e0       	ldi	r19, 0x00	; 0
    5f58:	40 e0       	ldi	r20, 0x00	; 0
    5f5a:	50 e0       	ldi	r21, 0x00	; 0
    5f5c:	12 c0       	rjmp	.+36     	; 0x5f82 <dir_sdi+0x18e>
	return clst * fs->csize + fs->database;
    5f5e:	2a 81       	ldd	r18, Y+2	; 0x02
    5f60:	30 e0       	ldi	r19, 0x00	; 0
    5f62:	40 e0       	ldi	r20, 0x00	; 0
    5f64:	50 e0       	ldi	r21, 0x00	; 0
    5f66:	c8 01       	movw	r24, r16
    5f68:	b7 01       	movw	r22, r14
    5f6a:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__mulsi3>
    5f6e:	9b 01       	movw	r18, r22
    5f70:	ac 01       	movw	r20, r24
    5f72:	8a a5       	ldd	r24, Y+42	; 0x2a
    5f74:	9b a5       	ldd	r25, Y+43	; 0x2b
    5f76:	ac a5       	ldd	r26, Y+44	; 0x2c
    5f78:	bd a5       	ldd	r27, Y+45	; 0x2d
    5f7a:	28 0f       	add	r18, r24
    5f7c:	39 1f       	adc	r19, r25
    5f7e:	4a 1f       	adc	r20, r26
    5f80:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    5f82:	c6 01       	movw	r24, r12
    5f84:	64 e0       	ldi	r22, 0x04	; 4
    5f86:	96 95       	lsr	r25
    5f88:	87 95       	ror	r24
    5f8a:	6a 95       	dec	r22
    5f8c:	e1 f7       	brne	.-8      	; 0x5f86 <dir_sdi+0x192>
    5f8e:	a0 e0       	ldi	r26, 0x00	; 0
    5f90:	b0 e0       	ldi	r27, 0x00	; 0
    5f92:	28 0f       	add	r18, r24
    5f94:	39 1f       	adc	r19, r25
    5f96:	4a 1f       	adc	r20, r26
    5f98:	5b 1f       	adc	r21, r27
    5f9a:	f5 01       	movw	r30, r10
    5f9c:	26 87       	std	Z+14, r18	; 0x0e
    5f9e:	37 87       	std	Z+15, r19	; 0x0f
    5fa0:	40 8b       	std	Z+16, r20	; 0x10
    5fa2:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    5fa4:	ff e0       	ldi	r31, 0x0F	; 15
    5fa6:	cf 22       	and	r12, r31
    5fa8:	dd 24       	eor	r13, r13
    5faa:	35 e0       	ldi	r19, 0x05	; 5
    5fac:	cc 0c       	add	r12, r12
    5fae:	dd 1c       	adc	r13, r13
    5fb0:	3a 95       	dec	r19
    5fb2:	e1 f7       	brne	.-8      	; 0x5fac <dir_sdi+0x1b8>
    5fb4:	82 e3       	ldi	r24, 0x32	; 50
    5fb6:	90 e0       	ldi	r25, 0x00	; 0
    5fb8:	c8 0e       	add	r12, r24
    5fba:	d9 1e       	adc	r13, r25
    5fbc:	d5 01       	movw	r26, r10
    5fbe:	8d 91       	ld	r24, X+
    5fc0:	9c 91       	ld	r25, X
    5fc2:	11 97       	sbiw	r26, 0x01	; 1
    5fc4:	8c 0d       	add	r24, r12
    5fc6:	9d 1d       	adc	r25, r13
    5fc8:	53 96       	adiw	r26, 0x13	; 19
    5fca:	9c 93       	st	X, r25
    5fcc:	8e 93       	st	-X, r24
    5fce:	52 97       	sbiw	r26, 0x12	; 18
    5fd0:	80 e0       	ldi	r24, 0x00	; 0
    5fd2:	01 c0       	rjmp	.+2      	; 0x5fd6 <dir_sdi+0x1e2>

	return FR_OK;	/* Seek succeeded */
    5fd4:	82 e0       	ldi	r24, 0x02	; 2
}
    5fd6:	df 91       	pop	r29
    5fd8:	cf 91       	pop	r28
    5fda:	1f 91       	pop	r17
    5fdc:	0f 91       	pop	r16
    5fde:	ff 90       	pop	r15
    5fe0:	ef 90       	pop	r14
    5fe2:	df 90       	pop	r13
    5fe4:	cf 90       	pop	r12
    5fe6:	bf 90       	pop	r11
    5fe8:	af 90       	pop	r10
    5fea:	08 95       	ret

00005fec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    5fec:	4f 92       	push	r4
    5fee:	5f 92       	push	r5
    5ff0:	6f 92       	push	r6
    5ff2:	7f 92       	push	r7
    5ff4:	8f 92       	push	r8
    5ff6:	9f 92       	push	r9
    5ff8:	af 92       	push	r10
    5ffa:	bf 92       	push	r11
    5ffc:	cf 92       	push	r12
    5ffe:	df 92       	push	r13
    6000:	ef 92       	push	r14
    6002:	ff 92       	push	r15
    6004:	0f 93       	push	r16
    6006:	1f 93       	push	r17
    6008:	cf 93       	push	r28
    600a:	df 93       	push	r29
    600c:	ec 01       	movw	r28, r24
    600e:	2a 01       	movw	r4, r20
    6010:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    6012:	41 15       	cp	r20, r1
    6014:	51 05       	cpc	r21, r1
    6016:	61 05       	cpc	r22, r1
    6018:	71 05       	cpc	r23, r1
    601a:	99 f4       	brne	.+38     	; 0x6042 <create_chain+0x56>
		scl = fs->last_clust;			/* Get suggested start point */
    601c:	8a 84       	ldd	r8, Y+10	; 0x0a
    601e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6020:	ac 84       	ldd	r10, Y+12	; 0x0c
    6022:	bd 84       	ldd	r11, Y+13	; 0x0d
		if (!scl || scl >= fs->n_fatent) scl = 1;
    6024:	81 14       	cp	r8, r1
    6026:	91 04       	cpc	r9, r1
    6028:	a1 04       	cpc	r10, r1
    602a:	b1 04       	cpc	r11, r1
    602c:	09 f1       	breq	.+66     	; 0x6070 <create_chain+0x84>
    602e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6030:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6032:	ac 8d       	ldd	r26, Y+28	; 0x1c
    6034:	bd 8d       	ldd	r27, Y+29	; 0x1d
    6036:	88 16       	cp	r8, r24
    6038:	99 06       	cpc	r9, r25
    603a:	aa 06       	cpc	r10, r26
    603c:	bb 06       	cpc	r11, r27
    603e:	c0 f4       	brcc	.+48     	; 0x6070 <create_chain+0x84>
    6040:	1c c0       	rjmp	.+56     	; 0x607a <create_chain+0x8e>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    6042:	0e 94 27 2e 	call	0x5c4e	; 0x5c4e <get_fat>
    6046:	9b 01       	movw	r18, r22
    6048:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    604a:	62 30       	cpi	r22, 0x02	; 2
    604c:	71 05       	cpc	r23, r1
    604e:	81 05       	cpc	r24, r1
    6050:	91 05       	cpc	r25, r1
    6052:	08 f4       	brcc	.+2      	; 0x6056 <create_chain+0x6a>
    6054:	8a c0       	rjmp	.+276    	; 0x616a <create_chain+0x17e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    6056:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6058:	9b 8d       	ldd	r25, Y+27	; 0x1b
    605a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    605c:	bd 8d       	ldd	r27, Y+29	; 0x1d
    605e:	28 17       	cp	r18, r24
    6060:	39 07       	cpc	r19, r25
    6062:	4a 07       	cpc	r20, r26
    6064:	5b 07       	cpc	r21, r27
    6066:	08 f4       	brcc	.+2      	; 0x606a <create_chain+0x7e>
    6068:	8e c0       	rjmp	.+284    	; 0x6186 <create_chain+0x19a>
    606a:	53 01       	movw	r10, r6
    606c:	42 01       	movw	r8, r4
    606e:	05 c0       	rjmp	.+10     	; 0x607a <create_chain+0x8e>
    6070:	11 e0       	ldi	r17, 0x01	; 1
    6072:	81 2e       	mov	r8, r17
    6074:	91 2c       	mov	r9, r1
    6076:	a1 2c       	mov	r10, r1
    6078:	b1 2c       	mov	r11, r1
    607a:	75 01       	movw	r14, r10
    607c:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    607e:	08 94       	sec
    6080:	c1 1c       	adc	r12, r1
    6082:	d1 1c       	adc	r13, r1
    6084:	e1 1c       	adc	r14, r1
    6086:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    6088:	8a 8d       	ldd	r24, Y+26	; 0x1a
    608a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    608c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    608e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    6090:	c8 16       	cp	r12, r24
    6092:	d9 06       	cpc	r13, r25
    6094:	ea 06       	cpc	r14, r26
    6096:	fb 06       	cpc	r15, r27
    6098:	60 f0       	brcs	.+24     	; 0x60b2 <create_chain+0xc6>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    609a:	22 e0       	ldi	r18, 0x02	; 2
    609c:	82 16       	cp	r8, r18
    609e:	91 04       	cpc	r9, r1
    60a0:	a1 04       	cpc	r10, r1
    60a2:	b1 04       	cpc	r11, r1
    60a4:	08 f4       	brcc	.+2      	; 0x60a8 <create_chain+0xbc>
    60a6:	6b c0       	rjmp	.+214    	; 0x617e <create_chain+0x192>
    60a8:	b2 e0       	ldi	r27, 0x02	; 2
    60aa:	cb 2e       	mov	r12, r27
    60ac:	d1 2c       	mov	r13, r1
    60ae:	e1 2c       	mov	r14, r1
    60b0:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    60b2:	ce 01       	movw	r24, r28
    60b4:	b7 01       	movw	r22, r14
    60b6:	a6 01       	movw	r20, r12
    60b8:	0e 94 27 2e 	call	0x5c4e	; 0x5c4e <get_fat>
    60bc:	9b 01       	movw	r18, r22
    60be:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    60c0:	61 15       	cp	r22, r1
    60c2:	71 05       	cpc	r23, r1
    60c4:	81 05       	cpc	r24, r1
    60c6:	91 05       	cpc	r25, r1
    60c8:	a9 f0       	breq	.+42     	; 0x60f4 <create_chain+0x108>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    60ca:	2f 3f       	cpi	r18, 0xFF	; 255
    60cc:	8f ef       	ldi	r24, 0xFF	; 255
    60ce:	38 07       	cpc	r19, r24
    60d0:	8f ef       	ldi	r24, 0xFF	; 255
    60d2:	48 07       	cpc	r20, r24
    60d4:	8f ef       	ldi	r24, 0xFF	; 255
    60d6:	58 07       	cpc	r21, r24
    60d8:	09 f4       	brne	.+2      	; 0x60dc <create_chain+0xf0>
    60da:	55 c0       	rjmp	.+170    	; 0x6186 <create_chain+0x19a>
    60dc:	21 30       	cpi	r18, 0x01	; 1
    60de:	31 05       	cpc	r19, r1
    60e0:	41 05       	cpc	r20, r1
    60e2:	51 05       	cpc	r21, r1
    60e4:	09 f4       	brne	.+2      	; 0x60e8 <create_chain+0xfc>
    60e6:	4f c0       	rjmp	.+158    	; 0x6186 <create_chain+0x19a>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    60e8:	c8 14       	cp	r12, r8
    60ea:	d9 04       	cpc	r13, r9
    60ec:	ea 04       	cpc	r14, r10
    60ee:	fb 04       	cpc	r15, r11
    60f0:	31 f6       	brne	.-116    	; 0x607e <create_chain+0x92>
    60f2:	45 c0       	rjmp	.+138    	; 0x617e <create_chain+0x192>
    60f4:	bc 2c       	mov	r11, r12
    60f6:	ad 2c       	mov	r10, r13
    60f8:	9e 2c       	mov	r9, r14
    60fa:	8f 2c       	mov	r8, r15
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    60fc:	ce 01       	movw	r24, r28
    60fe:	a6 01       	movw	r20, r12
    6100:	b7 01       	movw	r22, r14
    6102:	0f ef       	ldi	r16, 0xFF	; 255
    6104:	1f ef       	ldi	r17, 0xFF	; 255
    6106:	2f ef       	ldi	r18, 0xFF	; 255
    6108:	3f e0       	ldi	r19, 0x0F	; 15
    610a:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <put_fat>
	if (res == FR_OK && clst != 0) {
    610e:	88 23       	and	r24, r24
    6110:	51 f5       	brne	.+84     	; 0x6166 <create_chain+0x17a>
    6112:	41 14       	cp	r4, r1
    6114:	51 04       	cpc	r5, r1
    6116:	61 04       	cpc	r6, r1
    6118:	71 04       	cpc	r7, r1
    611a:	49 f0       	breq	.+18     	; 0x612e <create_chain+0x142>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    611c:	ce 01       	movw	r24, r28
    611e:	b3 01       	movw	r22, r6
    6120:	a2 01       	movw	r20, r4
    6122:	86 01       	movw	r16, r12
    6124:	97 01       	movw	r18, r14
    6126:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <put_fat>
	}
	if (res == FR_OK) {
    612a:	88 23       	and	r24, r24
    612c:	e1 f4       	brne	.+56     	; 0x6166 <create_chain+0x17a>
		fs->last_clust = ncl;			/* Update FSINFO */
    612e:	ba 86       	std	Y+10, r11	; 0x0a
    6130:	ab 86       	std	Y+11, r10	; 0x0b
    6132:	9c 86       	std	Y+12, r9	; 0x0c
    6134:	8d 86       	std	Y+13, r8	; 0x0d
		if (fs->free_clust != 0xFFFFFFFF) {
    6136:	8e 85       	ldd	r24, Y+14	; 0x0e
    6138:	9f 85       	ldd	r25, Y+15	; 0x0f
    613a:	a8 89       	ldd	r26, Y+16	; 0x10
    613c:	b9 89       	ldd	r27, Y+17	; 0x11
    613e:	8f 3f       	cpi	r24, 0xFF	; 255
    6140:	2f ef       	ldi	r18, 0xFF	; 255
    6142:	92 07       	cpc	r25, r18
    6144:	2f ef       	ldi	r18, 0xFF	; 255
    6146:	a2 07       	cpc	r26, r18
    6148:	2f ef       	ldi	r18, 0xFF	; 255
    614a:	b2 07       	cpc	r27, r18
    614c:	49 f0       	breq	.+18     	; 0x6160 <create_chain+0x174>
			fs->free_clust--;
    614e:	01 97       	sbiw	r24, 0x01	; 1
    6150:	a1 09       	sbc	r26, r1
    6152:	b1 09       	sbc	r27, r1
    6154:	8e 87       	std	Y+14, r24	; 0x0e
    6156:	9f 87       	std	Y+15, r25	; 0x0f
    6158:	a8 8b       	std	Y+16, r26	; 0x10
    615a:	b9 8b       	std	Y+17, r27	; 0x11
			fs->fsi_flag = 1;
    615c:	81 e0       	ldi	r24, 0x01	; 1
    615e:	8d 83       	std	Y+5, r24	; 0x05
    6160:	a7 01       	movw	r20, r14
    6162:	96 01       	movw	r18, r12
    6164:	10 c0       	rjmp	.+32     	; 0x6186 <create_chain+0x19a>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    6166:	81 30       	cpi	r24, 0x01	; 1
    6168:	29 f0       	breq	.+10     	; 0x6174 <create_chain+0x188>
    616a:	21 e0       	ldi	r18, 0x01	; 1
    616c:	30 e0       	ldi	r19, 0x00	; 0
    616e:	40 e0       	ldi	r20, 0x00	; 0
    6170:	50 e0       	ldi	r21, 0x00	; 0
    6172:	09 c0       	rjmp	.+18     	; 0x6186 <create_chain+0x19a>
    6174:	2f ef       	ldi	r18, 0xFF	; 255
    6176:	3f ef       	ldi	r19, 0xFF	; 255
    6178:	4f ef       	ldi	r20, 0xFF	; 255
    617a:	5f ef       	ldi	r21, 0xFF	; 255
    617c:	04 c0       	rjmp	.+8      	; 0x6186 <create_chain+0x19a>
    617e:	20 e0       	ldi	r18, 0x00	; 0
    6180:	30 e0       	ldi	r19, 0x00	; 0
    6182:	40 e0       	ldi	r20, 0x00	; 0
    6184:	50 e0       	ldi	r21, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error code */
}
    6186:	b9 01       	movw	r22, r18
    6188:	ca 01       	movw	r24, r20
    618a:	df 91       	pop	r29
    618c:	cf 91       	pop	r28
    618e:	1f 91       	pop	r17
    6190:	0f 91       	pop	r16
    6192:	ff 90       	pop	r15
    6194:	ef 90       	pop	r14
    6196:	df 90       	pop	r13
    6198:	cf 90       	pop	r12
    619a:	bf 90       	pop	r11
    619c:	af 90       	pop	r10
    619e:	9f 90       	pop	r9
    61a0:	8f 90       	pop	r8
    61a2:	7f 90       	pop	r7
    61a4:	6f 90       	pop	r6
    61a6:	5f 90       	pop	r5
    61a8:	4f 90       	pop	r4
    61aa:	08 95       	ret

000061ac <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    61ac:	9f 92       	push	r9
    61ae:	af 92       	push	r10
    61b0:	bf 92       	push	r11
    61b2:	cf 92       	push	r12
    61b4:	df 92       	push	r13
    61b6:	ef 92       	push	r14
    61b8:	ff 92       	push	r15
    61ba:	0f 93       	push	r16
    61bc:	1f 93       	push	r17
    61be:	cf 93       	push	r28
    61c0:	df 93       	push	r29
    61c2:	ec 01       	movw	r28, r24
    61c4:	7a 01       	movw	r14, r20
    61c6:	8b 01       	movw	r16, r22
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    61c8:	42 30       	cpi	r20, 0x02	; 2
    61ca:	51 05       	cpc	r21, r1
    61cc:	61 05       	cpc	r22, r1
    61ce:	71 05       	cpc	r23, r1
    61d0:	08 f4       	brcc	.+2      	; 0x61d4 <remove_chain+0x28>
    61d2:	58 c0       	rjmp	.+176    	; 0x6284 <remove_chain+0xd8>
    61d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    61d6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    61d8:	ac 8d       	ldd	r26, Y+28	; 0x1c
    61da:	bd 8d       	ldd	r27, Y+29	; 0x1d
    61dc:	48 17       	cp	r20, r24
    61de:	59 07       	cpc	r21, r25
    61e0:	6a 07       	cpc	r22, r26
    61e2:	7b 07       	cpc	r23, r27
    61e4:	08 f4       	brcc	.+2      	; 0x61e8 <remove_chain+0x3c>
    61e6:	41 c0       	rjmp	.+130    	; 0x626a <remove_chain+0xbe>
    61e8:	4d c0       	rjmp	.+154    	; 0x6284 <remove_chain+0xd8>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    61ea:	ce 01       	movw	r24, r28
    61ec:	b8 01       	movw	r22, r16
    61ee:	a7 01       	movw	r20, r14
    61f0:	0e 94 27 2e 	call	0x5c4e	; 0x5c4e <get_fat>
    61f4:	5b 01       	movw	r10, r22
    61f6:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    61f8:	61 15       	cp	r22, r1
    61fa:	71 05       	cpc	r23, r1
    61fc:	81 05       	cpc	r24, r1
    61fe:	91 05       	cpc	r25, r1
    6200:	09 f4       	brne	.+2      	; 0x6204 <remove_chain+0x58>
    6202:	42 c0       	rjmp	.+132    	; 0x6288 <remove_chain+0xdc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    6204:	81 e0       	ldi	r24, 0x01	; 1
    6206:	a8 16       	cp	r10, r24
    6208:	b1 04       	cpc	r11, r1
    620a:	c1 04       	cpc	r12, r1
    620c:	d1 04       	cpc	r13, r1
    620e:	d1 f1       	breq	.+116    	; 0x6284 <remove_chain+0xd8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    6210:	2f ef       	ldi	r18, 0xFF	; 255
    6212:	a2 16       	cp	r10, r18
    6214:	2f ef       	ldi	r18, 0xFF	; 255
    6216:	b2 06       	cpc	r11, r18
    6218:	2f ef       	ldi	r18, 0xFF	; 255
    621a:	c2 06       	cpc	r12, r18
    621c:	2f ef       	ldi	r18, 0xFF	; 255
    621e:	d2 06       	cpc	r13, r18
    6220:	11 f4       	brne	.+4      	; 0x6226 <remove_chain+0x7a>
    6222:	81 e0       	ldi	r24, 0x01	; 1
    6224:	32 c0       	rjmp	.+100    	; 0x628a <remove_chain+0xde>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    6226:	ce 01       	movw	r24, r28
    6228:	b8 01       	movw	r22, r16
    622a:	a7 01       	movw	r20, r14
    622c:	00 e0       	ldi	r16, 0x00	; 0
    622e:	10 e0       	ldi	r17, 0x00	; 0
    6230:	20 e0       	ldi	r18, 0x00	; 0
    6232:	30 e0       	ldi	r19, 0x00	; 0
    6234:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <put_fat>
			if (res != FR_OK) break;
    6238:	88 23       	and	r24, r24
    623a:	39 f5       	brne	.+78     	; 0x628a <remove_chain+0xde>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    623c:	8e 85       	ldd	r24, Y+14	; 0x0e
    623e:	9f 85       	ldd	r25, Y+15	; 0x0f
    6240:	a8 89       	ldd	r26, Y+16	; 0x10
    6242:	b9 89       	ldd	r27, Y+17	; 0x11
    6244:	8f 3f       	cpi	r24, 0xFF	; 255
    6246:	2f ef       	ldi	r18, 0xFF	; 255
    6248:	92 07       	cpc	r25, r18
    624a:	2f ef       	ldi	r18, 0xFF	; 255
    624c:	a2 07       	cpc	r26, r18
    624e:	2f ef       	ldi	r18, 0xFF	; 255
    6250:	b2 07       	cpc	r27, r18
    6252:	41 f0       	breq	.+16     	; 0x6264 <remove_chain+0xb8>
				fs->free_clust++;
    6254:	01 96       	adiw	r24, 0x01	; 1
    6256:	a1 1d       	adc	r26, r1
    6258:	b1 1d       	adc	r27, r1
    625a:	8e 87       	std	Y+14, r24	; 0x0e
    625c:	9f 87       	std	Y+15, r25	; 0x0f
    625e:	a8 8b       	std	Y+16, r26	; 0x10
    6260:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    6262:	9d 82       	std	Y+5, r9	; 0x05
    6264:	86 01       	movw	r16, r12
    6266:	75 01       	movw	r14, r10
    6268:	02 c0       	rjmp	.+4      	; 0x626e <remove_chain+0xc2>
    626a:	99 24       	eor	r9, r9
    626c:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    626e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6270:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6272:	ac 8d       	ldd	r26, Y+28	; 0x1c
    6274:	bd 8d       	ldd	r27, Y+29	; 0x1d
    6276:	e8 16       	cp	r14, r24
    6278:	f9 06       	cpc	r15, r25
    627a:	0a 07       	cpc	r16, r26
    627c:	1b 07       	cpc	r17, r27
    627e:	08 f4       	brcc	.+2      	; 0x6282 <remove_chain+0xd6>
    6280:	b4 cf       	rjmp	.-152    	; 0x61ea <remove_chain+0x3e>
    6282:	02 c0       	rjmp	.+4      	; 0x6288 <remove_chain+0xdc>
    6284:	82 e0       	ldi	r24, 0x02	; 2
    6286:	01 c0       	rjmp	.+2      	; 0x628a <remove_chain+0xde>
    6288:	80 e0       	ldi	r24, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    628a:	df 91       	pop	r29
    628c:	cf 91       	pop	r28
    628e:	1f 91       	pop	r17
    6290:	0f 91       	pop	r16
    6292:	ff 90       	pop	r15
    6294:	ef 90       	pop	r14
    6296:	df 90       	pop	r13
    6298:	cf 90       	pop	r12
    629a:	bf 90       	pop	r11
    629c:	af 90       	pop	r10
    629e:	9f 90       	pop	r9
    62a0:	08 95       	ret

000062a2 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    62a2:	cf 92       	push	r12
    62a4:	df 92       	push	r13
    62a6:	ef 92       	push	r14
    62a8:	ff 92       	push	r15
    62aa:	0f 93       	push	r16
    62ac:	1f 93       	push	r17
    62ae:	cf 93       	push	r28
    62b0:	df 93       	push	r29
    62b2:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    62b4:	6a 81       	ldd	r22, Y+2	; 0x02
    62b6:	7b 81       	ldd	r23, Y+3	; 0x03
    62b8:	88 81       	ld	r24, Y
    62ba:	99 81       	ldd	r25, Y+1	; 0x01
    62bc:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <validate>
    62c0:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    62c2:	88 23       	and	r24, r24
    62c4:	09 f0       	breq	.+2      	; 0x62c8 <f_truncate+0x26>
    62c6:	6c c0       	rjmp	.+216    	; 0x63a0 <f_truncate+0xfe>
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
    62c8:	6c 81       	ldd	r22, Y+4	; 0x04
    62ca:	67 ff       	sbrs	r22, 7
    62cc:	02 c0       	rjmp	.+4      	; 0x62d2 <f_truncate+0x30>
    62ce:	12 e0       	ldi	r17, 0x02	; 2
    62d0:	67 c0       	rjmp	.+206    	; 0x63a0 <f_truncate+0xfe>
			res = FR_INT_ERR;
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
    62d2:	61 ff       	sbrs	r22, 1
    62d4:	6f c0       	rjmp	.+222    	; 0x63b4 <f_truncate+0x112>
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
    62d6:	2e 81       	ldd	r18, Y+6	; 0x06
    62d8:	3f 81       	ldd	r19, Y+7	; 0x07
    62da:	48 85       	ldd	r20, Y+8	; 0x08
    62dc:	59 85       	ldd	r21, Y+9	; 0x09
    62de:	8a 85       	ldd	r24, Y+10	; 0x0a
    62e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    62e2:	ac 85       	ldd	r26, Y+12	; 0x0c
    62e4:	bd 85       	ldd	r27, Y+13	; 0x0d
    62e6:	28 17       	cp	r18, r24
    62e8:	39 07       	cpc	r19, r25
    62ea:	4a 07       	cpc	r20, r26
    62ec:	5b 07       	cpc	r21, r27
    62ee:	08 f0       	brcs	.+2      	; 0x62f2 <f_truncate+0x50>
    62f0:	57 c0       	rjmp	.+174    	; 0x63a0 <f_truncate+0xfe>
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    62f2:	2a 87       	std	Y+10, r18	; 0x0a
    62f4:	3b 87       	std	Y+11, r19	; 0x0b
    62f6:	4c 87       	std	Y+12, r20	; 0x0c
    62f8:	5d 87       	std	Y+13, r21	; 0x0d
			fp->flag |= FA__WRITTEN;
    62fa:	60 62       	ori	r22, 0x20	; 32
    62fc:	6c 83       	std	Y+4, r22	; 0x04
    62fe:	88 81       	ld	r24, Y
    6300:	99 81       	ldd	r25, Y+1	; 0x01
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    6302:	21 15       	cp	r18, r1
    6304:	31 05       	cpc	r19, r1
    6306:	41 05       	cpc	r20, r1
    6308:	51 05       	cpc	r21, r1
    630a:	61 f4       	brne	.+24     	; 0x6324 <f_truncate+0x82>
				res = remove_chain(fp->fs, fp->sclust);
    630c:	4e 85       	ldd	r20, Y+14	; 0x0e
    630e:	5f 85       	ldd	r21, Y+15	; 0x0f
    6310:	68 89       	ldd	r22, Y+16	; 0x10
    6312:	79 89       	ldd	r23, Y+17	; 0x11
    6314:	0e 94 d6 30 	call	0x61ac	; 0x61ac <remove_chain>
    6318:	18 2f       	mov	r17, r24
				fp->sclust = 0;
    631a:	1e 86       	std	Y+14, r1	; 0x0e
    631c:	1f 86       	std	Y+15, r1	; 0x0f
    631e:	18 8a       	std	Y+16, r1	; 0x10
    6320:	19 8a       	std	Y+17, r1	; 0x11
    6322:	39 c0       	rjmp	.+114    	; 0x6396 <f_truncate+0xf4>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
    6324:	4a 89       	ldd	r20, Y+18	; 0x12
    6326:	5b 89       	ldd	r21, Y+19	; 0x13
    6328:	6c 89       	ldd	r22, Y+20	; 0x14
    632a:	7d 89       	ldd	r23, Y+21	; 0x15
    632c:	0e 94 27 2e 	call	0x5c4e	; 0x5c4e <get_fat>
    6330:	6b 01       	movw	r12, r22
    6332:	7c 01       	movw	r14, r24
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    6334:	8f ef       	ldi	r24, 0xFF	; 255
    6336:	c8 16       	cp	r12, r24
    6338:	8f ef       	ldi	r24, 0xFF	; 255
    633a:	d8 06       	cpc	r13, r24
    633c:	8f ef       	ldi	r24, 0xFF	; 255
    633e:	e8 06       	cpc	r14, r24
    6340:	8f ef       	ldi	r24, 0xFF	; 255
    6342:	f8 06       	cpc	r15, r24
    6344:	11 f4       	brne	.+4      	; 0x634a <f_truncate+0xa8>
    6346:	11 e0       	ldi	r17, 0x01	; 1
    6348:	28 c0       	rjmp	.+80     	; 0x639a <f_truncate+0xf8>
				if (ncl == 1) res = FR_INT_ERR;
    634a:	81 e0       	ldi	r24, 0x01	; 1
    634c:	c8 16       	cp	r12, r24
    634e:	d1 04       	cpc	r13, r1
    6350:	e1 04       	cpc	r14, r1
    6352:	f1 04       	cpc	r15, r1
    6354:	89 f1       	breq	.+98     	; 0x63b8 <f_truncate+0x116>
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
    6356:	e8 81       	ld	r30, Y
    6358:	f9 81       	ldd	r31, Y+1	; 0x01
    635a:	82 8d       	ldd	r24, Z+26	; 0x1a
    635c:	93 8d       	ldd	r25, Z+27	; 0x1b
    635e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    6360:	b5 8d       	ldd	r27, Z+29	; 0x1d
    6362:	c8 16       	cp	r12, r24
    6364:	d9 06       	cpc	r13, r25
    6366:	ea 06       	cpc	r14, r26
    6368:	fb 06       	cpc	r15, r27
    636a:	d0 f4       	brcc	.+52     	; 0x63a0 <f_truncate+0xfe>
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
    636c:	4a 89       	ldd	r20, Y+18	; 0x12
    636e:	5b 89       	ldd	r21, Y+19	; 0x13
    6370:	6c 89       	ldd	r22, Y+20	; 0x14
    6372:	7d 89       	ldd	r23, Y+21	; 0x15
    6374:	cf 01       	movw	r24, r30
    6376:	0f ef       	ldi	r16, 0xFF	; 255
    6378:	1f ef       	ldi	r17, 0xFF	; 255
    637a:	2f ef       	ldi	r18, 0xFF	; 255
    637c:	3f e0       	ldi	r19, 0x0F	; 15
    637e:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <put_fat>
    6382:	18 2f       	mov	r17, r24
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    6384:	88 23       	and	r24, r24
    6386:	49 f4       	brne	.+18     	; 0x639a <f_truncate+0xf8>
    6388:	88 81       	ld	r24, Y
    638a:	99 81       	ldd	r25, Y+1	; 0x01
    638c:	b7 01       	movw	r22, r14
    638e:	a6 01       	movw	r20, r12
    6390:	0e 94 d6 30 	call	0x61ac	; 0x61ac <remove_chain>
    6394:	18 2f       	mov	r17, r24
				}
			}
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
    6396:	11 23       	and	r17, r17
    6398:	19 f0       	breq	.+6      	; 0x63a0 <f_truncate+0xfe>
    639a:	8c 81       	ldd	r24, Y+4	; 0x04
    639c:	80 68       	ori	r24, 0x80	; 128
    639e:	8c 83       	std	Y+4, r24	; 0x04
	}

	LEAVE_FF(fp->fs, res);
}
    63a0:	81 2f       	mov	r24, r17
    63a2:	df 91       	pop	r29
    63a4:	cf 91       	pop	r28
    63a6:	1f 91       	pop	r17
    63a8:	0f 91       	pop	r16
    63aa:	ff 90       	pop	r15
    63ac:	ef 90       	pop	r14
    63ae:	df 90       	pop	r13
    63b0:	cf 90       	pop	r12
    63b2:	08 95       	ret
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
				}
			}
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
    63b4:	17 e0       	ldi	r17, 0x07	; 7
    63b6:	f4 cf       	rjmp	.-24     	; 0x63a0 <f_truncate+0xfe>
    63b8:	12 e0       	ldi	r17, 0x02	; 2
    63ba:	ef cf       	rjmp	.-34     	; 0x639a <f_truncate+0xf8>

000063bc <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    63bc:	2f 92       	push	r2
    63be:	3f 92       	push	r3
    63c0:	4f 92       	push	r4
    63c2:	5f 92       	push	r5
    63c4:	6f 92       	push	r6
    63c6:	7f 92       	push	r7
    63c8:	8f 92       	push	r8
    63ca:	9f 92       	push	r9
    63cc:	af 92       	push	r10
    63ce:	bf 92       	push	r11
    63d0:	cf 92       	push	r12
    63d2:	df 92       	push	r13
    63d4:	ef 92       	push	r14
    63d6:	ff 92       	push	r15
    63d8:	0f 93       	push	r16
    63da:	1f 93       	push	r17
    63dc:	df 93       	push	r29
    63de:	cf 93       	push	r28
    63e0:	00 d0       	rcall	.+0      	; 0x63e2 <f_lseek+0x26>
    63e2:	00 d0       	rcall	.+0      	; 0x63e4 <f_lseek+0x28>
    63e4:	0f 92       	push	r0
    63e6:	cd b7       	in	r28, 0x3d	; 61
    63e8:	de b7       	in	r29, 0x3e	; 62
    63ea:	9d 83       	std	Y+5, r25	; 0x05
    63ec:	8c 83       	std	Y+4, r24	; 0x04
    63ee:	7a 01       	movw	r14, r20
    63f0:	8b 01       	movw	r16, r22
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    63f2:	dc 01       	movw	r26, r24
    63f4:	12 96       	adiw	r26, 0x02	; 2
    63f6:	6d 91       	ld	r22, X+
    63f8:	7c 91       	ld	r23, X
    63fa:	13 97       	sbiw	r26, 0x03	; 3
    63fc:	8d 91       	ld	r24, X+
    63fe:	9c 91       	ld	r25, X
    6400:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <validate>
    6404:	8b 83       	std	Y+3, r24	; 0x03
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    6406:	88 23       	and	r24, r24
    6408:	09 f0       	breq	.+2      	; 0x640c <f_lseek+0x50>
    640a:	aa c1       	rjmp	.+852    	; 0x6760 <f_lseek+0x3a4>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    640c:	ec 81       	ldd	r30, Y+4	; 0x04
    640e:	fd 81       	ldd	r31, Y+5	; 0x05
    6410:	84 81       	ldd	r24, Z+4	; 0x04
    6412:	87 fd       	sbrc	r24, 7
    6414:	90 c0       	rjmp	.+288    	; 0x6536 <f_lseek+0x17a>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    6416:	ac 81       	ldd	r26, Y+4	; 0x04
    6418:	bd 81       	ldd	r27, Y+5	; 0x05
    641a:	1a 96       	adiw	r26, 0x0a	; 10
    641c:	6d 90       	ld	r6, X+
    641e:	7d 90       	ld	r7, X+
    6420:	8d 90       	ld	r8, X+
    6422:	9c 90       	ld	r9, X
    6424:	1d 97       	sbiw	r26, 0x0d	; 13
    6426:	6e 14       	cp	r6, r14
    6428:	7f 04       	cpc	r7, r15
    642a:	80 06       	cpc	r8, r16
    642c:	91 06       	cpc	r9, r17
    642e:	10 f4       	brcc	.+4      	; 0x6434 <f_lseek+0x78>
    6430:	81 ff       	sbrs	r24, 1
    6432:	02 c0       	rjmp	.+4      	; 0x6438 <f_lseek+0x7c>
    6434:	37 01       	movw	r6, r14
    6436:	48 01       	movw	r8, r16
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    6438:	ec 81       	ldd	r30, Y+4	; 0x04
    643a:	fd 81       	ldd	r31, Y+5	; 0x05
    643c:	e6 80       	ldd	r14, Z+6	; 0x06
    643e:	f7 80       	ldd	r15, Z+7	; 0x07
    6440:	00 85       	ldd	r16, Z+8	; 0x08
    6442:	11 85       	ldd	r17, Z+9	; 0x09
		fp->fptr = nsect = 0;
    6444:	16 82       	std	Z+6, r1	; 0x06
    6446:	17 82       	std	Z+7, r1	; 0x07
    6448:	10 86       	std	Z+8, r1	; 0x08
    644a:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    644c:	61 14       	cp	r6, r1
    644e:	71 04       	cpc	r7, r1
    6450:	81 04       	cpc	r8, r1
    6452:	91 04       	cpc	r9, r1
    6454:	09 f4       	brne	.+2      	; 0x6458 <f_lseek+0x9c>
    6456:	51 c1       	rjmp	.+674    	; 0x66fa <f_lseek+0x33e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    6458:	01 90       	ld	r0, Z+
    645a:	f0 81       	ld	r31, Z
    645c:	e0 2d       	mov	r30, r0
    645e:	fa 83       	std	Y+2, r31	; 0x02
    6460:	e9 83       	std	Y+1, r30	; 0x01
    6462:	82 81       	ldd	r24, Z+2	; 0x02
    6464:	a8 2e       	mov	r10, r24
    6466:	bb 24       	eor	r11, r11
    6468:	cc 24       	eor	r12, r12
    646a:	dd 24       	eor	r13, r13
    646c:	29 e0       	ldi	r18, 0x09	; 9
    646e:	aa 0c       	add	r10, r10
    6470:	bb 1c       	adc	r11, r11
    6472:	cc 1c       	adc	r12, r12
    6474:	dd 1c       	adc	r13, r13
    6476:	2a 95       	dec	r18
    6478:	d1 f7       	brne	.-12     	; 0x646e <f_lseek+0xb2>
			if (ifptr > 0 &&
    647a:	e1 14       	cp	r14, r1
    647c:	f1 04       	cpc	r15, r1
    647e:	01 05       	cpc	r16, r1
    6480:	11 05       	cpc	r17, r1
    6482:	c1 f1       	breq	.+112    	; 0x64f4 <f_lseek+0x138>
    6484:	17 01       	movw	r2, r14
    6486:	28 01       	movw	r4, r16
    6488:	08 94       	sec
    648a:	21 08       	sbc	r2, r1
    648c:	31 08       	sbc	r3, r1
    648e:	41 08       	sbc	r4, r1
    6490:	51 08       	sbc	r5, r1
    6492:	c4 01       	movw	r24, r8
    6494:	b3 01       	movw	r22, r6
    6496:	61 50       	subi	r22, 0x01	; 1
    6498:	70 40       	sbci	r23, 0x00	; 0
    649a:	80 40       	sbci	r24, 0x00	; 0
    649c:	90 40       	sbci	r25, 0x00	; 0
    649e:	a6 01       	movw	r20, r12
    64a0:	95 01       	movw	r18, r10
    64a2:	0e 94 26 5c 	call	0xb84c	; 0xb84c <__udivmodsi4>
    64a6:	79 01       	movw	r14, r18
    64a8:	8a 01       	movw	r16, r20
    64aa:	c2 01       	movw	r24, r4
    64ac:	b1 01       	movw	r22, r2
    64ae:	a6 01       	movw	r20, r12
    64b0:	95 01       	movw	r18, r10
    64b2:	0e 94 26 5c 	call	0xb84c	; 0xb84c <__udivmodsi4>
    64b6:	e2 16       	cp	r14, r18
    64b8:	f3 06       	cpc	r15, r19
    64ba:	04 07       	cpc	r16, r20
    64bc:	15 07       	cpc	r17, r21
    64be:	d0 f0       	brcs	.+52     	; 0x64f4 <f_lseek+0x138>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    64c0:	88 27       	eor	r24, r24
    64c2:	99 27       	eor	r25, r25
    64c4:	dc 01       	movw	r26, r24
    64c6:	8a 19       	sub	r24, r10
    64c8:	9b 09       	sbc	r25, r11
    64ca:	ac 09       	sbc	r26, r12
    64cc:	bd 09       	sbc	r27, r13
    64ce:	82 21       	and	r24, r2
    64d0:	93 21       	and	r25, r3
    64d2:	a4 21       	and	r26, r4
    64d4:	b5 21       	and	r27, r5
    64d6:	ec 81       	ldd	r30, Y+4	; 0x04
    64d8:	fd 81       	ldd	r31, Y+5	; 0x05
    64da:	86 83       	std	Z+6, r24	; 0x06
    64dc:	97 83       	std	Z+7, r25	; 0x07
    64de:	a0 87       	std	Z+8, r26	; 0x08
    64e0:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    64e2:	68 1a       	sub	r6, r24
    64e4:	79 0a       	sbc	r7, r25
    64e6:	8a 0a       	sbc	r8, r26
    64e8:	9b 0a       	sbc	r9, r27
				clst = fp->clust;
    64ea:	42 89       	ldd	r20, Z+18	; 0x12
    64ec:	53 89       	ldd	r21, Z+19	; 0x13
    64ee:	64 89       	ldd	r22, Z+20	; 0x14
    64f0:	75 89       	ldd	r23, Z+21	; 0x15
    64f2:	3a c0       	rjmp	.+116    	; 0x6568 <f_lseek+0x1ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    64f4:	ac 81       	ldd	r26, Y+4	; 0x04
    64f6:	bd 81       	ldd	r27, Y+5	; 0x05
    64f8:	1e 96       	adiw	r26, 0x0e	; 14
    64fa:	4d 91       	ld	r20, X+
    64fc:	5d 91       	ld	r21, X+
    64fe:	6d 91       	ld	r22, X+
    6500:	7c 91       	ld	r23, X
    6502:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    6504:	41 15       	cp	r20, r1
    6506:	51 05       	cpc	r21, r1
    6508:	61 05       	cpc	r22, r1
    650a:	71 05       	cpc	r23, r1
    650c:	29 f5       	brne	.+74     	; 0x6558 <f_lseek+0x19c>
					clst = create_chain(fp->fs, 0);
    650e:	89 81       	ldd	r24, Y+1	; 0x01
    6510:	9a 81       	ldd	r25, Y+2	; 0x02
    6512:	40 e0       	ldi	r20, 0x00	; 0
    6514:	50 e0       	ldi	r21, 0x00	; 0
    6516:	60 e0       	ldi	r22, 0x00	; 0
    6518:	70 e0       	ldi	r23, 0x00	; 0
    651a:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <create_chain>
    651e:	ab 01       	movw	r20, r22
    6520:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    6522:	41 30       	cpi	r20, 0x01	; 1
    6524:	51 05       	cpc	r21, r1
    6526:	61 05       	cpc	r22, r1
    6528:	71 05       	cpc	r23, r1
    652a:	41 f4       	brne	.+16     	; 0x653c <f_lseek+0x180>
    652c:	ec 81       	ldd	r30, Y+4	; 0x04
    652e:	fd 81       	ldd	r31, Y+5	; 0x05
    6530:	84 81       	ldd	r24, Z+4	; 0x04
    6532:	80 68       	ori	r24, 0x80	; 128
    6534:	84 83       	std	Z+4, r24	; 0x04
    6536:	f2 e0       	ldi	r31, 0x02	; 2
    6538:	fb 83       	std	Y+3, r31	; 0x03
    653a:	12 c1       	rjmp	.+548    	; 0x6760 <f_lseek+0x3a4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    653c:	4f 3f       	cpi	r20, 0xFF	; 255
    653e:	8f ef       	ldi	r24, 0xFF	; 255
    6540:	58 07       	cpc	r21, r24
    6542:	8f ef       	ldi	r24, 0xFF	; 255
    6544:	68 07       	cpc	r22, r24
    6546:	8f ef       	ldi	r24, 0xFF	; 255
    6548:	78 07       	cpc	r23, r24
    654a:	b1 f1       	breq	.+108    	; 0x65b8 <f_lseek+0x1fc>
					fp->sclust = clst;
    654c:	ec 81       	ldd	r30, Y+4	; 0x04
    654e:	fd 81       	ldd	r31, Y+5	; 0x05
    6550:	46 87       	std	Z+14, r20	; 0x0e
    6552:	57 87       	std	Z+15, r21	; 0x0f
    6554:	60 8b       	std	Z+16, r22	; 0x10
    6556:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->clust = clst;
    6558:	ac 81       	ldd	r26, Y+4	; 0x04
    655a:	bd 81       	ldd	r27, Y+5	; 0x05
    655c:	52 96       	adiw	r26, 0x12	; 18
    655e:	4d 93       	st	X+, r20
    6560:	5d 93       	st	X+, r21
    6562:	6d 93       	st	X+, r22
    6564:	7c 93       	st	X, r23
    6566:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    6568:	41 15       	cp	r20, r1
    656a:	51 05       	cpc	r21, r1
    656c:	61 05       	cpc	r22, r1
    656e:	71 05       	cpc	r23, r1
    6570:	09 f0       	breq	.+2      	; 0x6574 <f_lseek+0x1b8>
    6572:	59 c0       	rjmp	.+178    	; 0x6626 <f_lseek+0x26a>
    6574:	c2 c0       	rjmp	.+388    	; 0x66fa <f_lseek+0x33e>
				while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    6576:	ec 81       	ldd	r30, Y+4	; 0x04
    6578:	fd 81       	ldd	r31, Y+5	; 0x05
    657a:	84 81       	ldd	r24, Z+4	; 0x04
    657c:	20 81       	ld	r18, Z
    657e:	31 81       	ldd	r19, Z+1	; 0x01
    6580:	81 ff       	sbrs	r24, 1
    6582:	0d c0       	rjmp	.+26     	; 0x659e <f_lseek+0x1e2>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    6584:	c9 01       	movw	r24, r18
    6586:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <create_chain>
    658a:	ab 01       	movw	r20, r22
    658c:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    658e:	41 15       	cp	r20, r1
    6590:	51 05       	cpc	r21, r1
    6592:	61 05       	cpc	r22, r1
    6594:	71 05       	cpc	r23, r1
    6596:	41 f4       	brne	.+16     	; 0x65a8 <f_lseek+0x1ec>
    6598:	35 01       	movw	r6, r10
    659a:	46 01       	movw	r8, r12
    659c:	4a c0       	rjmp	.+148    	; 0x6632 <f_lseek+0x276>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    659e:	c9 01       	movw	r24, r18
    65a0:	0e 94 27 2e 	call	0x5c4e	; 0x5c4e <get_fat>
    65a4:	ab 01       	movw	r20, r22
    65a6:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    65a8:	4f 3f       	cpi	r20, 0xFF	; 255
    65aa:	ff ef       	ldi	r31, 0xFF	; 255
    65ac:	5f 07       	cpc	r21, r31
    65ae:	ff ef       	ldi	r31, 0xFF	; 255
    65b0:	6f 07       	cpc	r22, r31
    65b2:	ff ef       	ldi	r31, 0xFF	; 255
    65b4:	7f 07       	cpc	r23, r31
    65b6:	51 f4       	brne	.+20     	; 0x65cc <f_lseek+0x210>
    65b8:	ac 81       	ldd	r26, Y+4	; 0x04
    65ba:	bd 81       	ldd	r27, Y+5	; 0x05
    65bc:	14 96       	adiw	r26, 0x04	; 4
    65be:	8c 91       	ld	r24, X
    65c0:	14 97       	sbiw	r26, 0x04	; 4
    65c2:	80 68       	ori	r24, 0x80	; 128
    65c4:	14 96       	adiw	r26, 0x04	; 4
    65c6:	8c 93       	st	X, r24
    65c8:	b1 e0       	ldi	r27, 0x01	; 1
    65ca:	87 c0       	rjmp	.+270    	; 0x66da <f_lseek+0x31e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    65cc:	42 30       	cpi	r20, 0x02	; 2
    65ce:	51 05       	cpc	r21, r1
    65d0:	61 05       	cpc	r22, r1
    65d2:	71 05       	cpc	r23, r1
    65d4:	08 f4       	brcc	.+2      	; 0x65d8 <f_lseek+0x21c>
    65d6:	aa cf       	rjmp	.-172    	; 0x652c <f_lseek+0x170>
    65d8:	ac 81       	ldd	r26, Y+4	; 0x04
    65da:	bd 81       	ldd	r27, Y+5	; 0x05
    65dc:	ed 91       	ld	r30, X+
    65de:	fc 91       	ld	r31, X
    65e0:	82 8d       	ldd	r24, Z+26	; 0x1a
    65e2:	93 8d       	ldd	r25, Z+27	; 0x1b
    65e4:	a4 8d       	ldd	r26, Z+28	; 0x1c
    65e6:	b5 8d       	ldd	r27, Z+29	; 0x1d
    65e8:	48 17       	cp	r20, r24
    65ea:	59 07       	cpc	r21, r25
    65ec:	6a 07       	cpc	r22, r26
    65ee:	7b 07       	cpc	r23, r27
    65f0:	08 f0       	brcs	.+2      	; 0x65f4 <f_lseek+0x238>
    65f2:	9c cf       	rjmp	.-200    	; 0x652c <f_lseek+0x170>
					fp->clust = clst;
    65f4:	ac 81       	ldd	r26, Y+4	; 0x04
    65f6:	bd 81       	ldd	r27, Y+5	; 0x05
    65f8:	52 96       	adiw	r26, 0x12	; 18
    65fa:	4d 93       	st	X+, r20
    65fc:	5d 93       	st	X+, r21
    65fe:	6d 93       	st	X+, r22
    6600:	7c 93       	st	X, r23
    6602:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    6604:	fd 01       	movw	r30, r26
    6606:	86 81       	ldd	r24, Z+6	; 0x06
    6608:	97 81       	ldd	r25, Z+7	; 0x07
    660a:	a0 85       	ldd	r26, Z+8	; 0x08
    660c:	b1 85       	ldd	r27, Z+9	; 0x09
    660e:	8a 0d       	add	r24, r10
    6610:	9b 1d       	adc	r25, r11
    6612:	ac 1d       	adc	r26, r12
    6614:	bd 1d       	adc	r27, r13
    6616:	86 83       	std	Z+6, r24	; 0x06
    6618:	97 83       	std	Z+7, r25	; 0x07
    661a:	a0 87       	std	Z+8, r26	; 0x08
    661c:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    661e:	6a 18       	sub	r6, r10
    6620:	7b 08       	sbc	r7, r11
    6622:	8c 08       	sbc	r8, r12
    6624:	9d 08       	sbc	r9, r13
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    6626:	a6 14       	cp	r10, r6
    6628:	b7 04       	cpc	r11, r7
    662a:	c8 04       	cpc	r12, r8
    662c:	d9 04       	cpc	r13, r9
    662e:	08 f4       	brcc	.+2      	; 0x6632 <f_lseek+0x276>
    6630:	a2 cf       	rjmp	.-188    	; 0x6576 <f_lseek+0x1ba>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    6632:	ec 81       	ldd	r30, Y+4	; 0x04
    6634:	fd 81       	ldd	r31, Y+5	; 0x05
    6636:	86 81       	ldd	r24, Z+6	; 0x06
    6638:	97 81       	ldd	r25, Z+7	; 0x07
    663a:	a0 85       	ldd	r26, Z+8	; 0x08
    663c:	b1 85       	ldd	r27, Z+9	; 0x09
    663e:	86 0d       	add	r24, r6
    6640:	97 1d       	adc	r25, r7
    6642:	a8 1d       	adc	r26, r8
    6644:	b9 1d       	adc	r27, r9
    6646:	86 83       	std	Z+6, r24	; 0x06
    6648:	97 83       	std	Z+7, r25	; 0x07
    664a:	a0 87       	std	Z+8, r26	; 0x08
    664c:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    664e:	d4 01       	movw	r26, r8
    6650:	c3 01       	movw	r24, r6
    6652:	91 70       	andi	r25, 0x01	; 1
    6654:	a0 70       	andi	r26, 0x00	; 0
    6656:	b0 70       	andi	r27, 0x00	; 0
    6658:	00 97       	sbiw	r24, 0x00	; 0
    665a:	a1 05       	cpc	r26, r1
    665c:	b1 05       	cpc	r27, r1
    665e:	09 f4       	brne	.+2      	; 0x6662 <f_lseek+0x2a6>
    6660:	4c c0       	rjmp	.+152    	; 0x66fa <f_lseek+0x33e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    6662:	c0 80       	ld	r12, Z
    6664:	d1 80       	ldd	r13, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    6666:	9e ef       	ldi	r25, 0xFE	; 254
    6668:	e9 2e       	mov	r14, r25
    666a:	9f ef       	ldi	r25, 0xFF	; 255
    666c:	f9 2e       	mov	r15, r25
    666e:	9f ef       	ldi	r25, 0xFF	; 255
    6670:	09 2f       	mov	r16, r25
    6672:	9f ef       	ldi	r25, 0xFF	; 255
    6674:	19 2f       	mov	r17, r25
    6676:	e4 0e       	add	r14, r20
    6678:	f5 1e       	adc	r15, r21
    667a:	06 1f       	adc	r16, r22
    667c:	17 1f       	adc	r17, r23
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    667e:	f6 01       	movw	r30, r12
    6680:	82 8d       	ldd	r24, Z+26	; 0x1a
    6682:	93 8d       	ldd	r25, Z+27	; 0x1b
    6684:	a4 8d       	ldd	r26, Z+28	; 0x1c
    6686:	b5 8d       	ldd	r27, Z+29	; 0x1d
    6688:	02 97       	sbiw	r24, 0x02	; 2
    668a:	a1 09       	sbc	r26, r1
    668c:	b1 09       	sbc	r27, r1
    668e:	e8 16       	cp	r14, r24
    6690:	f9 06       	cpc	r15, r25
    6692:	0a 07       	cpc	r16, r26
    6694:	1b 07       	cpc	r17, r27
    6696:	c0 f4       	brcc	.+48     	; 0x66c8 <f_lseek+0x30c>
	return clst * fs->csize + fs->database;
    6698:	22 81       	ldd	r18, Z+2	; 0x02
    669a:	30 e0       	ldi	r19, 0x00	; 0
    669c:	40 e0       	ldi	r20, 0x00	; 0
    669e:	50 e0       	ldi	r21, 0x00	; 0
    66a0:	c8 01       	movw	r24, r16
    66a2:	b7 01       	movw	r22, r14
    66a4:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__mulsi3>
    66a8:	9b 01       	movw	r18, r22
    66aa:	ac 01       	movw	r20, r24
    66ac:	f6 01       	movw	r30, r12
    66ae:	82 a5       	ldd	r24, Z+42	; 0x2a
    66b0:	93 a5       	ldd	r25, Z+43	; 0x2b
    66b2:	a4 a5       	ldd	r26, Z+44	; 0x2c
    66b4:	b5 a5       	ldd	r27, Z+45	; 0x2d
    66b6:	28 0f       	add	r18, r24
    66b8:	39 1f       	adc	r19, r25
    66ba:	4a 1f       	adc	r20, r26
    66bc:	5b 1f       	adc	r21, r27
					ofs -= bcs;
				}
				fp->fptr += ofs;
				if (ofs % SS(fp->fs)) {
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    66be:	21 15       	cp	r18, r1
    66c0:	31 05       	cpc	r19, r1
    66c2:	41 05       	cpc	r20, r1
    66c4:	51 05       	cpc	r21, r1
    66c6:	59 f4       	brne	.+22     	; 0x66de <f_lseek+0x322>
    66c8:	ac 81       	ldd	r26, Y+4	; 0x04
    66ca:	bd 81       	ldd	r27, Y+5	; 0x05
    66cc:	14 96       	adiw	r26, 0x04	; 4
    66ce:	8c 91       	ld	r24, X
    66d0:	14 97       	sbiw	r26, 0x04	; 4
    66d2:	80 68       	ori	r24, 0x80	; 128
    66d4:	14 96       	adiw	r26, 0x04	; 4
    66d6:	8c 93       	st	X, r24
    66d8:	b2 e0       	ldi	r27, 0x02	; 2
    66da:	bb 83       	std	Y+3, r27	; 0x03
    66dc:	41 c0       	rjmp	.+130    	; 0x6760 <f_lseek+0x3a4>
					nsect += ofs / SS(fp->fs);
    66de:	84 01       	movw	r16, r8
    66e0:	73 01       	movw	r14, r6
    66e2:	89 e0       	ldi	r24, 0x09	; 9
    66e4:	16 95       	lsr	r17
    66e6:	07 95       	ror	r16
    66e8:	f7 94       	ror	r15
    66ea:	e7 94       	ror	r14
    66ec:	8a 95       	dec	r24
    66ee:	d1 f7       	brne	.-12     	; 0x66e4 <f_lseek+0x328>
    66f0:	e2 0e       	add	r14, r18
    66f2:	f3 1e       	adc	r15, r19
    66f4:	04 1f       	adc	r16, r20
    66f6:	15 1f       	adc	r17, r21
    66f8:	03 c0       	rjmp	.+6      	; 0x6700 <f_lseek+0x344>
    66fa:	ee 24       	eor	r14, r14
    66fc:	ff 24       	eor	r15, r15
    66fe:	87 01       	movw	r16, r14
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    6700:	ec 81       	ldd	r30, Y+4	; 0x04
    6702:	fd 81       	ldd	r31, Y+5	; 0x05
    6704:	86 81       	ldd	r24, Z+6	; 0x06
    6706:	97 81       	ldd	r25, Z+7	; 0x07
    6708:	a0 85       	ldd	r26, Z+8	; 0x08
    670a:	b1 85       	ldd	r27, Z+9	; 0x09
    670c:	91 70       	andi	r25, 0x01	; 1
    670e:	a0 70       	andi	r26, 0x00	; 0
    6710:	b0 70       	andi	r27, 0x00	; 0
    6712:	00 97       	sbiw	r24, 0x00	; 0
    6714:	a1 05       	cpc	r26, r1
    6716:	b1 05       	cpc	r27, r1
    6718:	69 f0       	breq	.+26     	; 0x6734 <f_lseek+0x378>
    671a:	86 89       	ldd	r24, Z+22	; 0x16
    671c:	97 89       	ldd	r25, Z+23	; 0x17
    671e:	a0 8d       	ldd	r26, Z+24	; 0x18
    6720:	b1 8d       	ldd	r27, Z+25	; 0x19
    6722:	e8 16       	cp	r14, r24
    6724:	f9 06       	cpc	r15, r25
    6726:	0a 07       	cpc	r16, r26
    6728:	1b 07       	cpc	r17, r27
    672a:	21 f0       	breq	.+8      	; 0x6734 <f_lseek+0x378>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    672c:	e6 8a       	std	Z+22, r14	; 0x16
    672e:	f7 8a       	std	Z+23, r15	; 0x17
    6730:	00 8f       	std	Z+24, r16	; 0x18
    6732:	11 8f       	std	Z+25, r17	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    6734:	ec 81       	ldd	r30, Y+4	; 0x04
    6736:	fd 81       	ldd	r31, Y+5	; 0x05
    6738:	26 81       	ldd	r18, Z+6	; 0x06
    673a:	37 81       	ldd	r19, Z+7	; 0x07
    673c:	40 85       	ldd	r20, Z+8	; 0x08
    673e:	51 85       	ldd	r21, Z+9	; 0x09
    6740:	82 85       	ldd	r24, Z+10	; 0x0a
    6742:	93 85       	ldd	r25, Z+11	; 0x0b
    6744:	a4 85       	ldd	r26, Z+12	; 0x0c
    6746:	b5 85       	ldd	r27, Z+13	; 0x0d
    6748:	82 17       	cp	r24, r18
    674a:	93 07       	cpc	r25, r19
    674c:	a4 07       	cpc	r26, r20
    674e:	b5 07       	cpc	r27, r21
    6750:	38 f4       	brcc	.+14     	; 0x6760 <f_lseek+0x3a4>
			fp->fsize = fp->fptr;
    6752:	22 87       	std	Z+10, r18	; 0x0a
    6754:	33 87       	std	Z+11, r19	; 0x0b
    6756:	44 87       	std	Z+12, r20	; 0x0c
    6758:	55 87       	std	Z+13, r21	; 0x0d
			fp->flag |= FA__WRITTEN;
    675a:	84 81       	ldd	r24, Z+4	; 0x04
    675c:	80 62       	ori	r24, 0x20	; 32
    675e:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    6760:	8b 81       	ldd	r24, Y+3	; 0x03
    6762:	0f 90       	pop	r0
    6764:	0f 90       	pop	r0
    6766:	0f 90       	pop	r0
    6768:	0f 90       	pop	r0
    676a:	0f 90       	pop	r0
    676c:	cf 91       	pop	r28
    676e:	df 91       	pop	r29
    6770:	1f 91       	pop	r17
    6772:	0f 91       	pop	r16
    6774:	ff 90       	pop	r15
    6776:	ef 90       	pop	r14
    6778:	df 90       	pop	r13
    677a:	cf 90       	pop	r12
    677c:	bf 90       	pop	r11
    677e:	af 90       	pop	r10
    6780:	9f 90       	pop	r9
    6782:	8f 90       	pop	r8
    6784:	7f 90       	pop	r7
    6786:	6f 90       	pop	r6
    6788:	5f 90       	pop	r5
    678a:	4f 90       	pop	r4
    678c:	3f 90       	pop	r3
    678e:	2f 90       	pop	r2
    6790:	08 95       	ret

00006792 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    6792:	4f 92       	push	r4
    6794:	5f 92       	push	r5
    6796:	6f 92       	push	r6
    6798:	7f 92       	push	r7
    679a:	8f 92       	push	r8
    679c:	9f 92       	push	r9
    679e:	af 92       	push	r10
    67a0:	bf 92       	push	r11
    67a2:	cf 92       	push	r12
    67a4:	df 92       	push	r13
    67a6:	ef 92       	push	r14
    67a8:	ff 92       	push	r15
    67aa:	0f 93       	push	r16
    67ac:	1f 93       	push	r17
    67ae:	cf 93       	push	r28
    67b0:	df 93       	push	r29
    67b2:	ec 01       	movw	r28, r24
    67b4:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    67b6:	6c 80       	ldd	r6, Y+4	; 0x04
    67b8:	7d 80       	ldd	r7, Y+5	; 0x05
    67ba:	08 94       	sec
    67bc:	61 1c       	adc	r6, r1
    67be:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    67c0:	61 14       	cp	r6, r1
    67c2:	71 04       	cpc	r7, r1
    67c4:	09 f4       	brne	.+2      	; 0x67c8 <dir_next+0x36>
    67c6:	4c c1       	rjmp	.+664    	; 0x6a60 <dir_next+0x2ce>
    67c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    67ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    67cc:	a8 89       	ldd	r26, Y+16	; 0x10
    67ce:	b9 89       	ldd	r27, Y+17	; 0x11
    67d0:	00 97       	sbiw	r24, 0x00	; 0
    67d2:	a1 05       	cpc	r26, r1
    67d4:	b1 05       	cpc	r27, r1
    67d6:	09 f4       	brne	.+2      	; 0x67da <dir_next+0x48>
    67d8:	43 c1       	rjmp	.+646    	; 0x6a60 <dir_next+0x2ce>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    67da:	1f e0       	ldi	r17, 0x0F	; 15
    67dc:	41 2e       	mov	r4, r17
    67de:	51 2c       	mov	r5, r1
    67e0:	46 20       	and	r4, r6
    67e2:	57 20       	and	r5, r7
    67e4:	41 14       	cp	r4, r1
    67e6:	51 04       	cpc	r5, r1
    67e8:	09 f0       	breq	.+2      	; 0x67ec <dir_next+0x5a>
    67ea:	27 c1       	rjmp	.+590    	; 0x6a3a <dir_next+0x2a8>
		dj->sect++;					/* Next sector */
    67ec:	01 96       	adiw	r24, 0x01	; 1
    67ee:	a1 1d       	adc	r26, r1
    67f0:	b1 1d       	adc	r27, r1
    67f2:	8e 87       	std	Y+14, r24	; 0x0e
    67f4:	9f 87       	std	Y+15, r25	; 0x0f
    67f6:	a8 8b       	std	Y+16, r26	; 0x10
    67f8:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    67fa:	4a 85       	ldd	r20, Y+10	; 0x0a
    67fc:	5b 85       	ldd	r21, Y+11	; 0x0b
    67fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    6800:	7d 85       	ldd	r23, Y+13	; 0x0d
    6802:	e8 81       	ld	r30, Y
    6804:	f9 81       	ldd	r31, Y+1	; 0x01
    6806:	41 15       	cp	r20, r1
    6808:	51 05       	cpc	r21, r1
    680a:	61 05       	cpc	r22, r1
    680c:	71 05       	cpc	r23, r1
    680e:	39 f4       	brne	.+14     	; 0x681e <dir_next+0x8c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    6810:	80 85       	ldd	r24, Z+8	; 0x08
    6812:	91 85       	ldd	r25, Z+9	; 0x09
    6814:	68 16       	cp	r6, r24
    6816:	79 06       	cpc	r7, r25
    6818:	08 f4       	brcc	.+2      	; 0x681c <dir_next+0x8a>
    681a:	0f c1       	rjmp	.+542    	; 0x6a3a <dir_next+0x2a8>
    681c:	21 c1       	rjmp	.+578    	; 0x6a60 <dir_next+0x2ce>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    681e:	82 81       	ldd	r24, Z+2	; 0x02
    6820:	90 e0       	ldi	r25, 0x00	; 0
    6822:	01 97       	sbiw	r24, 0x01	; 1
    6824:	93 01       	movw	r18, r6
    6826:	a4 e0       	ldi	r26, 0x04	; 4
    6828:	36 95       	lsr	r19
    682a:	27 95       	ror	r18
    682c:	aa 95       	dec	r26
    682e:	e1 f7       	brne	.-8      	; 0x6828 <dir_next+0x96>
    6830:	82 23       	and	r24, r18
    6832:	93 23       	and	r25, r19
    6834:	89 2b       	or	r24, r25
    6836:	09 f0       	breq	.+2      	; 0x683a <dir_next+0xa8>
    6838:	00 c1       	rjmp	.+512    	; 0x6a3a <dir_next+0x2a8>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    683a:	cf 01       	movw	r24, r30
    683c:	0e 94 27 2e 	call	0x5c4e	; 0x5c4e <get_fat>
    6840:	7b 01       	movw	r14, r22
    6842:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    6844:	62 30       	cpi	r22, 0x02	; 2
    6846:	71 05       	cpc	r23, r1
    6848:	81 05       	cpc	r24, r1
    684a:	91 05       	cpc	r25, r1
    684c:	08 f4       	brcc	.+2      	; 0x6850 <dir_next+0xbe>
    684e:	0a c1       	rjmp	.+532    	; 0x6a64 <dir_next+0x2d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    6850:	8f ef       	ldi	r24, 0xFF	; 255
    6852:	e8 16       	cp	r14, r24
    6854:	8f ef       	ldi	r24, 0xFF	; 255
    6856:	f8 06       	cpc	r15, r24
    6858:	8f ef       	ldi	r24, 0xFF	; 255
    685a:	08 07       	cpc	r16, r24
    685c:	8f ef       	ldi	r24, 0xFF	; 255
    685e:	18 07       	cpc	r17, r24
    6860:	09 f4       	brne	.+2      	; 0x6864 <dir_next+0xd2>
    6862:	02 c1       	rjmp	.+516    	; 0x6a68 <dir_next+0x2d6>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    6864:	e8 81       	ld	r30, Y
    6866:	f9 81       	ldd	r31, Y+1	; 0x01
    6868:	82 8d       	ldd	r24, Z+26	; 0x1a
    686a:	93 8d       	ldd	r25, Z+27	; 0x1b
    686c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    686e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    6870:	e8 16       	cp	r14, r24
    6872:	f9 06       	cpc	r15, r25
    6874:	0a 07       	cpc	r16, r26
    6876:	1b 07       	cpc	r17, r27
    6878:	08 f4       	brcc	.+2      	; 0x687c <dir_next+0xea>
    687a:	a6 c0       	rjmp	.+332    	; 0x69c8 <dir_next+0x236>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    687c:	cd 28       	or	r12, r13
    687e:	09 f4       	brne	.+2      	; 0x6882 <dir_next+0xf0>
    6880:	ef c0       	rjmp	.+478    	; 0x6a60 <dir_next+0x2ce>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    6882:	4a 85       	ldd	r20, Y+10	; 0x0a
    6884:	5b 85       	ldd	r21, Y+11	; 0x0b
    6886:	6c 85       	ldd	r22, Y+12	; 0x0c
    6888:	7d 85       	ldd	r23, Y+13	; 0x0d
    688a:	cf 01       	movw	r24, r30
    688c:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <create_chain>
    6890:	7b 01       	movw	r14, r22
    6892:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    6894:	61 15       	cp	r22, r1
    6896:	71 05       	cpc	r23, r1
    6898:	81 05       	cpc	r24, r1
    689a:	91 05       	cpc	r25, r1
    689c:	11 f4       	brne	.+4      	; 0x68a2 <dir_next+0x110>
    689e:	87 e0       	ldi	r24, 0x07	; 7
    68a0:	e4 c0       	rjmp	.+456    	; 0x6a6a <dir_next+0x2d8>
					if (clst == 1) return FR_INT_ERR;
    68a2:	91 e0       	ldi	r25, 0x01	; 1
    68a4:	e9 16       	cp	r14, r25
    68a6:	f1 04       	cpc	r15, r1
    68a8:	01 05       	cpc	r16, r1
    68aa:	11 05       	cpc	r17, r1
    68ac:	09 f4       	brne	.+2      	; 0x68b0 <dir_next+0x11e>
    68ae:	da c0       	rjmp	.+436    	; 0x6a64 <dir_next+0x2d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    68b0:	af ef       	ldi	r26, 0xFF	; 255
    68b2:	ea 16       	cp	r14, r26
    68b4:	af ef       	ldi	r26, 0xFF	; 255
    68b6:	fa 06       	cpc	r15, r26
    68b8:	af ef       	ldi	r26, 0xFF	; 255
    68ba:	0a 07       	cpc	r16, r26
    68bc:	af ef       	ldi	r26, 0xFF	; 255
    68be:	1a 07       	cpc	r17, r26
    68c0:	09 f4       	brne	.+2      	; 0x68c4 <dir_next+0x132>
    68c2:	d2 c0       	rjmp	.+420    	; 0x6a68 <dir_next+0x2d6>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    68c4:	88 81       	ld	r24, Y
    68c6:	99 81       	ldd	r25, Y+1	; 0x01
    68c8:	40 e0       	ldi	r20, 0x00	; 0
    68ca:	50 e0       	ldi	r21, 0x00	; 0
    68cc:	60 e0       	ldi	r22, 0x00	; 0
    68ce:	70 e0       	ldi	r23, 0x00	; 0
    68d0:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    68d4:	88 23       	and	r24, r24
    68d6:	09 f0       	breq	.+2      	; 0x68da <dir_next+0x148>
    68d8:	c7 c0       	rjmp	.+398    	; 0x6a68 <dir_next+0x2d6>
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    68da:	e8 81       	ld	r30, Y
    68dc:	f9 81       	ldd	r31, Y+1	; 0x01
    68de:	f2 96       	adiw	r30, 0x32	; 50
    68e0:	80 e0       	ldi	r24, 0x00	; 0
    68e2:	92 e0       	ldi	r25, 0x02	; 2
    68e4:	01 c0       	rjmp	.+2      	; 0x68e8 <dir_next+0x156>

	while (cnt--)
		*d++ = (BYTE)val;
    68e6:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    68e8:	01 97       	sbiw	r24, 0x01	; 1
    68ea:	bf ef       	ldi	r27, 0xFF	; 255
    68ec:	8f 3f       	cpi	r24, 0xFF	; 255
    68ee:	9b 07       	cpc	r25, r27
    68f0:	d1 f7       	brne	.-12     	; 0x68e6 <dir_next+0x154>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    68f2:	88 80       	ld	r8, Y
    68f4:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    68f6:	4e ef       	ldi	r20, 0xFE	; 254
    68f8:	a4 2e       	mov	r10, r20
    68fa:	4f ef       	ldi	r20, 0xFF	; 255
    68fc:	b4 2e       	mov	r11, r20
    68fe:	4f ef       	ldi	r20, 0xFF	; 255
    6900:	c4 2e       	mov	r12, r20
    6902:	4f ef       	ldi	r20, 0xFF	; 255
    6904:	d4 2e       	mov	r13, r20
    6906:	ae 0c       	add	r10, r14
    6908:	bf 1c       	adc	r11, r15
    690a:	c0 1e       	adc	r12, r16
    690c:	d1 1e       	adc	r13, r17
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    690e:	f4 01       	movw	r30, r8
    6910:	82 8d       	ldd	r24, Z+26	; 0x1a
    6912:	93 8d       	ldd	r25, Z+27	; 0x1b
    6914:	a4 8d       	ldd	r26, Z+28	; 0x1c
    6916:	b5 8d       	ldd	r27, Z+29	; 0x1d
    6918:	02 97       	sbiw	r24, 0x02	; 2
    691a:	a1 09       	sbc	r26, r1
    691c:	b1 09       	sbc	r27, r1
    691e:	a8 16       	cp	r10, r24
    6920:	b9 06       	cpc	r11, r25
    6922:	ca 06       	cpc	r12, r26
    6924:	db 06       	cpc	r13, r27
    6926:	28 f0       	brcs	.+10     	; 0x6932 <dir_next+0x1a0>
    6928:	20 e0       	ldi	r18, 0x00	; 0
    692a:	30 e0       	ldi	r19, 0x00	; 0
    692c:	40 e0       	ldi	r20, 0x00	; 0
    692e:	50 e0       	ldi	r21, 0x00	; 0
    6930:	15 c0       	rjmp	.+42     	; 0x695c <dir_next+0x1ca>
	return clst * fs->csize + fs->database;
    6932:	d4 01       	movw	r26, r8
    6934:	12 96       	adiw	r26, 0x02	; 2
    6936:	2c 91       	ld	r18, X
    6938:	30 e0       	ldi	r19, 0x00	; 0
    693a:	40 e0       	ldi	r20, 0x00	; 0
    693c:	50 e0       	ldi	r21, 0x00	; 0
    693e:	c6 01       	movw	r24, r12
    6940:	b5 01       	movw	r22, r10
    6942:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__mulsi3>
    6946:	9b 01       	movw	r18, r22
    6948:	ac 01       	movw	r20, r24
    694a:	f4 01       	movw	r30, r8
    694c:	82 a5       	ldd	r24, Z+42	; 0x2a
    694e:	93 a5       	ldd	r25, Z+43	; 0x2b
    6950:	a4 a5       	ldd	r26, Z+44	; 0x2c
    6952:	b5 a5       	ldd	r27, Z+45	; 0x2d
    6954:	28 0f       	add	r18, r24
    6956:	39 1f       	adc	r19, r25
    6958:	4a 1f       	adc	r20, r26
    695a:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    695c:	d4 01       	movw	r26, r8
    695e:	9e 96       	adiw	r26, 0x2e	; 46
    6960:	2d 93       	st	X+, r18
    6962:	3d 93       	st	X+, r19
    6964:	4d 93       	st	X+, r20
    6966:	5c 93       	st	X, r21
    6968:	d1 97       	sbiw	r26, 0x31	; 49
    696a:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    696c:	cc 24       	eor	r12, r12
    696e:	c3 94       	inc	r12
    6970:	1a c0       	rjmp	.+52     	; 0x69a6 <dir_next+0x214>
    6972:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    6974:	88 81       	ld	r24, Y
    6976:	99 81       	ldd	r25, Y+1	; 0x01
    6978:	40 e0       	ldi	r20, 0x00	; 0
    697a:	50 e0       	ldi	r21, 0x00	; 0
    697c:	60 e0       	ldi	r22, 0x00	; 0
    697e:	70 e0       	ldi	r23, 0x00	; 0
    6980:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    6984:	88 23       	and	r24, r24
    6986:	09 f0       	breq	.+2      	; 0x698a <dir_next+0x1f8>
    6988:	6f c0       	rjmp	.+222    	; 0x6a68 <dir_next+0x2d6>
						dj->fs->winsect++;
    698a:	e8 81       	ld	r30, Y
    698c:	f9 81       	ldd	r31, Y+1	; 0x01
    698e:	86 a5       	ldd	r24, Z+46	; 0x2e
    6990:	97 a5       	ldd	r25, Z+47	; 0x2f
    6992:	a0 a9       	ldd	r26, Z+48	; 0x30
    6994:	b1 a9       	ldd	r27, Z+49	; 0x31
    6996:	01 96       	adiw	r24, 0x01	; 1
    6998:	a1 1d       	adc	r26, r1
    699a:	b1 1d       	adc	r27, r1
    699c:	86 a7       	std	Z+46, r24	; 0x2e
    699e:	97 a7       	std	Z+47, r25	; 0x2f
    69a0:	a0 ab       	std	Z+48, r26	; 0x30
    69a2:	b1 ab       	std	Z+49, r27	; 0x31
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    69a4:	d3 94       	inc	r13
    69a6:	e8 81       	ld	r30, Y
    69a8:	f9 81       	ldd	r31, Y+1	; 0x01
    69aa:	82 81       	ldd	r24, Z+2	; 0x02
    69ac:	d8 16       	cp	r13, r24
    69ae:	08 f3       	brcs	.-62     	; 0x6972 <dir_next+0x1e0>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    69b0:	86 a5       	ldd	r24, Z+46	; 0x2e
    69b2:	97 a5       	ldd	r25, Z+47	; 0x2f
    69b4:	a0 a9       	ldd	r26, Z+48	; 0x30
    69b6:	b1 a9       	ldd	r27, Z+49	; 0x31
    69b8:	8d 19       	sub	r24, r13
    69ba:	91 09       	sbc	r25, r1
    69bc:	a1 09       	sbc	r26, r1
    69be:	b1 09       	sbc	r27, r1
    69c0:	86 a7       	std	Z+46, r24	; 0x2e
    69c2:	97 a7       	std	Z+47, r25	; 0x2f
    69c4:	a0 ab       	std	Z+48, r26	; 0x30
    69c6:	b1 ab       	std	Z+49, r27	; 0x31
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    69c8:	ea 86       	std	Y+10, r14	; 0x0a
    69ca:	fb 86       	std	Y+11, r15	; 0x0b
    69cc:	0c 87       	std	Y+12, r16	; 0x0c
    69ce:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    69d0:	c8 80       	ld	r12, Y
    69d2:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    69d4:	8e ef       	ldi	r24, 0xFE	; 254
    69d6:	9f ef       	ldi	r25, 0xFF	; 255
    69d8:	af ef       	ldi	r26, 0xFF	; 255
    69da:	bf ef       	ldi	r27, 0xFF	; 255
    69dc:	e8 0e       	add	r14, r24
    69de:	f9 1e       	adc	r15, r25
    69e0:	0a 1f       	adc	r16, r26
    69e2:	1b 1f       	adc	r17, r27
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    69e4:	f6 01       	movw	r30, r12
    69e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    69e8:	93 8d       	ldd	r25, Z+27	; 0x1b
    69ea:	a4 8d       	ldd	r26, Z+28	; 0x1c
    69ec:	b5 8d       	ldd	r27, Z+29	; 0x1d
    69ee:	02 97       	sbiw	r24, 0x02	; 2
    69f0:	a1 09       	sbc	r26, r1
    69f2:	b1 09       	sbc	r27, r1
    69f4:	e8 16       	cp	r14, r24
    69f6:	f9 06       	cpc	r15, r25
    69f8:	0a 07       	cpc	r16, r26
    69fa:	1b 07       	cpc	r17, r27
    69fc:	28 f0       	brcs	.+10     	; 0x6a08 <dir_next+0x276>
    69fe:	20 e0       	ldi	r18, 0x00	; 0
    6a00:	30 e0       	ldi	r19, 0x00	; 0
    6a02:	40 e0       	ldi	r20, 0x00	; 0
    6a04:	50 e0       	ldi	r21, 0x00	; 0
    6a06:	15 c0       	rjmp	.+42     	; 0x6a32 <dir_next+0x2a0>
	return clst * fs->csize + fs->database;
    6a08:	d6 01       	movw	r26, r12
    6a0a:	12 96       	adiw	r26, 0x02	; 2
    6a0c:	2c 91       	ld	r18, X
    6a0e:	30 e0       	ldi	r19, 0x00	; 0
    6a10:	40 e0       	ldi	r20, 0x00	; 0
    6a12:	50 e0       	ldi	r21, 0x00	; 0
    6a14:	c8 01       	movw	r24, r16
    6a16:	b7 01       	movw	r22, r14
    6a18:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__mulsi3>
    6a1c:	9b 01       	movw	r18, r22
    6a1e:	ac 01       	movw	r20, r24
    6a20:	f6 01       	movw	r30, r12
    6a22:	82 a5       	ldd	r24, Z+42	; 0x2a
    6a24:	93 a5       	ldd	r25, Z+43	; 0x2b
    6a26:	a4 a5       	ldd	r26, Z+44	; 0x2c
    6a28:	b5 a5       	ldd	r27, Z+45	; 0x2d
    6a2a:	28 0f       	add	r18, r24
    6a2c:	39 1f       	adc	r19, r25
    6a2e:	4a 1f       	adc	r20, r26
    6a30:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    6a32:	2e 87       	std	Y+14, r18	; 0x0e
    6a34:	3f 87       	std	Y+15, r19	; 0x0f
    6a36:	48 8b       	std	Y+16, r20	; 0x10
    6a38:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    6a3a:	7d 82       	std	Y+5, r7	; 0x05
    6a3c:	6c 82       	std	Y+4, r6	; 0x04
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    6a3e:	35 e0       	ldi	r19, 0x05	; 5
    6a40:	44 0c       	add	r4, r4
    6a42:	55 1c       	adc	r5, r5
    6a44:	3a 95       	dec	r19
    6a46:	e1 f7       	brne	.-8      	; 0x6a40 <dir_next+0x2ae>
    6a48:	82 e3       	ldi	r24, 0x32	; 50
    6a4a:	90 e0       	ldi	r25, 0x00	; 0
    6a4c:	48 0e       	add	r4, r24
    6a4e:	59 1e       	adc	r5, r25
    6a50:	88 81       	ld	r24, Y
    6a52:	99 81       	ldd	r25, Y+1	; 0x01
    6a54:	84 0d       	add	r24, r4
    6a56:	95 1d       	adc	r25, r5
    6a58:	9b 8b       	std	Y+19, r25	; 0x13
    6a5a:	8a 8b       	std	Y+18, r24	; 0x12
    6a5c:	80 e0       	ldi	r24, 0x00	; 0
    6a5e:	05 c0       	rjmp	.+10     	; 0x6a6a <dir_next+0x2d8>

	return FR_OK;
    6a60:	84 e0       	ldi	r24, 0x04	; 4
    6a62:	03 c0       	rjmp	.+6      	; 0x6a6a <dir_next+0x2d8>
    6a64:	82 e0       	ldi	r24, 0x02	; 2
    6a66:	01 c0       	rjmp	.+2      	; 0x6a6a <dir_next+0x2d8>
    6a68:	81 e0       	ldi	r24, 0x01	; 1
}
    6a6a:	df 91       	pop	r29
    6a6c:	cf 91       	pop	r28
    6a6e:	1f 91       	pop	r17
    6a70:	0f 91       	pop	r16
    6a72:	ff 90       	pop	r15
    6a74:	ef 90       	pop	r14
    6a76:	df 90       	pop	r13
    6a78:	cf 90       	pop	r12
    6a7a:	bf 90       	pop	r11
    6a7c:	af 90       	pop	r10
    6a7e:	9f 90       	pop	r9
    6a80:	8f 90       	pop	r8
    6a82:	7f 90       	pop	r7
    6a84:	6f 90       	pop	r6
    6a86:	5f 90       	pop	r5
    6a88:	4f 90       	pop	r4
    6a8a:	08 95       	ret

00006a8c <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    6a8c:	ef 92       	push	r14
    6a8e:	ff 92       	push	r15
    6a90:	0f 93       	push	r16
    6a92:	1f 93       	push	r17
    6a94:	cf 93       	push	r28
    6a96:	df 93       	push	r29
    6a98:	ec 01       	movw	r28, r24
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
    6a9a:	0c 81       	ldd	r16, Y+4	; 0x04
    6a9c:	1d 81       	ldd	r17, Y+5	; 0x05
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
    6a9e:	68 8d       	ldd	r22, Y+24	; 0x18
    6aa0:	79 8d       	ldd	r23, Y+25	; 0x19
    6aa2:	8f ef       	ldi	r24, 0xFF	; 255
    6aa4:	6f 3f       	cpi	r22, 0xFF	; 255
    6aa6:	78 07       	cpc	r23, r24
    6aa8:	09 f4       	brne	.+2      	; 0x6aac <dir_remove+0x20>
    6aaa:	b8 01       	movw	r22, r16
    6aac:	ce 01       	movw	r24, r28
    6aae:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <dir_sdi>
    6ab2:	28 2f       	mov	r18, r24
	if (res == FR_OK) {
    6ab4:	88 23       	and	r24, r24
    6ab6:	29 f5       	brne	.+74     	; 0x6b02 <dir_remove+0x76>
		do {
			res = move_window(dj->fs, dj->sect);
			if (res != FR_OK) break;
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    6ab8:	85 ee       	ldi	r24, 0xE5	; 229
    6aba:	e8 2e       	mov	r14, r24
			dj->fs->wflag = 1;
    6abc:	ff 24       	eor	r15, r15
    6abe:	f3 94       	inc	r15

	i = dj->index;	/* SFN index */
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
	if (res == FR_OK) {
		do {
			res = move_window(dj->fs, dj->sect);
    6ac0:	4e 85       	ldd	r20, Y+14	; 0x0e
    6ac2:	5f 85       	ldd	r21, Y+15	; 0x0f
    6ac4:	68 89       	ldd	r22, Y+16	; 0x10
    6ac6:	79 89       	ldd	r23, Y+17	; 0x11
    6ac8:	88 81       	ld	r24, Y
    6aca:	99 81       	ldd	r25, Y+1	; 0x01
    6acc:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    6ad0:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    6ad2:	88 23       	and	r24, r24
    6ad4:	99 f4       	brne	.+38     	; 0x6afc <dir_remove+0x70>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    6ad6:	ea 89       	ldd	r30, Y+18	; 0x12
    6ad8:	fb 89       	ldd	r31, Y+19	; 0x13
    6ada:	e0 82       	st	Z, r14
			dj->fs->wflag = 1;
    6adc:	e8 81       	ld	r30, Y
    6ade:	f9 81       	ldd	r31, Y+1	; 0x01
    6ae0:	f4 82       	std	Z+4, r15	; 0x04
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    6ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    6ae4:	9d 81       	ldd	r25, Y+5	; 0x05
    6ae6:	80 17       	cp	r24, r16
    6ae8:	91 07       	cpc	r25, r17
    6aea:	58 f4       	brcc	.+22     	; 0x6b02 <dir_remove+0x76>
			res = dir_next(dj, 0);		/* Next entry */
    6aec:	ce 01       	movw	r24, r28
    6aee:	60 e0       	ldi	r22, 0x00	; 0
    6af0:	70 e0       	ldi	r23, 0x00	; 0
    6af2:	0e 94 c9 33 	call	0x6792	; 0x6792 <dir_next>
    6af6:	28 2f       	mov	r18, r24
		} while (res == FR_OK);
    6af8:	88 23       	and	r24, r24
    6afa:	11 f3       	breq	.-60     	; 0x6ac0 <dir_remove+0x34>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
    6afc:	24 30       	cpi	r18, 0x04	; 4
    6afe:	09 f4       	brne	.+2      	; 0x6b02 <dir_remove+0x76>
    6b00:	22 e0       	ldi	r18, 0x02	; 2
		}
	}
#endif

	return res;
}
    6b02:	82 2f       	mov	r24, r18
    6b04:	df 91       	pop	r29
    6b06:	cf 91       	pop	r28
    6b08:	1f 91       	pop	r17
    6b0a:	0f 91       	pop	r16
    6b0c:	ff 90       	pop	r15
    6b0e:	ef 90       	pop	r14
    6b10:	08 95       	ret

00006b12 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    6b12:	af 92       	push	r10
    6b14:	bf 92       	push	r11
    6b16:	df 92       	push	r13
    6b18:	ef 92       	push	r14
    6b1a:	ff 92       	push	r15
    6b1c:	0f 93       	push	r16
    6b1e:	1f 93       	push	r17
    6b20:	cf 93       	push	r28
    6b22:	df 93       	push	r29
    6b24:	8c 01       	movw	r16, r24
    6b26:	e4 e0       	ldi	r30, 0x04	; 4
    6b28:	fe 2e       	mov	r15, r30
    6b2a:	ee 24       	eor	r14, r14
    6b2c:	ea 94       	dec	r14
    6b2e:	dd 24       	eor	r13, r13
    6b30:	da 94       	dec	r13
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    6b32:	7d e0       	ldi	r23, 0x0D	; 13
    6b34:	a7 2e       	mov	r10, r23
    6b36:	b1 2c       	mov	r11, r1
    6b38:	9e c0       	rjmp	.+316    	; 0x6c76 <dir_read+0x164>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    6b3a:	f8 01       	movw	r30, r16
    6b3c:	80 81       	ld	r24, Z
    6b3e:	91 81       	ldd	r25, Z+1	; 0x01
    6b40:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    6b44:	f8 2e       	mov	r15, r24
		if (res != FR_OK) break;
    6b46:	88 23       	and	r24, r24
    6b48:	09 f0       	breq	.+2      	; 0x6b4c <dir_read+0x3a>
    6b4a:	a2 c0       	rjmp	.+324    	; 0x6c90 <dir_read+0x17e>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    6b4c:	f8 01       	movw	r30, r16
    6b4e:	a2 89       	ldd	r26, Z+18	; 0x12
    6b50:	b3 89       	ldd	r27, Z+19	; 0x13
		c = dir[DIR_Name];
    6b52:	2c 91       	ld	r18, X
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    6b54:	22 23       	and	r18, r18
    6b56:	09 f4       	brne	.+2      	; 0x6b5a <dir_read+0x48>
    6b58:	ad c0       	rjmp	.+346    	; 0x6cb4 <dir_read+0x1a2>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    6b5a:	1b 96       	adiw	r26, 0x0b	; 11
    6b5c:	8c 91       	ld	r24, X
    6b5e:	1b 97       	sbiw	r26, 0x0b	; 11
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    6b60:	25 3e       	cpi	r18, 0xE5	; 229
    6b62:	09 f4       	brne	.+2      	; 0x6b66 <dir_read+0x54>
    6b64:	7e c0       	rjmp	.+252    	; 0x6c62 <dir_read+0x150>
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    6b66:	8f 73       	andi	r24, 0x3F	; 63
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    6b68:	83 ff       	sbrs	r24, 3
    6b6a:	04 c0       	rjmp	.+8      	; 0x6b74 <dir_read+0x62>
    6b6c:	8f 30       	cpi	r24, 0x0F	; 15
    6b6e:	09 f0       	breq	.+2      	; 0x6b72 <dir_read+0x60>
    6b70:	78 c0       	rjmp	.+240    	; 0x6c62 <dir_read+0x150>
    6b72:	03 c0       	rjmp	.+6      	; 0x6b7a <dir_read+0x68>
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    6b74:	8f 30       	cpi	r24, 0x0F	; 15
    6b76:	09 f0       	breq	.+2      	; 0x6b7a <dir_read+0x68>
    6b78:	5b c0       	rjmp	.+182    	; 0x6c30 <dir_read+0x11e>
				if (c & LLE) {			/* Is it start of LFN sequence? */
    6b7a:	26 ff       	sbrs	r18, 6
    6b7c:	0c c0       	rjmp	.+24     	; 0x6b96 <dir_read+0x84>
					sum = dir[LDIR_Chksum];
    6b7e:	1d 96       	adiw	r26, 0x0d	; 13
    6b80:	dc 90       	ld	r13, X
    6b82:	1d 97       	sbiw	r26, 0x0d	; 13
					c &= ~LLE; ord = c;
					dj->lfn_idx = dj->index;
    6b84:	f8 01       	movw	r30, r16
    6b86:	84 81       	ldd	r24, Z+4	; 0x04
    6b88:	95 81       	ldd	r25, Z+5	; 0x05
    6b8a:	91 8f       	std	Z+25, r25	; 0x19
    6b8c:	80 8f       	std	Z+24, r24	; 0x18
    6b8e:	6f eb       	ldi	r22, 0xBF	; 191
    6b90:	e6 2e       	mov	r14, r22
    6b92:	e2 22       	and	r14, r18
    6b94:	03 c0       	rjmp	.+6      	; 0x6b9c <dir_read+0x8a>
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    6b96:	2e 15       	cp	r18, r14
    6b98:	09 f0       	breq	.+2      	; 0x6b9c <dir_read+0x8a>
    6b9a:	63 c0       	rjmp	.+198    	; 0x6c62 <dir_read+0x150>
    6b9c:	1d 96       	adiw	r26, 0x0d	; 13
    6b9e:	8c 91       	ld	r24, X
    6ba0:	1d 97       	sbiw	r26, 0x0d	; 13
    6ba2:	d8 16       	cp	r13, r24
    6ba4:	09 f0       	breq	.+2      	; 0x6ba8 <dir_read+0x96>
    6ba6:	5d c0       	rjmp	.+186    	; 0x6c62 <dir_read+0x150>
    6ba8:	f8 01       	movw	r30, r16
    6baa:	66 89       	ldd	r22, Z+22	; 0x16
    6bac:	77 89       	ldd	r23, Z+23	; 0x17
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    6bae:	8c 91       	ld	r24, X
    6bb0:	90 e0       	ldi	r25, 0x00	; 0
    6bb2:	8f 73       	andi	r24, 0x3F	; 63
    6bb4:	90 70       	andi	r25, 0x00	; 0
    6bb6:	8a 9d       	mul	r24, r10
    6bb8:	90 01       	movw	r18, r0
    6bba:	8b 9d       	mul	r24, r11
    6bbc:	30 0d       	add	r19, r0
    6bbe:	9a 9d       	mul	r25, r10
    6bc0:	30 0d       	add	r19, r0
    6bc2:	11 24       	eor	r1, r1
    6bc4:	2d 50       	subi	r18, 0x0D	; 13
    6bc6:	30 40       	sbci	r19, 0x00	; 0
    6bc8:	c0 e7       	ldi	r28, 0x70	; 112
    6bca:	d1 e0       	ldi	r29, 0x01	; 1
    6bcc:	41 e0       	ldi	r20, 0x01	; 1
    6bce:	50 e0       	ldi	r21, 0x00	; 0

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    6bd0:	88 81       	ld	r24, Y
    6bd2:	fd 01       	movw	r30, r26
    6bd4:	e8 0f       	add	r30, r24
    6bd6:	f1 1d       	adc	r31, r1
    6bd8:	80 81       	ld	r24, Z
    6bda:	91 81       	ldd	r25, Z+1	; 0x01
		if (wc) {	/* Last char has not been processed */
    6bdc:	45 2b       	or	r20, r21
    6bde:	71 f0       	breq	.+28     	; 0x6bfc <dir_read+0xea>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    6be0:	20 38       	cpi	r18, 0x80	; 128
    6be2:	31 05       	cpc	r19, r1
    6be4:	08 f0       	brcs	.+2      	; 0x6be8 <dir_read+0xd6>
    6be6:	3d c0       	rjmp	.+122    	; 0x6c62 <dir_read+0x150>
			lfnbuf[i++] = wc = uc;			/* Store it */
    6be8:	f9 01       	movw	r30, r18
    6bea:	ee 0f       	add	r30, r30
    6bec:	ff 1f       	adc	r31, r31
    6bee:	e6 0f       	add	r30, r22
    6bf0:	f7 1f       	adc	r31, r23
    6bf2:	91 83       	std	Z+1, r25	; 0x01
    6bf4:	80 83       	st	Z, r24
    6bf6:	2f 5f       	subi	r18, 0xFF	; 255
    6bf8:	3f 4f       	sbci	r19, 0xFF	; 255
    6bfa:	05 c0       	rjmp	.+10     	; 0x6c06 <dir_read+0xf4>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
    6bfc:	8f 5f       	subi	r24, 0xFF	; 255
    6bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    6c00:	81 f5       	brne	.+96     	; 0x6c62 <dir_read+0x150>
    6c02:	80 e0       	ldi	r24, 0x00	; 0
    6c04:	90 e0       	ldi	r25, 0x00	; 0
    6c06:	21 96       	adiw	r28, 0x01	; 1
		}
	} while (++s < 13);						/* Read all character in the entry */
    6c08:	41 e0       	ldi	r20, 0x01	; 1
    6c0a:	cd 37       	cpi	r28, 0x7D	; 125
    6c0c:	d4 07       	cpc	r29, r20
    6c0e:	11 f0       	breq	.+4      	; 0x6c14 <dir_read+0x102>
    6c10:	ac 01       	movw	r20, r24
    6c12:	de cf       	rjmp	.-68     	; 0x6bd0 <dir_read+0xbe>

	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
    6c14:	8c 91       	ld	r24, X
    6c16:	86 ff       	sbrs	r24, 6
    6c18:	4b c0       	rjmp	.+150    	; 0x6cb0 <dir_read+0x19e>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
    6c1a:	20 38       	cpi	r18, 0x80	; 128
    6c1c:	31 05       	cpc	r19, r1
    6c1e:	08 f5       	brcc	.+66     	; 0x6c62 <dir_read+0x150>
		lfnbuf[i] = 0;
    6c20:	22 0f       	add	r18, r18
    6c22:	33 1f       	adc	r19, r19
    6c24:	62 0f       	add	r22, r18
    6c26:	73 1f       	adc	r23, r19
    6c28:	fb 01       	movw	r30, r22
    6c2a:	11 82       	std	Z+1, r1	; 0x01
    6c2c:	10 82       	st	Z, r1
    6c2e:	40 c0       	rjmp	.+128    	; 0x6cb0 <dir_read+0x19e>
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
    6c30:	ee 20       	and	r14, r14
    6c32:	89 f4       	brne	.+34     	; 0x6c56 <dir_read+0x144>
    6c34:	fd 01       	movw	r30, r26
    6c36:	2b e0       	ldi	r18, 0x0B	; 11
    6c38:	30 e0       	ldi	r19, 0x00	; 0
    6c3a:	90 e0       	ldi	r25, 0x00	; 0
)
{
	BYTE sum = 0;
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    6c3c:	89 2f       	mov	r24, r25
    6c3e:	87 95       	ror	r24
    6c40:	88 27       	eor	r24, r24
    6c42:	87 95       	ror	r24
    6c44:	96 95       	lsr	r25
    6c46:	98 2b       	or	r25, r24
    6c48:	81 91       	ld	r24, Z+
    6c4a:	98 0f       	add	r25, r24
    6c4c:	21 50       	subi	r18, 0x01	; 1
    6c4e:	30 40       	sbci	r19, 0x00	; 0
    6c50:	a9 f7       	brne	.-22     	; 0x6c3c <dir_read+0x12a>
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
    6c52:	d9 16       	cp	r13, r25
    6c54:	11 f1       	breq	.+68     	; 0x6c9a <dir_read+0x188>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
    6c56:	8f ef       	ldi	r24, 0xFF	; 255
    6c58:	9f ef       	ldi	r25, 0xFF	; 255
    6c5a:	f8 01       	movw	r30, r16
    6c5c:	91 8f       	std	Z+25, r25	; 0x19
    6c5e:	80 8f       	std	Z+24, r24	; 0x18
    6c60:	1c c0       	rjmp	.+56     	; 0x6c9a <dir_read+0x188>
    6c62:	ee 24       	eor	r14, r14
    6c64:	ea 94       	dec	r14
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    6c66:	c8 01       	movw	r24, r16
    6c68:	60 e0       	ldi	r22, 0x00	; 0
    6c6a:	70 e0       	ldi	r23, 0x00	; 0
    6c6c:	0e 94 c9 33 	call	0x6792	; 0x6792 <dir_next>
    6c70:	f8 2e       	mov	r15, r24
		if (res != FR_OK) break;
    6c72:	88 23       	and	r24, r24
    6c74:	69 f4       	brne	.+26     	; 0x6c90 <dir_read+0x17e>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    6c76:	f8 01       	movw	r30, r16
    6c78:	46 85       	ldd	r20, Z+14	; 0x0e
    6c7a:	57 85       	ldd	r21, Z+15	; 0x0f
    6c7c:	60 89       	ldd	r22, Z+16	; 0x10
    6c7e:	71 89       	ldd	r23, Z+17	; 0x11
    6c80:	41 15       	cp	r20, r1
    6c82:	51 05       	cpc	r21, r1
    6c84:	61 05       	cpc	r22, r1
    6c86:	71 05       	cpc	r23, r1
    6c88:	09 f0       	breq	.+2      	; 0x6c8c <dir_read+0x17a>
    6c8a:	57 cf       	rjmp	.-338    	; 0x6b3a <dir_read+0x28>
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    6c8c:	ff 20       	and	r15, r15
    6c8e:	29 f0       	breq	.+10     	; 0x6c9a <dir_read+0x188>
    6c90:	f8 01       	movw	r30, r16
    6c92:	16 86       	std	Z+14, r1	; 0x0e
    6c94:	17 86       	std	Z+15, r1	; 0x0f
    6c96:	10 8a       	std	Z+16, r1	; 0x10
    6c98:	11 8a       	std	Z+17, r1	; 0x11

	return res;
}
    6c9a:	8f 2d       	mov	r24, r15
    6c9c:	df 91       	pop	r29
    6c9e:	cf 91       	pop	r28
    6ca0:	1f 91       	pop	r17
    6ca2:	0f 91       	pop	r16
    6ca4:	ff 90       	pop	r15
    6ca6:	ef 90       	pop	r14
    6ca8:	df 90       	pop	r13
    6caa:	bf 90       	pop	r11
    6cac:	af 90       	pop	r10
    6cae:	08 95       	ret
					sum = dir[LDIR_Chksum];
					c &= ~LLE; ord = c;
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    6cb0:	ea 94       	dec	r14
    6cb2:	d9 cf       	rjmp	.-78     	; 0x6c66 <dir_read+0x154>
    6cb4:	94 e0       	ldi	r25, 0x04	; 4
    6cb6:	f9 2e       	mov	r15, r25
    6cb8:	eb cf       	rjmp	.-42     	; 0x6c90 <dir_read+0x17e>

00006cba <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    6cba:	2f 92       	push	r2
    6cbc:	3f 92       	push	r3
    6cbe:	4f 92       	push	r4
    6cc0:	5f 92       	push	r5
    6cc2:	6f 92       	push	r6
    6cc4:	7f 92       	push	r7
    6cc6:	8f 92       	push	r8
    6cc8:	9f 92       	push	r9
    6cca:	af 92       	push	r10
    6ccc:	bf 92       	push	r11
    6cce:	cf 92       	push	r12
    6cd0:	df 92       	push	r13
    6cd2:	ef 92       	push	r14
    6cd4:	ff 92       	push	r15
    6cd6:	0f 93       	push	r16
    6cd8:	1f 93       	push	r17
    6cda:	df 93       	push	r29
    6cdc:	cf 93       	push	r28
    6cde:	00 d0       	rcall	.+0      	; 0x6ce0 <f_write+0x26>
    6ce0:	00 d0       	rcall	.+0      	; 0x6ce2 <f_write+0x28>
    6ce2:	cd b7       	in	r28, 0x3d	; 61
    6ce4:	de b7       	in	r29, 0x3e	; 62
    6ce6:	9c 83       	std	Y+4, r25	; 0x04
    6ce8:	8b 83       	std	Y+3, r24	; 0x03
    6cea:	16 2f       	mov	r17, r22
    6cec:	07 2f       	mov	r16, r23
    6cee:	3a 01       	movw	r6, r20
    6cf0:	3a 83       	std	Y+2, r19	; 0x02
    6cf2:	29 83       	std	Y+1, r18	; 0x01
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    6cf4:	d9 01       	movw	r26, r18
    6cf6:	1d 92       	st	X+, r1
    6cf8:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);			/* Check validity */
    6cfa:	fc 01       	movw	r30, r24
    6cfc:	62 81       	ldd	r22, Z+2	; 0x02
    6cfe:	73 81       	ldd	r23, Z+3	; 0x03
    6d00:	80 81       	ld	r24, Z
    6d02:	91 81       	ldd	r25, Z+1	; 0x01
    6d04:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <validate>
    6d08:	88 2e       	mov	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    6d0a:	88 23       	and	r24, r24
    6d0c:	09 f0       	breq	.+2      	; 0x6d10 <f_write+0x56>
    6d0e:	f3 c1       	rjmp	.+998    	; 0x70f6 <f_write+0x43c>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    6d10:	ab 81       	ldd	r26, Y+3	; 0x03
    6d12:	bc 81       	ldd	r27, Y+4	; 0x04
    6d14:	14 96       	adiw	r26, 0x04	; 4
    6d16:	8c 91       	ld	r24, X
    6d18:	87 fd       	sbrc	r24, 7
    6d1a:	7f c0       	rjmp	.+254    	; 0x6e1a <f_write+0x160>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    6d1c:	81 fd       	sbrc	r24, 1
    6d1e:	03 c0       	rjmp	.+6      	; 0x6d26 <f_write+0x6c>
    6d20:	87 e0       	ldi	r24, 0x07	; 7
    6d22:	88 2e       	mov	r8, r24
    6d24:	e8 c1       	rjmp	.+976    	; 0x70f6 <f_write+0x43c>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    6d26:	eb 81       	ldd	r30, Y+3	; 0x03
    6d28:	fc 81       	ldd	r31, Y+4	; 0x04
    6d2a:	22 85       	ldd	r18, Z+10	; 0x0a
    6d2c:	33 85       	ldd	r19, Z+11	; 0x0b
    6d2e:	44 85       	ldd	r20, Z+12	; 0x0c
    6d30:	55 85       	ldd	r21, Z+13	; 0x0d
    6d32:	c3 01       	movw	r24, r6
    6d34:	a0 e0       	ldi	r26, 0x00	; 0
    6d36:	b0 e0       	ldi	r27, 0x00	; 0
    6d38:	82 0f       	add	r24, r18
    6d3a:	93 1f       	adc	r25, r19
    6d3c:	a4 1f       	adc	r26, r20
    6d3e:	b5 1f       	adc	r27, r21
    6d40:	82 17       	cp	r24, r18
    6d42:	93 07       	cpc	r25, r19
    6d44:	a4 07       	cpc	r26, r20
    6d46:	b5 07       	cpc	r27, r21
    6d48:	10 f4       	brcc	.+4      	; 0x6d4e <f_write+0x94>
    6d4a:	66 24       	eor	r6, r6
    6d4c:	77 24       	eor	r7, r7
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    6d4e:	81 2f       	mov	r24, r17
    6d50:	90 2f       	mov	r25, r16
    6d52:	9c 01       	movw	r18, r24
    6d54:	19 01       	movw	r2, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    6d56:	44 24       	eor	r4, r4
    6d58:	43 94       	inc	r4
    6d5a:	a8 c1       	rjmp	.+848    	; 0x70ac <f_write+0x3f2>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    6d5c:	ab 81       	ldd	r26, Y+3	; 0x03
    6d5e:	bc 81       	ldd	r27, Y+4	; 0x04
    6d60:	16 96       	adiw	r26, 0x06	; 6
    6d62:	2d 91       	ld	r18, X+
    6d64:	3d 91       	ld	r19, X+
    6d66:	4d 91       	ld	r20, X+
    6d68:	5c 91       	ld	r21, X
    6d6a:	19 97       	sbiw	r26, 0x09	; 9
    6d6c:	da 01       	movw	r26, r20
    6d6e:	c9 01       	movw	r24, r18
    6d70:	91 70       	andi	r25, 0x01	; 1
    6d72:	a0 70       	andi	r26, 0x00	; 0
    6d74:	b0 70       	andi	r27, 0x00	; 0
    6d76:	00 97       	sbiw	r24, 0x00	; 0
    6d78:	a1 05       	cpc	r26, r1
    6d7a:	b1 05       	cpc	r27, r1
    6d7c:	09 f0       	breq	.+2      	; 0x6d80 <f_write+0xc6>
    6d7e:	3c c1       	rjmp	.+632    	; 0x6ff8 <f_write+0x33e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    6d80:	ab 81       	ldd	r26, Y+3	; 0x03
    6d82:	bc 81       	ldd	r27, Y+4	; 0x04
    6d84:	ed 91       	ld	r30, X+
    6d86:	fc 91       	ld	r31, X
    6d88:	da 01       	movw	r26, r20
    6d8a:	c9 01       	movw	r24, r18
    6d8c:	09 e0       	ldi	r16, 0x09	; 9
    6d8e:	b6 95       	lsr	r27
    6d90:	a7 95       	ror	r26
    6d92:	97 95       	ror	r25
    6d94:	87 95       	ror	r24
    6d96:	0a 95       	dec	r16
    6d98:	d1 f7       	brne	.-12     	; 0x6d8e <f_write+0xd4>
    6d9a:	92 80       	ldd	r9, Z+2	; 0x02
    6d9c:	9a 94       	dec	r9
    6d9e:	98 22       	and	r9, r24
			if (!csect) {					/* On the cluster boundary? */
    6da0:	09 f0       	breq	.+2      	; 0x6da4 <f_write+0xea>
    6da2:	4d c0       	rjmp	.+154    	; 0x6e3e <f_write+0x184>
				if (fp->fptr == 0) {		/* On the top of the file? */
    6da4:	21 15       	cp	r18, r1
    6da6:	31 05       	cpc	r19, r1
    6da8:	41 05       	cpc	r20, r1
    6daa:	51 05       	cpc	r21, r1
    6dac:	d9 f4       	brne	.+54     	; 0x6de4 <f_write+0x12a>
					clst = fp->sclust;		/* Follow from the origin */
    6dae:	ab 81       	ldd	r26, Y+3	; 0x03
    6db0:	bc 81       	ldd	r27, Y+4	; 0x04
    6db2:	1e 96       	adiw	r26, 0x0e	; 14
    6db4:	6d 91       	ld	r22, X+
    6db6:	7d 91       	ld	r23, X+
    6db8:	8d 91       	ld	r24, X+
    6dba:	9c 91       	ld	r25, X
    6dbc:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)			/* When no cluster is allocated, */
    6dbe:	61 15       	cp	r22, r1
    6dc0:	71 05       	cpc	r23, r1
    6dc2:	81 05       	cpc	r24, r1
    6dc4:	91 05       	cpc	r25, r1
    6dc6:	f9 f4       	brne	.+62     	; 0x6e06 <f_write+0x14c>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    6dc8:	cf 01       	movw	r24, r30
    6dca:	40 e0       	ldi	r20, 0x00	; 0
    6dcc:	50 e0       	ldi	r21, 0x00	; 0
    6dce:	60 e0       	ldi	r22, 0x00	; 0
    6dd0:	70 e0       	ldi	r23, 0x00	; 0
    6dd2:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <create_chain>
    6dd6:	eb 81       	ldd	r30, Y+3	; 0x03
    6dd8:	fc 81       	ldd	r31, Y+4	; 0x04
    6dda:	66 87       	std	Z+14, r22	; 0x0e
    6ddc:	77 87       	std	Z+15, r23	; 0x0f
    6dde:	80 8b       	std	Z+16, r24	; 0x10
    6de0:	91 8b       	std	Z+17, r25	; 0x11
    6de2:	0b c0       	rjmp	.+22     	; 0x6dfa <f_write+0x140>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    6de4:	ab 81       	ldd	r26, Y+3	; 0x03
    6de6:	bc 81       	ldd	r27, Y+4	; 0x04
    6de8:	52 96       	adiw	r26, 0x12	; 18
    6dea:	4d 91       	ld	r20, X+
    6dec:	5d 91       	ld	r21, X+
    6dee:	6d 91       	ld	r22, X+
    6df0:	7c 91       	ld	r23, X
    6df2:	55 97       	sbiw	r26, 0x15	; 21
    6df4:	cf 01       	movw	r24, r30
    6df6:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    6dfa:	61 15       	cp	r22, r1
    6dfc:	71 05       	cpc	r23, r1
    6dfe:	81 05       	cpc	r24, r1
    6e00:	91 05       	cpc	r25, r1
    6e02:	09 f4       	brne	.+2      	; 0x6e06 <f_write+0x14c>
    6e04:	57 c1       	rjmp	.+686    	; 0x70b4 <f_write+0x3fa>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    6e06:	61 30       	cpi	r22, 0x01	; 1
    6e08:	71 05       	cpc	r23, r1
    6e0a:	81 05       	cpc	r24, r1
    6e0c:	91 05       	cpc	r25, r1
    6e0e:	41 f4       	brne	.+16     	; 0x6e20 <f_write+0x166>
    6e10:	eb 81       	ldd	r30, Y+3	; 0x03
    6e12:	fc 81       	ldd	r31, Y+4	; 0x04
    6e14:	84 81       	ldd	r24, Z+4	; 0x04
    6e16:	80 68       	ori	r24, 0x80	; 128
    6e18:	84 83       	std	Z+4, r24	; 0x04
    6e1a:	12 e0       	ldi	r17, 0x02	; 2
    6e1c:	81 2e       	mov	r8, r17
    6e1e:	6b c1       	rjmp	.+726    	; 0x70f6 <f_write+0x43c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    6e20:	6f 3f       	cpi	r22, 0xFF	; 255
    6e22:	ff ef       	ldi	r31, 0xFF	; 255
    6e24:	7f 07       	cpc	r23, r31
    6e26:	ff ef       	ldi	r31, 0xFF	; 255
    6e28:	8f 07       	cpc	r24, r31
    6e2a:	ff ef       	ldi	r31, 0xFF	; 255
    6e2c:	9f 07       	cpc	r25, r31
    6e2e:	09 f4       	brne	.+2      	; 0x6e32 <f_write+0x178>
    6e30:	cc c0       	rjmp	.+408    	; 0x6fca <f_write+0x310>
				fp->clust = clst;			/* Update current cluster */
    6e32:	eb 81       	ldd	r30, Y+3	; 0x03
    6e34:	fc 81       	ldd	r31, Y+4	; 0x04
    6e36:	62 8b       	std	Z+18, r22	; 0x12
    6e38:	73 8b       	std	Z+19, r23	; 0x13
    6e3a:	84 8b       	std	Z+20, r24	; 0x14
    6e3c:	95 8b       	std	Z+21, r25	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    6e3e:	ab 81       	ldd	r26, Y+3	; 0x03
    6e40:	bc 81       	ldd	r27, Y+4	; 0x04
    6e42:	ed 91       	ld	r30, X+
    6e44:	fc 91       	ld	r31, X
    6e46:	11 97       	sbiw	r26, 0x01	; 1
    6e48:	26 a5       	ldd	r18, Z+46	; 0x2e
    6e4a:	37 a5       	ldd	r19, Z+47	; 0x2f
    6e4c:	40 a9       	ldd	r20, Z+48	; 0x30
    6e4e:	51 a9       	ldd	r21, Z+49	; 0x31
    6e50:	56 96       	adiw	r26, 0x16	; 22
    6e52:	ed 90       	ld	r14, X+
    6e54:	fd 90       	ld	r15, X+
    6e56:	0d 91       	ld	r16, X+
    6e58:	1c 91       	ld	r17, X
    6e5a:	59 97       	sbiw	r26, 0x19	; 25
    6e5c:	2e 15       	cp	r18, r14
    6e5e:	3f 05       	cpc	r19, r15
    6e60:	40 07       	cpc	r20, r16
    6e62:	51 07       	cpc	r21, r17
    6e64:	51 f4       	brne	.+20     	; 0x6e7a <f_write+0x1c0>
    6e66:	cf 01       	movw	r24, r30
    6e68:	40 e0       	ldi	r20, 0x00	; 0
    6e6a:	50 e0       	ldi	r21, 0x00	; 0
    6e6c:	60 e0       	ldi	r22, 0x00	; 0
    6e6e:	70 e0       	ldi	r23, 0x00	; 0
    6e70:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    6e74:	88 23       	and	r24, r24
    6e76:	09 f0       	breq	.+2      	; 0x6e7a <f_write+0x1c0>
    6e78:	d3 c0       	rjmp	.+422    	; 0x7020 <f_write+0x366>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    6e7a:	ab 81       	ldd	r26, Y+3	; 0x03
    6e7c:	bc 81       	ldd	r27, Y+4	; 0x04
    6e7e:	0d 91       	ld	r16, X+
    6e80:	1c 91       	ld	r17, X
    6e82:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    6e84:	52 96       	adiw	r26, 0x12	; 18
    6e86:	2d 91       	ld	r18, X+
    6e88:	3d 91       	ld	r19, X+
    6e8a:	4d 91       	ld	r20, X+
    6e8c:	5c 91       	ld	r21, X
    6e8e:	55 97       	sbiw	r26, 0x15	; 21
    6e90:	22 50       	subi	r18, 0x02	; 2
    6e92:	30 40       	sbci	r19, 0x00	; 0
    6e94:	40 40       	sbci	r20, 0x00	; 0
    6e96:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    6e98:	f8 01       	movw	r30, r16
    6e9a:	82 8d       	ldd	r24, Z+26	; 0x1a
    6e9c:	93 8d       	ldd	r25, Z+27	; 0x1b
    6e9e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    6ea0:	b5 8d       	ldd	r27, Z+29	; 0x1d
    6ea2:	02 97       	sbiw	r24, 0x02	; 2
    6ea4:	a1 09       	sbc	r26, r1
    6ea6:	b1 09       	sbc	r27, r1
    6ea8:	28 17       	cp	r18, r24
    6eaa:	39 07       	cpc	r19, r25
    6eac:	4a 07       	cpc	r20, r26
    6eae:	5b 07       	cpc	r21, r27
    6eb0:	b8 f4       	brcc	.+46     	; 0x6ee0 <f_write+0x226>
	return clst * fs->csize + fs->database;
    6eb2:	52 80       	ldd	r5, Z+2	; 0x02
    6eb4:	65 2d       	mov	r22, r5
    6eb6:	70 e0       	ldi	r23, 0x00	; 0
    6eb8:	80 e0       	ldi	r24, 0x00	; 0
    6eba:	90 e0       	ldi	r25, 0x00	; 0
    6ebc:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__mulsi3>
    6ec0:	9b 01       	movw	r18, r22
    6ec2:	ac 01       	movw	r20, r24
    6ec4:	f8 01       	movw	r30, r16
    6ec6:	82 a5       	ldd	r24, Z+42	; 0x2a
    6ec8:	93 a5       	ldd	r25, Z+43	; 0x2b
    6eca:	a4 a5       	ldd	r26, Z+44	; 0x2c
    6ecc:	b5 a5       	ldd	r27, Z+45	; 0x2d
    6ece:	28 0f       	add	r18, r24
    6ed0:	39 1f       	adc	r19, r25
    6ed2:	4a 1f       	adc	r20, r26
    6ed4:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    6ed6:	21 15       	cp	r18, r1
    6ed8:	31 05       	cpc	r19, r1
    6eda:	41 05       	cpc	r20, r1
    6edc:	51 05       	cpc	r21, r1
    6ede:	49 f4       	brne	.+18     	; 0x6ef2 <f_write+0x238>
    6ee0:	ab 81       	ldd	r26, Y+3	; 0x03
    6ee2:	bc 81       	ldd	r27, Y+4	; 0x04
    6ee4:	14 96       	adiw	r26, 0x04	; 4
    6ee6:	8c 91       	ld	r24, X
    6ee8:	14 97       	sbiw	r26, 0x04	; 4
    6eea:	80 68       	ori	r24, 0x80	; 128
    6eec:	14 96       	adiw	r26, 0x04	; 4
    6eee:	8c 93       	st	X, r24
    6ef0:	94 cf       	rjmp	.-216    	; 0x6e1a <f_write+0x160>
			sect += csect;
    6ef2:	69 01       	movw	r12, r18
    6ef4:	7a 01       	movw	r14, r20
    6ef6:	c9 0c       	add	r12, r9
    6ef8:	d1 1c       	adc	r13, r1
    6efa:	e1 1c       	adc	r14, r1
    6efc:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    6efe:	53 01       	movw	r10, r6
    6f00:	ab 2c       	mov	r10, r11
    6f02:	bb 24       	eor	r11, r11
    6f04:	a6 94       	lsr	r10
			if (cc) {						/* Write maximum contiguous sectors directly */
    6f06:	a1 14       	cp	r10, r1
    6f08:	b1 04       	cpc	r11, r1
    6f0a:	09 f4       	brne	.+2      	; 0x6f0e <f_write+0x254>
    6f0c:	46 c0       	rjmp	.+140    	; 0x6f9a <f_write+0x2e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    6f0e:	29 2d       	mov	r18, r9
    6f10:	30 e0       	ldi	r19, 0x00	; 0
    6f12:	c5 01       	movw	r24, r10
    6f14:	82 0f       	add	r24, r18
    6f16:	93 1f       	adc	r25, r19
    6f18:	65 2d       	mov	r22, r5
    6f1a:	70 e0       	ldi	r23, 0x00	; 0
    6f1c:	68 17       	cp	r22, r24
    6f1e:	79 07       	cpc	r23, r25
    6f20:	18 f4       	brcc	.+6      	; 0x6f28 <f_write+0x26e>
					cc = fp->fs->csize - csect;
    6f22:	5b 01       	movw	r10, r22
    6f24:	a2 1a       	sub	r10, r18
    6f26:	b3 0a       	sbc	r11, r19
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    6f28:	f8 01       	movw	r30, r16
    6f2a:	81 81       	ldd	r24, Z+1	; 0x01
    6f2c:	b1 01       	movw	r22, r2
    6f2e:	a7 01       	movw	r20, r14
    6f30:	96 01       	movw	r18, r12
    6f32:	0a 2d       	mov	r16, r10
    6f34:	0e 94 6e 58 	call	0xb0dc	; 0xb0dc <disk_write>
    6f38:	88 23       	and	r24, r24
    6f3a:	09 f0       	breq	.+2      	; 0x6f3e <f_write+0x284>
    6f3c:	46 c0       	rjmp	.+140    	; 0x6fca <f_write+0x310>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    6f3e:	ab 81       	ldd	r26, Y+3	; 0x03
    6f40:	bc 81       	ldd	r27, Y+4	; 0x04
    6f42:	ed 91       	ld	r30, X+
    6f44:	fc 91       	ld	r31, X
    6f46:	26 a5       	ldd	r18, Z+46	; 0x2e
    6f48:	37 a5       	ldd	r19, Z+47	; 0x2f
    6f4a:	40 a9       	ldd	r20, Z+48	; 0x30
    6f4c:	51 a9       	ldd	r21, Z+49	; 0x31
    6f4e:	2c 19       	sub	r18, r12
    6f50:	3d 09       	sbc	r19, r13
    6f52:	4e 09       	sbc	r20, r14
    6f54:	5f 09       	sbc	r21, r15
    6f56:	c5 01       	movw	r24, r10
    6f58:	a0 e0       	ldi	r26, 0x00	; 0
    6f5a:	b0 e0       	ldi	r27, 0x00	; 0
    6f5c:	28 17       	cp	r18, r24
    6f5e:	39 07       	cpc	r19, r25
    6f60:	4a 07       	cpc	r20, r26
    6f62:	5b 07       	cpc	r21, r27
    6f64:	a8 f4       	brcc	.+42     	; 0x6f90 <f_write+0x2d6>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    6f66:	a9 e0       	ldi	r26, 0x09	; 9
    6f68:	22 0f       	add	r18, r18
    6f6a:	33 1f       	adc	r19, r19
    6f6c:	44 1f       	adc	r20, r20
    6f6e:	55 1f       	adc	r21, r21
    6f70:	aa 95       	dec	r26
    6f72:	d1 f7       	brne	.-12     	; 0x6f68 <f_write+0x2ae>
    6f74:	b1 01       	movw	r22, r2
    6f76:	62 0f       	add	r22, r18
    6f78:	73 1f       	adc	r23, r19
    6f7a:	cf 01       	movw	r24, r30
    6f7c:	c2 96       	adiw	r24, 0x32	; 50
    6f7e:	40 e0       	ldi	r20, 0x00	; 0
    6f80:	52 e0       	ldi	r21, 0x02	; 2
    6f82:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <mem_cpy>
					fp->fs->wflag = 0;
    6f86:	ab 81       	ldd	r26, Y+3	; 0x03
    6f88:	bc 81       	ldd	r27, Y+4	; 0x04
    6f8a:	ed 91       	ld	r30, X+
    6f8c:	fc 91       	ld	r31, X
    6f8e:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    6f90:	85 01       	movw	r16, r10
    6f92:	10 2f       	mov	r17, r16
    6f94:	00 27       	eor	r16, r16
    6f96:	11 0f       	add	r17, r17
    6f98:	6c c0       	rjmp	.+216    	; 0x7072 <f_write+0x3b8>
				continue;
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    6f9a:	eb 81       	ldd	r30, Y+3	; 0x03
    6f9c:	fc 81       	ldd	r31, Y+4	; 0x04
    6f9e:	26 81       	ldd	r18, Z+6	; 0x06
    6fa0:	37 81       	ldd	r19, Z+7	; 0x07
    6fa2:	40 85       	ldd	r20, Z+8	; 0x08
    6fa4:	51 85       	ldd	r21, Z+9	; 0x09
    6fa6:	82 85       	ldd	r24, Z+10	; 0x0a
    6fa8:	93 85       	ldd	r25, Z+11	; 0x0b
    6faa:	a4 85       	ldd	r26, Z+12	; 0x0c
    6fac:	b5 85       	ldd	r27, Z+13	; 0x0d
    6fae:	28 17       	cp	r18, r24
    6fb0:	39 07       	cpc	r19, r25
    6fb2:	4a 07       	cpc	r20, r26
    6fb4:	5b 07       	cpc	r21, r27
    6fb6:	d0 f0       	brcs	.+52     	; 0x6fec <f_write+0x332>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    6fb8:	c8 01       	movw	r24, r16
    6fba:	40 e0       	ldi	r20, 0x00	; 0
    6fbc:	50 e0       	ldi	r21, 0x00	; 0
    6fbe:	60 e0       	ldi	r22, 0x00	; 0
    6fc0:	70 e0       	ldi	r23, 0x00	; 0
    6fc2:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    6fc6:	88 23       	and	r24, r24
    6fc8:	49 f0       	breq	.+18     	; 0x6fdc <f_write+0x322>
    6fca:	ab 81       	ldd	r26, Y+3	; 0x03
    6fcc:	bc 81       	ldd	r27, Y+4	; 0x04
    6fce:	14 96       	adiw	r26, 0x04	; 4
    6fd0:	8c 91       	ld	r24, X
    6fd2:	14 97       	sbiw	r26, 0x04	; 4
    6fd4:	80 68       	ori	r24, 0x80	; 128
    6fd6:	14 96       	adiw	r26, 0x04	; 4
    6fd8:	8c 93       	st	X, r24
    6fda:	27 c0       	rjmp	.+78     	; 0x702a <f_write+0x370>
				fp->fs->winsect = sect;
    6fdc:	ab 81       	ldd	r26, Y+3	; 0x03
    6fde:	bc 81       	ldd	r27, Y+4	; 0x04
    6fe0:	ed 91       	ld	r30, X+
    6fe2:	fc 91       	ld	r31, X
    6fe4:	c6 a6       	std	Z+46, r12	; 0x2e
    6fe6:	d7 a6       	std	Z+47, r13	; 0x2f
    6fe8:	e0 aa       	std	Z+48, r14	; 0x30
    6fea:	f1 aa       	std	Z+49, r15	; 0x31
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    6fec:	eb 81       	ldd	r30, Y+3	; 0x03
    6fee:	fc 81       	ldd	r31, Y+4	; 0x04
    6ff0:	c6 8a       	std	Z+22, r12	; 0x16
    6ff2:	d7 8a       	std	Z+23, r13	; 0x17
    6ff4:	e0 8e       	std	Z+24, r14	; 0x18
    6ff6:	f1 8e       	std	Z+25, r15	; 0x19
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    6ff8:	ab 81       	ldd	r26, Y+3	; 0x03
    6ffa:	bc 81       	ldd	r27, Y+4	; 0x04
    6ffc:	16 96       	adiw	r26, 0x06	; 6
    6ffe:	ed 90       	ld	r14, X+
    7000:	fd 90       	ld	r15, X+
    7002:	0d 91       	ld	r16, X+
    7004:	1c 91       	ld	r17, X
    7006:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    7008:	56 96       	adiw	r26, 0x16	; 22
    700a:	4d 91       	ld	r20, X+
    700c:	5d 91       	ld	r21, X+
    700e:	6d 91       	ld	r22, X+
    7010:	7c 91       	ld	r23, X
    7012:	59 97       	sbiw	r26, 0x19	; 25
    7014:	8d 91       	ld	r24, X+
    7016:	9c 91       	ld	r25, X
    7018:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    701c:	88 23       	and	r24, r24
    701e:	41 f0       	breq	.+16     	; 0x7030 <f_write+0x376>
			ABORT(fp->fs, FR_DISK_ERR);
    7020:	eb 81       	ldd	r30, Y+3	; 0x03
    7022:	fc 81       	ldd	r31, Y+4	; 0x04
    7024:	84 81       	ldd	r24, Z+4	; 0x04
    7026:	80 68       	ori	r24, 0x80	; 128
    7028:	84 83       	std	Z+4, r24	; 0x04
    702a:	88 24       	eor	r8, r8
    702c:	83 94       	inc	r8
    702e:	63 c0       	rjmp	.+198    	; 0x70f6 <f_write+0x43c>
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    7030:	c7 01       	movw	r24, r14
    7032:	91 70       	andi	r25, 0x01	; 1
    7034:	20 e0       	ldi	r18, 0x00	; 0
    7036:	32 e0       	ldi	r19, 0x02	; 2
    7038:	28 1b       	sub	r18, r24
    703a:	39 0b       	sbc	r19, r25
    703c:	83 01       	movw	r16, r6
    703e:	26 15       	cp	r18, r6
    7040:	37 05       	cpc	r19, r7
    7042:	08 f4       	brcc	.+2      	; 0x7046 <f_write+0x38c>
    7044:	89 01       	movw	r16, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    7046:	ab 81       	ldd	r26, Y+3	; 0x03
    7048:	bc 81       	ldd	r27, Y+4	; 0x04
    704a:	16 96       	adiw	r26, 0x06	; 6
    704c:	2d 91       	ld	r18, X+
    704e:	3c 91       	ld	r19, X
    7050:	17 97       	sbiw	r26, 0x07	; 7
    7052:	31 70       	andi	r19, 0x01	; 1
    7054:	2e 5c       	subi	r18, 0xCE	; 206
    7056:	3f 4f       	sbci	r19, 0xFF	; 255
    7058:	8d 91       	ld	r24, X+
    705a:	9c 91       	ld	r25, X
    705c:	82 0f       	add	r24, r18
    705e:	93 1f       	adc	r25, r19
    7060:	b1 01       	movw	r22, r2
    7062:	a8 01       	movw	r20, r16
    7064:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <mem_cpy>
		fp->fs->wflag = 1;
    7068:	ab 81       	ldd	r26, Y+3	; 0x03
    706a:	bc 81       	ldd	r27, Y+4	; 0x04
    706c:	ed 91       	ld	r30, X+
    706e:	fc 91       	ld	r31, X
    7070:	44 82       	std	Z+4, r4	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    7072:	20 0e       	add	r2, r16
    7074:	31 1e       	adc	r3, r17
    7076:	c8 01       	movw	r24, r16
    7078:	a0 e0       	ldi	r26, 0x00	; 0
    707a:	b0 e0       	ldi	r27, 0x00	; 0
    707c:	eb 81       	ldd	r30, Y+3	; 0x03
    707e:	fc 81       	ldd	r31, Y+4	; 0x04
    7080:	26 81       	ldd	r18, Z+6	; 0x06
    7082:	37 81       	ldd	r19, Z+7	; 0x07
    7084:	40 85       	ldd	r20, Z+8	; 0x08
    7086:	51 85       	ldd	r21, Z+9	; 0x09
    7088:	28 0f       	add	r18, r24
    708a:	39 1f       	adc	r19, r25
    708c:	4a 1f       	adc	r20, r26
    708e:	5b 1f       	adc	r21, r27
    7090:	26 83       	std	Z+6, r18	; 0x06
    7092:	37 83       	std	Z+7, r19	; 0x07
    7094:	40 87       	std	Z+8, r20	; 0x08
    7096:	51 87       	std	Z+9, r21	; 0x09
    7098:	e9 81       	ldd	r30, Y+1	; 0x01
    709a:	fa 81       	ldd	r31, Y+2	; 0x02
    709c:	80 81       	ld	r24, Z
    709e:	91 81       	ldd	r25, Z+1	; 0x01
    70a0:	80 0f       	add	r24, r16
    70a2:	91 1f       	adc	r25, r17
    70a4:	91 83       	std	Z+1, r25	; 0x01
    70a6:	80 83       	st	Z, r24
    70a8:	60 1a       	sub	r6, r16
    70aa:	71 0a       	sbc	r7, r17
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    70ac:	61 14       	cp	r6, r1
    70ae:	71 04       	cpc	r7, r1
    70b0:	09 f0       	breq	.+2      	; 0x70b4 <f_write+0x3fa>
    70b2:	54 ce       	rjmp	.-856    	; 0x6d5c <f_write+0xa2>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    70b4:	ab 81       	ldd	r26, Y+3	; 0x03
    70b6:	bc 81       	ldd	r27, Y+4	; 0x04
    70b8:	16 96       	adiw	r26, 0x06	; 6
    70ba:	2d 91       	ld	r18, X+
    70bc:	3d 91       	ld	r19, X+
    70be:	4d 91       	ld	r20, X+
    70c0:	5c 91       	ld	r21, X
    70c2:	19 97       	sbiw	r26, 0x09	; 9
    70c4:	1a 96       	adiw	r26, 0x0a	; 10
    70c6:	8d 91       	ld	r24, X+
    70c8:	9d 91       	ld	r25, X+
    70ca:	0d 90       	ld	r0, X+
    70cc:	bc 91       	ld	r27, X
    70ce:	a0 2d       	mov	r26, r0
    70d0:	82 17       	cp	r24, r18
    70d2:	93 07       	cpc	r25, r19
    70d4:	a4 07       	cpc	r26, r20
    70d6:	b5 07       	cpc	r27, r21
    70d8:	30 f4       	brcc	.+12     	; 0x70e6 <f_write+0x42c>
    70da:	eb 81       	ldd	r30, Y+3	; 0x03
    70dc:	fc 81       	ldd	r31, Y+4	; 0x04
    70de:	22 87       	std	Z+10, r18	; 0x0a
    70e0:	33 87       	std	Z+11, r19	; 0x0b
    70e2:	44 87       	std	Z+12, r20	; 0x0c
    70e4:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    70e6:	ab 81       	ldd	r26, Y+3	; 0x03
    70e8:	bc 81       	ldd	r27, Y+4	; 0x04
    70ea:	14 96       	adiw	r26, 0x04	; 4
    70ec:	8c 91       	ld	r24, X
    70ee:	14 97       	sbiw	r26, 0x04	; 4
    70f0:	80 62       	ori	r24, 0x20	; 32
    70f2:	14 96       	adiw	r26, 0x04	; 4
    70f4:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    70f6:	88 2d       	mov	r24, r8
    70f8:	0f 90       	pop	r0
    70fa:	0f 90       	pop	r0
    70fc:	0f 90       	pop	r0
    70fe:	0f 90       	pop	r0
    7100:	cf 91       	pop	r28
    7102:	df 91       	pop	r29
    7104:	1f 91       	pop	r17
    7106:	0f 91       	pop	r16
    7108:	ff 90       	pop	r15
    710a:	ef 90       	pop	r14
    710c:	df 90       	pop	r13
    710e:	cf 90       	pop	r12
    7110:	bf 90       	pop	r11
    7112:	af 90       	pop	r10
    7114:	9f 90       	pop	r9
    7116:	8f 90       	pop	r8
    7118:	7f 90       	pop	r7
    711a:	6f 90       	pop	r6
    711c:	5f 90       	pop	r5
    711e:	4f 90       	pop	r4
    7120:	3f 90       	pop	r3
    7122:	2f 90       	pop	r2
    7124:	08 95       	ret

00007126 <f_getfree>:
FRESULT f_getfree (
	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    7126:	3f 92       	push	r3
    7128:	4f 92       	push	r4
    712a:	5f 92       	push	r5
    712c:	6f 92       	push	r6
    712e:	7f 92       	push	r7
    7130:	8f 92       	push	r8
    7132:	9f 92       	push	r9
    7134:	af 92       	push	r10
    7136:	bf 92       	push	r11
    7138:	cf 92       	push	r12
    713a:	df 92       	push	r13
    713c:	ef 92       	push	r14
    713e:	ff 92       	push	r15
    7140:	0f 93       	push	r16
    7142:	1f 93       	push	r17
    7144:	df 93       	push	r29
    7146:	cf 93       	push	r28
    7148:	00 d0       	rcall	.+0      	; 0x714a <f_getfree+0x24>
    714a:	00 d0       	rcall	.+0      	; 0x714c <f_getfree+0x26>
    714c:	cd b7       	in	r28, 0x3d	; 61
    714e:	de b7       	in	r29, 0x3e	; 62
    7150:	9a 83       	std	Y+2, r25	; 0x02
    7152:	89 83       	std	Y+1, r24	; 0x01
    7154:	7c 83       	std	Y+4, r23	; 0x04
    7156:	6b 83       	std	Y+3, r22	; 0x03
    7158:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    715a:	ce 01       	movw	r24, r28
    715c:	01 96       	adiw	r24, 0x01	; 1
    715e:	ba 01       	movw	r22, r20
    7160:	40 e0       	ldi	r20, 0x00	; 0
    7162:	0e 94 3e 29 	call	0x527c	; 0x527c <chk_mounted>
    7166:	68 2f       	mov	r22, r24
	if (res == FR_OK) {
    7168:	88 23       	and	r24, r24
    716a:	09 f0       	breq	.+2      	; 0x716e <f_getfree+0x48>
    716c:	bf c0       	rjmp	.+382    	; 0x72ec <f_getfree+0x1c6>
		/* If free_clust is valid, return it without full cluster scan */
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
    716e:	d2 01       	movw	r26, r4
    7170:	ed 91       	ld	r30, X+
    7172:	fc 91       	ld	r31, X
    7174:	26 85       	ldd	r18, Z+14	; 0x0e
    7176:	37 85       	ldd	r19, Z+15	; 0x0f
    7178:	40 89       	ldd	r20, Z+16	; 0x10
    717a:	51 89       	ldd	r21, Z+17	; 0x11
    717c:	e2 8c       	ldd	r14, Z+26	; 0x1a
    717e:	f3 8c       	ldd	r15, Z+27	; 0x1b
    7180:	04 8d       	ldd	r16, Z+28	; 0x1c
    7182:	15 8d       	ldd	r17, Z+29	; 0x1d
    7184:	d8 01       	movw	r26, r16
    7186:	c7 01       	movw	r24, r14
    7188:	02 97       	sbiw	r24, 0x02	; 2
    718a:	a1 09       	sbc	r26, r1
    718c:	b1 09       	sbc	r27, r1
    718e:	82 17       	cp	r24, r18
    7190:	93 07       	cpc	r25, r19
    7192:	a4 07       	cpc	r26, r20
    7194:	b5 07       	cpc	r27, r21
    7196:	38 f0       	brcs	.+14     	; 0x71a6 <f_getfree+0x80>
			*nclst = (*fatfs)->free_clust;
    7198:	eb 81       	ldd	r30, Y+3	; 0x03
    719a:	fc 81       	ldd	r31, Y+4	; 0x04
    719c:	20 83       	st	Z, r18
    719e:	31 83       	std	Z+1, r19	; 0x01
    71a0:	42 83       	std	Z+2, r20	; 0x02
    71a2:	53 83       	std	Z+3, r21	; 0x03
    71a4:	a3 c0       	rjmp	.+326    	; 0x72ec <f_getfree+0x1c6>
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
    71a6:	30 80       	ld	r3, Z
			n = 0;
			if (fat == FS_FAT12) {
    71a8:	21 e0       	ldi	r18, 0x01	; 1
    71aa:	32 16       	cp	r3, r18
    71ac:	e1 f5       	brne	.+120    	; 0x7226 <f_getfree+0x100>
    71ae:	aa 24       	eor	r10, r10
    71b0:	bb 24       	eor	r11, r11
    71b2:	65 01       	movw	r12, r10
    71b4:	92 e0       	ldi	r25, 0x02	; 2
    71b6:	e9 2e       	mov	r14, r25
    71b8:	f1 2c       	mov	r15, r1
    71ba:	01 2d       	mov	r16, r1
    71bc:	11 2d       	mov	r17, r1
				clst = 2;
				do {
					stat = get_fat(*fatfs, clst);
    71be:	d2 01       	movw	r26, r4
    71c0:	8d 91       	ld	r24, X+
    71c2:	9c 91       	ld	r25, X
    71c4:	b8 01       	movw	r22, r16
    71c6:	a7 01       	movw	r20, r14
    71c8:	0e 94 27 2e 	call	0x5c4e	; 0x5c4e <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    71cc:	6f 3f       	cpi	r22, 0xFF	; 255
    71ce:	bf ef       	ldi	r27, 0xFF	; 255
    71d0:	7b 07       	cpc	r23, r27
    71d2:	bf ef       	ldi	r27, 0xFF	; 255
    71d4:	8b 07       	cpc	r24, r27
    71d6:	bf ef       	ldi	r27, 0xFF	; 255
    71d8:	9b 07       	cpc	r25, r27
    71da:	11 f4       	brne	.+4      	; 0x71e0 <f_getfree+0xba>
    71dc:	91 e0       	ldi	r25, 0x01	; 1
    71de:	73 c0       	rjmp	.+230    	; 0x72c6 <f_getfree+0x1a0>
					if (stat == 1) { res = FR_INT_ERR; break; }
    71e0:	61 30       	cpi	r22, 0x01	; 1
    71e2:	71 05       	cpc	r23, r1
    71e4:	81 05       	cpc	r24, r1
    71e6:	91 05       	cpc	r25, r1
    71e8:	11 f4       	brne	.+4      	; 0x71ee <f_getfree+0xc8>
    71ea:	92 e0       	ldi	r25, 0x02	; 2
    71ec:	6c c0       	rjmp	.+216    	; 0x72c6 <f_getfree+0x1a0>
					if (stat == 0) n++;
    71ee:	61 15       	cp	r22, r1
    71f0:	71 05       	cpc	r23, r1
    71f2:	81 05       	cpc	r24, r1
    71f4:	91 05       	cpc	r25, r1
    71f6:	29 f4       	brne	.+10     	; 0x7202 <f_getfree+0xdc>
    71f8:	08 94       	sec
    71fa:	a1 1c       	adc	r10, r1
    71fc:	b1 1c       	adc	r11, r1
    71fe:	c1 1c       	adc	r12, r1
    7200:	d1 1c       	adc	r13, r1
				} while (++clst < (*fatfs)->n_fatent);
    7202:	08 94       	sec
    7204:	e1 1c       	adc	r14, r1
    7206:	f1 1c       	adc	r15, r1
    7208:	01 1d       	adc	r16, r1
    720a:	11 1d       	adc	r17, r1
    720c:	d2 01       	movw	r26, r4
    720e:	ed 91       	ld	r30, X+
    7210:	fc 91       	ld	r31, X
    7212:	82 8d       	ldd	r24, Z+26	; 0x1a
    7214:	93 8d       	ldd	r25, Z+27	; 0x1b
    7216:	a4 8d       	ldd	r26, Z+28	; 0x1c
    7218:	b5 8d       	ldd	r27, Z+29	; 0x1d
    721a:	e8 16       	cp	r14, r24
    721c:	f9 06       	cpc	r15, r25
    721e:	0a 07       	cpc	r16, r26
    7220:	1b 07       	cpc	r17, r27
    7222:	68 f2       	brcs	.-102    	; 0x71be <f_getfree+0x98>
    7224:	4f c0       	rjmp	.+158    	; 0x72c4 <f_getfree+0x19e>
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
    7226:	62 a0       	ldd	r6, Z+34	; 0x22
    7228:	73 a0       	ldd	r7, Z+35	; 0x23
    722a:	84 a0       	ldd	r8, Z+36	; 0x24
    722c:	95 a0       	ldd	r9, Z+37	; 0x25
    722e:	aa 24       	eor	r10, r10
    7230:	bb 24       	eor	r11, r11
    7232:	65 01       	movw	r12, r10
    7234:	20 e0       	ldi	r18, 0x00	; 0
    7236:	30 e0       	ldi	r19, 0x00	; 0
    7238:	e0 e0       	ldi	r30, 0x00	; 0
    723a:	f0 e0       	ldi	r31, 0x00	; 0
				i = 0; p = 0;
				do {
					if (!i) {
    723c:	21 15       	cp	r18, r1
    723e:	31 05       	cpc	r19, r1
    7240:	a9 f4       	brne	.+42     	; 0x726c <f_getfree+0x146>
						res = move_window(*fatfs, sect++);
    7242:	f2 01       	movw	r30, r4
    7244:	80 81       	ld	r24, Z
    7246:	91 81       	ldd	r25, Z+1	; 0x01
    7248:	b4 01       	movw	r22, r8
    724a:	a3 01       	movw	r20, r6
    724c:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    7250:	98 2f       	mov	r25, r24
						if (res != FR_OK) break;
    7252:	88 23       	and	r24, r24
    7254:	c1 f5       	brne	.+112    	; 0x72c6 <f_getfree+0x1a0>
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
    7256:	08 94       	sec
    7258:	61 1c       	adc	r6, r1
    725a:	71 1c       	adc	r7, r1
    725c:	81 1c       	adc	r8, r1
    725e:	91 1c       	adc	r9, r1
						if (res != FR_OK) break;
						p = (*fatfs)->win;
    7260:	d2 01       	movw	r26, r4
    7262:	ed 91       	ld	r30, X+
    7264:	fc 91       	ld	r31, X
    7266:	f2 96       	adiw	r30, 0x32	; 50
    7268:	20 e0       	ldi	r18, 0x00	; 0
    726a:	32 e0       	ldi	r19, 0x02	; 2
						i = SS(*fatfs);
					}
					if (fat == FS_FAT16) {
    726c:	b2 e0       	ldi	r27, 0x02	; 2
    726e:	3b 16       	cp	r3, r27
    7270:	69 f4       	brne	.+26     	; 0x728c <f_getfree+0x166>
						if (LD_WORD(p) == 0) n++;
    7272:	80 81       	ld	r24, Z
    7274:	91 81       	ldd	r25, Z+1	; 0x01
    7276:	89 2b       	or	r24, r25
    7278:	29 f4       	brne	.+10     	; 0x7284 <f_getfree+0x15e>
    727a:	08 94       	sec
    727c:	a1 1c       	adc	r10, r1
    727e:	b1 1c       	adc	r11, r1
    7280:	c1 1c       	adc	r12, r1
    7282:	d1 1c       	adc	r13, r1
						p += 2; i -= 2;
    7284:	32 96       	adiw	r30, 0x02	; 2
    7286:	22 50       	subi	r18, 0x02	; 2
    7288:	30 40       	sbci	r19, 0x00	; 0
    728a:	11 c0       	rjmp	.+34     	; 0x72ae <f_getfree+0x188>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    728c:	80 81       	ld	r24, Z
    728e:	91 81       	ldd	r25, Z+1	; 0x01
    7290:	a2 81       	ldd	r26, Z+2	; 0x02
    7292:	b3 81       	ldd	r27, Z+3	; 0x03
    7294:	bf 70       	andi	r27, 0x0F	; 15
    7296:	00 97       	sbiw	r24, 0x00	; 0
    7298:	a1 05       	cpc	r26, r1
    729a:	b1 05       	cpc	r27, r1
    729c:	29 f4       	brne	.+10     	; 0x72a8 <f_getfree+0x182>
    729e:	08 94       	sec
    72a0:	a1 1c       	adc	r10, r1
    72a2:	b1 1c       	adc	r11, r1
    72a4:	c1 1c       	adc	r12, r1
    72a6:	d1 1c       	adc	r13, r1
						p += 4; i -= 4;
    72a8:	34 96       	adiw	r30, 0x04	; 4
    72aa:	24 50       	subi	r18, 0x04	; 4
    72ac:	30 40       	sbci	r19, 0x00	; 0
					}
				} while (--clst);
    72ae:	08 94       	sec
    72b0:	e1 08       	sbc	r14, r1
    72b2:	f1 08       	sbc	r15, r1
    72b4:	01 09       	sbc	r16, r1
    72b6:	11 09       	sbc	r17, r1
    72b8:	e1 14       	cp	r14, r1
    72ba:	f1 04       	cpc	r15, r1
    72bc:	01 05       	cpc	r16, r1
    72be:	11 05       	cpc	r17, r1
    72c0:	09 f0       	breq	.+2      	; 0x72c4 <f_getfree+0x19e>
    72c2:	bc cf       	rjmp	.-136    	; 0x723c <f_getfree+0x116>
    72c4:	90 e0       	ldi	r25, 0x00	; 0
			}
			(*fatfs)->free_clust = n;
    72c6:	d2 01       	movw	r26, r4
    72c8:	ed 91       	ld	r30, X+
    72ca:	fc 91       	ld	r31, X
    72cc:	a6 86       	std	Z+14, r10	; 0x0e
    72ce:	b7 86       	std	Z+15, r11	; 0x0f
    72d0:	c0 8a       	std	Z+16, r12	; 0x10
    72d2:	d1 8a       	std	Z+17, r13	; 0x11
			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    72d4:	b3 e0       	ldi	r27, 0x03	; 3
    72d6:	3b 16       	cp	r3, r27
    72d8:	11 f4       	brne	.+4      	; 0x72de <f_getfree+0x1b8>
    72da:	81 e0       	ldi	r24, 0x01	; 1
    72dc:	85 83       	std	Z+5, r24	; 0x05
			*nclst = n;
    72de:	eb 81       	ldd	r30, Y+3	; 0x03
    72e0:	fc 81       	ldd	r31, Y+4	; 0x04
    72e2:	a0 82       	st	Z, r10
    72e4:	b1 82       	std	Z+1, r11	; 0x01
    72e6:	c2 82       	std	Z+2, r12	; 0x02
    72e8:	d3 82       	std	Z+3, r13	; 0x03
    72ea:	69 2f       	mov	r22, r25
		}
	}
	LEAVE_FF(*fatfs, res);
}
    72ec:	86 2f       	mov	r24, r22
    72ee:	0f 90       	pop	r0
    72f0:	0f 90       	pop	r0
    72f2:	0f 90       	pop	r0
    72f4:	0f 90       	pop	r0
    72f6:	cf 91       	pop	r28
    72f8:	df 91       	pop	r29
    72fa:	1f 91       	pop	r17
    72fc:	0f 91       	pop	r16
    72fe:	ff 90       	pop	r15
    7300:	ef 90       	pop	r14
    7302:	df 90       	pop	r13
    7304:	cf 90       	pop	r12
    7306:	bf 90       	pop	r11
    7308:	af 90       	pop	r10
    730a:	9f 90       	pop	r9
    730c:	8f 90       	pop	r8
    730e:	7f 90       	pop	r7
    7310:	6f 90       	pop	r6
    7312:	5f 90       	pop	r5
    7314:	4f 90       	pop	r4
    7316:	3f 90       	pop	r3
    7318:	08 95       	ret

0000731a <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    731a:	3f 92       	push	r3
    731c:	4f 92       	push	r4
    731e:	5f 92       	push	r5
    7320:	6f 92       	push	r6
    7322:	7f 92       	push	r7
    7324:	8f 92       	push	r8
    7326:	9f 92       	push	r9
    7328:	af 92       	push	r10
    732a:	bf 92       	push	r11
    732c:	cf 92       	push	r12
    732e:	df 92       	push	r13
    7330:	ef 92       	push	r14
    7332:	ff 92       	push	r15
    7334:	0f 93       	push	r16
    7336:	1f 93       	push	r17
    7338:	df 93       	push	r29
    733a:	cf 93       	push	r28
    733c:	00 d0       	rcall	.+0      	; 0x733e <f_read+0x24>
    733e:	00 d0       	rcall	.+0      	; 0x7340 <f_read+0x26>
    7340:	cd b7       	in	r28, 0x3d	; 61
    7342:	de b7       	in	r29, 0x3e	; 62
    7344:	9c 83       	std	Y+4, r25	; 0x04
    7346:	8b 83       	std	Y+3, r24	; 0x03
    7348:	16 2f       	mov	r17, r22
    734a:	07 2f       	mov	r16, r23
    734c:	3a 01       	movw	r6, r20
    734e:	3a 83       	std	Y+2, r19	; 0x02
    7350:	29 83       	std	Y+1, r18	; 0x01
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    7352:	d9 01       	movw	r26, r18
    7354:	1d 92       	st	X+, r1
    7356:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);				/* Check validity */
    7358:	fc 01       	movw	r30, r24
    735a:	62 81       	ldd	r22, Z+2	; 0x02
    735c:	73 81       	ldd	r23, Z+3	; 0x03
    735e:	80 81       	ld	r24, Z
    7360:	91 81       	ldd	r25, Z+1	; 0x01
    7362:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <validate>
    7366:	88 2e       	mov	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    7368:	88 23       	and	r24, r24
    736a:	09 f0       	breq	.+2      	; 0x736e <f_read+0x54>
    736c:	71 c1       	rjmp	.+738    	; 0x7650 <f_read+0x336>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    736e:	ab 81       	ldd	r26, Y+3	; 0x03
    7370:	bc 81       	ldd	r27, Y+4	; 0x04
    7372:	14 96       	adiw	r26, 0x04	; 4
    7374:	8c 91       	ld	r24, X
    7376:	87 fd       	sbrc	r24, 7
    7378:	65 c0       	rjmp	.+202    	; 0x7444 <f_read+0x12a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    737a:	80 fd       	sbrc	r24, 0
    737c:	03 c0       	rjmp	.+6      	; 0x7384 <f_read+0x6a>
    737e:	07 e0       	ldi	r16, 0x07	; 7
    7380:	80 2e       	mov	r8, r16
    7382:	66 c1       	rjmp	.+716    	; 0x7650 <f_read+0x336>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    7384:	eb 81       	ldd	r30, Y+3	; 0x03
    7386:	fc 81       	ldd	r31, Y+4	; 0x04
    7388:	22 85       	ldd	r18, Z+10	; 0x0a
    738a:	33 85       	ldd	r19, Z+11	; 0x0b
    738c:	44 85       	ldd	r20, Z+12	; 0x0c
    738e:	55 85       	ldd	r21, Z+13	; 0x0d
    7390:	86 81       	ldd	r24, Z+6	; 0x06
    7392:	97 81       	ldd	r25, Z+7	; 0x07
    7394:	a0 85       	ldd	r26, Z+8	; 0x08
    7396:	b1 85       	ldd	r27, Z+9	; 0x09
    7398:	28 1b       	sub	r18, r24
    739a:	39 0b       	sbc	r19, r25
    739c:	4a 0b       	sbc	r20, r26
    739e:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    73a0:	c3 01       	movw	r24, r6
    73a2:	a0 e0       	ldi	r26, 0x00	; 0
    73a4:	b0 e0       	ldi	r27, 0x00	; 0
    73a6:	28 17       	cp	r18, r24
    73a8:	39 07       	cpc	r19, r25
    73aa:	4a 07       	cpc	r20, r26
    73ac:	5b 07       	cpc	r21, r27
    73ae:	08 f4       	brcc	.+2      	; 0x73b2 <f_read+0x98>
    73b0:	39 01       	movw	r6, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    73b2:	81 2f       	mov	r24, r17
    73b4:	90 2f       	mov	r25, r16
    73b6:	9c 01       	movw	r18, r24
    73b8:	29 01       	movw	r4, r18
    73ba:	46 c1       	rjmp	.+652    	; 0x7648 <f_read+0x32e>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    73bc:	ab 81       	ldd	r26, Y+3	; 0x03
    73be:	bc 81       	ldd	r27, Y+4	; 0x04
    73c0:	16 96       	adiw	r26, 0x06	; 6
    73c2:	2d 91       	ld	r18, X+
    73c4:	3d 91       	ld	r19, X+
    73c6:	4d 91       	ld	r20, X+
    73c8:	5c 91       	ld	r21, X
    73ca:	19 97       	sbiw	r26, 0x09	; 9
    73cc:	da 01       	movw	r26, r20
    73ce:	c9 01       	movw	r24, r18
    73d0:	91 70       	andi	r25, 0x01	; 1
    73d2:	a0 70       	andi	r26, 0x00	; 0
    73d4:	b0 70       	andi	r27, 0x00	; 0
    73d6:	00 97       	sbiw	r24, 0x00	; 0
    73d8:	a1 05       	cpc	r26, r1
    73da:	b1 05       	cpc	r27, r1
    73dc:	09 f0       	breq	.+2      	; 0x73e0 <f_read+0xc6>
    73de:	e0 c0       	rjmp	.+448    	; 0x75a0 <f_read+0x286>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    73e0:	ab 81       	ldd	r26, Y+3	; 0x03
    73e2:	bc 81       	ldd	r27, Y+4	; 0x04
    73e4:	ed 91       	ld	r30, X+
    73e6:	fc 91       	ld	r31, X
    73e8:	da 01       	movw	r26, r20
    73ea:	c9 01       	movw	r24, r18
    73ec:	19 e0       	ldi	r17, 0x09	; 9
    73ee:	b6 95       	lsr	r27
    73f0:	a7 95       	ror	r26
    73f2:	97 95       	ror	r25
    73f4:	87 95       	ror	r24
    73f6:	1a 95       	dec	r17
    73f8:	d1 f7       	brne	.-12     	; 0x73ee <f_read+0xd4>
    73fa:	92 80       	ldd	r9, Z+2	; 0x02
    73fc:	9a 94       	dec	r9
    73fe:	98 22       	and	r9, r24
			if (!csect) {						/* On the cluster boundary? */
    7400:	99 f5       	brne	.+102    	; 0x7468 <f_read+0x14e>
				if (fp->fptr == 0) {			/* On the top of the file? */
    7402:	21 15       	cp	r18, r1
    7404:	31 05       	cpc	r19, r1
    7406:	41 05       	cpc	r20, r1
    7408:	51 05       	cpc	r21, r1
    740a:	39 f4       	brne	.+14     	; 0x741a <f_read+0x100>
					clst = fp->sclust;			/* Follow from the origin */
    740c:	eb 81       	ldd	r30, Y+3	; 0x03
    740e:	fc 81       	ldd	r31, Y+4	; 0x04
    7410:	66 85       	ldd	r22, Z+14	; 0x0e
    7412:	77 85       	ldd	r23, Z+15	; 0x0f
    7414:	80 89       	ldd	r24, Z+16	; 0x10
    7416:	91 89       	ldd	r25, Z+17	; 0x11
    7418:	0b c0       	rjmp	.+22     	; 0x7430 <f_read+0x116>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    741a:	ab 81       	ldd	r26, Y+3	; 0x03
    741c:	bc 81       	ldd	r27, Y+4	; 0x04
    741e:	52 96       	adiw	r26, 0x12	; 18
    7420:	4d 91       	ld	r20, X+
    7422:	5d 91       	ld	r21, X+
    7424:	6d 91       	ld	r22, X+
    7426:	7c 91       	ld	r23, X
    7428:	55 97       	sbiw	r26, 0x15	; 21
    742a:	cf 01       	movw	r24, r30
    742c:	0e 94 27 2e 	call	0x5c4e	; 0x5c4e <get_fat>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    7430:	62 30       	cpi	r22, 0x02	; 2
    7432:	71 05       	cpc	r23, r1
    7434:	81 05       	cpc	r24, r1
    7436:	91 05       	cpc	r25, r1
    7438:	40 f4       	brcc	.+16     	; 0x744a <f_read+0x130>
    743a:	eb 81       	ldd	r30, Y+3	; 0x03
    743c:	fc 81       	ldd	r31, Y+4	; 0x04
    743e:	84 81       	ldd	r24, Z+4	; 0x04
    7440:	80 68       	ori	r24, 0x80	; 128
    7442:	84 83       	std	Z+4, r24	; 0x04
    7444:	e2 e0       	ldi	r30, 0x02	; 2
    7446:	8e 2e       	mov	r8, r30
    7448:	03 c1       	rjmp	.+518    	; 0x7650 <f_read+0x336>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    744a:	6f 3f       	cpi	r22, 0xFF	; 255
    744c:	ff ef       	ldi	r31, 0xFF	; 255
    744e:	7f 07       	cpc	r23, r31
    7450:	ff ef       	ldi	r31, 0xFF	; 255
    7452:	8f 07       	cpc	r24, r31
    7454:	ff ef       	ldi	r31, 0xFF	; 255
    7456:	9f 07       	cpc	r25, r31
    7458:	09 f4       	brne	.+2      	; 0x745c <f_read+0x142>
    745a:	67 c0       	rjmp	.+206    	; 0x752a <f_read+0x210>
				fp->clust = clst;				/* Update current cluster */
    745c:	eb 81       	ldd	r30, Y+3	; 0x03
    745e:	fc 81       	ldd	r31, Y+4	; 0x04
    7460:	62 8b       	std	Z+18, r22	; 0x12
    7462:	73 8b       	std	Z+19, r23	; 0x13
    7464:	84 8b       	std	Z+20, r24	; 0x14
    7466:	95 8b       	std	Z+21, r25	; 0x15
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    7468:	ab 81       	ldd	r26, Y+3	; 0x03
    746a:	bc 81       	ldd	r27, Y+4	; 0x04
    746c:	0d 91       	ld	r16, X+
    746e:	1c 91       	ld	r17, X
    7470:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    7472:	52 96       	adiw	r26, 0x12	; 18
    7474:	2d 91       	ld	r18, X+
    7476:	3d 91       	ld	r19, X+
    7478:	4d 91       	ld	r20, X+
    747a:	5c 91       	ld	r21, X
    747c:	55 97       	sbiw	r26, 0x15	; 21
    747e:	22 50       	subi	r18, 0x02	; 2
    7480:	30 40       	sbci	r19, 0x00	; 0
    7482:	40 40       	sbci	r20, 0x00	; 0
    7484:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    7486:	f8 01       	movw	r30, r16
    7488:	82 8d       	ldd	r24, Z+26	; 0x1a
    748a:	93 8d       	ldd	r25, Z+27	; 0x1b
    748c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    748e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    7490:	02 97       	sbiw	r24, 0x02	; 2
    7492:	a1 09       	sbc	r26, r1
    7494:	b1 09       	sbc	r27, r1
    7496:	28 17       	cp	r18, r24
    7498:	39 07       	cpc	r19, r25
    749a:	4a 07       	cpc	r20, r26
    749c:	5b 07       	cpc	r21, r27
    749e:	b8 f4       	brcc	.+46     	; 0x74ce <f_read+0x1b4>
	return clst * fs->csize + fs->database;
    74a0:	32 80       	ldd	r3, Z+2	; 0x02
    74a2:	63 2d       	mov	r22, r3
    74a4:	70 e0       	ldi	r23, 0x00	; 0
    74a6:	80 e0       	ldi	r24, 0x00	; 0
    74a8:	90 e0       	ldi	r25, 0x00	; 0
    74aa:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__mulsi3>
    74ae:	9b 01       	movw	r18, r22
    74b0:	ac 01       	movw	r20, r24
    74b2:	f8 01       	movw	r30, r16
    74b4:	82 a5       	ldd	r24, Z+42	; 0x2a
    74b6:	93 a5       	ldd	r25, Z+43	; 0x2b
    74b8:	a4 a5       	ldd	r26, Z+44	; 0x2c
    74ba:	b5 a5       	ldd	r27, Z+45	; 0x2d
    74bc:	28 0f       	add	r18, r24
    74be:	39 1f       	adc	r19, r25
    74c0:	4a 1f       	adc	r20, r26
    74c2:	5b 1f       	adc	r21, r27
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    74c4:	21 15       	cp	r18, r1
    74c6:	31 05       	cpc	r19, r1
    74c8:	41 05       	cpc	r20, r1
    74ca:	51 05       	cpc	r21, r1
    74cc:	49 f4       	brne	.+18     	; 0x74e0 <f_read+0x1c6>
    74ce:	ab 81       	ldd	r26, Y+3	; 0x03
    74d0:	bc 81       	ldd	r27, Y+4	; 0x04
    74d2:	14 96       	adiw	r26, 0x04	; 4
    74d4:	8c 91       	ld	r24, X
    74d6:	14 97       	sbiw	r26, 0x04	; 4
    74d8:	80 68       	ori	r24, 0x80	; 128
    74da:	14 96       	adiw	r26, 0x04	; 4
    74dc:	8c 93       	st	X, r24
    74de:	b2 cf       	rjmp	.-156    	; 0x7444 <f_read+0x12a>
			sect += csect;
    74e0:	69 01       	movw	r12, r18
    74e2:	7a 01       	movw	r14, r20
    74e4:	c9 0c       	add	r12, r9
    74e6:	d1 1c       	adc	r13, r1
    74e8:	e1 1c       	adc	r14, r1
    74ea:	f1 1c       	adc	r15, r1
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    74ec:	53 01       	movw	r10, r6
    74ee:	ab 2c       	mov	r10, r11
    74f0:	bb 24       	eor	r11, r11
    74f2:	a6 94       	lsr	r10
			if (cc) {							/* Read maximum contiguous sectors directly */
    74f4:	a1 14       	cp	r10, r1
    74f6:	b1 04       	cpc	r11, r1
    74f8:	09 f4       	brne	.+2      	; 0x74fc <f_read+0x1e2>
    74fa:	4c c0       	rjmp	.+152    	; 0x7594 <f_read+0x27a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    74fc:	29 2d       	mov	r18, r9
    74fe:	30 e0       	ldi	r19, 0x00	; 0
    7500:	c5 01       	movw	r24, r10
    7502:	82 0f       	add	r24, r18
    7504:	93 1f       	adc	r25, r19
    7506:	63 2d       	mov	r22, r3
    7508:	70 e0       	ldi	r23, 0x00	; 0
    750a:	68 17       	cp	r22, r24
    750c:	79 07       	cpc	r23, r25
    750e:	18 f4       	brcc	.+6      	; 0x7516 <f_read+0x1fc>
					cc = fp->fs->csize - csect;
    7510:	5b 01       	movw	r10, r22
    7512:	a2 1a       	sub	r10, r18
    7514:	b3 0a       	sbc	r11, r19
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    7516:	f8 01       	movw	r30, r16
    7518:	81 81       	ldd	r24, Z+1	; 0x01
    751a:	b2 01       	movw	r22, r4
    751c:	a7 01       	movw	r20, r14
    751e:	96 01       	movw	r18, r12
    7520:	0a 2d       	mov	r16, r10
    7522:	0e 94 15 58 	call	0xb02a	; 0xb02a <disk_read>
    7526:	88 23       	and	r24, r24
    7528:	49 f0       	breq	.+18     	; 0x753c <f_read+0x222>
					ABORT(fp->fs, FR_DISK_ERR);
    752a:	ab 81       	ldd	r26, Y+3	; 0x03
    752c:	bc 81       	ldd	r27, Y+4	; 0x04
    752e:	14 96       	adiw	r26, 0x04	; 4
    7530:	8c 91       	ld	r24, X
    7532:	14 97       	sbiw	r26, 0x04	; 4
    7534:	80 68       	ori	r24, 0x80	; 128
    7536:	14 96       	adiw	r26, 0x04	; 4
    7538:	8c 93       	st	X, r24
    753a:	4b c0       	rjmp	.+150    	; 0x75d2 <f_read+0x2b8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    753c:	ab 81       	ldd	r26, Y+3	; 0x03
    753e:	bc 81       	ldd	r27, Y+4	; 0x04
    7540:	ed 91       	ld	r30, X+
    7542:	fc 91       	ld	r31, X
    7544:	84 81       	ldd	r24, Z+4	; 0x04
    7546:	88 23       	and	r24, r24
    7548:	01 f1       	breq	.+64     	; 0x758a <f_read+0x270>
    754a:	26 a5       	ldd	r18, Z+46	; 0x2e
    754c:	37 a5       	ldd	r19, Z+47	; 0x2f
    754e:	40 a9       	ldd	r20, Z+48	; 0x30
    7550:	51 a9       	ldd	r21, Z+49	; 0x31
    7552:	2c 19       	sub	r18, r12
    7554:	3d 09       	sbc	r19, r13
    7556:	4e 09       	sbc	r20, r14
    7558:	5f 09       	sbc	r21, r15
    755a:	c5 01       	movw	r24, r10
    755c:	a0 e0       	ldi	r26, 0x00	; 0
    755e:	b0 e0       	ldi	r27, 0x00	; 0
    7560:	28 17       	cp	r18, r24
    7562:	39 07       	cpc	r19, r25
    7564:	4a 07       	cpc	r20, r26
    7566:	5b 07       	cpc	r21, r27
    7568:	80 f4       	brcc	.+32     	; 0x758a <f_read+0x270>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    756a:	69 e0       	ldi	r22, 0x09	; 9
    756c:	22 0f       	add	r18, r18
    756e:	33 1f       	adc	r19, r19
    7570:	44 1f       	adc	r20, r20
    7572:	55 1f       	adc	r21, r21
    7574:	6a 95       	dec	r22
    7576:	d1 f7       	brne	.-12     	; 0x756c <f_read+0x252>
    7578:	c2 01       	movw	r24, r4
    757a:	82 0f       	add	r24, r18
    757c:	93 1f       	adc	r25, r19
    757e:	f2 96       	adiw	r30, 0x32	; 50
    7580:	bf 01       	movw	r22, r30
    7582:	40 e0       	ldi	r20, 0x00	; 0
    7584:	52 e0       	ldi	r21, 0x02	; 2
    7586:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    758a:	85 01       	movw	r16, r10
    758c:	10 2f       	mov	r17, r16
    758e:	00 27       	eor	r16, r16
    7590:	11 0f       	add	r17, r17
    7592:	3d c0       	rjmp	.+122    	; 0x760e <f_read+0x2f4>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    7594:	eb 81       	ldd	r30, Y+3	; 0x03
    7596:	fc 81       	ldd	r31, Y+4	; 0x04
    7598:	c6 8a       	std	Z+22, r12	; 0x16
    759a:	d7 8a       	std	Z+23, r13	; 0x17
    759c:	e0 8e       	std	Z+24, r14	; 0x18
    759e:	f1 8e       	std	Z+25, r15	; 0x19
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    75a0:	ab 81       	ldd	r26, Y+3	; 0x03
    75a2:	bc 81       	ldd	r27, Y+4	; 0x04
    75a4:	16 96       	adiw	r26, 0x06	; 6
    75a6:	ed 90       	ld	r14, X+
    75a8:	fd 90       	ld	r15, X+
    75aa:	0d 91       	ld	r16, X+
    75ac:	1c 91       	ld	r17, X
    75ae:	19 97       	sbiw	r26, 0x09	; 9
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    75b0:	56 96       	adiw	r26, 0x16	; 22
    75b2:	4d 91       	ld	r20, X+
    75b4:	5d 91       	ld	r21, X+
    75b6:	6d 91       	ld	r22, X+
    75b8:	7c 91       	ld	r23, X
    75ba:	59 97       	sbiw	r26, 0x19	; 25
    75bc:	8d 91       	ld	r24, X+
    75be:	9c 91       	ld	r25, X
    75c0:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    75c4:	88 23       	and	r24, r24
    75c6:	41 f0       	breq	.+16     	; 0x75d8 <f_read+0x2be>
			ABORT(fp->fs, FR_DISK_ERR);
    75c8:	eb 81       	ldd	r30, Y+3	; 0x03
    75ca:	fc 81       	ldd	r31, Y+4	; 0x04
    75cc:	84 81       	ldd	r24, Z+4	; 0x04
    75ce:	80 68       	ori	r24, 0x80	; 128
    75d0:	84 83       	std	Z+4, r24	; 0x04
    75d2:	88 24       	eor	r8, r8
    75d4:	83 94       	inc	r8
    75d6:	3c c0       	rjmp	.+120    	; 0x7650 <f_read+0x336>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    75d8:	c7 01       	movw	r24, r14
    75da:	91 70       	andi	r25, 0x01	; 1
    75dc:	20 e0       	ldi	r18, 0x00	; 0
    75de:	32 e0       	ldi	r19, 0x02	; 2
    75e0:	28 1b       	sub	r18, r24
    75e2:	39 0b       	sbc	r19, r25
    75e4:	83 01       	movw	r16, r6
    75e6:	26 15       	cp	r18, r6
    75e8:	37 05       	cpc	r19, r7
    75ea:	08 f4       	brcc	.+2      	; 0x75ee <f_read+0x2d4>
    75ec:	89 01       	movw	r16, r18
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    75ee:	ab 81       	ldd	r26, Y+3	; 0x03
    75f0:	bc 81       	ldd	r27, Y+4	; 0x04
    75f2:	16 96       	adiw	r26, 0x06	; 6
    75f4:	8d 91       	ld	r24, X+
    75f6:	9c 91       	ld	r25, X
    75f8:	17 97       	sbiw	r26, 0x07	; 7
    75fa:	91 70       	andi	r25, 0x01	; 1
    75fc:	c2 96       	adiw	r24, 0x32	; 50
    75fe:	6d 91       	ld	r22, X+
    7600:	7c 91       	ld	r23, X
    7602:	68 0f       	add	r22, r24
    7604:	79 1f       	adc	r23, r25
    7606:	c2 01       	movw	r24, r4
    7608:	a8 01       	movw	r20, r16
    760a:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    760e:	40 0e       	add	r4, r16
    7610:	51 1e       	adc	r5, r17
    7612:	c8 01       	movw	r24, r16
    7614:	a0 e0       	ldi	r26, 0x00	; 0
    7616:	b0 e0       	ldi	r27, 0x00	; 0
    7618:	eb 81       	ldd	r30, Y+3	; 0x03
    761a:	fc 81       	ldd	r31, Y+4	; 0x04
    761c:	26 81       	ldd	r18, Z+6	; 0x06
    761e:	37 81       	ldd	r19, Z+7	; 0x07
    7620:	40 85       	ldd	r20, Z+8	; 0x08
    7622:	51 85       	ldd	r21, Z+9	; 0x09
    7624:	28 0f       	add	r18, r24
    7626:	39 1f       	adc	r19, r25
    7628:	4a 1f       	adc	r20, r26
    762a:	5b 1f       	adc	r21, r27
    762c:	26 83       	std	Z+6, r18	; 0x06
    762e:	37 83       	std	Z+7, r19	; 0x07
    7630:	40 87       	std	Z+8, r20	; 0x08
    7632:	51 87       	std	Z+9, r21	; 0x09
    7634:	e9 81       	ldd	r30, Y+1	; 0x01
    7636:	fa 81       	ldd	r31, Y+2	; 0x02
    7638:	80 81       	ld	r24, Z
    763a:	91 81       	ldd	r25, Z+1	; 0x01
    763c:	80 0f       	add	r24, r16
    763e:	91 1f       	adc	r25, r17
    7640:	91 83       	std	Z+1, r25	; 0x01
    7642:	80 83       	st	Z, r24
    7644:	60 1a       	sub	r6, r16
    7646:	71 0a       	sbc	r7, r17
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    7648:	61 14       	cp	r6, r1
    764a:	71 04       	cpc	r7, r1
    764c:	09 f0       	breq	.+2      	; 0x7650 <f_read+0x336>
    764e:	b6 ce       	rjmp	.-660    	; 0x73bc <f_read+0xa2>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    7650:	88 2d       	mov	r24, r8
    7652:	0f 90       	pop	r0
    7654:	0f 90       	pop	r0
    7656:	0f 90       	pop	r0
    7658:	0f 90       	pop	r0
    765a:	cf 91       	pop	r28
    765c:	df 91       	pop	r29
    765e:	1f 91       	pop	r17
    7660:	0f 91       	pop	r16
    7662:	ff 90       	pop	r15
    7664:	ef 90       	pop	r14
    7666:	df 90       	pop	r13
    7668:	cf 90       	pop	r12
    766a:	bf 90       	pop	r11
    766c:	af 90       	pop	r10
    766e:	9f 90       	pop	r9
    7670:	8f 90       	pop	r8
    7672:	7f 90       	pop	r7
    7674:	6f 90       	pop	r6
    7676:	5f 90       	pop	r5
    7678:	4f 90       	pop	r4
    767a:	3f 90       	pop	r3
    767c:	08 95       	ret

0000767e <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    767e:	cf 92       	push	r12
    7680:	df 92       	push	r13
    7682:	ef 92       	push	r14
    7684:	ff 92       	push	r15
    7686:	0f 93       	push	r16
    7688:	1f 93       	push	r17
    768a:	cf 93       	push	r28
    768c:	df 93       	push	r29
    768e:	6c 01       	movw	r12, r24
    7690:	7b 01       	movw	r14, r22
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
    7692:	eb 01       	movw	r28, r22
    7694:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
    7696:	fc 01       	movw	r30, r24
    7698:	86 85       	ldd	r24, Z+14	; 0x0e
    769a:	97 85       	ldd	r25, Z+15	; 0x0f
    769c:	a0 89       	ldd	r26, Z+16	; 0x10
    769e:	b1 89       	ldd	r27, Z+17	; 0x11
    76a0:	00 97       	sbiw	r24, 0x00	; 0
    76a2:	a1 05       	cpc	r26, r1
    76a4:	b1 05       	cpc	r27, r1
    76a6:	09 f4       	brne	.+2      	; 0x76aa <get_fileinfo+0x2c>
    76a8:	63 c0       	rjmp	.+198    	; 0x7770 <get_fileinfo+0xf2>
		dir = dj->dir;
    76aa:	22 89       	ldd	r18, Z+18	; 0x12
    76ac:	33 89       	ldd	r19, Z+19	; 0x13
		nt = dir[DIR_NTres];		/* NT flag */
    76ae:	d9 01       	movw	r26, r18
    76b0:	1c 96       	adiw	r26, 0x0c	; 12
    76b2:	9c 91       	ld	r25, X
    76b4:	40 e0       	ldi	r20, 0x00	; 0
    76b6:	50 e0       	ldi	r21, 0x00	; 0
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == NDDE) c = (TCHAR)DDE;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
    76b8:	69 2f       	mov	r22, r25
    76ba:	70 e0       	ldi	r23, 0x00	; 0
    76bc:	68 70       	andi	r22, 0x08	; 8
    76be:	70 70       	andi	r23, 0x00	; 0
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    76c0:	f9 01       	movw	r30, r18
    76c2:	e4 0f       	add	r30, r20
    76c4:	f5 1f       	adc	r31, r21
    76c6:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    76c8:	e0 32       	cpi	r30, 0x20	; 32
    76ca:	89 f0       	breq	.+34     	; 0x76ee <get_fileinfo+0x70>
			if (c == NDDE) c = (TCHAR)DDE;
    76cc:	e5 30       	cpi	r30, 0x05	; 5
    76ce:	09 f4       	brne	.+2      	; 0x76d2 <get_fileinfo+0x54>
    76d0:	e5 ee       	ldi	r30, 0xE5	; 229
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
    76d2:	61 15       	cp	r22, r1
    76d4:	71 05       	cpc	r23, r1
    76d6:	29 f0       	breq	.+10     	; 0x76e2 <get_fileinfo+0x64>
    76d8:	8e 2f       	mov	r24, r30
    76da:	81 54       	subi	r24, 0x41	; 65
    76dc:	8a 31       	cpi	r24, 0x1A	; 26
    76de:	08 f4       	brcc	.+2      	; 0x76e2 <get_fileinfo+0x64>
    76e0:	e0 5e       	subi	r30, 0xE0	; 224
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
    76e2:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    76e4:	4f 5f       	subi	r20, 0xFF	; 255
    76e6:	5f 4f       	sbci	r21, 0xFF	; 255
    76e8:	48 30       	cpi	r20, 0x08	; 8
    76ea:	51 05       	cpc	r21, r1
    76ec:	49 f7       	brne	.-46     	; 0x76c0 <get_fileinfo+0x42>
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    76ee:	f9 01       	movw	r30, r18
    76f0:	80 85       	ldd	r24, Z+8	; 0x08
    76f2:	80 32       	cpi	r24, 0x20	; 32
    76f4:	11 f4       	brne	.+4      	; 0x76fa <get_fileinfo+0x7c>
    76f6:	fe 01       	movw	r30, r28
    76f8:	1d c0       	rjmp	.+58     	; 0x7734 <get_fileinfo+0xb6>
			*p++ = '.';
    76fa:	fe 01       	movw	r30, r28
    76fc:	8e e2       	ldi	r24, 0x2E	; 46
    76fe:	81 93       	st	Z+, r24
    7700:	d9 01       	movw	r26, r18
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
    7702:	49 2f       	mov	r20, r25
    7704:	50 e0       	ldi	r21, 0x00	; 0
    7706:	40 71       	andi	r20, 0x10	; 16
    7708:	50 70       	andi	r21, 0x00	; 0
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    770a:	be 01       	movw	r22, r28
    770c:	6c 5f       	subi	r22, 0xFC	; 252
    770e:	7f 4f       	sbci	r23, 0xFF	; 255
				c = dir[i];
    7710:	18 96       	adiw	r26, 0x08	; 8
    7712:	9c 91       	ld	r25, X
    7714:	18 97       	sbiw	r26, 0x08	; 8
				if (c == ' ') break;
    7716:	90 32       	cpi	r25, 0x20	; 32
    7718:	69 f0       	breq	.+26     	; 0x7734 <get_fileinfo+0xb6>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
    771a:	41 15       	cp	r20, r1
    771c:	51 05       	cpc	r21, r1
    771e:	29 f0       	breq	.+10     	; 0x772a <get_fileinfo+0xac>
    7720:	89 2f       	mov	r24, r25
    7722:	81 54       	subi	r24, 0x41	; 65
    7724:	8a 31       	cpi	r24, 0x1A	; 26
    7726:	08 f4       	brcc	.+2      	; 0x772a <get_fileinfo+0xac>
    7728:	90 5e       	subi	r25, 0xE0	; 224
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
    772a:	91 93       	st	Z+, r25
    772c:	11 96       	adiw	r26, 0x01	; 1
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    772e:	e6 17       	cp	r30, r22
    7730:	f7 07       	cpc	r31, r23
    7732:	71 f7       	brne	.-36     	; 0x7710 <get_fileinfo+0x92>
				if (!c) c = '?';
#endif
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    7734:	d9 01       	movw	r26, r18
    7736:	1b 96       	adiw	r26, 0x0b	; 11
    7738:	8c 91       	ld	r24, X
    773a:	1b 97       	sbiw	r26, 0x0b	; 11
    773c:	e7 01       	movw	r28, r14
    773e:	88 87       	std	Y+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    7740:	5c 96       	adiw	r26, 0x1c	; 28
    7742:	8d 91       	ld	r24, X+
    7744:	9d 91       	ld	r25, X+
    7746:	0d 90       	ld	r0, X+
    7748:	bc 91       	ld	r27, X
    774a:	a0 2d       	mov	r26, r0
    774c:	88 83       	st	Y, r24
    774e:	99 83       	std	Y+1, r25	; 0x01
    7750:	aa 83       	std	Y+2, r26	; 0x02
    7752:	bb 83       	std	Y+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    7754:	d9 01       	movw	r26, r18
    7756:	58 96       	adiw	r26, 0x18	; 24
    7758:	8d 91       	ld	r24, X+
    775a:	9c 91       	ld	r25, X
    775c:	59 97       	sbiw	r26, 0x19	; 25
    775e:	9d 83       	std	Y+5, r25	; 0x05
    7760:	8c 83       	std	Y+4, r24	; 0x04
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    7762:	56 96       	adiw	r26, 0x16	; 22
    7764:	8d 91       	ld	r24, X+
    7766:	9c 91       	ld	r25, X
    7768:	57 97       	sbiw	r26, 0x17	; 23
    776a:	9f 83       	std	Y+7, r25	; 0x07
    776c:	8e 83       	std	Y+6, r24	; 0x06
    776e:	ef 01       	movw	r28, r30
	}
	*p = 0;		/* Terminate SFN str by a \0 */
    7770:	18 82       	st	Y, r1

#if _USE_LFN
	if (fno->lfname && fno->lfsize) {
    7772:	e7 01       	movw	r28, r14
    7774:	0e 89       	ldd	r16, Y+22	; 0x16
    7776:	1f 89       	ldd	r17, Y+23	; 0x17
    7778:	01 15       	cp	r16, r1
    777a:	11 05       	cpc	r17, r1
    777c:	09 f4       	brne	.+2      	; 0x7780 <get_fileinfo+0x102>
    777e:	44 c0       	rjmp	.+136    	; 0x7808 <get_fileinfo+0x18a>
    7780:	88 8d       	ldd	r24, Y+24	; 0x18
    7782:	99 8d       	ldd	r25, Y+25	; 0x19
    7784:	89 2b       	or	r24, r25
    7786:	09 f4       	brne	.+2      	; 0x778a <get_fileinfo+0x10c>
    7788:	3f c0       	rjmp	.+126    	; 0x7808 <get_fileinfo+0x18a>
		TCHAR *tp = fno->lfname;
		WCHAR w, *lfn;

		i = 0;
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
    778a:	f6 01       	movw	r30, r12
    778c:	86 85       	ldd	r24, Z+14	; 0x0e
    778e:	97 85       	ldd	r25, Z+15	; 0x0f
    7790:	a0 89       	ldd	r26, Z+16	; 0x10
    7792:	b1 89       	ldd	r27, Z+17	; 0x11
    7794:	00 97       	sbiw	r24, 0x00	; 0
    7796:	a1 05       	cpc	r26, r1
    7798:	b1 05       	cpc	r27, r1
    779a:	81 f1       	breq	.+96     	; 0x77fc <get_fileinfo+0x17e>
    779c:	80 8d       	ldd	r24, Z+24	; 0x18
    779e:	91 8d       	ldd	r25, Z+25	; 0x19
    77a0:	8f 5f       	subi	r24, 0xFF	; 255
    77a2:	9f 4f       	sbci	r25, 0xFF	; 255
    77a4:	59 f1       	breq	.+86     	; 0x77fc <get_fileinfo+0x17e>
			lfn = dj->lfn;
    77a6:	d6 01       	movw	r26, r12
    77a8:	56 96       	adiw	r26, 0x16	; 22
    77aa:	cd 90       	ld	r12, X+
    77ac:	dc 90       	ld	r13, X
    77ae:	57 97       	sbiw	r26, 0x17	; 23
    77b0:	c0 e0       	ldi	r28, 0x00	; 0
    77b2:	d0 e0       	ldi	r29, 0x00	; 0
    77b4:	1c c0       	rjmp	.+56     	; 0x77ee <get_fileinfo+0x170>
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
#if !_LFN_UNICODE
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
    77b6:	60 e0       	ldi	r22, 0x00	; 0
    77b8:	70 e0       	ldi	r23, 0x00	; 0
    77ba:	0e 94 63 5b 	call	0xb6c6	; 0xb6c6 <ff_convert>
    77be:	9c 01       	movw	r18, r24
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
    77c0:	00 97       	sbiw	r24, 0x00	; 0
    77c2:	e1 f0       	breq	.+56     	; 0x77fc <get_fileinfo+0x17e>
				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
    77c4:	8f 3f       	cpi	r24, 0xFF	; 255
    77c6:	91 05       	cpc	r25, r1
    77c8:	31 f0       	breq	.+12     	; 0x77d6 <get_fileinfo+0x158>
    77ca:	28 f0       	brcs	.+10     	; 0x77d6 <get_fileinfo+0x158>
					tp[i++] = (TCHAR)(w >> 8);
    77cc:	f8 01       	movw	r30, r16
    77ce:	ec 0f       	add	r30, r28
    77d0:	fd 1f       	adc	r31, r29
    77d2:	30 83       	st	Z, r19
    77d4:	21 96       	adiw	r28, 0x01	; 1
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
    77d6:	f7 01       	movw	r30, r14
    77d8:	80 8d       	ldd	r24, Z+24	; 0x18
    77da:	91 8d       	ldd	r25, Z+25	; 0x19
    77dc:	01 97       	sbiw	r24, 0x01	; 1
    77de:	c8 17       	cp	r28, r24
    77e0:	d9 07       	cpc	r29, r25
    77e2:	60 f4       	brcc	.+24     	; 0x77fc <get_fileinfo+0x17e>
				tp[i++] = (TCHAR)w;
    77e4:	f8 01       	movw	r30, r16
    77e6:	ec 0f       	add	r30, r28
    77e8:	fd 1f       	adc	r31, r29
    77ea:	20 83       	st	Z, r18
    77ec:	21 96       	adiw	r28, 0x01	; 1
		WCHAR w, *lfn;

		i = 0;
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
			lfn = dj->lfn;
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
    77ee:	d6 01       	movw	r26, r12
    77f0:	8d 91       	ld	r24, X+
    77f2:	9d 91       	ld	r25, X+
    77f4:	6d 01       	movw	r12, r26
    77f6:	00 97       	sbiw	r24, 0x00	; 0
    77f8:	f1 f6       	brne	.-68     	; 0x77b6 <get_fileinfo+0x138>
    77fa:	02 c0       	rjmp	.+4      	; 0x7800 <get_fileinfo+0x182>
    77fc:	c0 e0       	ldi	r28, 0x00	; 0
    77fe:	d0 e0       	ldi	r29, 0x00	; 0
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
				tp[i++] = (TCHAR)w;
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
    7800:	0c 0f       	add	r16, r28
    7802:	1d 1f       	adc	r17, r29
    7804:	e8 01       	movw	r28, r16
    7806:	18 82       	st	Y, r1
	}
#endif
}
    7808:	df 91       	pop	r29
    780a:	cf 91       	pop	r28
    780c:	1f 91       	pop	r17
    780e:	0f 91       	pop	r16
    7810:	ff 90       	pop	r15
    7812:	ef 90       	pop	r14
    7814:	df 90       	pop	r13
    7816:	cf 90       	pop	r12
    7818:	08 95       	ret

0000781a <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    781a:	ef 92       	push	r14
    781c:	ff 92       	push	r15
    781e:	0f 93       	push	r16
    7820:	1f 93       	push	r17
    7822:	df 93       	push	r29
    7824:	cf 93       	push	r28
    7826:	cd b7       	in	r28, 0x3d	; 61
    7828:	de b7       	in	r29, 0x3e	; 62
    782a:	2c 97       	sbiw	r28, 0x0c	; 12
    782c:	0f b6       	in	r0, 0x3f	; 63
    782e:	f8 94       	cli
    7830:	de bf       	out	0x3e, r29	; 62
    7832:	0f be       	out	0x3f, r0	; 63
    7834:	cd bf       	out	0x3d, r28	; 61
    7836:	8c 01       	movw	r16, r24
    7838:	7b 01       	movw	r14, r22
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    783a:	fc 01       	movw	r30, r24
    783c:	62 81       	ldd	r22, Z+2	; 0x02
    783e:	73 81       	ldd	r23, Z+3	; 0x03
    7840:	80 81       	ld	r24, Z
    7842:	91 81       	ldd	r25, Z+1	; 0x01
    7844:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <validate>
	if (res == FR_OK) {
    7848:	88 23       	and	r24, r24
    784a:	81 f5       	brne	.+96     	; 0x78ac <f_readdir+0x92>
		if (!fno) {
    784c:	e1 14       	cp	r14, r1
    784e:	f1 04       	cpc	r15, r1
    7850:	31 f4       	brne	.+12     	; 0x785e <f_readdir+0x44>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
    7852:	c8 01       	movw	r24, r16
    7854:	60 e0       	ldi	r22, 0x00	; 0
    7856:	70 e0       	ldi	r23, 0x00	; 0
    7858:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <dir_sdi>
    785c:	27 c0       	rjmp	.+78     	; 0x78ac <f_readdir+0x92>
		} else {
			INIT_BUF(*dj);
    785e:	ce 01       	movw	r24, r28
    7860:	01 96       	adiw	r24, 0x01	; 1
    7862:	f8 01       	movw	r30, r16
    7864:	95 8b       	std	Z+21, r25	; 0x15
    7866:	84 8b       	std	Z+20, r24	; 0x14
    7868:	8f e8       	ldi	r24, 0x8F	; 143
    786a:	91 e0       	ldi	r25, 0x01	; 1
    786c:	97 8b       	std	Z+23, r25	; 0x17
    786e:	86 8b       	std	Z+22, r24	; 0x16
			res = dir_read(dj);				/* Read an directory item */
    7870:	c8 01       	movw	r24, r16
    7872:	0e 94 89 35 	call	0x6b12	; 0x6b12 <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
    7876:	84 30       	cpi	r24, 0x04	; 4
    7878:	31 f4       	brne	.+12     	; 0x7886 <f_readdir+0x6c>
				dj->sect = 0;
    787a:	f8 01       	movw	r30, r16
    787c:	16 86       	std	Z+14, r1	; 0x0e
    787e:	17 86       	std	Z+15, r1	; 0x0f
    7880:	10 8a       	std	Z+16, r1	; 0x10
    7882:	11 8a       	std	Z+17, r1	; 0x11
    7884:	02 c0       	rjmp	.+4      	; 0x788a <f_readdir+0x70>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    7886:	88 23       	and	r24, r24
    7888:	89 f4       	brne	.+34     	; 0x78ac <f_readdir+0x92>
				get_fileinfo(dj, fno);		/* Get the object information */
    788a:	c8 01       	movw	r24, r16
    788c:	b7 01       	movw	r22, r14
    788e:	0e 94 3f 3b 	call	0x767e	; 0x767e <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
    7892:	c8 01       	movw	r24, r16
    7894:	60 e0       	ldi	r22, 0x00	; 0
    7896:	70 e0       	ldi	r23, 0x00	; 0
    7898:	0e 94 c9 33 	call	0x6792	; 0x6792 <dir_next>
				if (res == FR_NO_FILE) {
    789c:	84 30       	cpi	r24, 0x04	; 4
    789e:	31 f4       	brne	.+12     	; 0x78ac <f_readdir+0x92>
					dj->sect = 0;
    78a0:	f8 01       	movw	r30, r16
    78a2:	16 86       	std	Z+14, r1	; 0x0e
    78a4:	17 86       	std	Z+15, r1	; 0x0f
    78a6:	10 8a       	std	Z+16, r1	; 0x10
    78a8:	11 8a       	std	Z+17, r1	; 0x11
    78aa:	80 e0       	ldi	r24, 0x00	; 0
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
    78ac:	2c 96       	adiw	r28, 0x0c	; 12
    78ae:	0f b6       	in	r0, 0x3f	; 63
    78b0:	f8 94       	cli
    78b2:	de bf       	out	0x3e, r29	; 62
    78b4:	0f be       	out	0x3f, r0	; 63
    78b6:	cd bf       	out	0x3d, r28	; 61
    78b8:	cf 91       	pop	r28
    78ba:	df 91       	pop	r29
    78bc:	1f 91       	pop	r17
    78be:	0f 91       	pop	r16
    78c0:	ff 90       	pop	r15
    78c2:	ef 90       	pop	r14
    78c4:	08 95       	ret

000078c6 <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR *path,	/* Pointer to the directory path */
	UINT sz_path	/* Size of path */
)
{
    78c6:	2f 92       	push	r2
    78c8:	3f 92       	push	r3
    78ca:	4f 92       	push	r4
    78cc:	5f 92       	push	r5
    78ce:	6f 92       	push	r6
    78d0:	7f 92       	push	r7
    78d2:	8f 92       	push	r8
    78d4:	9f 92       	push	r9
    78d6:	af 92       	push	r10
    78d8:	bf 92       	push	r11
    78da:	cf 92       	push	r12
    78dc:	df 92       	push	r13
    78de:	ef 92       	push	r14
    78e0:	ff 92       	push	r15
    78e2:	0f 93       	push	r16
    78e4:	1f 93       	push	r17
    78e6:	df 93       	push	r29
    78e8:	cf 93       	push	r28
    78ea:	cd b7       	in	r28, 0x3d	; 61
    78ec:	de b7       	in	r29, 0x3e	; 62
    78ee:	c2 54       	subi	r28, 0x42	; 66
    78f0:	d0 40       	sbci	r29, 0x00	; 0
    78f2:	0f b6       	in	r0, 0x3f	; 63
    78f4:	f8 94       	cli
    78f6:	de bf       	out	0x3e, r29	; 62
    78f8:	0f be       	out	0x3f, r0	; 63
    78fa:	cd bf       	out	0x3d, r28	; 61
    78fc:	e1 e4       	ldi	r30, 0x41	; 65
    78fe:	ee 2e       	mov	r14, r30
    7900:	f1 2c       	mov	r15, r1
    7902:	ec 0e       	add	r14, r28
    7904:	fd 1e       	adc	r15, r29
    7906:	fc 01       	movw	r30, r24
    7908:	d7 01       	movw	r26, r14
    790a:	8d 93       	st	X+, r24
    790c:	9c 93       	st	X, r25
    790e:	4b 01       	movw	r8, r22
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMEBUF;


	*path = 0;
    7910:	10 82       	st	Z, r1
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
    7912:	6d e0       	ldi	r22, 0x0D	; 13
    7914:	c6 2e       	mov	r12, r22
    7916:	d1 2c       	mov	r13, r1
    7918:	cc 0e       	add	r12, r28
    791a:	dd 1e       	adc	r13, r29
    791c:	c7 01       	movw	r24, r14
    791e:	b6 01       	movw	r22, r12
    7920:	40 e0       	ldi	r20, 0x00	; 0
    7922:	0e 94 3e 29 	call	0x527c	; 0x527c <chk_mounted>
	if (res == FR_OK) {
    7926:	88 23       	and	r24, r24
    7928:	11 f0       	breq	.+4      	; 0x792e <f_getcwd+0x68>
    792a:	98 2f       	mov	r25, r24
    792c:	e4 c0       	rjmp	.+456    	; 0x7af6 <f_getcwd+0x230>
		INIT_BUF(dj);
    792e:	ce 01       	movw	r24, r28
    7930:	01 96       	adiw	r24, 0x01	; 1
    7932:	9a a3       	std	Y+34, r25	; 0x22
    7934:	89 a3       	std	Y+33, r24	; 0x21
    7936:	8f e8       	ldi	r24, 0x8F	; 143
    7938:	91 e0       	ldi	r25, 0x01	; 1
    793a:	9c a3       	std	Y+36, r25	; 0x24
    793c:	8b a3       	std	Y+35, r24	; 0x23
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
    793e:	ed 85       	ldd	r30, Y+13	; 0x0d
    7940:	fe 85       	ldd	r31, Y+14	; 0x0e
    7942:	86 89       	ldd	r24, Z+22	; 0x16
    7944:	97 89       	ldd	r25, Z+23	; 0x17
    7946:	a0 8d       	ldd	r26, Z+24	; 0x18
    7948:	b1 8d       	ldd	r27, Z+25	; 0x19
    794a:	8b 8b       	std	Y+19, r24	; 0x13
    794c:	9c 8b       	std	Y+20, r25	; 0x14
    794e:	ad 8b       	std	Y+21, r26	; 0x15
    7950:	be 8b       	std	Y+22, r27	; 0x16
    7952:	84 01       	movw	r16, r8
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
			res = dir_sdi(&dj, 1);			/* Get parent dir */
    7954:	56 01       	movw	r10, r12
				res = dir_next(&dj, 0);	
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
			if (res != FR_OK) break;
#if _USE_LFN
			fno.lfname = path;
    7956:	37 01       	movw	r6, r14
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
    7958:	57 e2       	ldi	r21, 0x27	; 39
    795a:	25 2e       	mov	r2, r21
    795c:	31 2c       	mov	r3, r1
    795e:	2c 0e       	add	r2, r28
    7960:	3d 1e       	adc	r3, r29
				res = dir_read(&dj);
				if (res != FR_OK) break;
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
				res = dir_next(&dj, 0);	
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    7962:	40 e3       	ldi	r20, 0x30	; 48
    7964:	44 2e       	mov	r4, r20
    7966:	51 2c       	mov	r5, r1
    7968:	4c 0e       	add	r4, r28
    796a:	5d 1e       	adc	r5, r29
    796c:	8b c0       	rjmp	.+278    	; 0x7a84 <f_getcwd+0x1be>
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
			res = dir_sdi(&dj, 1);			/* Get parent dir */
    796e:	c5 01       	movw	r24, r10
    7970:	61 e0       	ldi	r22, 0x01	; 1
    7972:	70 e0       	ldi	r23, 0x00	; 0
    7974:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <dir_sdi>
    7978:	98 2f       	mov	r25, r24
			if (res != FR_OK) break;
    797a:	88 23       	and	r24, r24
    797c:	09 f0       	breq	.+2      	; 0x7980 <f_getcwd+0xba>
    797e:	8d c0       	rjmp	.+282    	; 0x7a9a <f_getcwd+0x1d4>
			res = dir_read(&dj);
    7980:	c5 01       	movw	r24, r10
    7982:	0e 94 89 35 	call	0x6b12	; 0x6b12 <dir_read>
    7986:	98 2f       	mov	r25, r24
			if (res != FR_OK) break;
    7988:	88 23       	and	r24, r24
    798a:	09 f0       	breq	.+2      	; 0x798e <f_getcwd+0xc8>
    798c:	86 c0       	rjmp	.+268    	; 0x7a9a <f_getcwd+0x1d4>
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
    798e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    7990:	f8 a1       	ldd	r31, Y+32	; 0x20
    7992:	84 89       	ldd	r24, Z+20	; 0x14
    7994:	95 89       	ldd	r25, Z+21	; 0x15
    7996:	a0 e0       	ldi	r26, 0x00	; 0
    7998:	b0 e0       	ldi	r27, 0x00	; 0
    799a:	dc 01       	movw	r26, r24
    799c:	99 27       	eor	r25, r25
    799e:	88 27       	eor	r24, r24
    79a0:	22 8d       	ldd	r18, Z+26	; 0x1a
    79a2:	33 8d       	ldd	r19, Z+27	; 0x1b
    79a4:	40 e0       	ldi	r20, 0x00	; 0
    79a6:	50 e0       	ldi	r21, 0x00	; 0
    79a8:	82 2b       	or	r24, r18
    79aa:	93 2b       	or	r25, r19
    79ac:	a4 2b       	or	r26, r20
    79ae:	b5 2b       	or	r27, r21
    79b0:	8b 8b       	std	Y+19, r24	; 0x13
    79b2:	9c 8b       	std	Y+20, r25	; 0x14
    79b4:	ad 8b       	std	Y+21, r26	; 0x15
    79b6:	be 8b       	std	Y+22, r27	; 0x16
			res = dir_sdi(&dj, 0);
    79b8:	c5 01       	movw	r24, r10
    79ba:	60 e0       	ldi	r22, 0x00	; 0
    79bc:	70 e0       	ldi	r23, 0x00	; 0
    79be:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <dir_sdi>
    79c2:	98 2f       	mov	r25, r24
			if (res != FR_OK) break;
    79c4:	88 23       	and	r24, r24
    79c6:	09 f0       	breq	.+2      	; 0x79ca <f_getcwd+0x104>
    79c8:	68 c0       	rjmp	.+208    	; 0x7a9a <f_getcwd+0x1d4>
			do {							/* Find the entry links to the child dir */
				res = dir_read(&dj);
    79ca:	c5 01       	movw	r24, r10
    79cc:	0e 94 89 35 	call	0x6b12	; 0x6b12 <dir_read>
    79d0:	98 2f       	mov	r25, r24
				if (res != FR_OK) break;
    79d2:	88 23       	and	r24, r24
    79d4:	f9 f4       	brne	.+62     	; 0x7a14 <f_getcwd+0x14e>
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
    79d6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    79d8:	f8 a1       	ldd	r31, Y+32	; 0x20
    79da:	84 89       	ldd	r24, Z+20	; 0x14
    79dc:	95 89       	ldd	r25, Z+21	; 0x15
    79de:	a0 e0       	ldi	r26, 0x00	; 0
    79e0:	b0 e0       	ldi	r27, 0x00	; 0
    79e2:	dc 01       	movw	r26, r24
    79e4:	99 27       	eor	r25, r25
    79e6:	88 27       	eor	r24, r24
    79e8:	22 8d       	ldd	r18, Z+26	; 0x1a
    79ea:	33 8d       	ldd	r19, Z+27	; 0x1b
    79ec:	40 e0       	ldi	r20, 0x00	; 0
    79ee:	50 e0       	ldi	r21, 0x00	; 0
    79f0:	82 2b       	or	r24, r18
    79f2:	93 2b       	or	r25, r19
    79f4:	a4 2b       	or	r26, r20
    79f6:	b5 2b       	or	r27, r21
    79f8:	c8 16       	cp	r12, r24
    79fa:	d9 06       	cpc	r13, r25
    79fc:	ea 06       	cpc	r14, r26
    79fe:	fb 06       	cpc	r15, r27
    7a00:	09 f4       	brne	.+2      	; 0x7a04 <f_getcwd+0x13e>
    7a02:	94 c0       	rjmp	.+296    	; 0x7b2c <f_getcwd+0x266>
				res = dir_next(&dj, 0);	
    7a04:	c5 01       	movw	r24, r10
    7a06:	60 e0       	ldi	r22, 0x00	; 0
    7a08:	70 e0       	ldi	r23, 0x00	; 0
    7a0a:	0e 94 c9 33 	call	0x6792	; 0x6792 <dir_next>
    7a0e:	98 2f       	mov	r25, r24
			} while (res == FR_OK);
    7a10:	88 23       	and	r24, r24
    7a12:	d9 f2       	breq	.-74     	; 0x79ca <f_getcwd+0x104>
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    7a14:	94 30       	cpi	r25, 0x04	; 4
    7a16:	09 f0       	breq	.+2      	; 0x7a1a <f_getcwd+0x154>
    7a18:	40 c0       	rjmp	.+128    	; 0x7a9a <f_getcwd+0x1d4>
    7a1a:	a8 01       	movw	r20, r16
    7a1c:	92 e0       	ldi	r25, 0x02	; 2
    7a1e:	3e c0       	rjmp	.+124    	; 0x7a9c <f_getcwd+0x1d6>
    7a20:	f2 01       	movw	r30, r4
    7a22:	20 e0       	ldi	r18, 0x00	; 0
    7a24:	30 e0       	ldi	r19, 0x00	; 0
    7a26:	02 c0       	rjmp	.+4      	; 0x7a2c <f_getcwd+0x166>
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
    7a28:	2f 5f       	subi	r18, 0xFF	; 255
    7a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    7a2c:	df 01       	movw	r26, r30
    7a2e:	a2 0f       	add	r26, r18
    7a30:	b3 1f       	adc	r27, r19
    7a32:	8c 91       	ld	r24, X
    7a34:	88 23       	and	r24, r24
    7a36:	c1 f7       	brne	.-16     	; 0x7a28 <f_getcwd+0x162>
    7a38:	b9 01       	movw	r22, r18
			if (i < n + 3) {
    7a3a:	c9 01       	movw	r24, r18
    7a3c:	03 96       	adiw	r24, 0x03	; 3
    7a3e:	08 17       	cp	r16, r24
    7a40:	19 07       	cpc	r17, r25
    7a42:	18 f4       	brcc	.+6      	; 0x7a4a <f_getcwd+0x184>
    7a44:	a8 01       	movw	r20, r16
    7a46:	91 e1       	ldi	r25, 0x11	; 17
    7a48:	29 c0       	rjmp	.+82     	; 0x7a9c <f_getcwd+0x1d6>
    7a4a:	a8 01       	movw	r20, r16
    7a4c:	0c c0       	rjmp	.+24     	; 0x7a66 <f_getcwd+0x1a0>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
    7a4e:	41 50       	subi	r20, 0x01	; 1
    7a50:	50 40       	sbci	r21, 0x00	; 0
    7a52:	21 50       	subi	r18, 0x01	; 1
    7a54:	30 40       	sbci	r19, 0x00	; 0
    7a56:	f3 01       	movw	r30, r6
    7a58:	e0 80       	ld	r14, Z
    7a5a:	f1 80       	ldd	r15, Z+1	; 0x01
    7a5c:	e4 0e       	add	r14, r20
    7a5e:	f5 1e       	adc	r15, r21
    7a60:	8c 91       	ld	r24, X
    7a62:	f7 01       	movw	r30, r14
    7a64:	80 83       	st	Z, r24
    7a66:	11 97       	sbiw	r26, 0x01	; 1
    7a68:	21 15       	cp	r18, r1
    7a6a:	31 05       	cpc	r19, r1
    7a6c:	81 f7       	brne	.-32     	; 0x7a4e <f_getcwd+0x188>
    7a6e:	60 95       	com	r22
    7a70:	70 95       	com	r23
			path[--i] = '/';
    7a72:	06 0f       	add	r16, r22
    7a74:	17 1f       	adc	r17, r23
    7a76:	d3 01       	movw	r26, r6
    7a78:	ed 91       	ld	r30, X+
    7a7a:	fc 91       	ld	r31, X
    7a7c:	e0 0f       	add	r30, r16
    7a7e:	f1 1f       	adc	r31, r17
    7a80:	bf e2       	ldi	r27, 0x2F	; 47
    7a82:	b0 83       	st	Z, r27
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    7a84:	cb 88       	ldd	r12, Y+19	; 0x13
    7a86:	dc 88       	ldd	r13, Y+20	; 0x14
    7a88:	ed 88       	ldd	r14, Y+21	; 0x15
    7a8a:	fe 88       	ldd	r15, Y+22	; 0x16
    7a8c:	c1 14       	cp	r12, r1
    7a8e:	d1 04       	cpc	r13, r1
    7a90:	e1 04       	cpc	r14, r1
    7a92:	f1 04       	cpc	r15, r1
    7a94:	09 f0       	breq	.+2      	; 0x7a98 <f_getcwd+0x1d2>
    7a96:	6b cf       	rjmp	.-298    	; 0x796e <f_getcwd+0xa8>
    7a98:	90 e0       	ldi	r25, 0x00	; 0
    7a9a:	a8 01       	movw	r20, r16
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    7a9c:	be 01       	movw	r22, r28
    7a9e:	6f 5b       	subi	r22, 0xBF	; 191
    7aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    7aa2:	fb 01       	movw	r30, r22
    7aa4:	20 81       	ld	r18, Z
    7aa6:	31 81       	ldd	r19, Z+1	; 0x01
		if (res == FR_OK) {
    7aa8:	99 23       	and	r25, r25
    7aaa:	19 f5       	brne	.+70     	; 0x7af2 <f_getcwd+0x22c>
			*tp++ = '0' + CurrVol;			/* Put drive number */
    7aac:	80 91 8e 01 	lds	r24, 0x018E
    7ab0:	80 5d       	subi	r24, 0xD0	; 208
    7ab2:	d9 01       	movw	r26, r18
    7ab4:	8d 93       	st	X+, r24
			*tp++ = ':';
    7ab6:	8a e3       	ldi	r24, 0x3A	; 58
    7ab8:	f9 01       	movw	r30, r18
    7aba:	81 83       	std	Z+1, r24	; 0x01
    7abc:	9d 01       	movw	r18, r26
    7abe:	2f 5f       	subi	r18, 0xFF	; 255
    7ac0:	3f 4f       	sbci	r19, 0xFF	; 255
			if (i == sz_path) {				/* Root-dir */
    7ac2:	08 15       	cp	r16, r8
    7ac4:	19 05       	cpc	r17, r9
    7ac6:	31 f4       	brne	.+12     	; 0x7ad4 <f_getcwd+0x20e>
				*tp++ = '/';
    7ac8:	8f e2       	ldi	r24, 0x2F	; 47
    7aca:	11 96       	adiw	r26, 0x01	; 1
    7acc:	8c 93       	st	X, r24
    7ace:	2f 5f       	subi	r18, 0xFF	; 255
    7ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    7ad2:	0f c0       	rjmp	.+30     	; 0x7af2 <f_getcwd+0x22c>
			} else {						/* Sub-dir */
				do		/* Add stacked path str */
					*tp++ = path[i++];
    7ad4:	db 01       	movw	r26, r22
    7ad6:	ed 91       	ld	r30, X+
    7ad8:	fc 91       	ld	r31, X
    7ada:	11 97       	sbiw	r26, 0x01	; 1
    7adc:	e4 0f       	add	r30, r20
    7ade:	f5 1f       	adc	r31, r21
    7ae0:	80 81       	ld	r24, Z
    7ae2:	f9 01       	movw	r30, r18
    7ae4:	81 93       	st	Z+, r24
    7ae6:	9f 01       	movw	r18, r30
    7ae8:	4f 5f       	subi	r20, 0xFF	; 255
    7aea:	5f 4f       	sbci	r21, 0xFF	; 255
				while (i < sz_path);
    7aec:	48 15       	cp	r20, r8
    7aee:	59 05       	cpc	r21, r9
    7af0:	90 f3       	brcs	.-28     	; 0x7ad6 <f_getcwd+0x210>
			}
		}
		*tp = 0;
    7af2:	d9 01       	movw	r26, r18
    7af4:	1c 92       	st	X, r1
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    7af6:	89 2f       	mov	r24, r25
    7af8:	ce 5b       	subi	r28, 0xBE	; 190
    7afa:	df 4f       	sbci	r29, 0xFF	; 255
    7afc:	0f b6       	in	r0, 0x3f	; 63
    7afe:	f8 94       	cli
    7b00:	de bf       	out	0x3e, r29	; 62
    7b02:	0f be       	out	0x3f, r0	; 63
    7b04:	cd bf       	out	0x3d, r28	; 61
    7b06:	cf 91       	pop	r28
    7b08:	df 91       	pop	r29
    7b0a:	1f 91       	pop	r17
    7b0c:	0f 91       	pop	r16
    7b0e:	ff 90       	pop	r15
    7b10:	ef 90       	pop	r14
    7b12:	df 90       	pop	r13
    7b14:	cf 90       	pop	r12
    7b16:	bf 90       	pop	r11
    7b18:	af 90       	pop	r10
    7b1a:	9f 90       	pop	r9
    7b1c:	8f 90       	pop	r8
    7b1e:	7f 90       	pop	r7
    7b20:	6f 90       	pop	r6
    7b22:	5f 90       	pop	r5
    7b24:	4f 90       	pop	r4
    7b26:	3f 90       	pop	r3
    7b28:	2f 90       	pop	r2
    7b2a:	08 95       	ret
				res = dir_next(&dj, 0);	
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
			if (res != FR_OK) break;
#if _USE_LFN
			fno.lfname = path;
    7b2c:	f3 01       	movw	r30, r6
    7b2e:	80 81       	ld	r24, Z
    7b30:	91 81       	ldd	r25, Z+1	; 0x01
    7b32:	9e af       	std	Y+62, r25	; 0x3e
    7b34:	8d af       	std	Y+61, r24	; 0x3d
			fno.lfsize = i;
    7b36:	21 96       	adiw	r28, 0x01	; 1
    7b38:	1f af       	std	Y+63, r17	; 0x3f
    7b3a:	0e af       	std	Y+62, r16	; 0x3e
    7b3c:	21 97       	sbiw	r28, 0x01	; 1
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
    7b3e:	c5 01       	movw	r24, r10
    7b40:	b1 01       	movw	r22, r2
    7b42:	0e 94 3f 3b 	call	0x767e	; 0x767e <get_fileinfo>
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
    7b46:	d3 01       	movw	r26, r6
    7b48:	ed 91       	ld	r30, X+
    7b4a:	fc 91       	ld	r31, X
    7b4c:	80 81       	ld	r24, Z
    7b4e:	88 23       	and	r24, r24
    7b50:	09 f0       	breq	.+2      	; 0x7b54 <f_getcwd+0x28e>
    7b52:	67 cf       	rjmp	.-306    	; 0x7a22 <f_getcwd+0x15c>
    7b54:	65 cf       	rjmp	.-310    	; 0x7a20 <f_getcwd+0x15a>

00007b56 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
    7b56:	2f 92       	push	r2
    7b58:	3f 92       	push	r3
    7b5a:	4f 92       	push	r4
    7b5c:	5f 92       	push	r5
    7b5e:	6f 92       	push	r6
    7b60:	7f 92       	push	r7
    7b62:	8f 92       	push	r8
    7b64:	9f 92       	push	r9
    7b66:	af 92       	push	r10
    7b68:	bf 92       	push	r11
    7b6a:	cf 92       	push	r12
    7b6c:	df 92       	push	r13
    7b6e:	ef 92       	push	r14
    7b70:	ff 92       	push	r15
    7b72:	0f 93       	push	r16
    7b74:	1f 93       	push	r17
    7b76:	cf 93       	push	r28
    7b78:	df 93       	push	r29
    7b7a:	5c 01       	movw	r10, r24
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    7b7c:	60 e0       	ldi	r22, 0x00	; 0
    7b7e:	70 e0       	ldi	r23, 0x00	; 0
    7b80:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <dir_sdi>
    7b84:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    7b86:	88 23       	and	r24, r24
    7b88:	09 f0       	breq	.+2      	; 0x7b8c <dir_find+0x36>
    7b8a:	df c0       	rjmp	.+446    	; 0x7d4a <dir_find+0x1f4>
    7b8c:	77 24       	eor	r7, r7
    7b8e:	7a 94       	dec	r7
    7b90:	66 24       	eor	r6, r6
    7b92:	6a 94       	dec	r6
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    7b94:	0d e0       	ldi	r16, 0x0D	; 13
    7b96:	20 2e       	mov	r2, r16
    7b98:	31 2c       	mov	r3, r1
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    7b9a:	44 24       	eor	r4, r4
    7b9c:	4a 94       	dec	r4
    7b9e:	54 2c       	mov	r5, r4

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    7ba0:	d5 01       	movw	r26, r10
    7ba2:	1e 96       	adiw	r26, 0x0e	; 14
    7ba4:	4d 91       	ld	r20, X+
    7ba6:	5d 91       	ld	r21, X+
    7ba8:	6d 91       	ld	r22, X+
    7baa:	7c 91       	ld	r23, X
    7bac:	51 97       	sbiw	r26, 0x11	; 17
    7bae:	8d 91       	ld	r24, X+
    7bb0:	9c 91       	ld	r25, X
    7bb2:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    7bb6:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    7bb8:	88 23       	and	r24, r24
    7bba:	09 f0       	breq	.+2      	; 0x7bbe <dir_find+0x68>
    7bbc:	c6 c0       	rjmp	.+396    	; 0x7d4a <dir_find+0x1f4>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    7bbe:	f5 01       	movw	r30, r10
    7bc0:	c2 88       	ldd	r12, Z+18	; 0x12
    7bc2:	d3 88       	ldd	r13, Z+19	; 0x13
		c = dir[DIR_Name];
    7bc4:	d6 01       	movw	r26, r12
    7bc6:	2c 91       	ld	r18, X
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    7bc8:	22 23       	and	r18, r18
    7bca:	11 f4       	brne	.+4      	; 0x7bd0 <dir_find+0x7a>
    7bcc:	44 e0       	ldi	r20, 0x04	; 4
    7bce:	bd c0       	rjmp	.+378    	; 0x7d4a <dir_find+0x1f4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    7bd0:	f6 01       	movw	r30, r12
    7bd2:	83 85       	ldd	r24, Z+11	; 0x0b
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    7bd4:	25 3e       	cpi	r18, 0xE5	; 229
    7bd6:	09 f4       	brne	.+2      	; 0x7bda <dir_find+0x84>
    7bd8:	ad c0       	rjmp	.+346    	; 0x7d34 <dir_find+0x1de>
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    7bda:	8f 73       	andi	r24, 0x3F	; 63
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    7bdc:	83 ff       	sbrs	r24, 3
    7bde:	04 c0       	rjmp	.+8      	; 0x7be8 <dir_find+0x92>
    7be0:	8f 30       	cpi	r24, 0x0F	; 15
    7be2:	09 f0       	breq	.+2      	; 0x7be6 <dir_find+0x90>
    7be4:	a7 c0       	rjmp	.+334    	; 0x7d34 <dir_find+0x1de>
    7be6:	03 c0       	rjmp	.+6      	; 0x7bee <dir_find+0x98>
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    7be8:	8f 30       	cpi	r24, 0x0F	; 15
    7bea:	09 f0       	breq	.+2      	; 0x7bee <dir_find+0x98>
    7bec:	73 c0       	rjmp	.+230    	; 0x7cd4 <dir_find+0x17e>
				if (dj->lfn) {
    7bee:	d5 01       	movw	r26, r10
    7bf0:	56 96       	adiw	r26, 0x16	; 22
    7bf2:	8d 91       	ld	r24, X+
    7bf4:	9c 91       	ld	r25, X
    7bf6:	57 97       	sbiw	r26, 0x17	; 23
    7bf8:	89 2b       	or	r24, r25
    7bfa:	09 f4       	brne	.+2      	; 0x7bfe <dir_find+0xa8>
    7bfc:	9d c0       	rjmp	.+314    	; 0x7d38 <dir_find+0x1e2>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    7bfe:	26 ff       	sbrs	r18, 6
    7c00:	0e c0       	rjmp	.+28     	; 0x7c1e <dir_find+0xc8>
						sum = dir[LDIR_Chksum];
    7c02:	f6 01       	movw	r30, r12
    7c04:	65 84       	ldd	r6, Z+13	; 0x0d
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
    7c06:	14 96       	adiw	r26, 0x04	; 4
    7c08:	8d 91       	ld	r24, X+
    7c0a:	9c 91       	ld	r25, X
    7c0c:	15 97       	sbiw	r26, 0x05	; 5
    7c0e:	59 96       	adiw	r26, 0x19	; 25
    7c10:	9c 93       	st	X, r25
    7c12:	8e 93       	st	-X, r24
    7c14:	58 97       	sbiw	r26, 0x18	; 24
    7c16:	1f eb       	ldi	r17, 0xBF	; 191
    7c18:	71 2e       	mov	r7, r17
    7c1a:	72 22       	and	r7, r18
    7c1c:	03 c0       	rjmp	.+6      	; 0x7c24 <dir_find+0xce>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    7c1e:	27 15       	cp	r18, r7
    7c20:	09 f0       	breq	.+2      	; 0x7c24 <dir_find+0xce>
    7c22:	88 c0       	rjmp	.+272    	; 0x7d34 <dir_find+0x1de>
    7c24:	d6 01       	movw	r26, r12
    7c26:	1d 96       	adiw	r26, 0x0d	; 13
    7c28:	8c 91       	ld	r24, X
    7c2a:	1d 97       	sbiw	r26, 0x0d	; 13
    7c2c:	68 16       	cp	r6, r24
    7c2e:	09 f0       	breq	.+2      	; 0x7c32 <dir_find+0xdc>
    7c30:	81 c0       	rjmp	.+258    	; 0x7d34 <dir_find+0x1de>
    7c32:	f5 01       	movw	r30, r10
    7c34:	86 88       	ldd	r8, Z+22	; 0x16
    7c36:	97 88       	ldd	r9, Z+23	; 0x17
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    7c38:	8c 91       	ld	r24, X
    7c3a:	90 e0       	ldi	r25, 0x00	; 0
    7c3c:	8f 7b       	andi	r24, 0xBF	; 191
    7c3e:	82 9d       	mul	r24, r2
    7c40:	e0 01       	movw	r28, r0
    7c42:	83 9d       	mul	r24, r3
    7c44:	d0 0d       	add	r29, r0
    7c46:	92 9d       	mul	r25, r2
    7c48:	d0 0d       	add	r29, r0
    7c4a:	11 24       	eor	r1, r1
    7c4c:	2d 97       	sbiw	r28, 0x0d	; 13
    7c4e:	b0 e7       	ldi	r27, 0x70	; 112
    7c50:	eb 2e       	mov	r14, r27
    7c52:	b1 e0       	ldi	r27, 0x01	; 1
    7c54:	fb 2e       	mov	r15, r27
    7c56:	01 e0       	ldi	r16, 0x01	; 1
    7c58:	10 e0       	ldi	r17, 0x00	; 0
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    7c5a:	d7 01       	movw	r26, r14
    7c5c:	8c 91       	ld	r24, X
    7c5e:	f6 01       	movw	r30, r12
    7c60:	e8 0f       	add	r30, r24
    7c62:	f1 1d       	adc	r31, r1
    7c64:	80 81       	ld	r24, Z
    7c66:	91 81       	ldd	r25, Z+1	; 0x01
		if (wc) {	/* Last char has not been processed */
    7c68:	01 15       	cp	r16, r1
    7c6a:	11 05       	cpc	r17, r1
    7c6c:	b1 f0       	breq	.+44     	; 0x7c9a <dir_find+0x144>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    7c6e:	0e 94 bf 5b 	call	0xb77e	; 0xb77e <ff_wtoupper>
    7c72:	8c 01       	movw	r16, r24
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    7c74:	c0 38       	cpi	r28, 0x80	; 128
    7c76:	d1 05       	cpc	r29, r1
    7c78:	08 f0       	brcs	.+2      	; 0x7c7c <dir_find+0x126>
    7c7a:	5c c0       	rjmp	.+184    	; 0x7d34 <dir_find+0x1de>
    7c7c:	fe 01       	movw	r30, r28
    7c7e:	ee 0f       	add	r30, r30
    7c80:	ff 1f       	adc	r31, r31
    7c82:	e8 0d       	add	r30, r8
    7c84:	f9 1d       	adc	r31, r9
    7c86:	80 81       	ld	r24, Z
    7c88:	91 81       	ldd	r25, Z+1	; 0x01
    7c8a:	0e 94 bf 5b 	call	0xb77e	; 0xb77e <ff_wtoupper>
    7c8e:	08 17       	cp	r16, r24
    7c90:	19 07       	cpc	r17, r25
    7c92:	09 f0       	breq	.+2      	; 0x7c96 <dir_find+0x140>
    7c94:	4f c0       	rjmp	.+158    	; 0x7d34 <dir_find+0x1de>
    7c96:	21 96       	adiw	r28, 0x01	; 1
    7c98:	04 c0       	rjmp	.+8      	; 0x7ca2 <dir_find+0x14c>
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
    7c9a:	8f 5f       	subi	r24, 0xFF	; 255
    7c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    7c9e:	09 f0       	breq	.+2      	; 0x7ca2 <dir_find+0x14c>
    7ca0:	49 c0       	rjmp	.+146    	; 0x7d34 <dir_find+0x1de>
    7ca2:	08 94       	sec
    7ca4:	e1 1c       	adc	r14, r1
    7ca6:	f1 1c       	adc	r15, r1
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    7ca8:	ed e7       	ldi	r30, 0x7D	; 125
    7caa:	ee 16       	cp	r14, r30
    7cac:	e1 e0       	ldi	r30, 0x01	; 1
    7cae:	fe 06       	cpc	r15, r30
    7cb0:	a1 f6       	brne	.-88     	; 0x7c5a <dir_find+0x104>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    7cb2:	d6 01       	movw	r26, r12
    7cb4:	8c 91       	ld	r24, X
    7cb6:	86 ff       	sbrs	r24, 6
    7cb8:	5c c0       	rjmp	.+184    	; 0x7d72 <dir_find+0x21c>
    7cba:	01 2b       	or	r16, r17
    7cbc:	09 f4       	brne	.+2      	; 0x7cc0 <dir_find+0x16a>
    7cbe:	59 c0       	rjmp	.+178    	; 0x7d72 <dir_find+0x21c>
    7cc0:	cc 0f       	add	r28, r28
    7cc2:	dd 1f       	adc	r29, r29
    7cc4:	8c 0e       	add	r8, r28
    7cc6:	9d 1e       	adc	r9, r29
    7cc8:	f4 01       	movw	r30, r8
    7cca:	80 81       	ld	r24, Z
    7ccc:	91 81       	ldd	r25, Z+1	; 0x01
    7cce:	89 2b       	or	r24, r25
    7cd0:	89 f5       	brne	.+98     	; 0x7d34 <dir_find+0x1de>
    7cd2:	4f c0       	rjmp	.+158    	; 0x7d72 <dir_find+0x21c>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    7cd4:	77 20       	and	r7, r7
    7cd6:	89 f4       	brne	.+34     	; 0x7cfa <dir_find+0x1a4>
    7cd8:	f6 01       	movw	r30, r12
    7cda:	2b e0       	ldi	r18, 0x0B	; 11
    7cdc:	30 e0       	ldi	r19, 0x00	; 0
    7cde:	90 e0       	ldi	r25, 0x00	; 0
)
{
	BYTE sum = 0;
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    7ce0:	89 2f       	mov	r24, r25
    7ce2:	87 95       	ror	r24
    7ce4:	88 27       	eor	r24, r24
    7ce6:	87 95       	ror	r24
    7ce8:	96 95       	lsr	r25
    7cea:	98 2b       	or	r25, r24
    7cec:	81 91       	ld	r24, Z+
    7cee:	98 0f       	add	r25, r24
    7cf0:	21 50       	subi	r18, 0x01	; 1
    7cf2:	30 40       	sbci	r19, 0x00	; 0
    7cf4:	a9 f7       	brne	.-22     	; 0x7ce0 <dir_find+0x18a>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    7cf6:	69 16       	cp	r6, r25
    7cf8:	41 f1       	breq	.+80     	; 0x7d4a <dir_find+0x1f4>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    7cfa:	d5 01       	movw	r26, r10
    7cfc:	59 96       	adiw	r26, 0x19	; 25
    7cfe:	5c 92       	st	X, r5
    7d00:	4e 92       	st	-X, r4
    7d02:	58 97       	sbiw	r26, 0x18	; 24
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    7d04:	54 96       	adiw	r26, 0x14	; 20
    7d06:	ed 91       	ld	r30, X+
    7d08:	fc 91       	ld	r31, X
    7d0a:	55 97       	sbiw	r26, 0x15	; 21
    7d0c:	83 85       	ldd	r24, Z+11	; 0x0b
    7d0e:	80 fd       	sbrc	r24, 0
    7d10:	11 c0       	rjmp	.+34     	; 0x7d34 <dir_find+0x1de>
    7d12:	df 01       	movw	r26, r30
    7d14:	f6 01       	movw	r30, r12
    7d16:	2b e0       	ldi	r18, 0x0B	; 11
    7d18:	30 e0       	ldi	r19, 0x00	; 0
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    7d1a:	21 50       	subi	r18, 0x01	; 1
    7d1c:	30 40       	sbci	r19, 0x00	; 0
    7d1e:	8f ef       	ldi	r24, 0xFF	; 255
    7d20:	2f 3f       	cpi	r18, 0xFF	; 255
    7d22:	38 07       	cpc	r19, r24
    7d24:	91 f0       	breq	.+36     	; 0x7d4a <dir_find+0x1f4>
    7d26:	90 81       	ld	r25, Z
    7d28:	8c 91       	ld	r24, X
    7d2a:	98 17       	cp	r25, r24
    7d2c:	19 f4       	brne	.+6      	; 0x7d34 <dir_find+0x1de>
    7d2e:	31 96       	adiw	r30, 0x01	; 1
    7d30:	11 96       	adiw	r26, 0x01	; 1
    7d32:	f3 cf       	rjmp	.-26     	; 0x7d1a <dir_find+0x1c4>
    7d34:	77 24       	eor	r7, r7
    7d36:	7a 94       	dec	r7
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    7d38:	c5 01       	movw	r24, r10
    7d3a:	60 e0       	ldi	r22, 0x00	; 0
    7d3c:	70 e0       	ldi	r23, 0x00	; 0
    7d3e:	0e 94 c9 33 	call	0x6792	; 0x6792 <dir_next>
    7d42:	48 2f       	mov	r20, r24
	} while (res == FR_OK);
    7d44:	88 23       	and	r24, r24
    7d46:	09 f4       	brne	.+2      	; 0x7d4a <dir_find+0x1f4>
    7d48:	2b cf       	rjmp	.-426    	; 0x7ba0 <dir_find+0x4a>

	return res;
}
    7d4a:	84 2f       	mov	r24, r20
    7d4c:	df 91       	pop	r29
    7d4e:	cf 91       	pop	r28
    7d50:	1f 91       	pop	r17
    7d52:	0f 91       	pop	r16
    7d54:	ff 90       	pop	r15
    7d56:	ef 90       	pop	r14
    7d58:	df 90       	pop	r13
    7d5a:	cf 90       	pop	r12
    7d5c:	bf 90       	pop	r11
    7d5e:	af 90       	pop	r10
    7d60:	9f 90       	pop	r9
    7d62:	8f 90       	pop	r8
    7d64:	7f 90       	pop	r7
    7d66:	6f 90       	pop	r6
    7d68:	5f 90       	pop	r5
    7d6a:	4f 90       	pop	r4
    7d6c:	3f 90       	pop	r3
    7d6e:	2f 90       	pop	r2
    7d70:	08 95       	ret
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    7d72:	7a 94       	dec	r7
    7d74:	e1 cf       	rjmp	.-62     	; 0x7d38 <dir_find+0x1e2>

00007d76 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    7d76:	2f 92       	push	r2
    7d78:	3f 92       	push	r3
    7d7a:	4f 92       	push	r4
    7d7c:	5f 92       	push	r5
    7d7e:	6f 92       	push	r6
    7d80:	7f 92       	push	r7
    7d82:	8f 92       	push	r8
    7d84:	9f 92       	push	r9
    7d86:	af 92       	push	r10
    7d88:	bf 92       	push	r11
    7d8a:	cf 92       	push	r12
    7d8c:	df 92       	push	r13
    7d8e:	ef 92       	push	r14
    7d90:	ff 92       	push	r15
    7d92:	0f 93       	push	r16
    7d94:	1f 93       	push	r17
    7d96:	cf 93       	push	r28
    7d98:	df 93       	push	r29
    7d9a:	5c 01       	movw	r10, r24
    7d9c:	2b 01       	movw	r4, r22
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    7d9e:	db 01       	movw	r26, r22
    7da0:	8c 91       	ld	r24, X
    7da2:	8f 32       	cpi	r24, 0x2F	; 47
    7da4:	11 f0       	breq	.+4      	; 0x7daa <follow_path+0x34>
    7da6:	8c 35       	cpi	r24, 0x5C	; 92
    7da8:	49 f4       	brne	.+18     	; 0x7dbc <follow_path+0x46>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    7daa:	08 94       	sec
    7dac:	41 1c       	adc	r4, r1
    7dae:	51 1c       	adc	r5, r1
    7db0:	f5 01       	movw	r30, r10
    7db2:	16 82       	std	Z+6, r1	; 0x06
    7db4:	17 82       	std	Z+7, r1	; 0x07
    7db6:	10 86       	std	Z+8, r1	; 0x08
    7db8:	11 86       	std	Z+9, r1	; 0x09
    7dba:	0c c0       	rjmp	.+24     	; 0x7dd4 <follow_path+0x5e>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    7dbc:	d5 01       	movw	r26, r10
    7dbe:	ed 91       	ld	r30, X+
    7dc0:	fc 91       	ld	r31, X
    7dc2:	86 89       	ldd	r24, Z+22	; 0x16
    7dc4:	97 89       	ldd	r25, Z+23	; 0x17
    7dc6:	a0 8d       	ldd	r26, Z+24	; 0x18
    7dc8:	b1 8d       	ldd	r27, Z+25	; 0x19
    7dca:	f5 01       	movw	r30, r10
    7dcc:	86 83       	std	Z+6, r24	; 0x06
    7dce:	97 83       	std	Z+7, r25	; 0x07
    7dd0:	a0 87       	std	Z+8, r26	; 0x08
    7dd2:	b1 87       	std	Z+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    7dd4:	d2 01       	movw	r26, r4
    7dd6:	8c 91       	ld	r24, X
    7dd8:	80 32       	cpi	r24, 0x20	; 32
    7dda:	80 f4       	brcc	.+32     	; 0x7dfc <follow_path+0x86>
		res = dir_sdi(dj, 0);
    7ddc:	c5 01       	movw	r24, r10
    7dde:	60 e0       	ldi	r22, 0x00	; 0
    7de0:	70 e0       	ldi	r23, 0x00	; 0
    7de2:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <dir_sdi>
    7de6:	28 2f       	mov	r18, r24
		dj->dir = 0;
    7de8:	f5 01       	movw	r30, r10
    7dea:	13 8a       	std	Z+19, r1	; 0x13
    7dec:	12 8a       	std	Z+18, r1	; 0x12
    7dee:	ff c1       	rjmp	.+1022   	; 0x81ee <follow_path+0x478>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
	}
	*path = &p[si];						/* Return pointer to the next segment */
    7df0:	42 0c       	add	r4, r2
    7df2:	53 1c       	adc	r5, r3
    7df4:	03 c0       	rjmp	.+6      	; 0x7dfc <follow_path+0x86>
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    7df6:	08 94       	sec
    7df8:	41 1c       	adc	r4, r1
    7dfa:	51 1c       	adc	r5, r1
    7dfc:	d2 01       	movw	r26, r4
    7dfe:	8c 91       	ld	r24, X
    7e00:	8f 32       	cpi	r24, 0x2F	; 47
    7e02:	c9 f3       	breq	.-14     	; 0x7df6 <follow_path+0x80>
    7e04:	8c 35       	cpi	r24, 0x5C	; 92
    7e06:	b9 f3       	breq	.-18     	; 0x7df6 <follow_path+0x80>
	lfn = dj->lfn;
    7e08:	f5 01       	movw	r30, r10
    7e0a:	86 88       	ldd	r8, Z+22	; 0x16
    7e0c:	97 88       	ldd	r9, Z+23	; 0x17
    7e0e:	34 01       	movw	r6, r8
    7e10:	e4 01       	movw	r28, r8
    7e12:	00 e0       	ldi	r16, 0x00	; 0
    7e14:	10 e0       	ldi	r17, 0x00	; 0
    7e16:	22 24       	eor	r2, r2
    7e18:	33 24       	eor	r3, r3
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
    7e1a:	f2 01       	movw	r30, r4
    7e1c:	e2 0d       	add	r30, r2
    7e1e:	f3 1d       	adc	r31, r3
    7e20:	80 81       	ld	r24, Z
    7e22:	90 e0       	ldi	r25, 0x00	; 0
    7e24:	08 94       	sec
    7e26:	21 1c       	adc	r2, r1
    7e28:	31 1c       	adc	r3, r1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    7e2a:	80 32       	cpi	r24, 0x20	; 32
    7e2c:	91 05       	cpc	r25, r1
    7e2e:	08 f4       	brcc	.+2      	; 0x7e32 <follow_path+0xbc>
    7e30:	46 c0       	rjmp	.+140    	; 0x7ebe <follow_path+0x148>
    7e32:	8f 32       	cpi	r24, 0x2F	; 47
    7e34:	91 05       	cpc	r25, r1
    7e36:	09 f4       	brne	.+2      	; 0x7e3a <follow_path+0xc4>
    7e38:	ee c1       	rjmp	.+988    	; 0x8216 <follow_path+0x4a0>
    7e3a:	8c 35       	cpi	r24, 0x5C	; 92
    7e3c:	91 05       	cpc	r25, r1
    7e3e:	09 f4       	brne	.+2      	; 0x7e42 <follow_path+0xcc>
    7e40:	ea c1       	rjmp	.+980    	; 0x8216 <follow_path+0x4a0>
		if (di >= _MAX_LFN)				/* Reject too long name */
    7e42:	00 38       	cpi	r16, 0x80	; 128
    7e44:	11 05       	cpc	r17, r1
    7e46:	09 f4       	brne	.+2      	; 0x7e4a <follow_path+0xd4>
    7e48:	cf c1       	rjmp	.+926    	; 0x81e8 <follow_path+0x472>
			return FR_INVALID_NAME;
#if !_LFN_UNICODE
		w &= 0xFF;
    7e4a:	ac 01       	movw	r20, r24
    7e4c:	50 70       	andi	r21, 0x00	; 0
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    7e4e:	24 2f       	mov	r18, r20
    7e50:	84 2f       	mov	r24, r20
    7e52:	81 58       	subi	r24, 0x81	; 129
    7e54:	8f 31       	cpi	r24, 0x1F	; 31
    7e56:	18 f0       	brcs	.+6      	; 0x7e5e <follow_path+0xe8>
    7e58:	20 5e       	subi	r18, 0xE0	; 224
    7e5a:	2d 31       	cpi	r18, 0x1D	; 29
    7e5c:	98 f4       	brcc	.+38     	; 0x7e84 <follow_path+0x10e>
			b = (BYTE)p[si++];			/* Get 2nd byte */
    7e5e:	f2 01       	movw	r30, r4
    7e60:	e2 0d       	add	r30, r2
    7e62:	f3 1d       	adc	r31, r3
    7e64:	e0 81       	ld	r30, Z
			if (!IsDBCS2(b))
    7e66:	8e 2f       	mov	r24, r30
    7e68:	80 54       	subi	r24, 0x40	; 64
    7e6a:	8f 33       	cpi	r24, 0x3F	; 63
    7e6c:	20 f0       	brcs	.+8      	; 0x7e76 <follow_path+0x100>
    7e6e:	80 54       	subi	r24, 0x40	; 64
    7e70:	8d 37       	cpi	r24, 0x7D	; 125
    7e72:	08 f0       	brcs	.+2      	; 0x7e76 <follow_path+0x100>
    7e74:	b9 c1       	rjmp	.+882    	; 0x81e8 <follow_path+0x472>
		if (di >= _MAX_LFN)				/* Reject too long name */
			return FR_INVALID_NAME;
#if !_LFN_UNICODE
		w &= 0xFF;
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
    7e76:	08 94       	sec
    7e78:	21 1c       	adc	r2, r1
    7e7a:	31 1c       	adc	r3, r1
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
    7e7c:	54 2f       	mov	r21, r20
    7e7e:	44 27       	eor	r20, r20
    7e80:	4e 0f       	add	r20, r30
    7e82:	51 1d       	adc	r21, r1
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    7e84:	ca 01       	movw	r24, r20
    7e86:	61 e0       	ldi	r22, 0x01	; 1
    7e88:	70 e0       	ldi	r23, 0x00	; 0
    7e8a:	0e 94 63 5b 	call	0xb6c6	; 0xb6c6 <ff_convert>
    7e8e:	9c 01       	movw	r18, r24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    7e90:	00 97       	sbiw	r24, 0x00	; 0
    7e92:	09 f4       	brne	.+2      	; 0x7e96 <follow_path+0x120>
    7e94:	a9 c1       	rjmp	.+850    	; 0x81e8 <follow_path+0x472>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    7e96:	80 38       	cpi	r24, 0x80	; 128
    7e98:	91 05       	cpc	r25, r1
    7e9a:	60 f4       	brcc	.+24     	; 0x7eb4 <follow_path+0x13e>
    7e9c:	e4 e3       	ldi	r30, 0x34	; 52
    7e9e:	f1 e0       	ldi	r31, 0x01	; 1
    7ea0:	01 c0       	rjmp	.+2      	; 0x7ea4 <follow_path+0x12e>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    7ea2:	31 96       	adiw	r30, 0x01	; 1
    7ea4:	80 81       	ld	r24, Z
    7ea6:	88 23       	and	r24, r24
    7ea8:	29 f0       	breq	.+10     	; 0x7eb4 <follow_path+0x13e>
    7eaa:	90 e0       	ldi	r25, 0x00	; 0
    7eac:	82 17       	cp	r24, r18
    7eae:	93 07       	cpc	r25, r19
    7eb0:	c1 f7       	brne	.-16     	; 0x7ea2 <follow_path+0x12c>
    7eb2:	9a c1       	rjmp	.+820    	; 0x81e8 <follow_path+0x472>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
    7eb4:	29 93       	st	Y+, r18
    7eb6:	39 93       	st	Y+, r19
    7eb8:	0f 5f       	subi	r16, 0xFF	; 255
    7eba:	1f 4f       	sbci	r17, 0xFF	; 255
    7ebc:	ae cf       	rjmp	.-164    	; 0x7e1a <follow_path+0xa4>
    7ebe:	e8 01       	movw	r28, r16
    7ec0:	b4 e0       	ldi	r27, 0x04	; 4
    7ec2:	db 2e       	mov	r13, r27
	}
	*path = &p[si];						/* Return pointer to the next segment */
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
#if _FS_RPATH
	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
    7ec4:	01 30       	cpi	r16, 0x01	; 1
    7ec6:	11 05       	cpc	r17, r1
    7ec8:	89 f0       	breq	.+34     	; 0x7eec <follow_path+0x176>
    7eca:	02 30       	cpi	r16, 0x02	; 2
    7ecc:	11 05       	cpc	r17, r1
    7ece:	31 f4       	brne	.+12     	; 0x7edc <follow_path+0x166>
    7ed0:	f4 01       	movw	r30, r8
    7ed2:	82 81       	ldd	r24, Z+2	; 0x02
    7ed4:	93 81       	ldd	r25, Z+3	; 0x03
    7ed6:	8e 97       	sbiw	r24, 0x2e	; 46
    7ed8:	49 f0       	breq	.+18     	; 0x7eec <follow_path+0x176>
    7eda:	e8 01       	movw	r28, r16
    7edc:	fe 01       	movw	r30, r28
    7ede:	e1 50       	subi	r30, 0x01	; 1
    7ee0:	f0 40       	sbci	r31, 0x00	; 0
    7ee2:	ee 0f       	add	r30, r30
    7ee4:	ff 1f       	adc	r31, r31
    7ee6:	e8 0d       	add	r30, r8
    7ee8:	f9 1d       	adc	r31, r9
    7eea:	41 c0       	rjmp	.+130    	; 0x7f6e <follow_path+0x1f8>
    7eec:	d4 01       	movw	r26, r8
    7eee:	8d 91       	ld	r24, X+
    7ef0:	9c 91       	ld	r25, X
    7ef2:	8e 97       	sbiw	r24, 0x2e	; 46
    7ef4:	91 f7       	brne	.-28     	; 0x7eda <follow_path+0x164>
		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
		lfn[di] = 0;
    7ef6:	c8 01       	movw	r24, r16
    7ef8:	88 0f       	add	r24, r24
    7efa:	99 1f       	adc	r25, r25
    7efc:	88 0e       	add	r8, r24
    7efe:	99 1e       	adc	r9, r25
    7f00:	f4 01       	movw	r30, r8
    7f02:	11 82       	std	Z+1, r1	; 0x01
    7f04:	10 82       	st	Z, r1
    7f06:	80 e0       	ldi	r24, 0x00	; 0
    7f08:	90 e0       	ldi	r25, 0x00	; 0
		for (i = 0; i < 11; i++)
			dj->fn[i] = (i < di) ? '.' : ' ';
    7f0a:	d5 01       	movw	r26, r10
    7f0c:	54 96       	adiw	r26, 0x14	; 20
    7f0e:	ed 91       	ld	r30, X+
    7f10:	fc 91       	ld	r31, X
    7f12:	55 97       	sbiw	r26, 0x15	; 21
    7f14:	80 17       	cp	r24, r16
    7f16:	91 07       	cpc	r25, r17
    7f18:	10 f0       	brcs	.+4      	; 0x7f1e <follow_path+0x1a8>
    7f1a:	20 e2       	ldi	r18, 0x20	; 32
    7f1c:	01 c0       	rjmp	.+2      	; 0x7f20 <follow_path+0x1aa>
    7f1e:	2e e2       	ldi	r18, 0x2E	; 46
    7f20:	e8 0f       	add	r30, r24
    7f22:	f9 1f       	adc	r31, r25
    7f24:	20 83       	st	Z, r18
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
#if _FS_RPATH
	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
		lfn[di] = 0;
		for (i = 0; i < 11; i++)
    7f26:	01 96       	adiw	r24, 0x01	; 1
    7f28:	8b 30       	cpi	r24, 0x0B	; 11
    7f2a:	91 05       	cpc	r25, r1
    7f2c:	71 f7       	brne	.-36     	; 0x7f0a <follow_path+0x194>
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
    7f2e:	d5 01       	movw	r26, r10
    7f30:	54 96       	adiw	r26, 0x14	; 20
    7f32:	ed 91       	ld	r30, X+
    7f34:	fc 91       	ld	r31, X
    7f36:	55 97       	sbiw	r26, 0x15	; 21
    7f38:	b0 e2       	ldi	r27, 0x20	; 32
    7f3a:	db 2a       	or	r13, r27
    7f3c:	12 c1       	rjmp	.+548    	; 0x8162 <follow_path+0x3ec>
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
    7f3e:	80 81       	ld	r24, Z
    7f40:	91 81       	ldd	r25, Z+1	; 0x01
		if (w != ' ' && w != '.') break;
    7f42:	80 32       	cpi	r24, 0x20	; 32
    7f44:	91 05       	cpc	r25, r1
    7f46:	89 f0       	breq	.+34     	; 0x7f6a <follow_path+0x1f4>
    7f48:	8e 97       	sbiw	r24, 0x2e	; 46
    7f4a:	79 f0       	breq	.+30     	; 0x7f6a <follow_path+0x1f4>
		di--;
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */

	lfn[di] = 0;						/* LFN is created */
    7f4c:	fe 01       	movw	r30, r28
    7f4e:	ee 0f       	add	r30, r30
    7f50:	ff 1f       	adc	r31, r31
    7f52:	e8 0d       	add	r30, r8
    7f54:	f9 1d       	adc	r31, r9
    7f56:	11 82       	std	Z+1, r1	; 0x01
    7f58:	10 82       	st	Z, r1

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
    7f5a:	d5 01       	movw	r26, r10
    7f5c:	54 96       	adiw	r26, 0x14	; 20
    7f5e:	ed 91       	ld	r30, X+
    7f60:	fc 91       	ld	r31, X
    7f62:	55 97       	sbiw	r26, 0x15	; 21
    7f64:	8b e0       	ldi	r24, 0x0B	; 11
    7f66:	90 e0       	ldi	r25, 0x00	; 0
    7f68:	07 c0       	rjmp	.+14     	; 0x7f78 <follow_path+0x202>
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
		if (w != ' ' && w != '.') break;
		di--;
    7f6a:	21 97       	sbiw	r28, 0x01	; 1
    7f6c:	32 97       	sbiw	r30, 0x02	; 2
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
    7f6e:	20 97       	sbiw	r28, 0x00	; 0
    7f70:	31 f7       	brne	.-52     	; 0x7f3e <follow_path+0x1c8>
    7f72:	3a c1       	rjmp	.+628    	; 0x81e8 <follow_path+0x472>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    7f74:	b0 e2       	ldi	r27, 0x20	; 32
    7f76:	b1 93       	st	Z+, r27
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    7f78:	01 97       	sbiw	r24, 0x01	; 1
    7f7a:	2f ef       	ldi	r18, 0xFF	; 255
    7f7c:	8f 3f       	cpi	r24, 0xFF	; 255
    7f7e:	92 07       	cpc	r25, r18
    7f80:	c9 f7       	brne	.-14     	; 0x7f74 <follow_path+0x1fe>
    7f82:	ee 24       	eor	r14, r14
    7f84:	ff 24       	eor	r15, r15
    7f86:	07 c0       	rjmp	.+14     	; 0x7f96 <follow_path+0x220>

	lfn[di] = 0;						/* LFN is created */

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    7f88:	08 94       	sec
    7f8a:	e1 1c       	adc	r14, r1
    7f8c:	f1 1c       	adc	r15, r1
    7f8e:	82 e0       	ldi	r24, 0x02	; 2
    7f90:	90 e0       	ldi	r25, 0x00	; 0
    7f92:	68 0e       	add	r6, r24
    7f94:	79 1e       	adc	r7, r25
    7f96:	d3 01       	movw	r26, r6
    7f98:	8d 91       	ld	r24, X+
    7f9a:	9c 91       	ld	r25, X
    7f9c:	80 32       	cpi	r24, 0x20	; 32
    7f9e:	91 05       	cpc	r25, r1
    7fa0:	99 f3       	breq	.-26     	; 0x7f88 <follow_path+0x212>
    7fa2:	8e 97       	sbiw	r24, 0x2e	; 46
    7fa4:	89 f3       	breq	.-30     	; 0x7f88 <follow_path+0x212>
	if (si) cf |= NS_LOSS | NS_LFN;
    7fa6:	e1 14       	cp	r14, r1
    7fa8:	f1 04       	cpc	r15, r1
    7faa:	11 f0       	breq	.+4      	; 0x7fb0 <follow_path+0x23a>
    7fac:	b3 e0       	ldi	r27, 0x03	; 3
    7fae:	db 2a       	or	r13, r27
    7fb0:	fe 01       	movw	r30, r28
    7fb2:	e1 50       	subi	r30, 0x01	; 1
    7fb4:	f0 40       	sbci	r31, 0x00	; 0
    7fb6:	ee 0f       	add	r30, r30
    7fb8:	ff 1f       	adc	r31, r31
    7fba:	e8 0d       	add	r30, r8
    7fbc:	f9 1d       	adc	r31, r9
    7fbe:	0b c0       	rjmp	.+22     	; 0x7fd6 <follow_path+0x260>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    7fc0:	21 97       	sbiw	r28, 0x01	; 1
    7fc2:	32 97       	sbiw	r30, 0x02	; 2
    7fc4:	20 97       	sbiw	r28, 0x00	; 0
    7fc6:	39 f4       	brne	.+14     	; 0x7fd6 <follow_path+0x260>
    7fc8:	58 e0       	ldi	r21, 0x08	; 8
    7fca:	65 2e       	mov	r6, r21
    7fcc:	71 2c       	mov	r7, r1
    7fce:	00 e0       	ldi	r16, 0x00	; 0
    7fd0:	10 e0       	ldi	r17, 0x00	; 0
    7fd2:	cc 24       	eor	r12, r12
    7fd4:	05 c0       	rjmp	.+10     	; 0x7fe0 <follow_path+0x26a>
    7fd6:	80 81       	ld	r24, Z
    7fd8:	91 81       	ldd	r25, Z+1	; 0x01
    7fda:	8e 97       	sbiw	r24, 0x2e	; 46
    7fdc:	89 f7       	brne	.-30     	; 0x7fc0 <follow_path+0x24a>
    7fde:	f4 cf       	rjmp	.-24     	; 0x7fc8 <follow_path+0x252>

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
    7fe0:	f7 01       	movw	r30, r14
    7fe2:	ee 0f       	add	r30, r30
    7fe4:	ff 1f       	adc	r31, r31
    7fe6:	e8 0d       	add	r30, r8
    7fe8:	f9 1d       	adc	r31, r9
    7fea:	20 81       	ld	r18, Z
    7fec:	31 81       	ldd	r19, Z+1	; 0x01
		if (!w) break;					/* Break on end of the LFN */
    7fee:	21 15       	cp	r18, r1
    7ff0:	31 05       	cpc	r19, r1
    7ff2:	09 f4       	brne	.+2      	; 0x7ff6 <follow_path+0x280>
    7ff4:	84 c0       	rjmp	.+264    	; 0x80fe <follow_path+0x388>
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
    7ff6:	08 94       	sec
    7ff8:	e1 1c       	adc	r14, r1
    7ffa:	f1 1c       	adc	r15, r1
		if (!w) break;					/* Break on end of the LFN */
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    7ffc:	20 32       	cpi	r18, 0x20	; 32
    7ffe:	31 05       	cpc	r19, r1
    8000:	31 f0       	breq	.+12     	; 0x800e <follow_path+0x298>
    8002:	2e 32       	cpi	r18, 0x2E	; 46
    8004:	31 05       	cpc	r19, r1
    8006:	31 f4       	brne	.+12     	; 0x8014 <follow_path+0x29e>
    8008:	ec 16       	cp	r14, r28
    800a:	fd 06       	cpc	r15, r29
    800c:	19 f0       	breq	.+6      	; 0x8014 <follow_path+0x29e>
			cf |= NS_LOSS | NS_LFN; continue;
    800e:	e3 e0       	ldi	r30, 0x03	; 3
    8010:	de 2a       	or	r13, r30
    8012:	e6 cf       	rjmp	.-52     	; 0x7fe0 <follow_path+0x26a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
    8014:	06 15       	cp	r16, r6
    8016:	17 05       	cpc	r17, r7
    8018:	18 f4       	brcc	.+6      	; 0x8020 <follow_path+0x2aa>
    801a:	ec 16       	cp	r14, r28
    801c:	fd 06       	cpc	r15, r29
    801e:	c9 f4       	brne	.+50     	; 0x8052 <follow_path+0x2dc>
			if (ni == 11) {				/* Long extension */
    8020:	fb e0       	ldi	r31, 0x0B	; 11
    8022:	6f 16       	cp	r6, r31
    8024:	71 04       	cpc	r7, r1
    8026:	19 f4       	brne	.+6      	; 0x802e <follow_path+0x2b8>
				cf |= NS_LOSS | NS_LFN; break;
    8028:	23 e0       	ldi	r18, 0x03	; 3
    802a:	d2 2a       	or	r13, r18
    802c:	68 c0       	rjmp	.+208    	; 0x80fe <follow_path+0x388>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    802e:	ec 16       	cp	r14, r28
    8030:	fd 06       	cpc	r15, r29
    8032:	31 f0       	breq	.+12     	; 0x8040 <follow_path+0x2ca>
    8034:	83 e0       	ldi	r24, 0x03	; 3
    8036:	d8 2a       	or	r13, r24
			if (si > di) break;			/* No extension */
    8038:	ce 15       	cp	r28, r14
    803a:	df 05       	cpc	r29, r15
    803c:	08 f4       	brcc	.+2      	; 0x8040 <follow_path+0x2ca>
    803e:	5f c0       	rjmp	.+190    	; 0x80fe <follow_path+0x388>
			si = di; i = 8; ni = 11;	/* Enter extension section */
			b <<= 2; continue;
    8040:	cc 0c       	add	r12, r12
    8042:	cc 0c       	add	r12, r12
    8044:	7e 01       	movw	r14, r28
    8046:	3b e0       	ldi	r19, 0x0B	; 11
    8048:	63 2e       	mov	r6, r19
    804a:	71 2c       	mov	r7, r1
    804c:	08 e0       	ldi	r16, 0x08	; 8
    804e:	10 e0       	ldi	r17, 0x00	; 0
    8050:	c7 cf       	rjmp	.-114    	; 0x7fe0 <follow_path+0x26a>
		}

		if (w >= 0x80) {				/* Non ASCII char */
    8052:	20 38       	cpi	r18, 0x80	; 128
    8054:	31 05       	cpc	r19, r1
    8056:	28 f1       	brcs	.+74     	; 0x80a2 <follow_path+0x32c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
    8058:	c9 01       	movw	r24, r18
    805a:	0e 94 bf 5b 	call	0xb77e	; 0xb77e <ff_wtoupper>
    805e:	60 e0       	ldi	r22, 0x00	; 0
    8060:	70 e0       	ldi	r23, 0x00	; 0
    8062:	0e 94 63 5b 	call	0xb6c6	; 0xb6c6 <ff_convert>
    8066:	9c 01       	movw	r18, r24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
    8068:	92 e0       	ldi	r25, 0x02	; 2
    806a:	d9 2a       	or	r13, r25
		}

		if (_DF1S && w >= 0x100) {		/* Double byte char (always false on SBCS cfg) */
    806c:	2f 3f       	cpi	r18, 0xFF	; 255
    806e:	31 05       	cpc	r19, r1
    8070:	a9 f0       	breq	.+42     	; 0x809c <follow_path+0x326>
    8072:	a0 f0       	brcs	.+40     	; 0x809c <follow_path+0x326>
			if (i >= ni - 1) {
    8074:	c3 01       	movw	r24, r6
    8076:	01 97       	sbiw	r24, 0x01	; 1
    8078:	08 17       	cp	r16, r24
    807a:	19 07       	cpc	r17, r25
    807c:	20 f0       	brcs	.+8      	; 0x8086 <follow_path+0x310>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
    807e:	a3 e0       	ldi	r26, 0x03	; 3
    8080:	da 2a       	or	r13, r26
    8082:	83 01       	movw	r16, r6
    8084:	ad cf       	rjmp	.-166    	; 0x7fe0 <follow_path+0x26a>
			}
			dj->fn[i++] = (BYTE)(w >> 8);
    8086:	d5 01       	movw	r26, r10
    8088:	54 96       	adiw	r26, 0x14	; 20
    808a:	ed 91       	ld	r30, X+
    808c:	fc 91       	ld	r31, X
    808e:	55 97       	sbiw	r26, 0x15	; 21
    8090:	e0 0f       	add	r30, r16
    8092:	f1 1f       	adc	r31, r17
    8094:	30 83       	st	Z, r19
    8096:	0f 5f       	subi	r16, 0xFF	; 255
    8098:	1f 4f       	sbci	r17, 0xFF	; 255
    809a:	26 c0       	rjmp	.+76     	; 0x80e8 <follow_path+0x372>
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    809c:	21 15       	cp	r18, r1
    809e:	31 05       	cpc	r19, r1
    80a0:	91 f0       	breq	.+36     	; 0x80c6 <follow_path+0x350>
    80a2:	ed e3       	ldi	r30, 0x3D	; 61
    80a4:	f1 e0       	ldi	r31, 0x01	; 1
    80a6:	01 c0       	rjmp	.+2      	; 0x80aa <follow_path+0x334>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    80a8:	31 96       	adiw	r30, 0x01	; 1
    80aa:	80 81       	ld	r24, Z
    80ac:	88 23       	and	r24, r24
    80ae:	29 f0       	breq	.+10     	; 0x80ba <follow_path+0x344>
    80b0:	90 e0       	ldi	r25, 0x00	; 0
    80b2:	82 17       	cp	r24, r18
    80b4:	93 07       	cpc	r25, r19
    80b6:	c1 f7       	brne	.-16     	; 0x80a8 <follow_path+0x332>
    80b8:	06 c0       	rjmp	.+12     	; 0x80c6 <follow_path+0x350>
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
    80ba:	c9 01       	movw	r24, r18
    80bc:	81 54       	subi	r24, 0x41	; 65
    80be:	90 40       	sbci	r25, 0x00	; 0
    80c0:	4a 97       	sbiw	r24, 0x1a	; 26
    80c2:	30 f0       	brcs	.+12     	; 0x80d0 <follow_path+0x35a>
    80c4:	08 c0       	rjmp	.+16     	; 0x80d6 <follow_path+0x360>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    80c6:	b3 e0       	ldi	r27, 0x03	; 3
    80c8:	db 2a       	or	r13, r27
    80ca:	2f e5       	ldi	r18, 0x5F	; 95
    80cc:	30 e0       	ldi	r19, 0x00	; 0
    80ce:	0c c0       	rjmp	.+24     	; 0x80e8 <follow_path+0x372>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
					b |= 2;
    80d0:	e2 e0       	ldi	r30, 0x02	; 2
    80d2:	ce 2a       	or	r12, r30
    80d4:	09 c0       	rjmp	.+18     	; 0x80e8 <follow_path+0x372>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
    80d6:	c9 01       	movw	r24, r18
    80d8:	81 56       	subi	r24, 0x61	; 97
    80da:	90 40       	sbci	r25, 0x00	; 0
    80dc:	4a 97       	sbiw	r24, 0x1a	; 26
    80de:	20 f4       	brcc	.+8      	; 0x80e8 <follow_path+0x372>
						b |= 1; w -= 0x20;
    80e0:	f1 e0       	ldi	r31, 0x01	; 1
    80e2:	cf 2a       	or	r12, r31
    80e4:	20 52       	subi	r18, 0x20	; 32
    80e6:	30 40       	sbci	r19, 0x00	; 0
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
    80e8:	d5 01       	movw	r26, r10
    80ea:	54 96       	adiw	r26, 0x14	; 20
    80ec:	ed 91       	ld	r30, X+
    80ee:	fc 91       	ld	r31, X
    80f0:	55 97       	sbiw	r26, 0x15	; 21
    80f2:	e0 0f       	add	r30, r16
    80f4:	f1 1f       	adc	r31, r17
    80f6:	20 83       	st	Z, r18
    80f8:	0f 5f       	subi	r16, 0xFF	; 255
    80fa:	1f 4f       	sbci	r17, 0xFF	; 255
    80fc:	71 cf       	rjmp	.-286    	; 0x7fe0 <follow_path+0x26a>
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    80fe:	d5 01       	movw	r26, r10
    8100:	54 96       	adiw	r26, 0x14	; 20
    8102:	ed 91       	ld	r30, X+
    8104:	fc 91       	ld	r31, X
    8106:	55 97       	sbiw	r26, 0x15	; 21
    8108:	80 81       	ld	r24, Z
    810a:	85 3e       	cpi	r24, 0xE5	; 229
    810c:	11 f4       	brne	.+4      	; 0x8112 <follow_path+0x39c>
    810e:	b5 e0       	ldi	r27, 0x05	; 5
    8110:	b0 83       	st	Z, r27

	if (ni == 8) b <<= 2;
    8112:	e8 e0       	ldi	r30, 0x08	; 8
    8114:	6e 16       	cp	r6, r30
    8116:	71 04       	cpc	r7, r1
    8118:	11 f4       	brne	.+4      	; 0x811e <follow_path+0x3a8>
    811a:	cc 0c       	add	r12, r12
    811c:	cc 0c       	add	r12, r12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    811e:	2c 2d       	mov	r18, r12
    8120:	30 e0       	ldi	r19, 0x00	; 0
    8122:	a9 01       	movw	r20, r18
    8124:	4c 70       	andi	r20, 0x0C	; 12
    8126:	50 70       	andi	r21, 0x00	; 0
    8128:	4c 30       	cpi	r20, 0x0C	; 12
    812a:	51 05       	cpc	r21, r1
    812c:	29 f0       	breq	.+10     	; 0x8138 <follow_path+0x3c2>
    812e:	c9 01       	movw	r24, r18
    8130:	83 70       	andi	r24, 0x03	; 3
    8132:	90 70       	andi	r25, 0x00	; 0
    8134:	03 97       	sbiw	r24, 0x03	; 3
    8136:	11 f4       	brne	.+4      	; 0x813c <follow_path+0x3c6>
		cf |= NS_LFN;
    8138:	f2 e0       	ldi	r31, 0x02	; 2
    813a:	df 2a       	or	r13, r31
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    813c:	d1 fc       	sbrc	r13, 1
    813e:	0c c0       	rjmp	.+24     	; 0x8158 <follow_path+0x3e2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    8140:	23 70       	andi	r18, 0x03	; 3
    8142:	30 70       	andi	r19, 0x00	; 0
    8144:	21 30       	cpi	r18, 0x01	; 1
    8146:	31 05       	cpc	r19, r1
    8148:	11 f4       	brne	.+4      	; 0x814e <follow_path+0x3d8>
    814a:	20 e1       	ldi	r18, 0x10	; 16
    814c:	d2 2a       	or	r13, r18
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    814e:	44 30       	cpi	r20, 0x04	; 4
    8150:	51 05       	cpc	r21, r1
    8152:	11 f4       	brne	.+4      	; 0x8158 <follow_path+0x3e2>
    8154:	88 e0       	ldi	r24, 0x08	; 8
    8156:	d8 2a       	or	r13, r24
	}

	dj->fn[NS] = cf;	/* SFN is created */
    8158:	d5 01       	movw	r26, r10
    815a:	54 96       	adiw	r26, 0x14	; 20
    815c:	ed 91       	ld	r30, X+
    815e:	fc 91       	ld	r31, X
    8160:	55 97       	sbiw	r26, 0x15	; 21
    8162:	d3 86       	std	Z+11, r13	; 0x0b

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
    8164:	c5 01       	movw	r24, r10
    8166:	0e 94 ab 3d 	call	0x7b56	; 0x7b56 <dir_find>
    816a:	28 2f       	mov	r18, r24
			ns = *(dj->fn+NS);
    816c:	d5 01       	movw	r26, r10
    816e:	54 96       	adiw	r26, 0x14	; 20
    8170:	ed 91       	ld	r30, X+
    8172:	fc 91       	ld	r31, X
    8174:	55 97       	sbiw	r26, 0x15	; 21
    8176:	83 85       	ldd	r24, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
    8178:	22 23       	and	r18, r18
    817a:	b9 f0       	breq	.+46     	; 0x81aa <follow_path+0x434>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    817c:	24 30       	cpi	r18, 0x04	; 4
    817e:	b9 f5       	brne	.+110    	; 0x81ee <follow_path+0x478>
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
    8180:	90 e0       	ldi	r25, 0x00	; 0
    8182:	ac 01       	movw	r20, r24
    8184:	44 70       	andi	r20, 0x04	; 4
    8186:	50 70       	andi	r21, 0x00	; 0
    8188:	85 ff       	sbrs	r24, 5
    818a:	0c c0       	rjmp	.+24     	; 0x81a4 <follow_path+0x42e>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
    818c:	f5 01       	movw	r30, r10
    818e:	16 82       	std	Z+6, r1	; 0x06
    8190:	17 82       	std	Z+7, r1	; 0x07
    8192:	10 86       	std	Z+8, r1	; 0x08
    8194:	11 86       	std	Z+9, r1	; 0x09
    8196:	13 8a       	std	Z+19, r1	; 0x13
    8198:	12 8a       	std	Z+18, r1	; 0x12
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
    819a:	45 2b       	or	r20, r21
    819c:	09 f4       	brne	.+2      	; 0x81a0 <follow_path+0x42a>
    819e:	28 ce       	rjmp	.-944    	; 0x7df0 <follow_path+0x7a>
    81a0:	20 e0       	ldi	r18, 0x00	; 0
    81a2:	25 c0       	rjmp	.+74     	; 0x81ee <follow_path+0x478>
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    81a4:	45 2b       	or	r20, r21
    81a6:	11 f1       	breq	.+68     	; 0x81ec <follow_path+0x476>
    81a8:	22 c0       	rjmp	.+68     	; 0x81ee <follow_path+0x478>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    81aa:	82 fd       	sbrc	r24, 2
    81ac:	20 c0       	rjmp	.+64     	; 0x81ee <follow_path+0x478>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    81ae:	d5 01       	movw	r26, r10
    81b0:	52 96       	adiw	r26, 0x12	; 18
    81b2:	ed 91       	ld	r30, X+
    81b4:	fc 91       	ld	r31, X
    81b6:	53 97       	sbiw	r26, 0x13	; 19
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    81b8:	83 85       	ldd	r24, Z+11	; 0x0b
    81ba:	84 ff       	sbrs	r24, 4
    81bc:	17 c0       	rjmp	.+46     	; 0x81ec <follow_path+0x476>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
    81be:	84 89       	ldd	r24, Z+20	; 0x14
    81c0:	95 89       	ldd	r25, Z+21	; 0x15
    81c2:	a0 e0       	ldi	r26, 0x00	; 0
    81c4:	b0 e0       	ldi	r27, 0x00	; 0
    81c6:	dc 01       	movw	r26, r24
    81c8:	99 27       	eor	r25, r25
    81ca:	88 27       	eor	r24, r24
    81cc:	22 8d       	ldd	r18, Z+26	; 0x1a
    81ce:	33 8d       	ldd	r19, Z+27	; 0x1b
    81d0:	40 e0       	ldi	r20, 0x00	; 0
    81d2:	50 e0       	ldi	r21, 0x00	; 0
    81d4:	82 2b       	or	r24, r18
    81d6:	93 2b       	or	r25, r19
    81d8:	a4 2b       	or	r26, r20
    81da:	b5 2b       	or	r27, r21
    81dc:	f5 01       	movw	r30, r10
    81de:	86 83       	std	Z+6, r24	; 0x06
    81e0:	97 83       	std	Z+7, r25	; 0x07
    81e2:	a0 87       	std	Z+8, r26	; 0x08
    81e4:	b1 87       	std	Z+9, r27	; 0x09
    81e6:	04 ce       	rjmp	.-1016   	; 0x7df0 <follow_path+0x7a>
    81e8:	26 e0       	ldi	r18, 0x06	; 6
    81ea:	01 c0       	rjmp	.+2      	; 0x81ee <follow_path+0x478>
    81ec:	25 e0       	ldi	r18, 0x05	; 5
		}
	}

	return res;
}
    81ee:	82 2f       	mov	r24, r18
    81f0:	df 91       	pop	r29
    81f2:	cf 91       	pop	r28
    81f4:	1f 91       	pop	r17
    81f6:	0f 91       	pop	r16
    81f8:	ff 90       	pop	r15
    81fa:	ef 90       	pop	r14
    81fc:	df 90       	pop	r13
    81fe:	cf 90       	pop	r12
    8200:	bf 90       	pop	r11
    8202:	af 90       	pop	r10
    8204:	9f 90       	pop	r9
    8206:	8f 90       	pop	r8
    8208:	7f 90       	pop	r7
    820a:	6f 90       	pop	r6
    820c:	5f 90       	pop	r5
    820e:	4f 90       	pop	r4
    8210:	3f 90       	pop	r3
    8212:	2f 90       	pop	r2
    8214:	08 95       	ret
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
			if (res != FR_OK) {				/* Failed to find the object */
    8216:	e8 01       	movw	r28, r16
    8218:	dd 24       	eor	r13, r13
    821a:	54 ce       	rjmp	.-856    	; 0x7ec4 <follow_path+0x14e>

0000821c <f_utime>:

FRESULT f_utime (
	const TCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the time stamp to be set */
)
{
    821c:	ef 92       	push	r14
    821e:	ff 92       	push	r15
    8220:	0f 93       	push	r16
    8222:	1f 93       	push	r17
    8224:	df 93       	push	r29
    8226:	cf 93       	push	r28
    8228:	cd b7       	in	r28, 0x3d	; 61
    822a:	de b7       	in	r29, 0x3e	; 62
    822c:	a8 97       	sbiw	r28, 0x28	; 40
    822e:	0f b6       	in	r0, 0x3f	; 63
    8230:	f8 94       	cli
    8232:	de bf       	out	0x3e, r29	; 62
    8234:	0f be       	out	0x3f, r0	; 63
    8236:	cd bf       	out	0x3d, r28	; 61
    8238:	98 a7       	std	Y+40, r25	; 0x28
    823a:	8f a3       	std	Y+39, r24	; 0x27
    823c:	7b 01       	movw	r14, r22
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    823e:	8e 01       	movw	r16, r28
    8240:	03 5f       	subi	r16, 0xF3	; 243
    8242:	1f 4f       	sbci	r17, 0xFF	; 255
    8244:	ce 01       	movw	r24, r28
    8246:	87 96       	adiw	r24, 0x27	; 39
    8248:	b8 01       	movw	r22, r16
    824a:	41 e0       	ldi	r20, 0x01	; 1
    824c:	0e 94 3e 29 	call	0x527c	; 0x527c <chk_mounted>
	if (res == FR_OK) {
    8250:	88 23       	and	r24, r24
    8252:	71 f5       	brne	.+92     	; 0x82b0 <f_utime+0x94>
		INIT_BUF(dj);
    8254:	ce 01       	movw	r24, r28
    8256:	01 96       	adiw	r24, 0x01	; 1
    8258:	9a a3       	std	Y+34, r25	; 0x22
    825a:	89 a3       	std	Y+33, r24	; 0x21
    825c:	8f e8       	ldi	r24, 0x8F	; 143
    825e:	91 e0       	ldi	r25, 0x01	; 1
    8260:	9c a3       	std	Y+36, r25	; 0x24
    8262:	8b a3       	std	Y+35, r24	; 0x23
		res = follow_path(&dj, path);	/* Follow the file path */
    8264:	6f a1       	ldd	r22, Y+39	; 0x27
    8266:	78 a5       	ldd	r23, Y+40	; 0x28
    8268:	c8 01       	movw	r24, r16
    826a:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    826e:	88 23       	and	r24, r24
    8270:	f9 f4       	brne	.+62     	; 0x82b0 <f_utime+0x94>
    8272:	e9 a1       	ldd	r30, Y+33	; 0x21
    8274:	fa a1       	ldd	r31, Y+34	; 0x22
    8276:	83 85       	ldd	r24, Z+11	; 0x0b
    8278:	85 fd       	sbrc	r24, 5
    827a:	19 c0       	rjmp	.+50     	; 0x82ae <f_utime+0x92>
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    827c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    827e:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {					/* Root directory */
    8280:	30 97       	sbiw	r30, 0x00	; 0
    8282:	a9 f0       	breq	.+42     	; 0x82ae <f_utime+0x92>
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    8284:	d7 01       	movw	r26, r14
    8286:	16 96       	adiw	r26, 0x06	; 6
    8288:	8d 91       	ld	r24, X+
    828a:	9c 91       	ld	r25, X
    828c:	17 97       	sbiw	r26, 0x07	; 7
    828e:	97 8b       	std	Z+23, r25	; 0x17
    8290:	86 8b       	std	Z+22, r24	; 0x16
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    8292:	14 96       	adiw	r26, 0x04	; 4
    8294:	8d 91       	ld	r24, X+
    8296:	9c 91       	ld	r25, X
    8298:	15 97       	sbiw	r26, 0x05	; 5
    829a:	91 8f       	std	Z+25, r25	; 0x19
    829c:	80 8f       	std	Z+24, r24	; 0x18
				dj.fs->wflag = 1;
    829e:	ed 85       	ldd	r30, Y+13	; 0x0d
    82a0:	fe 85       	ldd	r31, Y+14	; 0x0e
    82a2:	81 e0       	ldi	r24, 0x01	; 1
    82a4:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    82a6:	cf 01       	movw	r24, r30
    82a8:	0e 94 65 2c 	call	0x58ca	; 0x58ca <sync>
    82ac:	01 c0       	rjmp	.+2      	; 0x82b0 <f_utime+0x94>
    82ae:	86 e0       	ldi	r24, 0x06	; 6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    82b0:	a8 96       	adiw	r28, 0x28	; 40
    82b2:	0f b6       	in	r0, 0x3f	; 63
    82b4:	f8 94       	cli
    82b6:	de bf       	out	0x3e, r29	; 62
    82b8:	0f be       	out	0x3f, r0	; 63
    82ba:	cd bf       	out	0x3d, r28	; 61
    82bc:	cf 91       	pop	r28
    82be:	df 91       	pop	r29
    82c0:	1f 91       	pop	r17
    82c2:	0f 91       	pop	r16
    82c4:	ff 90       	pop	r15
    82c6:	ef 90       	pop	r14
    82c8:	08 95       	ret

000082ca <f_chmod>:
FRESULT f_chmod (
	const TCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    82ca:	ef 92       	push	r14
    82cc:	ff 92       	push	r15
    82ce:	0f 93       	push	r16
    82d0:	1f 93       	push	r17
    82d2:	df 93       	push	r29
    82d4:	cf 93       	push	r28
    82d6:	cd b7       	in	r28, 0x3d	; 61
    82d8:	de b7       	in	r29, 0x3e	; 62
    82da:	a8 97       	sbiw	r28, 0x28	; 40
    82dc:	0f b6       	in	r0, 0x3f	; 63
    82de:	f8 94       	cli
    82e0:	de bf       	out	0x3e, r29	; 62
    82e2:	0f be       	out	0x3f, r0	; 63
    82e4:	cd bf       	out	0x3d, r28	; 61
    82e6:	98 a7       	std	Y+40, r25	; 0x28
    82e8:	8f a3       	std	Y+39, r24	; 0x27
    82ea:	e6 2e       	mov	r14, r22
    82ec:	f4 2e       	mov	r15, r20
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    82ee:	8e 01       	movw	r16, r28
    82f0:	03 5f       	subi	r16, 0xF3	; 243
    82f2:	1f 4f       	sbci	r17, 0xFF	; 255
    82f4:	ce 01       	movw	r24, r28
    82f6:	87 96       	adiw	r24, 0x27	; 39
    82f8:	b8 01       	movw	r22, r16
    82fa:	41 e0       	ldi	r20, 0x01	; 1
    82fc:	0e 94 3e 29 	call	0x527c	; 0x527c <chk_mounted>
	if (res == FR_OK) {
    8300:	88 23       	and	r24, r24
    8302:	51 f5       	brne	.+84     	; 0x8358 <f_chmod+0x8e>
		INIT_BUF(dj);
    8304:	ce 01       	movw	r24, r28
    8306:	01 96       	adiw	r24, 0x01	; 1
    8308:	9a a3       	std	Y+34, r25	; 0x22
    830a:	89 a3       	std	Y+33, r24	; 0x21
    830c:	8f e8       	ldi	r24, 0x8F	; 143
    830e:	91 e0       	ldi	r25, 0x01	; 1
    8310:	9c a3       	std	Y+36, r25	; 0x24
    8312:	8b a3       	std	Y+35, r24	; 0x23
		res = follow_path(&dj, path);		/* Follow the file path */
    8314:	6f a1       	ldd	r22, Y+39	; 0x27
    8316:	78 a5       	ldd	r23, Y+40	; 0x28
    8318:	c8 01       	movw	r24, r16
    831a:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    831e:	88 23       	and	r24, r24
    8320:	d9 f4       	brne	.+54     	; 0x8358 <f_chmod+0x8e>
    8322:	e9 a1       	ldd	r30, Y+33	; 0x21
    8324:	fa a1       	ldd	r31, Y+34	; 0x22
    8326:	83 85       	ldd	r24, Z+11	; 0x0b
    8328:	85 fd       	sbrc	r24, 5
    832a:	15 c0       	rjmp	.+42     	; 0x8356 <f_chmod+0x8c>
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    832c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    832e:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    8330:	30 97       	sbiw	r30, 0x00	; 0
    8332:	89 f0       	breq	.+34     	; 0x8356 <f_chmod+0x8c>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    8334:	9f 2d       	mov	r25, r15
    8336:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    8338:	89 2f       	mov	r24, r25
    833a:	80 95       	com	r24
    833c:	23 85       	ldd	r18, Z+11	; 0x0b
    833e:	82 23       	and	r24, r18
    8340:	9e 21       	and	r25, r14
    8342:	89 2b       	or	r24, r25
    8344:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    8346:	ed 85       	ldd	r30, Y+13	; 0x0d
    8348:	fe 85       	ldd	r31, Y+14	; 0x0e
    834a:	81 e0       	ldi	r24, 0x01	; 1
    834c:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    834e:	cf 01       	movw	r24, r30
    8350:	0e 94 65 2c 	call	0x58ca	; 0x58ca <sync>
    8354:	01 c0       	rjmp	.+2      	; 0x8358 <f_chmod+0x8e>
    8356:	86 e0       	ldi	r24, 0x06	; 6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    8358:	a8 96       	adiw	r28, 0x28	; 40
    835a:	0f b6       	in	r0, 0x3f	; 63
    835c:	f8 94       	cli
    835e:	de bf       	out	0x3e, r29	; 62
    8360:	0f be       	out	0x3f, r0	; 63
    8362:	cd bf       	out	0x3d, r28	; 61
    8364:	cf 91       	pop	r28
    8366:	df 91       	pop	r29
    8368:	1f 91       	pop	r17
    836a:	0f 91       	pop	r16
    836c:	ff 90       	pop	r15
    836e:	ef 90       	pop	r14
    8370:	08 95       	ret

00008372 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    8372:	cf 92       	push	r12
    8374:	df 92       	push	r13
    8376:	ef 92       	push	r14
    8378:	ff 92       	push	r15
    837a:	0f 93       	push	r16
    837c:	1f 93       	push	r17
    837e:	df 93       	push	r29
    8380:	cf 93       	push	r28
    8382:	cd b7       	in	r28, 0x3d	; 61
    8384:	de b7       	in	r29, 0x3e	; 62
    8386:	c2 54       	subi	r28, 0x42	; 66
    8388:	d0 40       	sbci	r29, 0x00	; 0
    838a:	0f b6       	in	r0, 0x3f	; 63
    838c:	f8 94       	cli
    838e:	de bf       	out	0x3e, r29	; 62
    8390:	0f be       	out	0x3f, r0	; 63
    8392:	cd bf       	out	0x3d, r28	; 61
    8394:	8e 01       	movw	r16, r28
    8396:	0f 5b       	subi	r16, 0xBF	; 191
    8398:	1f 4f       	sbci	r17, 0xFF	; 255
    839a:	f8 01       	movw	r30, r16
    839c:	91 83       	std	Z+1, r25	; 0x01
    839e:	80 83       	st	Z, r24
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    83a0:	3d e0       	ldi	r19, 0x0D	; 13
    83a2:	e3 2e       	mov	r14, r19
    83a4:	f1 2c       	mov	r15, r1
    83a6:	ec 0e       	add	r14, r28
    83a8:	fd 1e       	adc	r15, r29
    83aa:	c8 01       	movw	r24, r16
    83ac:	b7 01       	movw	r22, r14
    83ae:	41 e0       	ldi	r20, 0x01	; 1
    83b0:	0e 94 3e 29 	call	0x527c	; 0x527c <chk_mounted>
    83b4:	28 2f       	mov	r18, r24
	if (res == FR_OK) {
    83b6:	88 23       	and	r24, r24
    83b8:	09 f0       	breq	.+2      	; 0x83bc <f_unlink+0x4a>
    83ba:	80 c0       	rjmp	.+256    	; 0x84bc <f_unlink+0x14a>
		INIT_BUF(dj);
    83bc:	ce 01       	movw	r24, r28
    83be:	01 96       	adiw	r24, 0x01	; 1
    83c0:	9a a3       	std	Y+34, r25	; 0x22
    83c2:	89 a3       	std	Y+33, r24	; 0x21
    83c4:	8f e8       	ldi	r24, 0x8F	; 143
    83c6:	91 e0       	ldi	r25, 0x01	; 1
    83c8:	9c a3       	std	Y+36, r25	; 0x24
    83ca:	8b a3       	std	Y+35, r24	; 0x23
		res = follow_path(&dj, path);		/* Follow the file path */
    83cc:	f8 01       	movw	r30, r16
    83ce:	60 81       	ld	r22, Z
    83d0:	71 81       	ldd	r23, Z+1	; 0x01
    83d2:	c7 01       	movw	r24, r14
    83d4:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <follow_path>
    83d8:	28 2f       	mov	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    83da:	88 23       	and	r24, r24
    83dc:	09 f0       	breq	.+2      	; 0x83e0 <f_unlink+0x6e>
    83de:	6e c0       	rjmp	.+220    	; 0x84bc <f_unlink+0x14a>
    83e0:	e9 a1       	ldd	r30, Y+33	; 0x21
    83e2:	fa a1       	ldd	r31, Y+34	; 0x22
    83e4:	83 85       	ldd	r24, Z+11	; 0x0b
    83e6:	85 ff       	sbrs	r24, 5
    83e8:	02 c0       	rjmp	.+4      	; 0x83ee <f_unlink+0x7c>
    83ea:	26 e0       	ldi	r18, 0x06	; 6
    83ec:	67 c0       	rjmp	.+206    	; 0x84bc <f_unlink+0x14a>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
    83ee:	ef 8d       	ldd	r30, Y+31	; 0x1f
    83f0:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {
    83f2:	30 97       	sbiw	r30, 0x00	; 0
    83f4:	11 f4       	brne	.+4      	; 0x83fa <f_unlink+0x88>
    83f6:	26 e0       	ldi	r18, 0x06	; 6
    83f8:	03 c0       	rjmp	.+6      	; 0x8400 <f_unlink+0x8e>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    83fa:	83 85       	ldd	r24, Z+11	; 0x0b
    83fc:	80 fd       	sbrc	r24, 0
    83fe:	27 e0       	ldi	r18, 0x07	; 7
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = LD_CLUST(dir);
    8400:	84 89       	ldd	r24, Z+20	; 0x14
    8402:	95 89       	ldd	r25, Z+21	; 0x15
    8404:	42 8d       	ldd	r20, Z+26	; 0x1a
    8406:	53 8d       	ldd	r21, Z+27	; 0x1b
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    8408:	22 23       	and	r18, r18
    840a:	09 f0       	breq	.+2      	; 0x840e <f_unlink+0x9c>
    840c:	57 c0       	rjmp	.+174    	; 0x84bc <f_unlink+0x14a>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = LD_CLUST(dir);
    840e:	a0 e0       	ldi	r26, 0x00	; 0
    8410:	b0 e0       	ldi	r27, 0x00	; 0
    8412:	8c 01       	movw	r16, r24
    8414:	ff 24       	eor	r15, r15
    8416:	ee 24       	eor	r14, r14
    8418:	ca 01       	movw	r24, r20
    841a:	a0 e0       	ldi	r26, 0x00	; 0
    841c:	b0 e0       	ldi	r27, 0x00	; 0
    841e:	e8 2a       	or	r14, r24
    8420:	f9 2a       	or	r15, r25
    8422:	0a 2b       	or	r16, r26
    8424:	1b 2b       	or	r17, r27
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    8426:	83 85       	ldd	r24, Z+11	; 0x0b
    8428:	84 ff       	sbrs	r24, 4
    842a:	5b c0       	rjmp	.+182    	; 0x84e2 <f_unlink+0x170>
				if (dclst < 2) {
    842c:	f2 e0       	ldi	r31, 0x02	; 2
    842e:	ef 16       	cp	r14, r31
    8430:	f1 04       	cpc	r15, r1
    8432:	01 05       	cpc	r16, r1
    8434:	11 05       	cpc	r17, r1
    8436:	10 f4       	brcc	.+4      	; 0x843c <f_unlink+0xca>
    8438:	22 e0       	ldi	r18, 0x02	; 2
    843a:	40 c0       	rjmp	.+128    	; 0x84bc <f_unlink+0x14a>
					res = FR_INT_ERR;
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
    843c:	97 e2       	ldi	r25, 0x27	; 39
    843e:	c9 2e       	mov	r12, r25
    8440:	d1 2c       	mov	r13, r1
    8442:	cc 0e       	add	r12, r28
    8444:	dd 1e       	adc	r13, r29
    8446:	c6 01       	movw	r24, r12
    8448:	be 01       	movw	r22, r28
    844a:	63 5f       	subi	r22, 0xF3	; 243
    844c:	7f 4f       	sbci	r23, 0xFF	; 255
    844e:	4a e1       	ldi	r20, 0x1A	; 26
    8450:	50 e0       	ldi	r21, 0x00	; 0
    8452:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <mem_cpy>
					sdj.sclust = dclst;
    8456:	ed a6       	std	Y+45, r14	; 0x2d
    8458:	fe a6       	std	Y+46, r15	; 0x2e
    845a:	0f a7       	std	Y+47, r16	; 0x2f
    845c:	18 ab       	std	Y+48, r17	; 0x30
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    845e:	c6 01       	movw	r24, r12
    8460:	62 e0       	ldi	r22, 0x02	; 2
    8462:	70 e0       	ldi	r23, 0x00	; 0
    8464:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <dir_sdi>
    8468:	28 2f       	mov	r18, r24
					if (res == FR_OK) {
    846a:	88 23       	and	r24, r24
    846c:	39 f5       	brne	.+78     	; 0x84bc <f_unlink+0x14a>
						res = dir_read(&sdj);
    846e:	c6 01       	movw	r24, r12
    8470:	0e 94 89 35 	call	0x6b12	; 0x6b12 <dir_read>
    8474:	28 2f       	mov	r18, r24
						if (res == FR_OK			/* Not empty dir */
    8476:	88 23       	and	r24, r24
    8478:	91 f1       	breq	.+100    	; 0x84de <f_unlink+0x16c>
    847a:	ef a1       	ldd	r30, Y+39	; 0x27
    847c:	f8 a5       	ldd	r31, Y+40	; 0x28
    847e:	86 89       	ldd	r24, Z+22	; 0x16
    8480:	97 89       	ldd	r25, Z+23	; 0x17
    8482:	a0 8d       	ldd	r26, Z+24	; 0x18
    8484:	b1 8d       	ldd	r27, Z+25	; 0x19
    8486:	e8 16       	cp	r14, r24
    8488:	f9 06       	cpc	r15, r25
    848a:	0a 07       	cpc	r16, r26
    848c:	1b 07       	cpc	r17, r27
    848e:	39 f1       	breq	.+78     	; 0x84de <f_unlink+0x16c>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    8490:	24 30       	cpi	r18, 0x04	; 4
    8492:	39 f1       	breq	.+78     	; 0x84e2 <f_unlink+0x170>
    8494:	13 c0       	rjmp	.+38     	; 0x84bc <f_unlink+0x14a>
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
				if (res == FR_OK) {
					if (dclst)				/* Remove the cluster chain if exist */
    8496:	e1 14       	cp	r14, r1
    8498:	f1 04       	cpc	r15, r1
    849a:	01 05       	cpc	r16, r1
    849c:	11 05       	cpc	r17, r1
    849e:	49 f0       	breq	.+18     	; 0x84b2 <f_unlink+0x140>
						res = remove_chain(dj.fs, dclst);
    84a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    84a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    84a4:	b8 01       	movw	r22, r16
    84a6:	a7 01       	movw	r20, r14
    84a8:	0e 94 d6 30 	call	0x61ac	; 0x61ac <remove_chain>
    84ac:	28 2f       	mov	r18, r24
					if (res == FR_OK) res = sync(dj.fs);
    84ae:	88 23       	and	r24, r24
    84b0:	29 f4       	brne	.+10     	; 0x84bc <f_unlink+0x14a>
    84b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    84b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    84b6:	0e 94 65 2c 	call	0x58ca	; 0x58ca <sync>
    84ba:	28 2f       	mov	r18, r24
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
    84bc:	82 2f       	mov	r24, r18
    84be:	ce 5b       	subi	r28, 0xBE	; 190
    84c0:	df 4f       	sbci	r29, 0xFF	; 255
    84c2:	0f b6       	in	r0, 0x3f	; 63
    84c4:	f8 94       	cli
    84c6:	de bf       	out	0x3e, r29	; 62
    84c8:	0f be       	out	0x3f, r0	; 63
    84ca:	cd bf       	out	0x3d, r28	; 61
    84cc:	cf 91       	pop	r28
    84ce:	df 91       	pop	r29
    84d0:	1f 91       	pop	r17
    84d2:	0f 91       	pop	r16
    84d4:	ff 90       	pop	r15
    84d6:	ef 90       	pop	r14
    84d8:	df 90       	pop	r13
    84da:	cf 90       	pop	r12
    84dc:	08 95       	ret
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
				if (res == FR_OK) {
					if (dclst)				/* Remove the cluster chain if exist */
						res = remove_chain(dj.fs, dclst);
					if (res == FR_OK) res = sync(dj.fs);
    84de:	27 e0       	ldi	r18, 0x07	; 7
    84e0:	ed cf       	rjmp	.-38     	; 0x84bc <f_unlink+0x14a>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
    84e2:	ce 01       	movw	r24, r28
    84e4:	0d 96       	adiw	r24, 0x0d	; 13
    84e6:	0e 94 46 35 	call	0x6a8c	; 0x6a8c <dir_remove>
    84ea:	28 2f       	mov	r18, r24
				if (res == FR_OK) {
    84ec:	88 23       	and	r24, r24
    84ee:	99 f2       	breq	.-90     	; 0x8496 <f_unlink+0x124>
    84f0:	e5 cf       	rjmp	.-54     	; 0x84bc <f_unlink+0x14a>

000084f2 <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    84f2:	cf 92       	push	r12
    84f4:	df 92       	push	r13
    84f6:	ef 92       	push	r14
    84f8:	ff 92       	push	r15
    84fa:	1f 93       	push	r17
    84fc:	df 93       	push	r29
    84fe:	cf 93       	push	r28
    8500:	cd b7       	in	r28, 0x3d	; 61
    8502:	de b7       	in	r29, 0x3e	; 62
    8504:	a8 97       	sbiw	r28, 0x28	; 40
    8506:	0f b6       	in	r0, 0x3f	; 63
    8508:	f8 94       	cli
    850a:	de bf       	out	0x3e, r29	; 62
    850c:	0f be       	out	0x3f, r0	; 63
    850e:	cd bf       	out	0x3d, r28	; 61
    8510:	98 a7       	std	Y+40, r25	; 0x28
    8512:	8f a3       	std	Y+39, r24	; 0x27
    8514:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    8516:	4d e0       	ldi	r20, 0x0D	; 13
    8518:	e4 2e       	mov	r14, r20
    851a:	f1 2c       	mov	r15, r1
    851c:	ec 0e       	add	r14, r28
    851e:	fd 1e       	adc	r15, r29
    8520:	ce 01       	movw	r24, r28
    8522:	87 96       	adiw	r24, 0x27	; 39
    8524:	b7 01       	movw	r22, r14
    8526:	40 e0       	ldi	r20, 0x00	; 0
    8528:	0e 94 3e 29 	call	0x527c	; 0x527c <chk_mounted>
    852c:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    852e:	88 23       	and	r24, r24
    8530:	d1 f4       	brne	.+52     	; 0x8566 <f_stat+0x74>
		INIT_BUF(dj);
    8532:	ce 01       	movw	r24, r28
    8534:	01 96       	adiw	r24, 0x01	; 1
    8536:	9a a3       	std	Y+34, r25	; 0x22
    8538:	89 a3       	std	Y+33, r24	; 0x21
    853a:	8f e8       	ldi	r24, 0x8F	; 143
    853c:	91 e0       	ldi	r25, 0x01	; 1
    853e:	9c a3       	std	Y+36, r25	; 0x24
    8540:	8b a3       	std	Y+35, r24	; 0x23
		res = follow_path(&dj, path);	/* Follow the file path */
    8542:	6f a1       	ldd	r22, Y+39	; 0x27
    8544:	78 a5       	ldd	r23, Y+40	; 0x28
    8546:	c7 01       	movw	r24, r14
    8548:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <follow_path>
    854c:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follow completed */
    854e:	88 23       	and	r24, r24
    8550:	51 f4       	brne	.+20     	; 0x8566 <f_stat+0x74>
			if (dj.dir)		/* Found an object */
    8552:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8554:	98 a1       	ldd	r25, Y+32	; 0x20
    8556:	89 2b       	or	r24, r25
    8558:	11 f4       	brne	.+4      	; 0x855e <f_stat+0x6c>
    855a:	16 e0       	ldi	r17, 0x06	; 6
    855c:	04 c0       	rjmp	.+8      	; 0x8566 <f_stat+0x74>
				get_fileinfo(&dj, fno);
    855e:	c7 01       	movw	r24, r14
    8560:	b6 01       	movw	r22, r12
    8562:	0e 94 3f 3b 	call	0x767e	; 0x767e <get_fileinfo>
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    8566:	81 2f       	mov	r24, r17
    8568:	a8 96       	adiw	r28, 0x28	; 40
    856a:	0f b6       	in	r0, 0x3f	; 63
    856c:	f8 94       	cli
    856e:	de bf       	out	0x3e, r29	; 62
    8570:	0f be       	out	0x3f, r0	; 63
    8572:	cd bf       	out	0x3d, r28	; 61
    8574:	cf 91       	pop	r28
    8576:	df 91       	pop	r29
    8578:	1f 91       	pop	r17
    857a:	ff 90       	pop	r15
    857c:	ef 90       	pop	r14
    857e:	df 90       	pop	r13
    8580:	cf 90       	pop	r12
    8582:	08 95       	ret

00008584 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    8584:	0f 93       	push	r16
    8586:	1f 93       	push	r17
    8588:	df 93       	push	r29
    858a:	cf 93       	push	r28
    858c:	cd b7       	in	r28, 0x3d	; 61
    858e:	de b7       	in	r29, 0x3e	; 62
    8590:	2e 97       	sbiw	r28, 0x0e	; 14
    8592:	0f b6       	in	r0, 0x3f	; 63
    8594:	f8 94       	cli
    8596:	de bf       	out	0x3e, r29	; 62
    8598:	0f be       	out	0x3f, r0	; 63
    859a:	cd bf       	out	0x3d, r28	; 61
    859c:	8c 01       	movw	r16, r24
    859e:	7e 87       	std	Y+14, r23	; 0x0e
    85a0:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
    85a2:	ce 01       	movw	r24, r28
    85a4:	0d 96       	adiw	r24, 0x0d	; 13
    85a6:	b8 01       	movw	r22, r16
    85a8:	40 e0       	ldi	r20, 0x00	; 0
    85aa:	0e 94 3e 29 	call	0x527c	; 0x527c <chk_mounted>
	if (res == FR_OK) {
    85ae:	88 23       	and	r24, r24
    85b0:	09 f0       	breq	.+2      	; 0x85b4 <f_opendir+0x30>
    85b2:	44 c0       	rjmp	.+136    	; 0x863c <f_opendir+0xb8>
		INIT_BUF(*dj);
    85b4:	ce 01       	movw	r24, r28
    85b6:	01 96       	adiw	r24, 0x01	; 1
    85b8:	d8 01       	movw	r26, r16
    85ba:	55 96       	adiw	r26, 0x15	; 21
    85bc:	9c 93       	st	X, r25
    85be:	8e 93       	st	-X, r24
    85c0:	54 97       	sbiw	r26, 0x14	; 20
    85c2:	8f e8       	ldi	r24, 0x8F	; 143
    85c4:	91 e0       	ldi	r25, 0x01	; 1
    85c6:	57 96       	adiw	r26, 0x17	; 23
    85c8:	9c 93       	st	X, r25
    85ca:	8e 93       	st	-X, r24
    85cc:	56 97       	sbiw	r26, 0x16	; 22
		res = follow_path(dj, path);			/* Follow the path to the directory */
    85ce:	6d 85       	ldd	r22, Y+13	; 0x0d
    85d0:	7e 85       	ldd	r23, Y+14	; 0x0e
    85d2:	c8 01       	movw	r24, r16
    85d4:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    85d8:	88 23       	and	r24, r24
    85da:	69 f5       	brne	.+90     	; 0x8636 <f_opendir+0xb2>
			if (dj->dir) {						/* It is not the root dir */
    85dc:	d8 01       	movw	r26, r16
    85de:	52 96       	adiw	r26, 0x12	; 18
    85e0:	ed 91       	ld	r30, X+
    85e2:	fc 91       	ld	r31, X
    85e4:	53 97       	sbiw	r26, 0x13	; 19
    85e6:	30 97       	sbiw	r30, 0x00	; 0
    85e8:	b9 f0       	breq	.+46     	; 0x8618 <f_opendir+0x94>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    85ea:	83 85       	ldd	r24, Z+11	; 0x0b
    85ec:	84 ff       	sbrs	r24, 4
    85ee:	25 c0       	rjmp	.+74     	; 0x863a <f_opendir+0xb6>
					dj->sclust = LD_CLUST(dj->dir);
    85f0:	84 89       	ldd	r24, Z+20	; 0x14
    85f2:	95 89       	ldd	r25, Z+21	; 0x15
    85f4:	a0 e0       	ldi	r26, 0x00	; 0
    85f6:	b0 e0       	ldi	r27, 0x00	; 0
    85f8:	dc 01       	movw	r26, r24
    85fa:	99 27       	eor	r25, r25
    85fc:	88 27       	eor	r24, r24
    85fe:	22 8d       	ldd	r18, Z+26	; 0x1a
    8600:	33 8d       	ldd	r19, Z+27	; 0x1b
    8602:	40 e0       	ldi	r20, 0x00	; 0
    8604:	50 e0       	ldi	r21, 0x00	; 0
    8606:	82 2b       	or	r24, r18
    8608:	93 2b       	or	r25, r19
    860a:	a4 2b       	or	r26, r20
    860c:	b5 2b       	or	r27, r21
    860e:	f8 01       	movw	r30, r16
    8610:	86 83       	std	Z+6, r24	; 0x06
    8612:	97 83       	std	Z+7, r25	; 0x07
    8614:	a0 87       	std	Z+8, r26	; 0x08
    8616:	b1 87       	std	Z+9, r27	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    8618:	d8 01       	movw	r26, r16
    861a:	ed 91       	ld	r30, X+
    861c:	fc 91       	ld	r31, X
    861e:	11 97       	sbiw	r26, 0x01	; 1
    8620:	86 81       	ldd	r24, Z+6	; 0x06
    8622:	97 81       	ldd	r25, Z+7	; 0x07
    8624:	13 96       	adiw	r26, 0x03	; 3
    8626:	9c 93       	st	X, r25
    8628:	8e 93       	st	-X, r24
    862a:	12 97       	sbiw	r26, 0x02	; 2
				res = dir_sdi(dj, 0);			/* Rewind dir */
    862c:	c8 01       	movw	r24, r16
    862e:	60 e0       	ldi	r22, 0x00	; 0
    8630:	70 e0       	ldi	r23, 0x00	; 0
    8632:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <dir_sdi>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    8636:	84 30       	cpi	r24, 0x04	; 4
    8638:	09 f4       	brne	.+2      	; 0x863c <f_opendir+0xb8>
    863a:	85 e0       	ldi	r24, 0x05	; 5
	}

	LEAVE_FF(dj->fs, res);
}
    863c:	2e 96       	adiw	r28, 0x0e	; 14
    863e:	0f b6       	in	r0, 0x3f	; 63
    8640:	f8 94       	cli
    8642:	de bf       	out	0x3e, r29	; 62
    8644:	0f be       	out	0x3f, r0	; 63
    8646:	cd bf       	out	0x3d, r28	; 61
    8648:	cf 91       	pop	r28
    864a:	df 91       	pop	r29
    864c:	1f 91       	pop	r17
    864e:	0f 91       	pop	r16
    8650:	08 95       	ret

00008652 <f_chdir>:


FRESULT f_chdir (
	const TCHAR *path	/* Pointer to the directory path */
)
{
    8652:	0f 93       	push	r16
    8654:	1f 93       	push	r17
    8656:	df 93       	push	r29
    8658:	cf 93       	push	r28
    865a:	cd b7       	in	r28, 0x3d	; 61
    865c:	de b7       	in	r29, 0x3e	; 62
    865e:	a8 97       	sbiw	r28, 0x28	; 40
    8660:	0f b6       	in	r0, 0x3f	; 63
    8662:	f8 94       	cli
    8664:	de bf       	out	0x3e, r29	; 62
    8666:	0f be       	out	0x3f, r0	; 63
    8668:	cd bf       	out	0x3d, r28	; 61
    866a:	98 a7       	std	Y+40, r25	; 0x28
    866c:	8f a3       	std	Y+39, r24	; 0x27
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    866e:	8e 01       	movw	r16, r28
    8670:	03 5f       	subi	r16, 0xF3	; 243
    8672:	1f 4f       	sbci	r17, 0xFF	; 255
    8674:	ce 01       	movw	r24, r28
    8676:	87 96       	adiw	r24, 0x27	; 39
    8678:	b8 01       	movw	r22, r16
    867a:	40 e0       	ldi	r20, 0x00	; 0
    867c:	0e 94 3e 29 	call	0x527c	; 0x527c <chk_mounted>
    8680:	68 2f       	mov	r22, r24
	if (res == FR_OK) {
    8682:	88 23       	and	r24, r24
    8684:	09 f0       	breq	.+2      	; 0x8688 <f_chdir+0x36>
    8686:	3f c0       	rjmp	.+126    	; 0x8706 <f_chdir+0xb4>
		INIT_BUF(dj);
    8688:	ce 01       	movw	r24, r28
    868a:	01 96       	adiw	r24, 0x01	; 1
    868c:	9a a3       	std	Y+34, r25	; 0x22
    868e:	89 a3       	std	Y+33, r24	; 0x21
    8690:	8f e8       	ldi	r24, 0x8F	; 143
    8692:	91 e0       	ldi	r25, 0x01	; 1
    8694:	9c a3       	std	Y+36, r25	; 0x24
    8696:	8b a3       	std	Y+35, r24	; 0x23
		res = follow_path(&dj, path);		/* Follow the path */
    8698:	6f a1       	ldd	r22, Y+39	; 0x27
    869a:	78 a5       	ldd	r23, Y+40	; 0x28
    869c:	c8 01       	movw	r24, r16
    869e:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <follow_path>
    86a2:	68 2f       	mov	r22, r24
		FREE_BUF();
		if (res == FR_OK) {					/* Follow completed */
    86a4:	88 23       	and	r24, r24
    86a6:	61 f5       	brne	.+88     	; 0x8700 <f_chdir+0xae>
			if (!dj.dir) {
    86a8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    86aa:	38 a1       	ldd	r19, Y+32	; 0x20
    86ac:	21 15       	cp	r18, r1
    86ae:	31 05       	cpc	r19, r1
    86b0:	39 f4       	brne	.+14     	; 0x86c0 <f_chdir+0x6e>
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
    86b2:	ed 85       	ldd	r30, Y+13	; 0x0d
    86b4:	fe 85       	ldd	r31, Y+14	; 0x0e
    86b6:	8b 89       	ldd	r24, Y+19	; 0x13
    86b8:	9c 89       	ldd	r25, Y+20	; 0x14
    86ba:	ad 89       	ldd	r26, Y+21	; 0x15
    86bc:	be 89       	ldd	r27, Y+22	; 0x16
    86be:	1b c0       	rjmp	.+54     	; 0x86f6 <f_chdir+0xa4>
			} else {
				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
    86c0:	d9 01       	movw	r26, r18
    86c2:	1b 96       	adiw	r26, 0x0b	; 11
    86c4:	8c 91       	ld	r24, X
    86c6:	1b 97       	sbiw	r26, 0x0b	; 11
    86c8:	84 ff       	sbrs	r24, 4
    86ca:	1c c0       	rjmp	.+56     	; 0x8704 <f_chdir+0xb2>
					dj.fs->cdir = LD_CLUST(dj.dir);
    86cc:	0d 85       	ldd	r16, Y+13	; 0x0d
    86ce:	1e 85       	ldd	r17, Y+14	; 0x0e
    86d0:	54 96       	adiw	r26, 0x14	; 20
    86d2:	8d 91       	ld	r24, X+
    86d4:	9c 91       	ld	r25, X
    86d6:	55 97       	sbiw	r26, 0x15	; 21
    86d8:	a0 e0       	ldi	r26, 0x00	; 0
    86da:	b0 e0       	ldi	r27, 0x00	; 0
    86dc:	dc 01       	movw	r26, r24
    86de:	99 27       	eor	r25, r25
    86e0:	88 27       	eor	r24, r24
    86e2:	f9 01       	movw	r30, r18
    86e4:	22 8d       	ldd	r18, Z+26	; 0x1a
    86e6:	33 8d       	ldd	r19, Z+27	; 0x1b
    86e8:	40 e0       	ldi	r20, 0x00	; 0
    86ea:	50 e0       	ldi	r21, 0x00	; 0
    86ec:	82 2b       	or	r24, r18
    86ee:	93 2b       	or	r25, r19
    86f0:	a4 2b       	or	r26, r20
    86f2:	b5 2b       	or	r27, r21
    86f4:	f8 01       	movw	r30, r16
    86f6:	86 8b       	std	Z+22, r24	; 0x16
    86f8:	97 8b       	std	Z+23, r25	; 0x17
    86fa:	a0 8f       	std	Z+24, r26	; 0x18
    86fc:	b1 8f       	std	Z+25, r27	; 0x19
    86fe:	03 c0       	rjmp	.+6      	; 0x8706 <f_chdir+0xb4>
				else
					res = FR_NO_PATH;		/* Reached but a file */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    8700:	84 30       	cpi	r24, 0x04	; 4
    8702:	09 f4       	brne	.+2      	; 0x8706 <f_chdir+0xb4>
    8704:	65 e0       	ldi	r22, 0x05	; 5
	}

	LEAVE_FF(dj.fs, res);
}
    8706:	86 2f       	mov	r24, r22
    8708:	a8 96       	adiw	r28, 0x28	; 40
    870a:	0f b6       	in	r0, 0x3f	; 63
    870c:	f8 94       	cli
    870e:	de bf       	out	0x3e, r29	; 62
    8710:	0f be       	out	0x3f, r0	; 63
    8712:	cd bf       	out	0x3d, r28	; 61
    8714:	cf 91       	pop	r28
    8716:	df 91       	pop	r29
    8718:	1f 91       	pop	r17
    871a:	0f 91       	pop	r16
    871c:	08 95       	ret

0000871e <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    871e:	7f 92       	push	r7
    8720:	8f 92       	push	r8
    8722:	9f 92       	push	r9
    8724:	af 92       	push	r10
    8726:	bf 92       	push	r11
    8728:	cf 92       	push	r12
    872a:	df 92       	push	r13
    872c:	ef 92       	push	r14
    872e:	ff 92       	push	r15
    8730:	0f 93       	push	r16
    8732:	1f 93       	push	r17
    8734:	df 93       	push	r29
    8736:	cf 93       	push	r28
    8738:	cd b7       	in	r28, 0x3d	; 61
    873a:	de b7       	in	r29, 0x3e	; 62
    873c:	2c 97       	sbiw	r28, 0x0c	; 12
    873e:	0f b6       	in	r0, 0x3f	; 63
    8740:	f8 94       	cli
    8742:	de bf       	out	0x3e, r29	; 62
    8744:	0f be       	out	0x3f, r0	; 63
    8746:	cd bf       	out	0x3d, r28	; 61
    8748:	7c 01       	movw	r14, r24
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
    874a:	dc 01       	movw	r26, r24
    874c:	54 96       	adiw	r26, 0x14	; 20
    874e:	ad 90       	ld	r10, X+
    8750:	bc 90       	ld	r11, X
    8752:	55 97       	sbiw	r26, 0x15	; 21
    8754:	56 96       	adiw	r26, 0x16	; 22
    8756:	9c 90       	ld	r9, X
    8758:	56 97       	sbiw	r26, 0x16	; 22
    875a:	57 96       	adiw	r26, 0x17	; 23
    875c:	8c 90       	ld	r8, X
	mem_cpy(sn, fn, 12);
    875e:	8e 01       	movw	r16, r28
    8760:	0f 5f       	subi	r16, 0xFF	; 255
    8762:	1f 4f       	sbci	r17, 0xFF	; 255
    8764:	c8 01       	movw	r24, r16
    8766:	b5 01       	movw	r22, r10
    8768:	4c e0       	ldi	r20, 0x0C	; 12
    876a:	50 e0       	ldi	r21, 0x00	; 0
    876c:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <mem_cpy>

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
    8770:	8c 85       	ldd	r24, Y+12	; 0x0c
    8772:	85 ff       	sbrs	r24, 5
    8774:	02 c0       	rjmp	.+4      	; 0x877a <dir_register+0x5c>
    8776:	16 e0       	ldi	r17, 0x06	; 6
    8778:	46 c1       	rjmp	.+652    	; 0x8a06 <dir_register+0x2e8>
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    877a:	80 ff       	sbrs	r24, 0
    877c:	30 c0       	rjmp	.+96     	; 0x87de <dir_register+0xc0>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    877e:	f5 01       	movw	r30, r10
    8780:	13 86       	std	Z+11, r1	; 0x0b
    8782:	d7 01       	movw	r26, r14
    8784:	57 96       	adiw	r26, 0x17	; 23
    8786:	1c 92       	st	X, r1
    8788:	1e 92       	st	-X, r1
    878a:	56 97       	sbiw	r26, 0x16	; 22
    878c:	41 e0       	ldi	r20, 0x01	; 1
    878e:	c4 2e       	mov	r12, r20
    8790:	d1 2c       	mov	r13, r1
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
    8792:	c8 01       	movw	r24, r16
    8794:	70 2e       	mov	r7, r16
    8796:	09 2f       	mov	r16, r25
    8798:	c5 01       	movw	r24, r10
    879a:	67 2d       	mov	r22, r7
    879c:	70 2f       	mov	r23, r16
    879e:	49 2d       	mov	r20, r9
    87a0:	58 2d       	mov	r21, r8
    87a2:	96 01       	movw	r18, r12
    87a4:	0e 94 55 23 	call	0x46aa	; 0x46aa <gen_numname>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    87a8:	c7 01       	movw	r24, r14
    87aa:	0e 94 ab 3d 	call	0x7b56	; 0x7b56 <dir_find>
    87ae:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    87b0:	88 23       	and	r24, r24
    87b2:	49 f4       	brne	.+18     	; 0x87c6 <dir_register+0xa8>
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
    87b4:	08 94       	sec
    87b6:	c1 1c       	adc	r12, r1
    87b8:	d1 1c       	adc	r13, r1
    87ba:	b4 e6       	ldi	r27, 0x64	; 100
    87bc:	cb 16       	cp	r12, r27
    87be:	d1 04       	cpc	r13, r1
    87c0:	59 f7       	brne	.-42     	; 0x8798 <dir_register+0x7a>
    87c2:	17 e0       	ldi	r17, 0x07	; 7
    87c4:	20 c1       	rjmp	.+576    	; 0x8a06 <dir_register+0x2e8>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    87c6:	84 30       	cpi	r24, 0x04	; 4
    87c8:	09 f0       	breq	.+2      	; 0x87cc <dir_register+0xae>
    87ca:	1d c1       	rjmp	.+570    	; 0x8a06 <dir_register+0x2e8>
		fn[NS] = sn[NS]; dj->lfn = lfn;
    87cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    87ce:	f5 01       	movw	r30, r10
    87d0:	83 87       	std	Z+11, r24	; 0x0b
    87d2:	d7 01       	movw	r26, r14
    87d4:	56 96       	adiw	r26, 0x16	; 22
    87d6:	9c 92       	st	X, r9
    87d8:	56 97       	sbiw	r26, 0x16	; 22
    87da:	57 96       	adiw	r26, 0x17	; 23
    87dc:	8c 92       	st	X, r8
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    87de:	8c 85       	ldd	r24, Y+12	; 0x0c
    87e0:	81 fd       	sbrc	r24, 1
    87e2:	04 c0       	rjmp	.+8      	; 0x87ec <dir_register+0xce>
    87e4:	31 e0       	ldi	r19, 0x01	; 1
    87e6:	a3 2e       	mov	r10, r19
    87e8:	b1 2c       	mov	r11, r1
    87ea:	14 c0       	rjmp	.+40     	; 0x8814 <dir_register+0xf6>
    87ec:	89 2d       	mov	r24, r9
    87ee:	98 2d       	mov	r25, r8
    87f0:	9c 01       	movw	r18, r24
    87f2:	f9 01       	movw	r30, r18
    87f4:	20 e0       	ldi	r18, 0x00	; 0
    87f6:	30 e0       	ldi	r19, 0x00	; 0
    87f8:	02 c0       	rjmp	.+4      	; 0x87fe <dir_register+0xe0>
		for (ne = 0; lfn[ne]; ne++) ;
    87fa:	2f 5f       	subi	r18, 0xFF	; 255
    87fc:	3f 4f       	sbci	r19, 0xFF	; 255
    87fe:	81 91       	ld	r24, Z+
    8800:	91 91       	ld	r25, Z+
    8802:	89 2b       	or	r24, r25
    8804:	d1 f7       	brne	.-12     	; 0x87fa <dir_register+0xdc>
		ne = (ne + 25) / 13;
    8806:	c9 01       	movw	r24, r18
    8808:	49 96       	adiw	r24, 0x19	; 25
    880a:	6d e0       	ldi	r22, 0x0D	; 13
    880c:	70 e0       	ldi	r23, 0x00	; 0
    880e:	0e 94 ff 5b 	call	0xb7fe	; 0xb7fe <__udivmodhi4>
    8812:	5b 01       	movw	r10, r22
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
    8814:	c7 01       	movw	r24, r14
    8816:	60 e0       	ldi	r22, 0x00	; 0
    8818:	70 e0       	ldi	r23, 0x00	; 0
    881a:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <dir_sdi>
    881e:	18 2f       	mov	r17, r24
	if (res != FR_OK) return res;
    8820:	88 23       	and	r24, r24
    8822:	09 f0       	breq	.+2      	; 0x8826 <dir_register+0x108>
    8824:	f0 c0       	rjmp	.+480    	; 0x8a06 <dir_register+0x2e8>
    8826:	cc 24       	eor	r12, r12
    8828:	dd 24       	eor	r13, r13
    882a:	88 24       	eor	r8, r8
    882c:	99 24       	eor	r9, r9
	n = is = 0;
	do {
		res = move_window(dj->fs, dj->sect);
    882e:	f7 01       	movw	r30, r14
    8830:	46 85       	ldd	r20, Z+14	; 0x0e
    8832:	57 85       	ldd	r21, Z+15	; 0x0f
    8834:	60 89       	ldd	r22, Z+16	; 0x10
    8836:	71 89       	ldd	r23, Z+17	; 0x11
    8838:	80 81       	ld	r24, Z
    883a:	91 81       	ldd	r25, Z+1	; 0x01
    883c:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    8840:	18 2f       	mov	r17, r24
		if (res != FR_OK) break;
    8842:	88 23       	and	r24, r24
    8844:	09 f0       	breq	.+2      	; 0x8848 <dir_register+0x12a>
    8846:	df c0       	rjmp	.+446    	; 0x8a06 <dir_register+0x2e8>
		c = *dj->dir;				/* Check the entry status */
    8848:	d7 01       	movw	r26, r14
    884a:	52 96       	adiw	r26, 0x12	; 18
    884c:	ed 91       	ld	r30, X+
    884e:	fc 91       	ld	r31, X
    8850:	53 97       	sbiw	r26, 0x13	; 19
    8852:	e0 81       	ld	r30, Z
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    8854:	e5 3e       	cpi	r30, 0xE5	; 229
    8856:	29 f0       	breq	.+10     	; 0x8862 <dir_register+0x144>
    8858:	ee 23       	and	r30, r30
    885a:	19 f0       	breq	.+6      	; 0x8862 <dir_register+0x144>
    885c:	cc 24       	eor	r12, r12
    885e:	dd 24       	eor	r13, r13
    8860:	0d c0       	rjmp	.+26     	; 0x887c <dir_register+0x15e>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    8862:	c1 14       	cp	r12, r1
    8864:	d1 04       	cpc	r13, r1
    8866:	19 f4       	brne	.+6      	; 0x886e <dir_register+0x150>
    8868:	f7 01       	movw	r30, r14
    886a:	84 80       	ldd	r8, Z+4	; 0x04
    886c:	95 80       	ldd	r9, Z+5	; 0x05
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    886e:	08 94       	sec
    8870:	c1 1c       	adc	r12, r1
    8872:	d1 1c       	adc	r13, r1
    8874:	ca 14       	cp	r12, r10
    8876:	db 04       	cpc	r13, r11
    8878:	09 f4       	brne	.+2      	; 0x887c <dir_register+0x15e>
    887a:	da c0       	rjmp	.+436    	; 0x8a30 <dir_register+0x312>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    887c:	c7 01       	movw	r24, r14
    887e:	61 e0       	ldi	r22, 0x01	; 1
    8880:	70 e0       	ldi	r23, 0x00	; 0
    8882:	0e 94 c9 33 	call	0x6792	; 0x6792 <dir_next>
    8886:	18 2f       	mov	r17, r24
	} while (res == FR_OK);
    8888:	88 23       	and	r24, r24
    888a:	89 f2       	breq	.-94     	; 0x882e <dir_register+0x110>
    888c:	bc c0       	rjmp	.+376    	; 0x8a06 <dir_register+0x2e8>

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
		res = dir_sdi(dj, is);
    888e:	c7 01       	movw	r24, r14
    8890:	b4 01       	movw	r22, r8
    8892:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <dir_sdi>
    8896:	18 2f       	mov	r17, r24
		if (res == FR_OK) {
    8898:	88 23       	and	r24, r24
    889a:	09 f0       	breq	.+2      	; 0x889e <dir_register+0x180>
    889c:	b4 c0       	rjmp	.+360    	; 0x8a06 <dir_register+0x2e8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    889e:	d7 01       	movw	r26, r14
    88a0:	54 96       	adiw	r26, 0x14	; 20
    88a2:	8c 91       	ld	r24, X
    88a4:	54 97       	sbiw	r26, 0x14	; 20
    88a6:	55 96       	adiw	r26, 0x15	; 21
    88a8:	9c 91       	ld	r25, X
    88aa:	9c 01       	movw	r18, r24
    88ac:	f9 01       	movw	r30, r18
    88ae:	2b e0       	ldi	r18, 0x0B	; 11
    88b0:	30 e0       	ldi	r19, 0x00	; 0
    88b2:	00 e0       	ldi	r16, 0x00	; 0
)
{
	BYTE sum = 0;
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    88b4:	80 2f       	mov	r24, r16
    88b6:	87 95       	ror	r24
    88b8:	88 27       	eor	r24, r24
    88ba:	87 95       	ror	r24
    88bc:	06 95       	lsr	r16
    88be:	08 2b       	or	r16, r24
    88c0:	81 91       	ld	r24, Z+
    88c2:	08 0f       	add	r16, r24
    88c4:	21 50       	subi	r18, 0x01	; 1
    88c6:	30 40       	sbci	r19, 0x00	; 0
    88c8:	a9 f7       	brne	.-22     	; 0x88b4 <dir_register+0x196>

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
		res = dir_sdi(dj, is);
		if (res == FR_OK) {
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
			ne--;
    88ca:	08 94       	sec
    88cc:	a1 08       	sbc	r10, r1
    88ce:	b1 08       	sbc	r11, r1
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    88d0:	2f e0       	ldi	r18, 0x0F	; 15
    88d2:	72 2e       	mov	r7, r18
	dir[LDIR_Type] = 0;
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    88d4:	9d e0       	ldi	r25, 0x0D	; 13
    88d6:	89 2e       	mov	r8, r25
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
				if (res != FR_OK) break;
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
				dj->fs->wflag = 1;
    88d8:	99 24       	eor	r9, r9
    88da:	93 94       	inc	r9
		res = dir_sdi(dj, is);
		if (res == FR_OK) {
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
    88dc:	f7 01       	movw	r30, r14
    88de:	46 85       	ldd	r20, Z+14	; 0x0e
    88e0:	57 85       	ldd	r21, Z+15	; 0x0f
    88e2:	60 89       	ldd	r22, Z+16	; 0x10
    88e4:	71 89       	ldd	r23, Z+17	; 0x11
    88e6:	80 81       	ld	r24, Z
    88e8:	91 81       	ldd	r25, Z+1	; 0x01
    88ea:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    88ee:	18 2f       	mov	r17, r24
				if (res != FR_OK) break;
    88f0:	88 23       	and	r24, r24
    88f2:	09 f0       	breq	.+2      	; 0x88f6 <dir_register+0x1d8>
    88f4:	88 c0       	rjmp	.+272    	; 0x8a06 <dir_register+0x2e8>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    88f6:	d7 01       	movw	r26, r14
    88f8:	56 96       	adiw	r26, 0x16	; 22
    88fa:	cd 90       	ld	r12, X+
    88fc:	dc 90       	ld	r13, X
    88fe:	57 97       	sbiw	r26, 0x17	; 23
    8900:	52 96       	adiw	r26, 0x12	; 18
    8902:	6d 91       	ld	r22, X+
    8904:	7c 91       	ld	r23, X
    8906:	53 97       	sbiw	r26, 0x13	; 19
    8908:	1a 2d       	mov	r17, r10
{
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
    890a:	fb 01       	movw	r30, r22
    890c:	05 87       	std	Z+13, r16	; 0x0d
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    890e:	73 86       	std	Z+11, r7	; 0x0b
	dir[LDIR_Type] = 0;
    8910:	14 86       	std	Z+12, r1	; 0x0c
	ST_WORD(dir+LDIR_FstClusLO, 0);
    8912:	13 8e       	std	Z+27, r1	; 0x1b
    8914:	12 8e       	std	Z+26, r1	; 0x1a

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    8916:	a8 9c       	mul	r10, r8
    8918:	90 01       	movw	r18, r0
    891a:	11 24       	eor	r1, r1
    891c:	2d 50       	subi	r18, 0x0D	; 13
    891e:	30 40       	sbci	r19, 0x00	; 0
    8920:	a0 e7       	ldi	r26, 0x70	; 112
    8922:	b1 e0       	ldi	r27, 0x01	; 1
    8924:	40 e0       	ldi	r20, 0x00	; 0
    8926:	50 e0       	ldi	r21, 0x00	; 0
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    8928:	ff ef       	ldi	r31, 0xFF	; 255
    892a:	4f 3f       	cpi	r20, 0xFF	; 255
    892c:	5f 07       	cpc	r21, r31
    892e:	49 f0       	breq	.+18     	; 0x8942 <dir_register+0x224>
    8930:	f9 01       	movw	r30, r18
    8932:	ee 0f       	add	r30, r30
    8934:	ff 1f       	adc	r31, r31
    8936:	ec 0d       	add	r30, r12
    8938:	fd 1d       	adc	r31, r13
    893a:	40 81       	ld	r20, Z
    893c:	51 81       	ldd	r21, Z+1	; 0x01
    893e:	2f 5f       	subi	r18, 0xFF	; 255
    8940:	3f 4f       	sbci	r19, 0xFF	; 255
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    8942:	8c 91       	ld	r24, X
    8944:	fb 01       	movw	r30, r22
    8946:	e8 0f       	add	r30, r24
    8948:	f1 1d       	adc	r31, r1
    894a:	51 83       	std	Z+1, r21	; 0x01
    894c:	40 83       	st	Z, r20
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    894e:	41 15       	cp	r20, r1
    8950:	51 05       	cpc	r21, r1
    8952:	11 f4       	brne	.+4      	; 0x8958 <dir_register+0x23a>
    8954:	4f ef       	ldi	r20, 0xFF	; 255
    8956:	5f ef       	ldi	r21, 0xFF	; 255
    8958:	11 96       	adiw	r26, 0x01	; 1
	} while (++s < 13);
    895a:	81 e0       	ldi	r24, 0x01	; 1
    895c:	ad 37       	cpi	r26, 0x7D	; 125
    895e:	b8 07       	cpc	r27, r24
    8960:	19 f7       	brne	.-58     	; 0x8928 <dir_register+0x20a>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    8962:	4f 5f       	subi	r20, 0xFF	; 255
    8964:	5f 4f       	sbci	r21, 0xFF	; 255
    8966:	49 f0       	breq	.+18     	; 0x897a <dir_register+0x25c>
    8968:	22 0f       	add	r18, r18
    896a:	33 1f       	adc	r19, r19
    896c:	c2 0e       	add	r12, r18
    896e:	d3 1e       	adc	r13, r19
    8970:	f6 01       	movw	r30, r12
    8972:	80 81       	ld	r24, Z
    8974:	91 81       	ldd	r25, Z+1	; 0x01
    8976:	89 2b       	or	r24, r25
    8978:	09 f4       	brne	.+2      	; 0x897c <dir_register+0x25e>
    897a:	10 64       	ori	r17, 0x40	; 64
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    897c:	db 01       	movw	r26, r22
    897e:	1c 93       	st	X, r17
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
				if (res != FR_OK) break;
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
				dj->fs->wflag = 1;
    8980:	d7 01       	movw	r26, r14
    8982:	ed 91       	ld	r30, X+
    8984:	fc 91       	ld	r31, X
    8986:	94 82       	std	Z+4, r9	; 0x04
				res = dir_next(dj, 0);	/* Next entry */
    8988:	c7 01       	movw	r24, r14
    898a:	60 e0       	ldi	r22, 0x00	; 0
    898c:	70 e0       	ldi	r23, 0x00	; 0
    898e:	0e 94 c9 33 	call	0x6792	; 0x6792 <dir_next>
    8992:	18 2f       	mov	r17, r24
			} while (res == FR_OK && --ne);
    8994:	88 23       	and	r24, r24
    8996:	b9 f5       	brne	.+110    	; 0x8a06 <dir_register+0x2e8>
    8998:	08 94       	sec
    899a:	a1 08       	sbc	r10, r1
    899c:	b1 08       	sbc	r11, r1
    899e:	a1 14       	cp	r10, r1
    89a0:	b1 04       	cpc	r11, r1
    89a2:	09 f0       	breq	.+2      	; 0x89a6 <dir_register+0x288>
    89a4:	9b cf       	rjmp	.-202    	; 0x88dc <dir_register+0x1be>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    89a6:	f7 01       	movw	r30, r14
    89a8:	46 85       	ldd	r20, Z+14	; 0x0e
    89aa:	57 85       	ldd	r21, Z+15	; 0x0f
    89ac:	60 89       	ldd	r22, Z+16	; 0x10
    89ae:	71 89       	ldd	r23, Z+17	; 0x11
    89b0:	80 81       	ld	r24, Z
    89b2:	91 81       	ldd	r25, Z+1	; 0x01
    89b4:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    89b8:	18 2f       	mov	r17, r24
		if (res == FR_OK) {
    89ba:	88 23       	and	r24, r24
    89bc:	21 f5       	brne	.+72     	; 0x8a06 <dir_register+0x2e8>
			dir = dj->dir;
    89be:	d7 01       	movw	r26, r14
    89c0:	52 96       	adiw	r26, 0x12	; 18
    89c2:	cd 90       	ld	r12, X+
    89c4:	dc 90       	ld	r13, X
    89c6:	53 97       	sbiw	r26, 0x13	; 19
    89c8:	f6 01       	movw	r30, r12
    89ca:	80 e2       	ldi	r24, 0x20	; 32
    89cc:	90 e0       	ldi	r25, 0x00	; 0
    89ce:	01 c0       	rjmp	.+2      	; 0x89d2 <dir_register+0x2b4>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    89d0:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    89d2:	01 97       	sbiw	r24, 0x01	; 1
    89d4:	bf ef       	ldi	r27, 0xFF	; 255
    89d6:	8f 3f       	cpi	r24, 0xFF	; 255
    89d8:	9b 07       	cpc	r25, r27
    89da:	d1 f7       	brne	.-12     	; 0x89d0 <dir_register+0x2b2>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    89dc:	f7 01       	movw	r30, r14
    89de:	64 89       	ldd	r22, Z+20	; 0x14
    89e0:	75 89       	ldd	r23, Z+21	; 0x15
    89e2:	c6 01       	movw	r24, r12
    89e4:	4b e0       	ldi	r20, 0x0B	; 11
    89e6:	50 e0       	ldi	r21, 0x00	; 0
    89e8:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    89ec:	d7 01       	movw	r26, r14
    89ee:	54 96       	adiw	r26, 0x14	; 20
    89f0:	ed 91       	ld	r30, X+
    89f2:	fc 91       	ld	r31, X
    89f4:	55 97       	sbiw	r26, 0x15	; 21
    89f6:	83 85       	ldd	r24, Z+11	; 0x0b
    89f8:	88 71       	andi	r24, 0x18	; 24
    89fa:	f6 01       	movw	r30, r12
    89fc:	84 87       	std	Z+12, r24	; 0x0c
#endif
			dj->fs->wflag = 1;
    89fe:	ed 91       	ld	r30, X+
    8a00:	fc 91       	ld	r31, X
    8a02:	81 e0       	ldi	r24, 0x01	; 1
    8a04:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    8a06:	81 2f       	mov	r24, r17
    8a08:	2c 96       	adiw	r28, 0x0c	; 12
    8a0a:	0f b6       	in	r0, 0x3f	; 63
    8a0c:	f8 94       	cli
    8a0e:	de bf       	out	0x3e, r29	; 62
    8a10:	0f be       	out	0x3f, r0	; 63
    8a12:	cd bf       	out	0x3d, r28	; 61
    8a14:	cf 91       	pop	r28
    8a16:	df 91       	pop	r29
    8a18:	1f 91       	pop	r17
    8a1a:	0f 91       	pop	r16
    8a1c:	ff 90       	pop	r15
    8a1e:	ef 90       	pop	r14
    8a20:	df 90       	pop	r13
    8a22:	cf 90       	pop	r12
    8a24:	bf 90       	pop	r11
    8a26:	af 90       	pop	r10
    8a28:	9f 90       	pop	r9
    8a2a:	8f 90       	pop	r8
    8a2c:	7f 90       	pop	r7
    8a2e:	08 95       	ret
			n = 0;					/* Not a blank entry. Restart to search */
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
	} while (res == FR_OK);

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    8a30:	f2 e0       	ldi	r31, 0x02	; 2
    8a32:	af 16       	cp	r10, r31
    8a34:	b1 04       	cpc	r11, r1
    8a36:	08 f0       	brcs	.+2      	; 0x8a3a <dir_register+0x31c>
    8a38:	2a cf       	rjmp	.-428    	; 0x888e <dir_register+0x170>
    8a3a:	b5 cf       	rjmp	.-150    	; 0x89a6 <dir_register+0x288>

00008a3c <f_rename>:

FRESULT f_rename (
	const TCHAR *path_old,	/* Pointer to the old name */
	const TCHAR *path_new	/* Pointer to the new name */
)
{
    8a3c:	af 92       	push	r10
    8a3e:	bf 92       	push	r11
    8a40:	cf 92       	push	r12
    8a42:	df 92       	push	r13
    8a44:	ef 92       	push	r14
    8a46:	ff 92       	push	r15
    8a48:	0f 93       	push	r16
    8a4a:	1f 93       	push	r17
    8a4c:	df 93       	push	r29
    8a4e:	cf 93       	push	r28
    8a50:	cd b7       	in	r28, 0x3d	; 61
    8a52:	de b7       	in	r29, 0x3e	; 62
    8a54:	c7 55       	subi	r28, 0x57	; 87
    8a56:	d0 40       	sbci	r29, 0x00	; 0
    8a58:	0f b6       	in	r0, 0x3f	; 63
    8a5a:	f8 94       	cli
    8a5c:	de bf       	out	0x3e, r29	; 62
    8a5e:	0f be       	out	0x3f, r0	; 63
    8a60:	cd bf       	out	0x3d, r28	; 61
    8a62:	8e 01       	movw	r16, r28
    8a64:	0a 5a       	subi	r16, 0xAA	; 170
    8a66:	1f 4f       	sbci	r17, 0xFF	; 255
    8a68:	d8 01       	movw	r26, r16
    8a6a:	8d 93       	st	X+, r24
    8a6c:	9c 93       	st	X, r25
    8a6e:	6b 01       	movw	r12, r22
	BYTE buf[21], *dir;
	DWORD dw;
	DEF_NAMEBUF;


	res = chk_mounted(&path_old, &djo.fs, 1);
    8a70:	72 e2       	ldi	r23, 0x22	; 34
    8a72:	e7 2e       	mov	r14, r23
    8a74:	f1 2c       	mov	r15, r1
    8a76:	ec 0e       	add	r14, r28
    8a78:	fd 1e       	adc	r15, r29
    8a7a:	c8 01       	movw	r24, r16
    8a7c:	b7 01       	movw	r22, r14
    8a7e:	41 e0       	ldi	r20, 0x01	; 1
    8a80:	0e 94 3e 29 	call	0x527c	; 0x527c <chk_mounted>
	if (res == FR_OK) {
    8a84:	88 23       	and	r24, r24
    8a86:	09 f0       	breq	.+2      	; 0x8a8a <f_rename+0x4e>
    8a88:	fa c0       	rjmp	.+500    	; 0x8c7e <f_rename+0x242>
		djn.fs = djo.fs;
    8a8a:	8a a1       	ldd	r24, Y+34	; 0x22
    8a8c:	9b a1       	ldd	r25, Y+35	; 0x23
    8a8e:	9d af       	std	Y+61, r25	; 0x3d
    8a90:	8c af       	std	Y+60, r24	; 0x3c
		INIT_BUF(djo);
    8a92:	ce 01       	movw	r24, r28
    8a94:	01 96       	adiw	r24, 0x01	; 1
    8a96:	9f ab       	std	Y+55, r25	; 0x37
    8a98:	8e ab       	std	Y+54, r24	; 0x36
    8a9a:	8f e8       	ldi	r24, 0x8F	; 143
    8a9c:	91 e0       	ldi	r25, 0x01	; 1
    8a9e:	99 af       	std	Y+57, r25	; 0x39
    8aa0:	88 af       	std	Y+56, r24	; 0x38
		res = follow_path(&djo, path_old);		/* Check old object */
    8aa2:	f8 01       	movw	r30, r16
    8aa4:	60 81       	ld	r22, Z
    8aa6:	71 81       	ldd	r23, Z+1	; 0x01
    8aa8:	c7 01       	movw	r24, r14
    8aaa:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <follow_path>
		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
    8aae:	88 23       	and	r24, r24
    8ab0:	09 f0       	breq	.+2      	; 0x8ab4 <f_rename+0x78>
    8ab2:	e5 c0       	rjmp	.+458    	; 0x8c7e <f_rename+0x242>
    8ab4:	ee a9       	ldd	r30, Y+54	; 0x36
    8ab6:	ff a9       	ldd	r31, Y+55	; 0x37
    8ab8:	83 85       	ldd	r24, Z+11	; 0x0b
    8aba:	85 ff       	sbrs	r24, 5
    8abc:	02 c0       	rjmp	.+4      	; 0x8ac2 <f_rename+0x86>
    8abe:	86 e0       	ldi	r24, 0x06	; 6
    8ac0:	de c0       	rjmp	.+444    	; 0x8c7e <f_rename+0x242>
			res = FR_INVALID_NAME;
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
    8ac2:	6c a9       	ldd	r22, Y+52	; 0x34
    8ac4:	7d a9       	ldd	r23, Y+53	; 0x35
    8ac6:	61 15       	cp	r22, r1
    8ac8:	71 05       	cpc	r23, r1
    8aca:	11 f4       	brne	.+4      	; 0x8ad0 <f_rename+0x94>
    8acc:	84 e0       	ldi	r24, 0x04	; 4
    8ace:	d7 c0       	rjmp	.+430    	; 0x8c7e <f_rename+0x242>
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
    8ad0:	65 5f       	subi	r22, 0xF5	; 245
    8ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    8ad4:	ce 01       	movw	r24, r28
    8ad6:	0d 96       	adiw	r24, 0x0d	; 13
    8ad8:	45 e1       	ldi	r20, 0x15	; 21
    8ada:	50 e0       	ldi	r21, 0x00	; 0
    8adc:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
    8ae0:	8e 01       	movw	r16, r28
    8ae2:	04 5c       	subi	r16, 0xC4	; 196
    8ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    8ae6:	c8 01       	movw	r24, r16
    8ae8:	b7 01       	movw	r22, r14
    8aea:	4a e1       	ldi	r20, 0x1A	; 26
    8aec:	50 e0       	ldi	r21, 0x00	; 0
    8aee:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <mem_cpy>
				res = follow_path(&djn, path_new);
    8af2:	c8 01       	movw	r24, r16
    8af4:	b6 01       	movw	r22, r12
    8af6:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <follow_path>
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    8afa:	88 23       	and	r24, r24
    8afc:	11 f4       	brne	.+4      	; 0x8b02 <f_rename+0xc6>
    8afe:	88 e0       	ldi	r24, 0x08	; 8
    8b00:	be c0       	rjmp	.+380    	; 0x8c7e <f_rename+0x242>
				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
    8b02:	84 30       	cpi	r24, 0x04	; 4
    8b04:	09 f0       	breq	.+2      	; 0x8b08 <f_rename+0xcc>
    8b06:	bb c0       	rjmp	.+374    	; 0x8c7e <f_rename+0x242>
/* Start critical section that any interruption or error can cause cross-link */
					res = dir_register(&djn);			/* Register the new entry */
    8b08:	c8 01       	movw	r24, r16
    8b0a:	0e 94 8f 43 	call	0x871e	; 0x871e <dir_register>
					if (res == FR_OK) {
    8b0e:	88 23       	and	r24, r24
    8b10:	09 f0       	breq	.+2      	; 0x8b14 <f_rename+0xd8>
    8b12:	b5 c0       	rjmp	.+362    	; 0x8c7e <f_rename+0x242>
						dir = djn.dir;					/* Copy object information except for name */
    8b14:	fe 01       	movw	r30, r28
    8b16:	e2 5b       	subi	r30, 0xB2	; 178
    8b18:	ff 4f       	sbci	r31, 0xFF	; 255
    8b1a:	c0 80       	ld	r12, Z
    8b1c:	d1 80       	ldd	r13, Z+1	; 0x01
						mem_cpy(dir+13, buf+2, 19);
    8b1e:	c6 01       	movw	r24, r12
    8b20:	0d 96       	adiw	r24, 0x0d	; 13
    8b22:	be 01       	movw	r22, r28
    8b24:	61 5f       	subi	r22, 0xF1	; 241
    8b26:	7f 4f       	sbci	r23, 0xFF	; 255
    8b28:	43 e1       	ldi	r20, 0x13	; 19
    8b2a:	50 e0       	ldi	r21, 0x00	; 0
    8b2c:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
    8b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    8b32:	80 62       	ori	r24, 0x20	; 32
    8b34:	d6 01       	movw	r26, r12
    8b36:	1b 96       	adiw	r26, 0x0b	; 11
    8b38:	8c 93       	st	X, r24
						djo.fs->wflag = 1;
    8b3a:	ea a1       	ldd	r30, Y+34	; 0x22
    8b3c:	fb a1       	ldd	r31, Y+35	; 0x23
    8b3e:	81 e0       	ldi	r24, 0x01	; 1
    8b40:	84 83       	std	Z+4, r24	; 0x04
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
    8b42:	28 a5       	ldd	r18, Y+40	; 0x28
    8b44:	39 a5       	ldd	r19, Y+41	; 0x29
    8b46:	4a a5       	ldd	r20, Y+42	; 0x2a
    8b48:	5b a5       	ldd	r21, Y+43	; 0x2b
    8b4a:	fe 01       	movw	r30, r28
    8b4c:	ee 5b       	subi	r30, 0xBE	; 190
    8b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    8b50:	80 81       	ld	r24, Z
    8b52:	91 81       	ldd	r25, Z+1	; 0x01
    8b54:	a2 81       	ldd	r26, Z+2	; 0x02
    8b56:	b3 81       	ldd	r27, Z+3	; 0x03
    8b58:	28 17       	cp	r18, r24
    8b5a:	39 07       	cpc	r19, r25
    8b5c:	4a 07       	cpc	r20, r26
    8b5e:	5b 07       	cpc	r21, r27
    8b60:	09 f4       	brne	.+2      	; 0x8b64 <f_rename+0x128>
    8b62:	81 c0       	rjmp	.+258    	; 0x8c66 <f_rename+0x22a>
    8b64:	f6 01       	movw	r30, r12
    8b66:	83 85       	ldd	r24, Z+11	; 0x0b
    8b68:	84 ff       	sbrs	r24, 4
    8b6a:	7d c0       	rjmp	.+250    	; 0x8c66 <f_rename+0x22a>
							dw = clust2sect(djn.fs, LD_CLUST(dir));
    8b6c:	ac ac       	ldd	r10, Y+60	; 0x3c
    8b6e:	bd ac       	ldd	r11, Y+61	; 0x3d
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    8b70:	84 89       	ldd	r24, Z+20	; 0x14
    8b72:	95 89       	ldd	r25, Z+21	; 0x15
    8b74:	a0 e0       	ldi	r26, 0x00	; 0
    8b76:	b0 e0       	ldi	r27, 0x00	; 0
    8b78:	8c 01       	movw	r16, r24
    8b7a:	ff 24       	eor	r15, r15
    8b7c:	ee 24       	eor	r14, r14
    8b7e:	82 8d       	ldd	r24, Z+26	; 0x1a
    8b80:	93 8d       	ldd	r25, Z+27	; 0x1b
    8b82:	a0 e0       	ldi	r26, 0x00	; 0
    8b84:	b0 e0       	ldi	r27, 0x00	; 0
    8b86:	e8 2a       	or	r14, r24
    8b88:	f9 2a       	or	r15, r25
    8b8a:	0a 2b       	or	r16, r26
    8b8c:	1b 2b       	or	r17, r27
    8b8e:	8e ef       	ldi	r24, 0xFE	; 254
    8b90:	9f ef       	ldi	r25, 0xFF	; 255
    8b92:	af ef       	ldi	r26, 0xFF	; 255
    8b94:	bf ef       	ldi	r27, 0xFF	; 255
    8b96:	e8 0e       	add	r14, r24
    8b98:	f9 1e       	adc	r15, r25
    8b9a:	0a 1f       	adc	r16, r26
    8b9c:	1b 1f       	adc	r17, r27
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    8b9e:	f5 01       	movw	r30, r10
    8ba0:	82 8d       	ldd	r24, Z+26	; 0x1a
    8ba2:	93 8d       	ldd	r25, Z+27	; 0x1b
    8ba4:	a4 8d       	ldd	r26, Z+28	; 0x1c
    8ba6:	b5 8d       	ldd	r27, Z+29	; 0x1d
    8ba8:	02 97       	sbiw	r24, 0x02	; 2
    8baa:	a1 09       	sbc	r26, r1
    8bac:	b1 09       	sbc	r27, r1
    8bae:	e8 16       	cp	r14, r24
    8bb0:	f9 06       	cpc	r15, r25
    8bb2:	0a 07       	cpc	r16, r26
    8bb4:	1b 07       	cpc	r17, r27
    8bb6:	08 f0       	brcs	.+2      	; 0x8bba <f_rename+0x17e>
    8bb8:	61 c0       	rjmp	.+194    	; 0x8c7c <f_rename+0x240>
	return clst * fs->csize + fs->database;
    8bba:	22 81       	ldd	r18, Z+2	; 0x02
    8bbc:	30 e0       	ldi	r19, 0x00	; 0
    8bbe:	40 e0       	ldi	r20, 0x00	; 0
    8bc0:	50 e0       	ldi	r21, 0x00	; 0
    8bc2:	c8 01       	movw	r24, r16
    8bc4:	b7 01       	movw	r22, r14
    8bc6:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__mulsi3>
    8bca:	ab 01       	movw	r20, r22
    8bcc:	bc 01       	movw	r22, r24
    8bce:	f5 01       	movw	r30, r10
    8bd0:	82 a5       	ldd	r24, Z+42	; 0x2a
    8bd2:	93 a5       	ldd	r25, Z+43	; 0x2b
    8bd4:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8bd6:	b5 a5       	ldd	r27, Z+45	; 0x2d
    8bd8:	48 0f       	add	r20, r24
    8bda:	59 1f       	adc	r21, r25
    8bdc:	6a 1f       	adc	r22, r26
    8bde:	7b 1f       	adc	r23, r27
						mem_cpy(dir+13, buf+2, 19);
						dir[DIR_Attr] = buf[0] | AM_ARC;
						djo.fs->wflag = 1;
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
							dw = clust2sect(djn.fs, LD_CLUST(dir));
							if (!dw) {
    8be0:	41 15       	cp	r20, r1
    8be2:	51 05       	cpc	r21, r1
    8be4:	61 05       	cpc	r22, r1
    8be6:	71 05       	cpc	r23, r1
    8be8:	09 f4       	brne	.+2      	; 0x8bec <f_rename+0x1b0>
    8bea:	48 c0       	rjmp	.+144    	; 0x8c7c <f_rename+0x240>
								res = FR_INT_ERR;
							} else {
								res = move_window(djn.fs, dw);
    8bec:	c5 01       	movw	r24, r10
    8bee:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
								dir = djn.fs->win+SZ_DIR;	/* .. entry */
    8bf2:	0c ad       	ldd	r16, Y+60	; 0x3c
    8bf4:	1d ad       	ldd	r17, Y+61	; 0x3d
								if (res == FR_OK && dir[1] == '.') {
    8bf6:	88 23       	and	r24, r24
    8bf8:	09 f0       	breq	.+2      	; 0x8bfc <f_rename+0x1c0>
    8bfa:	41 c0       	rjmp	.+130    	; 0x8c7e <f_rename+0x242>
							dw = clust2sect(djn.fs, LD_CLUST(dir));
							if (!dw) {
								res = FR_INT_ERR;
							} else {
								res = move_window(djn.fs, dw);
								dir = djn.fs->win+SZ_DIR;	/* .. entry */
    8bfc:	b8 01       	movw	r22, r16
    8bfe:	6e 5a       	subi	r22, 0xAE	; 174
    8c00:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
    8c02:	db 01       	movw	r26, r22
    8c04:	11 96       	adiw	r26, 0x01	; 1
    8c06:	8c 91       	ld	r24, X
    8c08:	8e 32       	cpi	r24, 0x2E	; 46
    8c0a:	69 f5       	brne	.+90     	; 0x8c66 <f_rename+0x22a>
									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
    8c0c:	f8 01       	movw	r30, r16
    8c0e:	80 81       	ld	r24, Z
    8c10:	83 30       	cpi	r24, 0x03	; 3
    8c12:	b1 f4       	brne	.+44     	; 0x8c40 <f_rename+0x204>
    8c14:	fe 01       	movw	r30, r28
    8c16:	ee 5b       	subi	r30, 0xBE	; 190
    8c18:	ff 4f       	sbci	r31, 0xFF	; 255
    8c1a:	20 81       	ld	r18, Z
    8c1c:	31 81       	ldd	r19, Z+1	; 0x01
    8c1e:	42 81       	ldd	r20, Z+2	; 0x02
    8c20:	53 81       	ldd	r21, Z+3	; 0x03
    8c22:	f8 01       	movw	r30, r16
    8c24:	86 a1       	ldd	r24, Z+38	; 0x26
    8c26:	97 a1       	ldd	r25, Z+39	; 0x27
    8c28:	a0 a5       	ldd	r26, Z+40	; 0x28
    8c2a:	b1 a5       	ldd	r27, Z+41	; 0x29
    8c2c:	28 17       	cp	r18, r24
    8c2e:	39 07       	cpc	r19, r25
    8c30:	4a 07       	cpc	r20, r26
    8c32:	5b 07       	cpc	r21, r27
    8c34:	29 f4       	brne	.+10     	; 0x8c40 <f_rename+0x204>
    8c36:	80 e0       	ldi	r24, 0x00	; 0
    8c38:	90 e0       	ldi	r25, 0x00	; 0
    8c3a:	a0 e0       	ldi	r26, 0x00	; 0
    8c3c:	b0 e0       	ldi	r27, 0x00	; 0
    8c3e:	07 c0       	rjmp	.+14     	; 0x8c4e <f_rename+0x212>
    8c40:	fe 01       	movw	r30, r28
    8c42:	ee 5b       	subi	r30, 0xBE	; 190
    8c44:	ff 4f       	sbci	r31, 0xFF	; 255
    8c46:	80 81       	ld	r24, Z
    8c48:	91 81       	ldd	r25, Z+1	; 0x01
    8c4a:	a2 81       	ldd	r26, Z+2	; 0x02
    8c4c:	b3 81       	ldd	r27, Z+3	; 0x03
									ST_CLUST(dir, dw);
    8c4e:	fb 01       	movw	r30, r22
    8c50:	93 8f       	std	Z+27, r25	; 0x1b
    8c52:	82 8f       	std	Z+26, r24	; 0x1a
    8c54:	cd 01       	movw	r24, r26
    8c56:	aa 27       	eor	r26, r26
    8c58:	bb 27       	eor	r27, r27
    8c5a:	95 8b       	std	Z+21, r25	; 0x15
    8c5c:	84 8b       	std	Z+20, r24	; 0x14
									djn.fs->wflag = 1;
    8c5e:	81 e0       	ldi	r24, 0x01	; 1
    8c60:	d8 01       	movw	r26, r16
    8c62:	14 96       	adiw	r26, 0x04	; 4
    8c64:	8c 93       	st	X, r24
								}
							}
						}
						if (res == FR_OK) {
							res = dir_remove(&djo);		/* Remove old entry */
    8c66:	ce 01       	movw	r24, r28
    8c68:	82 96       	adiw	r24, 0x22	; 34
    8c6a:	0e 94 46 35 	call	0x6a8c	; 0x6a8c <dir_remove>
							if (res == FR_OK)
    8c6e:	88 23       	and	r24, r24
    8c70:	31 f4       	brne	.+12     	; 0x8c7e <f_rename+0x242>
								res = sync(djo.fs);
    8c72:	8a a1       	ldd	r24, Y+34	; 0x22
    8c74:	9b a1       	ldd	r25, Y+35	; 0x23
    8c76:	0e 94 65 2c 	call	0x58ca	; 0x58ca <sync>
    8c7a:	01 c0       	rjmp	.+2      	; 0x8c7e <f_rename+0x242>
    8c7c:	82 e0       	ldi	r24, 0x02	; 2
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
    8c7e:	c9 5a       	subi	r28, 0xA9	; 169
    8c80:	df 4f       	sbci	r29, 0xFF	; 255
    8c82:	0f b6       	in	r0, 0x3f	; 63
    8c84:	f8 94       	cli
    8c86:	de bf       	out	0x3e, r29	; 62
    8c88:	0f be       	out	0x3f, r0	; 63
    8c8a:	cd bf       	out	0x3d, r28	; 61
    8c8c:	cf 91       	pop	r28
    8c8e:	df 91       	pop	r29
    8c90:	1f 91       	pop	r17
    8c92:	0f 91       	pop	r16
    8c94:	ff 90       	pop	r15
    8c96:	ef 90       	pop	r14
    8c98:	df 90       	pop	r13
    8c9a:	cf 90       	pop	r12
    8c9c:	bf 90       	pop	r11
    8c9e:	af 90       	pop	r10
    8ca0:	08 95       	ret

00008ca2 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
    8ca2:	2f 92       	push	r2
    8ca4:	3f 92       	push	r3
    8ca6:	4f 92       	push	r4
    8ca8:	5f 92       	push	r5
    8caa:	6f 92       	push	r6
    8cac:	7f 92       	push	r7
    8cae:	8f 92       	push	r8
    8cb0:	9f 92       	push	r9
    8cb2:	af 92       	push	r10
    8cb4:	bf 92       	push	r11
    8cb6:	cf 92       	push	r12
    8cb8:	df 92       	push	r13
    8cba:	ef 92       	push	r14
    8cbc:	ff 92       	push	r15
    8cbe:	0f 93       	push	r16
    8cc0:	1f 93       	push	r17
    8cc2:	df 93       	push	r29
    8cc4:	cf 93       	push	r28
    8cc6:	cd b7       	in	r28, 0x3d	; 61
    8cc8:	de b7       	in	r29, 0x3e	; 62
    8cca:	ae 97       	sbiw	r28, 0x2e	; 46
    8ccc:	0f b6       	in	r0, 0x3f	; 63
    8cce:	f8 94       	cli
    8cd0:	de bf       	out	0x3e, r29	; 62
    8cd2:	0f be       	out	0x3f, r0	; 63
    8cd4:	cd bf       	out	0x3d, r28	; 61
    8cd6:	98 a7       	std	Y+40, r25	; 0x28
    8cd8:	8f a3       	std	Y+39, r24	; 0x27
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
    8cda:	0e 94 8f 49 	call	0x931e	; 0x931e <get_fattime>
    8cde:	69 a7       	std	Y+41, r22	; 0x29
    8ce0:	7a a7       	std	Y+42, r23	; 0x2a
    8ce2:	8b a7       	std	Y+43, r24	; 0x2b
    8ce4:	9c a7       	std	Y+44, r25	; 0x2c
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    8ce6:	2d e0       	ldi	r18, 0x0D	; 13
    8ce8:	e2 2e       	mov	r14, r18
    8cea:	f1 2c       	mov	r15, r1
    8cec:	ec 0e       	add	r14, r28
    8cee:	fd 1e       	adc	r15, r29
    8cf0:	ce 01       	movw	r24, r28
    8cf2:	87 96       	adiw	r24, 0x27	; 39
    8cf4:	b7 01       	movw	r22, r14
    8cf6:	41 e0       	ldi	r20, 0x01	; 1
    8cf8:	0e 94 3e 29 	call	0x527c	; 0x527c <chk_mounted>
    8cfc:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    8cfe:	88 23       	and	r24, r24
    8d00:	09 f0       	breq	.+2      	; 0x8d04 <f_mkdir+0x62>
    8d02:	2a c1       	rjmp	.+596    	; 0x8f58 <f_mkdir+0x2b6>
		INIT_BUF(dj);
    8d04:	ce 01       	movw	r24, r28
    8d06:	01 96       	adiw	r24, 0x01	; 1
    8d08:	9a a3       	std	Y+34, r25	; 0x22
    8d0a:	89 a3       	std	Y+33, r24	; 0x21
    8d0c:	8f e8       	ldi	r24, 0x8F	; 143
    8d0e:	91 e0       	ldi	r25, 0x01	; 1
    8d10:	9c a3       	std	Y+36, r25	; 0x24
    8d12:	8b a3       	std	Y+35, r24	; 0x23
		res = follow_path(&dj, path);			/* Follow the file path */
    8d14:	6f a1       	ldd	r22, Y+39	; 0x27
    8d16:	78 a5       	ldd	r23, Y+40	; 0x28
    8d18:	c7 01       	movw	r24, r14
    8d1a:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <follow_path>
    8d1e:	18 2f       	mov	r17, r24
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    8d20:	88 23       	and	r24, r24
    8d22:	51 f0       	breq	.+20     	; 0x8d38 <f_mkdir+0x96>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
    8d24:	84 30       	cpi	r24, 0x04	; 4
    8d26:	09 f0       	breq	.+2      	; 0x8d2a <f_mkdir+0x88>
    8d28:	17 c1       	rjmp	.+558    	; 0x8f58 <f_mkdir+0x2b6>
    8d2a:	e9 a1       	ldd	r30, Y+33	; 0x21
    8d2c:	fa a1       	ldd	r31, Y+34	; 0x22
    8d2e:	83 85       	ldd	r24, Z+11	; 0x0b
    8d30:	85 ff       	sbrs	r24, 5
    8d32:	04 c0       	rjmp	.+8      	; 0x8d3c <f_mkdir+0x9a>
    8d34:	16 e0       	ldi	r17, 0x06	; 6
    8d36:	10 c1       	rjmp	.+544    	; 0x8f58 <f_mkdir+0x2b6>
    8d38:	18 e0       	ldi	r17, 0x08	; 8
    8d3a:	0e c1       	rjmp	.+540    	; 0x8f58 <f_mkdir+0x2b6>
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
    8d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    8d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    8d40:	40 e0       	ldi	r20, 0x00	; 0
    8d42:	50 e0       	ldi	r21, 0x00	; 0
    8d44:	60 e0       	ldi	r22, 0x00	; 0
    8d46:	70 e0       	ldi	r23, 0x00	; 0
    8d48:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <create_chain>
    8d4c:	4b 01       	movw	r8, r22
    8d4e:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    8d50:	61 15       	cp	r22, r1
    8d52:	71 05       	cpc	r23, r1
    8d54:	81 05       	cpc	r24, r1
    8d56:	91 05       	cpc	r25, r1
    8d58:	11 f4       	brne	.+4      	; 0x8d5e <f_mkdir+0xbc>
    8d5a:	17 e0       	ldi	r17, 0x07	; 7
    8d5c:	dc c0       	rjmp	.+440    	; 0x8f16 <f_mkdir+0x274>
			if (dcl == 1) res = FR_INT_ERR;
    8d5e:	61 30       	cpi	r22, 0x01	; 1
    8d60:	71 05       	cpc	r23, r1
    8d62:	81 05       	cpc	r24, r1
    8d64:	91 05       	cpc	r25, r1
    8d66:	11 f4       	brne	.+4      	; 0x8d6c <f_mkdir+0xca>
    8d68:	12 e0       	ldi	r17, 0x02	; 2
    8d6a:	d5 c0       	rjmp	.+426    	; 0x8f16 <f_mkdir+0x274>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    8d6c:	6f 3f       	cpi	r22, 0xFF	; 255
    8d6e:	3f ef       	ldi	r19, 0xFF	; 255
    8d70:	73 07       	cpc	r23, r19
    8d72:	3f ef       	ldi	r19, 0xFF	; 255
    8d74:	83 07       	cpc	r24, r19
    8d76:	3f ef       	ldi	r19, 0xFF	; 255
    8d78:	93 07       	cpc	r25, r19
    8d7a:	09 f4       	brne	.+2      	; 0x8d7e <f_mkdir+0xdc>
    8d7c:	07 c1       	rjmp	.+526    	; 0x8f8c <f_mkdir+0x2ea>
			if (res == FR_OK)					/* Flush FAT */
				res = move_window(dj.fs, 0);
    8d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    8d82:	40 e0       	ldi	r20, 0x00	; 0
    8d84:	50 e0       	ldi	r21, 0x00	; 0
    8d86:	60 e0       	ldi	r22, 0x00	; 0
    8d88:	70 e0       	ldi	r23, 0x00	; 0
    8d8a:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    8d8e:	18 2f       	mov	r17, r24
			if (res == FR_OK) {					/* Initialize the new directory table */
    8d90:	88 23       	and	r24, r24
    8d92:	09 f0       	breq	.+2      	; 0x8d96 <f_mkdir+0xf4>
    8d94:	c0 c0       	rjmp	.+384    	; 0x8f16 <f_mkdir+0x274>
				dsc = clust2sect(dj.fs, dcl);
    8d96:	cd 84       	ldd	r12, Y+13	; 0x0d
    8d98:	de 84       	ldd	r13, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    8d9a:	9e ef       	ldi	r25, 0xFE	; 254
    8d9c:	e9 2e       	mov	r14, r25
    8d9e:	9f ef       	ldi	r25, 0xFF	; 255
    8da0:	f9 2e       	mov	r15, r25
    8da2:	9f ef       	ldi	r25, 0xFF	; 255
    8da4:	09 2f       	mov	r16, r25
    8da6:	9f ef       	ldi	r25, 0xFF	; 255
    8da8:	19 2f       	mov	r17, r25
    8daa:	e8 0c       	add	r14, r8
    8dac:	f9 1c       	adc	r15, r9
    8dae:	0a 1d       	adc	r16, r10
    8db0:	1b 1d       	adc	r17, r11
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    8db2:	f6 01       	movw	r30, r12
    8db4:	82 8d       	ldd	r24, Z+26	; 0x1a
    8db6:	93 8d       	ldd	r25, Z+27	; 0x1b
    8db8:	a4 8d       	ldd	r26, Z+28	; 0x1c
    8dba:	b5 8d       	ldd	r27, Z+29	; 0x1d
    8dbc:	02 97       	sbiw	r24, 0x02	; 2
    8dbe:	a1 09       	sbc	r26, r1
    8dc0:	b1 09       	sbc	r27, r1
    8dc2:	e8 16       	cp	r14, r24
    8dc4:	f9 06       	cpc	r15, r25
    8dc6:	0a 07       	cpc	r16, r26
    8dc8:	1b 07       	cpc	r17, r27
    8dca:	20 f0       	brcs	.+8      	; 0x8dd4 <f_mkdir+0x132>
    8dcc:	44 24       	eor	r4, r4
    8dce:	55 24       	eor	r5, r5
    8dd0:	32 01       	movw	r6, r4
    8dd2:	15 c0       	rjmp	.+42     	; 0x8dfe <f_mkdir+0x15c>
	return clst * fs->csize + fs->database;
    8dd4:	d6 01       	movw	r26, r12
    8dd6:	12 96       	adiw	r26, 0x02	; 2
    8dd8:	2c 91       	ld	r18, X
    8dda:	30 e0       	ldi	r19, 0x00	; 0
    8ddc:	40 e0       	ldi	r20, 0x00	; 0
    8dde:	50 e0       	ldi	r21, 0x00	; 0
    8de0:	c8 01       	movw	r24, r16
    8de2:	b7 01       	movw	r22, r14
    8de4:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__mulsi3>
    8de8:	2b 01       	movw	r4, r22
    8dea:	3c 01       	movw	r6, r24
    8dec:	f6 01       	movw	r30, r12
    8dee:	82 a5       	ldd	r24, Z+42	; 0x2a
    8df0:	93 a5       	ldd	r25, Z+43	; 0x2b
    8df2:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8df4:	b5 a5       	ldd	r27, Z+45	; 0x2d
    8df6:	48 0e       	add	r4, r24
    8df8:	59 1e       	adc	r5, r25
    8dfa:	6a 1e       	adc	r6, r26
    8dfc:	7b 1e       	adc	r7, r27
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK)					/* Flush FAT */
				res = move_window(dj.fs, 0);
			if (res == FR_OK) {					/* Initialize the new directory table */
				dsc = clust2sect(dj.fs, dcl);
				dir = dj.fs->win;
    8dfe:	82 e3       	ldi	r24, 0x32	; 50
    8e00:	e8 2e       	mov	r14, r24
    8e02:	f1 2c       	mov	r15, r1
    8e04:	ec 0c       	add	r14, r12
    8e06:	fd 1c       	adc	r15, r13
    8e08:	f7 01       	movw	r30, r14
    8e0a:	80 e0       	ldi	r24, 0x00	; 0
    8e0c:	92 e0       	ldi	r25, 0x02	; 2
    8e0e:	01 c0       	rjmp	.+2      	; 0x8e12 <f_mkdir+0x170>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    8e10:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    8e12:	01 97       	sbiw	r24, 0x01	; 1
    8e14:	2f ef       	ldi	r18, 0xFF	; 255
    8e16:	8f 3f       	cpi	r24, 0xFF	; 255
    8e18:	92 07       	cpc	r25, r18
    8e1a:	d1 f7       	brne	.-12     	; 0x8e10 <f_mkdir+0x16e>
    8e1c:	f7 01       	movw	r30, r14
    8e1e:	8b e0       	ldi	r24, 0x0B	; 11
    8e20:	90 e0       	ldi	r25, 0x00	; 0
		*d++ = (BYTE)val;
    8e22:	20 e2       	ldi	r18, 0x20	; 32
    8e24:	01 c0       	rjmp	.+2      	; 0x8e28 <f_mkdir+0x186>
    8e26:	21 93       	st	Z+, r18
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    8e28:	01 97       	sbiw	r24, 0x01	; 1
    8e2a:	3f ef       	ldi	r19, 0xFF	; 255
    8e2c:	8f 3f       	cpi	r24, 0xFF	; 255
    8e2e:	93 07       	cpc	r25, r19
    8e30:	d1 f7       	brne	.-12     	; 0x8e26 <f_mkdir+0x184>
			if (res == FR_OK) {					/* Initialize the new directory table */
				dsc = clust2sect(dj.fs, dcl);
				dir = dj.fs->win;
				mem_set(dir, 0, SS(dj.fs));
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
				dir[DIR_Name] = '.';
    8e32:	1e e2       	ldi	r17, 0x2E	; 46
    8e34:	d6 01       	movw	r26, r12
    8e36:	d2 96       	adiw	r26, 0x32	; 50
    8e38:	1c 93       	st	X, r17
    8e3a:	d2 97       	sbiw	r26, 0x32	; 50
				dir[DIR_Attr] = AM_DIR;
    8e3c:	80 e1       	ldi	r24, 0x10	; 16
    8e3e:	dd 96       	adiw	r26, 0x3d	; 61
    8e40:	8c 93       	st	X, r24
				ST_DWORD(dir+DIR_WrtTime, tim);
    8e42:	89 a5       	ldd	r24, Y+41	; 0x29
    8e44:	9a a5       	ldd	r25, Y+42	; 0x2a
    8e46:	ab a5       	ldd	r26, Y+43	; 0x2b
    8e48:	bc a5       	ldd	r27, Y+44	; 0x2c
    8e4a:	f7 01       	movw	r30, r14
    8e4c:	86 8b       	std	Z+22, r24	; 0x16
    8e4e:	97 8b       	std	Z+23, r25	; 0x17
    8e50:	a0 8f       	std	Z+24, r26	; 0x18
    8e52:	b1 8f       	std	Z+25, r27	; 0x19
				ST_CLUST(dir, dcl);
    8e54:	9e a6       	std	Y+46, r9	; 0x2e
    8e56:	8d a6       	std	Y+45, r8	; 0x2d
    8e58:	93 8e       	std	Z+27, r9	; 0x1b
    8e5a:	82 8e       	std	Z+26, r8	; 0x1a
    8e5c:	c5 01       	movw	r24, r10
    8e5e:	aa 27       	eor	r26, r26
    8e60:	bb 27       	eor	r27, r27
    8e62:	1c 01       	movw	r2, r24
    8e64:	95 8b       	std	Z+21, r25	; 0x15
    8e66:	84 8b       	std	Z+20, r24	; 0x14
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
    8e68:	c7 01       	movw	r24, r14
    8e6a:	80 96       	adiw	r24, 0x20	; 32
    8e6c:	b7 01       	movw	r22, r14
    8e6e:	40 e2       	ldi	r20, 0x20	; 32
    8e70:	50 e0       	ldi	r21, 0x00	; 0
    8e72:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <mem_cpy>
				dir[33] = '.'; pcl = dj.sclust;
    8e76:	23 e5       	ldi	r18, 0x53	; 83
    8e78:	30 e0       	ldi	r19, 0x00	; 0
    8e7a:	c2 0e       	add	r12, r18
    8e7c:	d3 1e       	adc	r13, r19
    8e7e:	d6 01       	movw	r26, r12
    8e80:	1c 93       	st	X, r17
    8e82:	2b 89       	ldd	r18, Y+19	; 0x13
    8e84:	3c 89       	ldd	r19, Y+20	; 0x14
    8e86:	4d 89       	ldd	r20, Y+21	; 0x15
    8e88:	5e 89       	ldd	r21, Y+22	; 0x16
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
    8e8a:	ed 85       	ldd	r30, Y+13	; 0x0d
    8e8c:	fe 85       	ldd	r31, Y+14	; 0x0e
    8e8e:	80 81       	ld	r24, Z
    8e90:	83 30       	cpi	r24, 0x03	; 3
    8e92:	69 f4       	brne	.+26     	; 0x8eae <f_mkdir+0x20c>
    8e94:	86 a1       	ldd	r24, Z+38	; 0x26
    8e96:	97 a1       	ldd	r25, Z+39	; 0x27
    8e98:	a0 a5       	ldd	r26, Z+40	; 0x28
    8e9a:	b1 a5       	ldd	r27, Z+41	; 0x29
    8e9c:	28 17       	cp	r18, r24
    8e9e:	39 07       	cpc	r19, r25
    8ea0:	4a 07       	cpc	r20, r26
    8ea2:	5b 07       	cpc	r21, r27
    8ea4:	21 f4       	brne	.+8      	; 0x8eae <f_mkdir+0x20c>
    8ea6:	20 e0       	ldi	r18, 0x00	; 0
    8ea8:	30 e0       	ldi	r19, 0x00	; 0
    8eaa:	40 e0       	ldi	r20, 0x00	; 0
    8eac:	50 e0       	ldi	r21, 0x00	; 0
					pcl = 0;
				ST_CLUST(dir+SZ_DIR, pcl);
    8eae:	d7 01       	movw	r26, r14
    8eb0:	db 96       	adiw	r26, 0x3b	; 59
    8eb2:	3c 93       	st	X, r19
    8eb4:	2e 93       	st	-X, r18
    8eb6:	da 97       	sbiw	r26, 0x3a	; 58
    8eb8:	9a 01       	movw	r18, r20
    8eba:	44 27       	eor	r20, r20
    8ebc:	55 27       	eor	r21, r21
    8ebe:	d5 96       	adiw	r26, 0x35	; 53
    8ec0:	3c 93       	st	X, r19
    8ec2:	2e 93       	st	-X, r18
    8ec4:	d4 97       	sbiw	r26, 0x34	; 52
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    8ec6:	02 81       	ldd	r16, Z+2	; 0x02
					dj.fs->winsect = dsc++;
					dj.fs->wflag = 1;
    8ec8:	dd 24       	eor	r13, r13
    8eca:	d3 94       	inc	r13
    8ecc:	21 c0       	rjmp	.+66     	; 0x8f10 <f_mkdir+0x26e>
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
    8ece:	ed 85       	ldd	r30, Y+13	; 0x0d
    8ed0:	fe 85       	ldd	r31, Y+14	; 0x0e
    8ed2:	46 a6       	std	Z+46, r4	; 0x2e
    8ed4:	57 a6       	std	Z+47, r5	; 0x2f
    8ed6:	60 aa       	std	Z+48, r6	; 0x30
    8ed8:	71 aa       	std	Z+49, r7	; 0x31
					dj.fs->wflag = 1;
    8eda:	d4 82       	std	Z+4, r13	; 0x04
					res = move_window(dj.fs, 0);
    8edc:	cf 01       	movw	r24, r30
    8ede:	40 e0       	ldi	r20, 0x00	; 0
    8ee0:	50 e0       	ldi	r21, 0x00	; 0
    8ee2:	60 e0       	ldi	r22, 0x00	; 0
    8ee4:	70 e0       	ldi	r23, 0x00	; 0
    8ee6:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    8eea:	18 2f       	mov	r17, r24
					if (res != FR_OK) break;
    8eec:	88 23       	and	r24, r24
    8eee:	99 f4       	brne	.+38     	; 0x8f16 <f_mkdir+0x274>
    8ef0:	f7 01       	movw	r30, r14
    8ef2:	80 e0       	ldi	r24, 0x00	; 0
    8ef4:	92 e0       	ldi	r25, 0x02	; 2
    8ef6:	01 c0       	rjmp	.+2      	; 0x8efa <f_mkdir+0x258>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    8ef8:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    8efa:	01 97       	sbiw	r24, 0x01	; 1
    8efc:	bf ef       	ldi	r27, 0xFF	; 255
    8efe:	8f 3f       	cpi	r24, 0xFF	; 255
    8f00:	9b 07       	cpc	r25, r27
    8f02:	d1 f7       	brne	.-12     	; 0x8ef8 <f_mkdir+0x256>
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
    8f04:	08 94       	sec
    8f06:	41 1c       	adc	r4, r1
    8f08:	51 1c       	adc	r5, r1
    8f0a:	61 1c       	adc	r6, r1
    8f0c:	71 1c       	adc	r7, r1
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    8f0e:	01 50       	subi	r16, 0x01	; 1
    8f10:	00 23       	and	r16, r16
    8f12:	e9 f6       	brne	.-70     	; 0x8ece <f_mkdir+0x22c>
    8f14:	3d c0       	rjmp	.+122    	; 0x8f90 <f_mkdir+0x2ee>
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
			if (res != FR_OK) {
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
    8f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    8f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    8f1a:	b5 01       	movw	r22, r10
    8f1c:	a4 01       	movw	r20, r8
    8f1e:	0e 94 d6 30 	call	0x61ac	; 0x61ac <remove_chain>
    8f22:	1a c0       	rjmp	.+52     	; 0x8f58 <f_mkdir+0x2b6>
			} else {
				dir = dj.dir;
    8f24:	ef 8d       	ldd	r30, Y+31	; 0x1f
    8f26:	f8 a1       	ldd	r31, Y+32	; 0x20
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
    8f28:	80 e1       	ldi	r24, 0x10	; 16
    8f2a:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
    8f2c:	89 a5       	ldd	r24, Y+41	; 0x29
    8f2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    8f30:	ab a5       	ldd	r26, Y+43	; 0x2b
    8f32:	bc a5       	ldd	r27, Y+44	; 0x2c
    8f34:	86 8b       	std	Z+22, r24	; 0x16
    8f36:	97 8b       	std	Z+23, r25	; 0x17
    8f38:	a0 8f       	std	Z+24, r26	; 0x18
    8f3a:	b1 8f       	std	Z+25, r27	; 0x19
				ST_CLUST(dir, dcl);					/* Table start cluster */
    8f3c:	ad a5       	ldd	r26, Y+45	; 0x2d
    8f3e:	be a5       	ldd	r27, Y+46	; 0x2e
    8f40:	b3 8f       	std	Z+27, r27	; 0x1b
    8f42:	a2 8f       	std	Z+26, r26	; 0x1a
    8f44:	35 8a       	std	Z+21, r3	; 0x15
    8f46:	24 8a       	std	Z+20, r2	; 0x14
				dj.fs->wflag = 1;
    8f48:	ed 85       	ldd	r30, Y+13	; 0x0d
    8f4a:	fe 85       	ldd	r31, Y+14	; 0x0e
    8f4c:	81 e0       	ldi	r24, 0x01	; 1
    8f4e:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    8f50:	cf 01       	movw	r24, r30
    8f52:	0e 94 65 2c 	call	0x58ca	; 0x58ca <sync>
    8f56:	18 2f       	mov	r17, r24
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    8f58:	81 2f       	mov	r24, r17
    8f5a:	ae 96       	adiw	r28, 0x2e	; 46
    8f5c:	0f b6       	in	r0, 0x3f	; 63
    8f5e:	f8 94       	cli
    8f60:	de bf       	out	0x3e, r29	; 62
    8f62:	0f be       	out	0x3f, r0	; 63
    8f64:	cd bf       	out	0x3d, r28	; 61
    8f66:	cf 91       	pop	r28
    8f68:	df 91       	pop	r29
    8f6a:	1f 91       	pop	r17
    8f6c:	0f 91       	pop	r16
    8f6e:	ff 90       	pop	r15
    8f70:	ef 90       	pop	r14
    8f72:	df 90       	pop	r13
    8f74:	cf 90       	pop	r12
    8f76:	bf 90       	pop	r11
    8f78:	af 90       	pop	r10
    8f7a:	9f 90       	pop	r9
    8f7c:	8f 90       	pop	r8
    8f7e:	7f 90       	pop	r7
    8f80:	6f 90       	pop	r6
    8f82:	5f 90       	pop	r5
    8f84:	4f 90       	pop	r4
    8f86:	3f 90       	pop	r3
    8f88:	2f 90       	pop	r2
    8f8a:	08 95       	ret
				dir = dj.dir;
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
				ST_CLUST(dir, dcl);					/* Table start cluster */
				dj.fs->wflag = 1;
				res = sync(dj.fs);
    8f8c:	11 e0       	ldi	r17, 0x01	; 1
    8f8e:	c3 cf       	rjmp	.-122    	; 0x8f16 <f_mkdir+0x274>
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
    8f90:	ce 01       	movw	r24, r28
    8f92:	0d 96       	adiw	r24, 0x0d	; 13
    8f94:	0e 94 8f 43 	call	0x871e	; 0x871e <dir_register>
    8f98:	18 2f       	mov	r17, r24
			if (res != FR_OK) {
    8f9a:	88 23       	and	r24, r24
    8f9c:	19 f2       	breq	.-122    	; 0x8f24 <f_mkdir+0x282>
    8f9e:	bb cf       	rjmp	.-138    	; 0x8f16 <f_mkdir+0x274>

00008fa0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    8fa0:	5f 92       	push	r5
    8fa2:	6f 92       	push	r6
    8fa4:	7f 92       	push	r7
    8fa6:	8f 92       	push	r8
    8fa8:	9f 92       	push	r9
    8faa:	af 92       	push	r10
    8fac:	bf 92       	push	r11
    8fae:	cf 92       	push	r12
    8fb0:	df 92       	push	r13
    8fb2:	ef 92       	push	r14
    8fb4:	ff 92       	push	r15
    8fb6:	0f 93       	push	r16
    8fb8:	1f 93       	push	r17
    8fba:	df 93       	push	r29
    8fbc:	cf 93       	push	r28
    8fbe:	cd b7       	in	r28, 0x3d	; 61
    8fc0:	de b7       	in	r29, 0x3e	; 62
    8fc2:	a8 97       	sbiw	r28, 0x28	; 40
    8fc4:	0f b6       	in	r0, 0x3f	; 63
    8fc6:	f8 94       	cli
    8fc8:	de bf       	out	0x3e, r29	; 62
    8fca:	0f be       	out	0x3f, r0	; 63
    8fcc:	cd bf       	out	0x3d, r28	; 61
    8fce:	3c 01       	movw	r6, r24
    8fd0:	78 a7       	std	Y+40, r23	; 0x28
    8fd2:	6f a3       	std	Y+39, r22	; 0x27
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    8fd4:	dc 01       	movw	r26, r24
    8fd6:	1d 92       	st	X+, r1
    8fd8:	1c 92       	st	X, r1

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    8fda:	5f e1       	ldi	r21, 0x1F	; 31
    8fdc:	55 2e       	mov	r5, r21
    8fde:	54 22       	and	r5, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    8fe0:	8e 01       	movw	r16, r28
    8fe2:	03 5f       	subi	r16, 0xF3	; 243
    8fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    8fe6:	4e 71       	andi	r20, 0x1E	; 30
    8fe8:	ce 01       	movw	r24, r28
    8fea:	87 96       	adiw	r24, 0x27	; 39
    8fec:	b8 01       	movw	r22, r16
    8fee:	0e 94 3e 29 	call	0x527c	; 0x527c <chk_mounted>
    8ff2:	28 2f       	mov	r18, r24
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    8ff4:	ce 01       	movw	r24, r28
    8ff6:	01 96       	adiw	r24, 0x01	; 1
    8ff8:	9a a3       	std	Y+34, r25	; 0x22
    8ffa:	89 a3       	std	Y+33, r24	; 0x21
    8ffc:	8f e8       	ldi	r24, 0x8F	; 143
    8ffe:	91 e0       	ldi	r25, 0x01	; 1
    9000:	9c a3       	std	Y+36, r25	; 0x24
    9002:	8b a3       	std	Y+35, r24	; 0x23
	if (res == FR_OK)
    9004:	22 23       	and	r18, r18
    9006:	31 f4       	brne	.+12     	; 0x9014 <f_open+0x74>
		res = follow_path(&dj, path);	/* Follow the file path */
    9008:	6f a1       	ldd	r22, Y+39	; 0x27
    900a:	78 a5       	ldd	r23, Y+40	; 0x28
    900c:	c8 01       	movw	r24, r16
    900e:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <follow_path>
    9012:	28 2f       	mov	r18, r24
	dir = dj.dir;
    9014:	cf 8c       	ldd	r12, Y+31	; 0x1f
    9016:	d8 a0       	ldd	r13, Y+32	; 0x20

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    9018:	22 23       	and	r18, r18
    901a:	21 f4       	brne	.+8      	; 0x9024 <f_open+0x84>
		if (!dir)	/* Current dir itself */
    901c:	c1 14       	cp	r12, r1
    901e:	d1 04       	cpc	r13, r1
    9020:	09 f4       	brne	.+2      	; 0x9024 <f_open+0x84>
    9022:	26 e0       	ldi	r18, 0x06	; 6
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    9024:	45 2d       	mov	r20, r5
    9026:	50 e0       	ldi	r21, 0x00	; 0
    9028:	ca 01       	movw	r24, r20
    902a:	8c 71       	andi	r24, 0x1C	; 28
    902c:	90 70       	andi	r25, 0x00	; 0
    902e:	89 2b       	or	r24, r25
    9030:	09 f4       	brne	.+2      	; 0x9034 <f_open+0x94>
    9032:	67 c0       	rjmp	.+206    	; 0x9102 <f_open+0x162>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    9034:	22 23       	and	r18, r18
    9036:	79 f0       	breq	.+30     	; 0x9056 <f_open+0xb6>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    9038:	24 30       	cpi	r18, 0x04	; 4
    903a:	29 f4       	brne	.+10     	; 0x9046 <f_open+0xa6>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    903c:	ce 01       	movw	r24, r28
    903e:	0d 96       	adiw	r24, 0x0d	; 13
    9040:	0e 94 8f 43 	call	0x871e	; 0x871e <dir_register>
    9044:	28 2f       	mov	r18, r24
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
    9046:	cf 8c       	ldd	r12, Y+31	; 0x1f
    9048:	d8 a0       	ldd	r13, Y+32	; 0x20
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    904a:	22 23       	and	r18, r18
    904c:	09 f0       	breq	.+2      	; 0x9050 <f_open+0xb0>
    904e:	b3 c0       	rjmp	.+358    	; 0x91b6 <f_open+0x216>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    9050:	b8 e0       	ldi	r27, 0x08	; 8
    9052:	5b 2a       	or	r5, r27
    9054:	07 c0       	rjmp	.+14     	; 0x9064 <f_open+0xc4>
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    9056:	f6 01       	movw	r30, r12
    9058:	83 85       	ldd	r24, Z+11	; 0x0b
    905a:	81 71       	andi	r24, 0x11	; 17
    905c:	09 f0       	breq	.+2      	; 0x9060 <f_open+0xc0>
    905e:	c4 c0       	rjmp	.+392    	; 0x91e8 <f_open+0x248>
				res = FR_DENIED;
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    9060:	52 fc       	sbrc	r5, 2
    9062:	c0 c0       	rjmp	.+384    	; 0x91e4 <f_open+0x244>
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    9064:	53 fe       	sbrs	r5, 3
    9066:	5b c0       	rjmp	.+182    	; 0x911e <f_open+0x17e>
			dw = get_fattime();					/* Created time */
    9068:	0e 94 8f 49 	call	0x931e	; 0x931e <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, dw);
    906c:	d6 01       	movw	r26, r12
    906e:	1e 96       	adiw	r26, 0x0e	; 14
    9070:	6d 93       	st	X+, r22
    9072:	7d 93       	st	X+, r23
    9074:	8d 93       	st	X+, r24
    9076:	9c 93       	st	X, r25
    9078:	51 97       	sbiw	r26, 0x11	; 17
			dir[DIR_Attr] = 0;					/* Reset attribute */
    907a:	1b 96       	adiw	r26, 0x0b	; 11
    907c:	1c 92       	st	X, r1
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    907e:	f6 01       	movw	r30, r12
    9080:	14 8e       	std	Z+28, r1	; 0x1c
    9082:	15 8e       	std	Z+29, r1	; 0x1d
    9084:	16 8e       	std	Z+30, r1	; 0x1e
    9086:	17 8e       	std	Z+31, r1	; 0x1f
			cl = LD_CLUST(dir);					/* Get start cluster */
    9088:	84 89       	ldd	r24, Z+20	; 0x14
    908a:	95 89       	ldd	r25, Z+21	; 0x15
    908c:	a0 e0       	ldi	r26, 0x00	; 0
    908e:	b0 e0       	ldi	r27, 0x00	; 0
    9090:	8c 01       	movw	r16, r24
    9092:	ff 24       	eor	r15, r15
    9094:	ee 24       	eor	r14, r14
    9096:	82 8d       	ldd	r24, Z+26	; 0x1a
    9098:	93 8d       	ldd	r25, Z+27	; 0x1b
    909a:	a0 e0       	ldi	r26, 0x00	; 0
    909c:	b0 e0       	ldi	r27, 0x00	; 0
    909e:	e8 2a       	or	r14, r24
    90a0:	f9 2a       	or	r15, r25
    90a2:	0a 2b       	or	r16, r26
    90a4:	1b 2b       	or	r17, r27
			ST_CLUST(dir, 0);					/* cluster = 0 */
    90a6:	13 8e       	std	Z+27, r1	; 0x1b
    90a8:	12 8e       	std	Z+26, r1	; 0x1a
    90aa:	15 8a       	std	Z+21, r1	; 0x15
    90ac:	14 8a       	std	Z+20, r1	; 0x14
			dj.fs->wflag = 1;
    90ae:	ed 85       	ldd	r30, Y+13	; 0x0d
    90b0:	fe 85       	ldd	r31, Y+14	; 0x0e
    90b2:	81 e0       	ldi	r24, 0x01	; 1
    90b4:	84 83       	std	Z+4, r24	; 0x04
			if (cl) {							/* Remove the cluster chain if exist */
    90b6:	e1 14       	cp	r14, r1
    90b8:	f1 04       	cpc	r15, r1
    90ba:	01 05       	cpc	r16, r1
    90bc:	11 05       	cpc	r17, r1
    90be:	79 f1       	breq	.+94     	; 0x911e <f_open+0x17e>
				dw = dj.fs->winsect;
    90c0:	86 a4       	ldd	r8, Z+46	; 0x2e
    90c2:	97 a4       	ldd	r9, Z+47	; 0x2f
    90c4:	a0 a8       	ldd	r10, Z+48	; 0x30
    90c6:	b1 a8       	ldd	r11, Z+49	; 0x31
				res = remove_chain(dj.fs, cl);
    90c8:	cf 01       	movw	r24, r30
    90ca:	b8 01       	movw	r22, r16
    90cc:	a7 01       	movw	r20, r14
    90ce:	0e 94 d6 30 	call	0x61ac	; 0x61ac <remove_chain>
    90d2:	28 2f       	mov	r18, r24
				if (res == FR_OK) {
    90d4:	88 23       	and	r24, r24
    90d6:	09 f0       	breq	.+2      	; 0x90da <f_open+0x13a>
    90d8:	6e c0       	rjmp	.+220    	; 0x91b6 <f_open+0x216>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    90da:	ed 85       	ldd	r30, Y+13	; 0x0d
    90dc:	fe 85       	ldd	r31, Y+14	; 0x0e
    90de:	08 94       	sec
    90e0:	e1 08       	sbc	r14, r1
    90e2:	f1 08       	sbc	r15, r1
    90e4:	01 09       	sbc	r16, r1
    90e6:	11 09       	sbc	r17, r1
    90e8:	e2 86       	std	Z+10, r14	; 0x0a
    90ea:	f3 86       	std	Z+11, r15	; 0x0b
    90ec:	04 87       	std	Z+12, r16	; 0x0c
    90ee:	15 87       	std	Z+13, r17	; 0x0d
					res = move_window(dj.fs, dw);
    90f0:	cf 01       	movw	r24, r30
    90f2:	b5 01       	movw	r22, r10
    90f4:	a4 01       	movw	r20, r8
    90f6:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <move_window>
    90fa:	28 2f       	mov	r18, r24
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
    90fc:	88 23       	and	r24, r24
    90fe:	79 f0       	breq	.+30     	; 0x911e <f_open+0x17e>
    9100:	5a c0       	rjmp	.+180    	; 0x91b6 <f_open+0x216>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    9102:	22 23       	and	r18, r18
    9104:	09 f0       	breq	.+2      	; 0x9108 <f_open+0x168>
    9106:	57 c0       	rjmp	.+174    	; 0x91b6 <f_open+0x216>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    9108:	d6 01       	movw	r26, r12
    910a:	1b 96       	adiw	r26, 0x0b	; 11
    910c:	8c 91       	ld	r24, X
    910e:	84 ff       	sbrs	r24, 4
    9110:	02 c0       	rjmp	.+4      	; 0x9116 <f_open+0x176>
    9112:	24 e0       	ldi	r18, 0x04	; 4
    9114:	50 c0       	rjmp	.+160    	; 0x91b6 <f_open+0x216>
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    9116:	51 fe       	sbrs	r5, 1
    9118:	02 c0       	rjmp	.+4      	; 0x911e <f_open+0x17e>
    911a:	80 fd       	sbrc	r24, 0
    911c:	65 c0       	rjmp	.+202    	; 0x91e8 <f_open+0x248>
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    911e:	53 fe       	sbrs	r5, 3
    9120:	02 c0       	rjmp	.+4      	; 0x9126 <f_open+0x186>
			mode |= FA__WRITTEN;
    9122:	b0 e2       	ldi	r27, 0x20	; 32
    9124:	5b 2a       	or	r5, r27
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    9126:	6d 85       	ldd	r22, Y+13	; 0x0d
    9128:	7e 85       	ldd	r23, Y+14	; 0x0e
    912a:	fb 01       	movw	r30, r22
    912c:	26 a5       	ldd	r18, Z+46	; 0x2e
    912e:	37 a5       	ldd	r19, Z+47	; 0x2f
    9130:	40 a9       	ldd	r20, Z+48	; 0x30
    9132:	51 a9       	ldd	r21, Z+49	; 0x31
    9134:	d3 01       	movw	r26, r6
    9136:	5a 96       	adiw	r26, 0x1a	; 26
    9138:	2d 93       	st	X+, r18
    913a:	3d 93       	st	X+, r19
    913c:	4d 93       	st	X+, r20
    913e:	5c 93       	st	X, r21
    9140:	5d 97       	sbiw	r26, 0x1d	; 29
		fp->dir_ptr = dir;
    9142:	5f 96       	adiw	r26, 0x1f	; 31
    9144:	dc 92       	st	X, r13
    9146:	ce 92       	st	-X, r12
    9148:	5e 97       	sbiw	r26, 0x1e	; 30
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    914a:	14 96       	adiw	r26, 0x04	; 4
    914c:	5c 92       	st	X, r5
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    914e:	f6 01       	movw	r30, r12
    9150:	84 89       	ldd	r24, Z+20	; 0x14
    9152:	95 89       	ldd	r25, Z+21	; 0x15
    9154:	a0 e0       	ldi	r26, 0x00	; 0
    9156:	b0 e0       	ldi	r27, 0x00	; 0
    9158:	dc 01       	movw	r26, r24
    915a:	99 27       	eor	r25, r25
    915c:	88 27       	eor	r24, r24
    915e:	22 8d       	ldd	r18, Z+26	; 0x1a
    9160:	33 8d       	ldd	r19, Z+27	; 0x1b
    9162:	40 e0       	ldi	r20, 0x00	; 0
    9164:	50 e0       	ldi	r21, 0x00	; 0
    9166:	82 2b       	or	r24, r18
    9168:	93 2b       	or	r25, r19
    916a:	a4 2b       	or	r26, r20
    916c:	b5 2b       	or	r27, r21
    916e:	f3 01       	movw	r30, r6
    9170:	86 87       	std	Z+14, r24	; 0x0e
    9172:	97 87       	std	Z+15, r25	; 0x0f
    9174:	a0 8b       	std	Z+16, r26	; 0x10
    9176:	b1 8b       	std	Z+17, r27	; 0x11
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    9178:	f6 01       	movw	r30, r12
    917a:	84 8d       	ldd	r24, Z+28	; 0x1c
    917c:	95 8d       	ldd	r25, Z+29	; 0x1d
    917e:	a6 8d       	ldd	r26, Z+30	; 0x1e
    9180:	b7 8d       	ldd	r27, Z+31	; 0x1f
    9182:	f3 01       	movw	r30, r6
    9184:	82 87       	std	Z+10, r24	; 0x0a
    9186:	93 87       	std	Z+11, r25	; 0x0b
    9188:	a4 87       	std	Z+12, r26	; 0x0c
    918a:	b5 87       	std	Z+13, r27	; 0x0d
		fp->fptr = 0;						/* File pointer */
    918c:	d3 01       	movw	r26, r6
    918e:	16 96       	adiw	r26, 0x06	; 6
    9190:	1d 92       	st	X+, r1
    9192:	1d 92       	st	X+, r1
    9194:	1d 92       	st	X+, r1
    9196:	1c 92       	st	X, r1
    9198:	19 97       	sbiw	r26, 0x09	; 9
		fp->dsect = 0;
    919a:	16 8a       	std	Z+22, r1	; 0x16
    919c:	17 8a       	std	Z+23, r1	; 0x17
    919e:	10 8e       	std	Z+24, r1	; 0x18
    91a0:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    91a2:	71 83       	std	Z+1, r23	; 0x01
    91a4:	60 83       	st	Z, r22
    91a6:	db 01       	movw	r26, r22
    91a8:	16 96       	adiw	r26, 0x06	; 6
    91aa:	8d 91       	ld	r24, X+
    91ac:	9c 91       	ld	r25, X
    91ae:	17 97       	sbiw	r26, 0x07	; 7
    91b0:	93 83       	std	Z+3, r25	; 0x03
    91b2:	82 83       	std	Z+2, r24	; 0x02
    91b4:	20 e0       	ldi	r18, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    91b6:	82 2f       	mov	r24, r18
    91b8:	a8 96       	adiw	r28, 0x28	; 40
    91ba:	0f b6       	in	r0, 0x3f	; 63
    91bc:	f8 94       	cli
    91be:	de bf       	out	0x3e, r29	; 62
    91c0:	0f be       	out	0x3f, r0	; 63
    91c2:	cd bf       	out	0x3d, r28	; 61
    91c4:	cf 91       	pop	r28
    91c6:	df 91       	pop	r29
    91c8:	1f 91       	pop	r17
    91ca:	0f 91       	pop	r16
    91cc:	ff 90       	pop	r15
    91ce:	ef 90       	pop	r14
    91d0:	df 90       	pop	r13
    91d2:	cf 90       	pop	r12
    91d4:	bf 90       	pop	r11
    91d6:	af 90       	pop	r10
    91d8:	9f 90       	pop	r9
    91da:	8f 90       	pop	r8
    91dc:	7f 90       	pop	r7
    91de:	6f 90       	pop	r6
    91e0:	5f 90       	pop	r5
    91e2:	08 95       	ret
		fp->fptr = 0;						/* File pointer */
		fp->dsect = 0;
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    91e4:	28 e0       	ldi	r18, 0x08	; 8
    91e6:	e7 cf       	rjmp	.-50     	; 0x91b6 <f_open+0x216>
    91e8:	27 e0       	ldi	r18, 0x07	; 7
    91ea:	e5 cf       	rjmp	.-54     	; 0x91b6 <f_open+0x216>

000091ec <put_rc>:



static
void put_rc (FRESULT rc)
{
    91ec:	48 2f       	mov	r20, r24
    91ee:	90 e0       	ldi	r25, 0x00	; 0
    91f0:	2d e1       	ldi	r18, 0x1D	; 29
    91f2:	34 e0       	ldi	r19, 0x04	; 4
    91f4:	07 c0       	rjmp	.+14     	; 0x9204 <put_rc+0x18>
		"INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
		"INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0"
		"LOCKED\0" "NOT_ENOUGH_CORE\0" "TOO_MANY_OPEN_FILES\0";
	FRESULT i;

	for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    91f6:	f9 01       	movw	r30, r18
		while(pgm_read_byte_near(p++));
    91f8:	2f 5f       	subi	r18, 0xFF	; 255
    91fa:	3f 4f       	sbci	r19, 0xFF	; 255
    91fc:	e4 91       	lpm	r30, Z+
    91fe:	ee 23       	and	r30, r30
    9200:	d1 f7       	brne	.-12     	; 0x91f6 <put_rc+0xa>
		"INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
		"INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0"
		"LOCKED\0" "NOT_ENOUGH_CORE\0" "TOO_MANY_OPEN_FILES\0";
	FRESULT i;

	for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    9202:	9f 5f       	subi	r25, 0xFF	; 255
    9204:	94 17       	cp	r25, r20
    9206:	21 f0       	breq	.+8      	; 0x9210 <put_rc+0x24>
    9208:	f9 01       	movw	r30, r18
    920a:	84 91       	lpm	r24, Z+
    920c:	88 23       	and	r24, r24
    920e:	99 f7       	brne	.-26     	; 0x91f6 <put_rc+0xa>
		while(pgm_read_byte_near(p++));
	}
	xprintf(PSTR("rc=%u FR_%S\n"), rc, p);
    9210:	00 d0       	rcall	.+0      	; 0x9212 <put_rc+0x26>
    9212:	00 d0       	rcall	.+0      	; 0x9214 <put_rc+0x28>
    9214:	00 d0       	rcall	.+0      	; 0x9216 <put_rc+0x2a>
    9216:	ed b7       	in	r30, 0x3d	; 61
    9218:	fe b7       	in	r31, 0x3e	; 62
    921a:	31 96       	adiw	r30, 0x01	; 1
    921c:	80 e1       	ldi	r24, 0x10	; 16
    921e:	94 e0       	ldi	r25, 0x04	; 4
    9220:	ad b7       	in	r26, 0x3d	; 61
    9222:	be b7       	in	r27, 0x3e	; 62
    9224:	12 96       	adiw	r26, 0x02	; 2
    9226:	9c 93       	st	X, r25
    9228:	8e 93       	st	-X, r24
    922a:	11 97       	sbiw	r26, 0x01	; 1
    922c:	42 83       	std	Z+2, r20	; 0x02
    922e:	13 82       	std	Z+3, r1	; 0x03
    9230:	35 83       	std	Z+5, r19	; 0x05
    9232:	24 83       	std	Z+4, r18	; 0x04
    9234:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
    9238:	ed b7       	in	r30, 0x3d	; 61
    923a:	fe b7       	in	r31, 0x3e	; 62
    923c:	36 96       	adiw	r30, 0x06	; 6
    923e:	0f b6       	in	r0, 0x3f	; 63
    9240:	f8 94       	cli
    9242:	fe bf       	out	0x3e, r31	; 62
    9244:	0f be       	out	0x3f, r0	; 63
    9246:	ed bf       	out	0x3d, r30	; 61
}
    9248:	08 95       	ret

0000924a <put_dump>:
/* Monitor                                                                  */


static
void put_dump (const BYTE *buff, DWORD ofs, BYTE cnt)
{
    924a:	bf 92       	push	r11
    924c:	cf 92       	push	r12
    924e:	df 92       	push	r13
    9250:	ef 92       	push	r14
    9252:	ff 92       	push	r15
    9254:	0f 93       	push	r16
    9256:	1f 93       	push	r17
    9258:	cf 93       	push	r28
    925a:	df 93       	push	r29
    925c:	18 2f       	mov	r17, r24
    925e:	09 2f       	mov	r16, r25
    9260:	b2 2e       	mov	r11, r18
	BYTE i;


	xprintf(PSTR("%08lX "), ofs);
    9262:	00 d0       	rcall	.+0      	; 0x9264 <put_dump+0x1a>
    9264:	00 d0       	rcall	.+0      	; 0x9266 <put_dump+0x1c>
    9266:	00 d0       	rcall	.+0      	; 0x9268 <put_dump+0x1e>
    9268:	89 e0       	ldi	r24, 0x09	; 9
    926a:	94 e0       	ldi	r25, 0x04	; 4
    926c:	ad b7       	in	r26, 0x3d	; 61
    926e:	be b7       	in	r27, 0x3e	; 62
    9270:	12 96       	adiw	r26, 0x02	; 2
    9272:	9c 93       	st	X, r25
    9274:	8e 93       	st	-X, r24
    9276:	11 97       	sbiw	r26, 0x01	; 1
    9278:	ed b7       	in	r30, 0x3d	; 61
    927a:	fe b7       	in	r31, 0x3e	; 62
    927c:	43 83       	std	Z+3, r20	; 0x03
    927e:	54 83       	std	Z+4, r21	; 0x04
    9280:	65 83       	std	Z+5, r22	; 0x05
    9282:	76 83       	std	Z+6, r23	; 0x06
    9284:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
    9288:	21 2f       	mov	r18, r17
    928a:	30 2f       	mov	r19, r16
    928c:	c9 01       	movw	r24, r18
    928e:	ec 01       	movw	r28, r24
    9290:	7c 01       	movw	r14, r24
    9292:	10 e0       	ldi	r17, 0x00	; 0
    9294:	8d b7       	in	r24, 0x3d	; 61
    9296:	9e b7       	in	r25, 0x3e	; 62
    9298:	06 96       	adiw	r24, 0x06	; 6
    929a:	0f b6       	in	r0, 0x3f	; 63
    929c:	f8 94       	cli
    929e:	9e bf       	out	0x3e, r25	; 62
    92a0:	0f be       	out	0x3f, r0	; 63
    92a2:	8d bf       	out	0x3d, r24	; 61

	for(i = 0; i < cnt; i++)
		xprintf(PSTR(" %02X"), buff[i]);
    92a4:	83 e0       	ldi	r24, 0x03	; 3
    92a6:	c8 2e       	mov	r12, r24
    92a8:	84 e0       	ldi	r24, 0x04	; 4
    92aa:	d8 2e       	mov	r13, r24
    92ac:	17 c0       	rjmp	.+46     	; 0x92dc <put_dump+0x92>
    92ae:	00 d0       	rcall	.+0      	; 0x92b0 <put_dump+0x66>
    92b0:	00 d0       	rcall	.+0      	; 0x92b2 <put_dump+0x68>
    92b2:	ed b7       	in	r30, 0x3d	; 61
    92b4:	fe b7       	in	r31, 0x3e	; 62
    92b6:	31 96       	adiw	r30, 0x01	; 1
    92b8:	ad b7       	in	r26, 0x3d	; 61
    92ba:	be b7       	in	r27, 0x3e	; 62
    92bc:	12 96       	adiw	r26, 0x02	; 2
    92be:	dc 92       	st	X, r13
    92c0:	ce 92       	st	-X, r12
    92c2:	11 97       	sbiw	r26, 0x01	; 1
    92c4:	d7 01       	movw	r26, r14
    92c6:	8d 91       	ld	r24, X+
    92c8:	7d 01       	movw	r14, r26
    92ca:	82 83       	std	Z+2, r24	; 0x02
    92cc:	13 82       	std	Z+3, r1	; 0x03
    92ce:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
	BYTE i;


	xprintf(PSTR("%08lX "), ofs);

	for(i = 0; i < cnt; i++)
    92d2:	1f 5f       	subi	r17, 0xFF	; 255
    92d4:	0f 90       	pop	r0
    92d6:	0f 90       	pop	r0
    92d8:	0f 90       	pop	r0
    92da:	0f 90       	pop	r0
    92dc:	1b 15       	cp	r17, r11
    92de:	38 f3       	brcs	.-50     	; 0x92ae <put_dump+0x64>
		xprintf(PSTR(" %02X"), buff[i]);

	xputc(' ');
    92e0:	80 e2       	ldi	r24, 0x20	; 32
    92e2:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <xputc>
    92e6:	10 e0       	ldi	r17, 0x00	; 0
    92e8:	0b c0       	rjmp	.+22     	; 0x9300 <put_dump+0xb6>
	for(i = 0; i < cnt; i++)
		xputc((buff[i] >= ' ' && buff[i] <= '~') ? buff[i] : '.');
    92ea:	98 81       	ld	r25, Y
    92ec:	89 2f       	mov	r24, r25
    92ee:	80 52       	subi	r24, 0x20	; 32
    92f0:	8f 35       	cpi	r24, 0x5F	; 95
    92f2:	08 f0       	brcs	.+2      	; 0x92f6 <put_dump+0xac>
    92f4:	9e e2       	ldi	r25, 0x2E	; 46
    92f6:	89 2f       	mov	r24, r25
    92f8:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <xputc>

	for(i = 0; i < cnt; i++)
		xprintf(PSTR(" %02X"), buff[i]);

	xputc(' ');
	for(i = 0; i < cnt; i++)
    92fc:	1f 5f       	subi	r17, 0xFF	; 255
    92fe:	21 96       	adiw	r28, 0x01	; 1
    9300:	1b 15       	cp	r17, r11
    9302:	98 f3       	brcs	.-26     	; 0x92ea <put_dump+0xa0>
		xputc((buff[i] >= ' ' && buff[i] <= '~') ? buff[i] : '.');

	xputc('\n');
    9304:	8a e0       	ldi	r24, 0x0A	; 10
    9306:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <xputc>
}
    930a:	df 91       	pop	r29
    930c:	cf 91       	pop	r28
    930e:	1f 91       	pop	r17
    9310:	0f 91       	pop	r16
    9312:	ff 90       	pop	r15
    9314:	ef 90       	pop	r14
    9316:	df 90       	pop	r13
    9318:	cf 90       	pop	r12
    931a:	bf 90       	pop	r11
    931c:	08 95       	ret

0000931e <get_fattime>:
/* the system does not support a real time clock.          */
/* This is not required in read-only configuration.        */


DWORD get_fattime (void)
{
    931e:	df 93       	push	r29
    9320:	cf 93       	push	r28
    9322:	cd b7       	in	r28, 0x3d	; 61
    9324:	de b7       	in	r29, 0x3e	; 62
    9326:	28 97       	sbiw	r28, 0x08	; 8
    9328:	0f b6       	in	r0, 0x3f	; 63
    932a:	f8 94       	cli
    932c:	de bf       	out	0x3e, r29	; 62
    932e:	0f be       	out	0x3f, r0	; 63
    9330:	cd bf       	out	0x3d, r28	; 61
	RTC rtc;


	/* Get local time */
	rtc_gettime(&rtc);
    9332:	ce 01       	movw	r24, r28
    9334:	01 96       	adiw	r24, 0x01	; 1
    9336:	0e 94 4b 5b 	call	0xb696	; 0xb696 <rtc_gettime>
    933a:	2c 81       	ldd	r18, Y+4	; 0x04
    933c:	30 e0       	ldi	r19, 0x00	; 0
    933e:	40 e0       	ldi	r20, 0x00	; 0
    9340:	50 e0       	ldi	r21, 0x00	; 0
    9342:	a9 01       	movw	r20, r18
    9344:	33 27       	eor	r19, r19
    9346:	22 27       	eor	r18, r18
    9348:	8b 81       	ldd	r24, Y+3	; 0x03
    934a:	90 e0       	ldi	r25, 0x00	; 0
    934c:	a0 e0       	ldi	r26, 0x00	; 0
    934e:	b0 e0       	ldi	r27, 0x00	; 0
    9350:	f5 e1       	ldi	r31, 0x15	; 21
    9352:	88 0f       	add	r24, r24
    9354:	99 1f       	adc	r25, r25
    9356:	aa 1f       	adc	r26, r26
    9358:	bb 1f       	adc	r27, r27
    935a:	fa 95       	dec	r31
    935c:	d1 f7       	brne	.-12     	; 0x9352 <get_fattime+0x34>
    935e:	28 2b       	or	r18, r24
    9360:	39 2b       	or	r19, r25
    9362:	4a 2b       	or	r20, r26
    9364:	5b 2b       	or	r21, r27
    9366:	8e 81       	ldd	r24, Y+6	; 0x06
    9368:	90 e0       	ldi	r25, 0x00	; 0
    936a:	a0 e0       	ldi	r26, 0x00	; 0
    936c:	b0 e0       	ldi	r27, 0x00	; 0
    936e:	eb e0       	ldi	r30, 0x0B	; 11
    9370:	88 0f       	add	r24, r24
    9372:	99 1f       	adc	r25, r25
    9374:	aa 1f       	adc	r26, r26
    9376:	bb 1f       	adc	r27, r27
    9378:	ea 95       	dec	r30
    937a:	d1 f7       	brne	.-12     	; 0x9370 <get_fattime+0x52>
    937c:	28 2b       	or	r18, r24
    937e:	39 2b       	or	r19, r25
    9380:	4a 2b       	or	r20, r26
    9382:	5b 2b       	or	r21, r27
    9384:	8f 81       	ldd	r24, Y+7	; 0x07
    9386:	90 e0       	ldi	r25, 0x00	; 0
    9388:	a0 e0       	ldi	r26, 0x00	; 0
    938a:	b0 e0       	ldi	r27, 0x00	; 0
    938c:	75 e0       	ldi	r23, 0x05	; 5
    938e:	88 0f       	add	r24, r24
    9390:	99 1f       	adc	r25, r25
    9392:	aa 1f       	adc	r26, r26
    9394:	bb 1f       	adc	r27, r27
    9396:	7a 95       	dec	r23
    9398:	d1 f7       	brne	.-12     	; 0x938e <get_fattime+0x70>
    939a:	28 2b       	or	r18, r24
    939c:	39 2b       	or	r19, r25
    939e:	4a 2b       	or	r20, r26
    93a0:	5b 2b       	or	r21, r27
    93a2:	88 85       	ldd	r24, Y+8	; 0x08
    93a4:	86 95       	lsr	r24
    93a6:	90 e0       	ldi	r25, 0x00	; 0
    93a8:	a0 e0       	ldi	r26, 0x00	; 0
    93aa:	b0 e0       	ldi	r27, 0x00	; 0
    93ac:	28 2b       	or	r18, r24
    93ae:	39 2b       	or	r19, r25
    93b0:	4a 2b       	or	r20, r26
    93b2:	5b 2b       	or	r21, r27
    93b4:	89 81       	ldd	r24, Y+1	; 0x01
    93b6:	9a 81       	ldd	r25, Y+2	; 0x02
    93b8:	8c 5b       	subi	r24, 0xBC	; 188
    93ba:	97 40       	sbci	r25, 0x07	; 7
    93bc:	a0 e0       	ldi	r26, 0x00	; 0
    93be:	b0 e0       	ldi	r27, 0x00	; 0
    93c0:	69 e1       	ldi	r22, 0x19	; 25
    93c2:	88 0f       	add	r24, r24
    93c4:	99 1f       	adc	r25, r25
    93c6:	aa 1f       	adc	r26, r26
    93c8:	bb 1f       	adc	r27, r27
    93ca:	6a 95       	dec	r22
    93cc:	d1 f7       	brne	.-12     	; 0x93c2 <get_fattime+0xa4>
    93ce:	28 2b       	or	r18, r24
    93d0:	39 2b       	or	r19, r25
    93d2:	4a 2b       	or	r20, r26
    93d4:	5b 2b       	or	r21, r27
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
}
    93d6:	b9 01       	movw	r22, r18
    93d8:	ca 01       	movw	r24, r20
    93da:	28 96       	adiw	r28, 0x08	; 8
    93dc:	0f b6       	in	r0, 0x3f	; 63
    93de:	f8 94       	cli
    93e0:	de bf       	out	0x3e, r29	; 62
    93e2:	0f be       	out	0x3f, r0	; 63
    93e4:	cd bf       	out	0x3d, r28	; 61
    93e6:	cf 91       	pop	r28
    93e8:	df 91       	pop	r29
    93ea:	08 95       	ret

000093ec <scan_files>:

static
FRESULT scan_files (
	char* path		/* Pointer to the working buffer with start path */
)
{
    93ec:	9f 92       	push	r9
    93ee:	af 92       	push	r10
    93f0:	bf 92       	push	r11
    93f2:	cf 92       	push	r12
    93f4:	df 92       	push	r13
    93f6:	ef 92       	push	r14
    93f8:	ff 92       	push	r15
    93fa:	0f 93       	push	r16
    93fc:	1f 93       	push	r17
    93fe:	df 93       	push	r29
    9400:	cf 93       	push	r28
    9402:	cd b7       	in	r28, 0x3d	; 61
    9404:	de b7       	in	r29, 0x3e	; 62
    9406:	6a 97       	sbiw	r28, 0x1a	; 26
    9408:	0f b6       	in	r0, 0x3f	; 63
    940a:	f8 94       	cli
    940c:	de bf       	out	0x3e, r29	; 62
    940e:	0f be       	out	0x3f, r0	; 63
    9410:	cd bf       	out	0x3d, r28	; 61
    9412:	8c 01       	movw	r16, r24
	DIR dirs;
	FRESULT res;
	int i;
	char *fn;

	res = f_opendir(&dirs, path);
    9414:	7e 01       	movw	r14, r28
    9416:	08 94       	sec
    9418:	e1 1c       	adc	r14, r1
    941a:	f1 1c       	adc	r15, r1
    941c:	c7 01       	movw	r24, r14
    941e:	b8 01       	movw	r22, r16
    9420:	0e 94 c2 42 	call	0x8584	; 0x8584 <f_opendir>
	if (res == FR_OK) {
    9424:	88 23       	and	r24, r24
    9426:	09 f0       	breq	.+2      	; 0x942a <scan_files+0x3e>
    9428:	6c c0       	rjmp	.+216    	; 0x9502 <scan_files+0x116>
		i = strlen(path);
    942a:	d8 01       	movw	r26, r16
    942c:	0d 90       	ld	r0, X+
    942e:	00 20       	and	r0, r0
    9430:	e9 f7       	brne	.-6      	; 0x942c <scan_files+0x40>
    9432:	11 97       	sbiw	r26, 0x01	; 1
    9434:	a0 1b       	sub	r26, r16
    9436:	b1 0b       	sbc	r27, r17
		while (((res = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
    9438:	57 01       	movw	r10, r14
#else
			fn = Finfo.fname;
#endif
			if (Finfo.fattrib & AM_DIR) {
				acc_dirs++;
				*(path+i) = '/'; strcpy(path+i+1, fn);
    943a:	68 01       	movw	r12, r16
    943c:	ca 0e       	add	r12, r26
    943e:	db 1e       	adc	r13, r27
    9440:	8f e2       	ldi	r24, 0x2F	; 47
    9442:	98 2e       	mov	r9, r24
    9444:	7d 01       	movw	r14, r26
    9446:	08 94       	sec
    9448:	e1 1c       	adc	r14, r1
    944a:	f1 1c       	adc	r15, r1
    944c:	e0 0e       	add	r14, r16
    944e:	f1 1e       	adc	r15, r17
    9450:	4c c0       	rjmp	.+152    	; 0x94ea <scan_files+0xfe>

	res = f_opendir(&dirs, path);
	if (res == FR_OK) {
		i = strlen(path);
		while (((res = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
			if (_FS_RPATH && Finfo.fname[0] == '.') continue;
    9452:	9e 32       	cpi	r25, 0x2E	; 46
    9454:	09 f4       	brne	.+2      	; 0x9458 <scan_files+0x6c>
    9456:	49 c0       	rjmp	.+146    	; 0x94ea <scan_files+0xfe>
#if _USE_LFN
			fn = *Finfo.lfname ? Finfo.lfname : Finfo.fname;
    9458:	e0 91 94 07 	lds	r30, 0x0794
    945c:	f0 91 95 07 	lds	r31, 0x0795
    9460:	80 81       	ld	r24, Z
    9462:	88 23       	and	r24, r24
    9464:	11 f4       	brne	.+4      	; 0x946a <scan_files+0x7e>
    9466:	e7 e8       	ldi	r30, 0x87	; 135
    9468:	f7 e0       	ldi	r31, 0x07	; 7
#else
			fn = Finfo.fname;
#endif
			if (Finfo.fattrib & AM_DIR) {
    946a:	80 91 86 07 	lds	r24, 0x0786
    946e:	84 ff       	sbrs	r24, 4
    9470:	17 c0       	rjmp	.+46     	; 0x94a0 <scan_files+0xb4>
				acc_dirs++;
    9472:	80 91 98 07 	lds	r24, 0x0798
    9476:	90 91 99 07 	lds	r25, 0x0799
    947a:	01 96       	adiw	r24, 0x01	; 1
    947c:	90 93 99 07 	sts	0x0799, r25
    9480:	80 93 98 07 	sts	0x0798, r24
				*(path+i) = '/'; strcpy(path+i+1, fn);
    9484:	d6 01       	movw	r26, r12
    9486:	9c 92       	st	X, r9
    9488:	c7 01       	movw	r24, r14
    948a:	bf 01       	movw	r22, r30
    948c:	0e 94 75 5c 	call	0xb8ea	; 0xb8ea <strcpy>
				res = scan_files(path);
    9490:	c8 01       	movw	r24, r16
    9492:	0e 94 f6 49 	call	0x93ec	; 0x93ec <scan_files>
				*(path+i) = '\0';
    9496:	f6 01       	movw	r30, r12
    9498:	10 82       	st	Z, r1
				if (res != FR_OK) break;
    949a:	88 23       	and	r24, r24
    949c:	31 f1       	breq	.+76     	; 0x94ea <scan_files+0xfe>
    949e:	31 c0       	rjmp	.+98     	; 0x9502 <scan_files+0x116>
			} else {
//				xprintf(PSTR("%s/%s\n"), path, fn);
				acc_files++;
    94a0:	80 91 9a 07 	lds	r24, 0x079A
    94a4:	90 91 9b 07 	lds	r25, 0x079B
    94a8:	01 96       	adiw	r24, 0x01	; 1
    94aa:	90 93 9b 07 	sts	0x079B, r25
    94ae:	80 93 9a 07 	sts	0x079A, r24
				acc_size += Finfo.fsize;
    94b2:	80 91 1f 0a 	lds	r24, 0x0A1F
    94b6:	90 91 20 0a 	lds	r25, 0x0A20
    94ba:	a0 91 21 0a 	lds	r26, 0x0A21
    94be:	b0 91 22 0a 	lds	r27, 0x0A22
    94c2:	20 91 7e 07 	lds	r18, 0x077E
    94c6:	30 91 7f 07 	lds	r19, 0x077F
    94ca:	40 91 80 07 	lds	r20, 0x0780
    94ce:	50 91 81 07 	lds	r21, 0x0781
    94d2:	82 0f       	add	r24, r18
    94d4:	93 1f       	adc	r25, r19
    94d6:	a4 1f       	adc	r26, r20
    94d8:	b5 1f       	adc	r27, r21
    94da:	80 93 1f 0a 	sts	0x0A1F, r24
    94de:	90 93 20 0a 	sts	0x0A20, r25
    94e2:	a0 93 21 0a 	sts	0x0A21, r26
    94e6:	b0 93 22 0a 	sts	0x0A22, r27
	char *fn;

	res = f_opendir(&dirs, path);
	if (res == FR_OK) {
		i = strlen(path);
		while (((res = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
    94ea:	c5 01       	movw	r24, r10
    94ec:	6e e7       	ldi	r22, 0x7E	; 126
    94ee:	77 e0       	ldi	r23, 0x07	; 7
    94f0:	0e 94 0d 3c 	call	0x781a	; 0x781a <f_readdir>
    94f4:	88 23       	and	r24, r24
    94f6:	29 f4       	brne	.+10     	; 0x9502 <scan_files+0x116>
    94f8:	90 91 87 07 	lds	r25, 0x0787
    94fc:	99 23       	and	r25, r25
    94fe:	09 f0       	breq	.+2      	; 0x9502 <scan_files+0x116>
    9500:	a8 cf       	rjmp	.-176    	; 0x9452 <scan_files+0x66>
			}
		}
	}

	return res;
}
    9502:	6a 96       	adiw	r28, 0x1a	; 26
    9504:	0f b6       	in	r0, 0x3f	; 63
    9506:	f8 94       	cli
    9508:	de bf       	out	0x3e, r29	; 62
    950a:	0f be       	out	0x3f, r0	; 63
    950c:	cd bf       	out	0x3d, r28	; 61
    950e:	cf 91       	pop	r28
    9510:	df 91       	pop	r29
    9512:	1f 91       	pop	r17
    9514:	0f 91       	pop	r16
    9516:	ff 90       	pop	r15
    9518:	ef 90       	pop	r14
    951a:	df 90       	pop	r13
    951c:	cf 90       	pop	r12
    951e:	bf 90       	pop	r11
    9520:	af 90       	pop	r10
    9522:	9f 90       	pop	r9
    9524:	08 95       	ret

00009526 <get_line>:
}


static
void get_line (char *buff, int len)
{
    9526:	ef 92       	push	r14
    9528:	ff 92       	push	r15
    952a:	0f 93       	push	r16
    952c:	1f 93       	push	r17
    952e:	cf 93       	push	r28
    9530:	df 93       	push	r29
    9532:	7c 01       	movw	r14, r24
    9534:	8b 01       	movw	r16, r22
    9536:	c0 e0       	ldi	r28, 0x00	; 0
    9538:	d0 e0       	ldi	r29, 0x00	; 0
		if ((c == '\b') && i) {
			i--;
			uart_put(c);
			continue;
		}
		if (c >= ' ' && i < len - 1) {	/* Visible chars */
    953a:	01 50       	subi	r16, 0x01	; 1
    953c:	10 40       	sbci	r17, 0x00	; 0
	BYTE c;
	int i = 0;


	for (;;) {
		c = uart_get();
    953e:	0e 94 ba 5a 	call	0xb574	; 0xb574 <uart_get>
		if (c == '\r') break;
    9542:	8d 30       	cpi	r24, 0x0D	; 13
    9544:	a9 f0       	breq	.+42     	; 0x9570 <get_line+0x4a>
		if ((c == '\b') && i) {
    9546:	88 30       	cpi	r24, 0x08	; 8
    9548:	31 f4       	brne	.+12     	; 0x9556 <get_line+0x30>
    954a:	20 97       	sbiw	r28, 0x00	; 0
    954c:	c1 f3       	breq	.-16     	; 0x953e <get_line+0x18>
			i--;
    954e:	21 97       	sbiw	r28, 0x01	; 1
			uart_put(c);
    9550:	0e 94 d5 5a 	call	0xb5aa	; 0xb5aa <uart_put>
    9554:	f4 cf       	rjmp	.-24     	; 0x953e <get_line+0x18>
			continue;
		}
		if (c >= ' ' && i < len - 1) {	/* Visible chars */
    9556:	80 32       	cpi	r24, 0x20	; 32
    9558:	90 f3       	brcs	.-28     	; 0x953e <get_line+0x18>
    955a:	c0 17       	cp	r28, r16
    955c:	d1 07       	cpc	r29, r17
    955e:	7c f7       	brge	.-34     	; 0x953e <get_line+0x18>
			buff[i++] = c;
    9560:	f7 01       	movw	r30, r14
    9562:	ec 0f       	add	r30, r28
    9564:	fd 1f       	adc	r31, r29
    9566:	80 83       	st	Z, r24
    9568:	21 96       	adiw	r28, 0x01	; 1
			xputc(c);
    956a:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <xputc>
    956e:	e7 cf       	rjmp	.-50     	; 0x953e <get_line+0x18>
		}
	}
	buff[i] = 0;
    9570:	ce 0d       	add	r28, r14
    9572:	df 1d       	adc	r29, r15
    9574:	18 82       	st	Y, r1
	uart_put('\n');
    9576:	8a e0       	ldi	r24, 0x0A	; 10
    9578:	0e 94 d5 5a 	call	0xb5aa	; 0xb5aa <uart_put>
}
    957c:	df 91       	pop	r29
    957e:	cf 91       	pop	r28
    9580:	1f 91       	pop	r17
    9582:	0f 91       	pop	r16
    9584:	ff 90       	pop	r15
    9586:	ef 90       	pop	r14
    9588:	08 95       	ret

0000958a <main>:
/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
{
    958a:	2f 92       	push	r2
    958c:	3f 92       	push	r3
    958e:	4f 92       	push	r4
    9590:	5f 92       	push	r5
    9592:	6f 92       	push	r6
    9594:	7f 92       	push	r7
    9596:	8f 92       	push	r8
    9598:	9f 92       	push	r9
    959a:	af 92       	push	r10
    959c:	bf 92       	push	r11
    959e:	cf 92       	push	r12
    95a0:	df 92       	push	r13
    95a2:	ef 92       	push	r14
    95a4:	ff 92       	push	r15
    95a6:	0f 93       	push	r16
    95a8:	1f 93       	push	r17
    95aa:	df 93       	push	r29
    95ac:	cf 93       	push	r28
    95ae:	cd b7       	in	r28, 0x3d	; 61
    95b0:	de b7       	in	r29, 0x3e	; 62
    95b2:	cd 57       	subi	r28, 0x7D	; 125
    95b4:	d0 40       	sbci	r29, 0x00	; 0
    95b6:	0f b6       	in	r0, 0x3f	; 63
    95b8:	f8 94       	cli
    95ba:	de bf       	out	0x3e, r29	; 62
    95bc:	0f be       	out	0x3f, r0	; 63
    95be:	cd bf       	out	0x3d, r28	; 61

//	PORTF = 0b11111111;	// Port F

//	PORTG = 0b11111; 	// Port G

	uart_init();		// Initialize UART driver
    95c0:	0e 94 a0 5a 	call	0xb540	; 0xb540 <uart_init>
	TCCR1A = 0b00010000;
	TCCR1B = 0b00001010;
*/
	
	// Here are the timer register corrected for ATMEGA328 June 22/2011
	OCR2A = 78-1;		// Timer2: 100Hz interval (OC2)
    95c4:	8d e4       	ldi	r24, 0x4D	; 77
    95c6:	80 93 b3 00 	sts	0x00B3, r24
	
	// Note: here is 8 MHZ divided by 1024 (TCCR2A below) , then divided by 78 itis almost 100 Hz
	
	TCCR2A = 0b00000010;
    95ca:	92 e0       	ldi	r25, 0x02	; 2
    95cc:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = 0b00000111; // This set the prescaler to 1024
    95d0:	87 e0       	ldi	r24, 0x07	; 7
    95d2:	80 93 b1 00 	sts	0x00B1, r24

	TIMSK2 = 0b00000010;
    95d6:	90 93 70 00 	sts	0x0070, r25
	

	rtc_init();			// Initialize RTC
    95da:	0e 94 60 5b 	call	0xb6c0	; 0xb6c0 <rtc_init>

	sei();
    95de:	78 94       	sei
	FIL file1, file2;		/* File object */


	IoInit();

	xfunc_out = uart_put;
    95e0:	85 ed       	ldi	r24, 0xD5	; 213
    95e2:	9a e5       	ldi	r25, 0x5A	; 90
    95e4:	90 93 87 01 	sts	0x0187, r25
    95e8:	80 93 86 01 	sts	0x0186, r24
	xputs(PSTR("\nFatFs module test monitor for AVR\n"));
    95ec:	8f ed       	ldi	r24, 0xDF	; 223
    95ee:	93 e0       	ldi	r25, 0x03	; 3
    95f0:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <xputs>
	xputs(_USE_LFN ? PSTR("LFN Enabled") : PSTR("LFN Disabled"));
    95f4:	83 ed       	ldi	r24, 0xD3	; 211
    95f6:	93 e0       	ldi	r25, 0x03	; 3
    95f8:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <xputs>
	xprintf(PSTR(", Code page: %u\n"), _CODE_PAGE);
    95fc:	00 d0       	rcall	.+0      	; 0x95fe <main+0x74>
    95fe:	00 d0       	rcall	.+0      	; 0x9600 <main+0x76>
    9600:	82 ec       	ldi	r24, 0xC2	; 194
    9602:	93 e0       	ldi	r25, 0x03	; 3
    9604:	ad b7       	in	r26, 0x3d	; 61
    9606:	be b7       	in	r27, 0x3e	; 62
    9608:	12 96       	adiw	r26, 0x02	; 2
    960a:	9c 93       	st	X, r25
    960c:	8e 93       	st	-X, r24
    960e:	11 97       	sbiw	r26, 0x01	; 1
    9610:	84 ea       	ldi	r24, 0xA4	; 164
    9612:	93 e0       	ldi	r25, 0x03	; 3
    9614:	14 96       	adiw	r26, 0x04	; 4
    9616:	9c 93       	st	X, r25
    9618:	8e 93       	st	-X, r24
    961a:	13 97       	sbiw	r26, 0x03	; 3
    961c:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>

#if _USE_LFN
	Finfo.lfname = Lfname;
    9620:	2e e9       	ldi	r18, 0x9E	; 158
    9622:	39 e0       	ldi	r19, 0x09	; 9
    9624:	30 93 95 07 	sts	0x0795, r19
    9628:	20 93 94 07 	sts	0x0794, r18
	Finfo.lfsize = sizeof(Lfname);
    962c:	81 e8       	ldi	r24, 0x81	; 129
    962e:	90 e0       	ldi	r25, 0x00	; 0
    9630:	90 93 97 07 	sts	0x0797, r25
    9634:	80 93 96 07 	sts	0x0796, r24
    9638:	22 24       	eor	r2, r2
    963a:	33 24       	eor	r3, r3
    963c:	21 01       	movw	r4, r2
    963e:	0f 90       	pop	r0
    9640:	0f 90       	pop	r0
    9642:	0f 90       	pop	r0
    9644:	0f 90       	pop	r0
#endif

	for (;;) {
		xputc('>');
		ptr = (char*)Line;
    9646:	83 e2       	ldi	r24, 0x23	; 35
    9648:	68 2e       	mov	r6, r24
    964a:	8a e0       	ldi	r24, 0x0A	; 10
    964c:	78 2e       	mov	r7, r24
								(Finfo.ftime >> 11), (Finfo.ftime >> 5) & 63,
								Finfo.fsize, &(Finfo.fname[0]));
#if _USE_LFN
					for (p2 = strlen(Finfo.fname); p2 < 14; p2++)
						xputc(' ');
					xprintf(PSTR("%s\n"), Lfname);
    964e:	ed 96       	adiw	r28, 0x3d	; 61
    9650:	2f af       	std	Y+63, r18	; 0x3f
    9652:	ed 97       	sbiw	r28, 0x3d	; 61
    9654:	ee 96       	adiw	r28, 0x3e	; 62
    9656:	3f af       	std	Y+63, r19	; 0x3f
    9658:	ee 97       	sbiw	r28, 0x3e	; 62
	Finfo.lfname = Lfname;
	Finfo.lfsize = sizeof(Lfname);
#endif

	for (;;) {
		xputc('>');
    965a:	8e e3       	ldi	r24, 0x3E	; 62
    965c:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <xputc>
		ptr = (char*)Line;
    9660:	7b 82       	std	Y+3, r7	; 0x03
    9662:	6a 82       	std	Y+2, r6	; 0x02
		get_line(ptr, sizeof(Line));
    9664:	c3 01       	movw	r24, r6
    9666:	60 e8       	ldi	r22, 0x80	; 128
    9668:	70 e0       	ldi	r23, 0x00	; 0
    966a:	0e 94 93 4a 	call	0x9526	; 0x9526 <get_line>
		switch (*ptr++) {
    966e:	aa 81       	ldd	r26, Y+2	; 0x02
    9670:	bb 81       	ldd	r27, Y+3	; 0x03
    9672:	fd 01       	movw	r30, r26
    9674:	81 91       	ld	r24, Z+
    9676:	fb 83       	std	Y+3, r31	; 0x03
    9678:	ea 83       	std	Y+2, r30	; 0x02
    967a:	84 36       	cpi	r24, 0x64	; 100
    967c:	61 f0       	breq	.+24     	; 0x9696 <main+0x10c>
    967e:	85 36       	cpi	r24, 0x65	; 101
    9680:	18 f4       	brcc	.+6      	; 0x9688 <main+0xfe>
    9682:	82 36       	cpi	r24, 0x62	; 98
    9684:	51 f7       	brne	.-44     	; 0x965a <main+0xd0>
    9686:	ca c1       	rjmp	.+916    	; 0x9a1c <main+0x492>
    9688:	86 36       	cpi	r24, 0x66	; 102
    968a:	09 f4       	brne	.+2      	; 0x968e <main+0x104>
    968c:	20 c3       	rjmp	.+1600   	; 0x9cce <main+0x744>
    968e:	84 37       	cpi	r24, 0x74	; 116
    9690:	21 f7       	brne	.-56     	; 0x965a <main+0xd0>
    9692:	0c 94 76 55 	jmp	0xaaec	; 0xaaec <main+0x1562>

		case 'd' :
			switch (*ptr++) {
    9696:	11 96       	adiw	r26, 0x01	; 1
    9698:	8c 91       	ld	r24, X
    969a:	31 96       	adiw	r30, 0x01	; 1
    969c:	fb 83       	std	Y+3, r31	; 0x03
    969e:	ea 83       	std	Y+2, r30	; 0x02
    96a0:	89 36       	cpi	r24, 0x69	; 105
    96a2:	09 f4       	brne	.+2      	; 0x96a6 <main+0x11c>
    96a4:	7d c0       	rjmp	.+250    	; 0x97a0 <main+0x216>
    96a6:	83 37       	cpi	r24, 0x73	; 115
    96a8:	09 f4       	brne	.+2      	; 0x96ac <main+0x122>
    96aa:	9d c0       	rjmp	.+314    	; 0x97e6 <main+0x25c>
    96ac:	84 36       	cpi	r24, 0x64	; 100
    96ae:	a9 f6       	brne	.-86     	; 0x965a <main+0xd0>
			case 'd' :	/* dd <phy_drv#> [<sector>] - Dump secrtor */
				if (!xatoi(&ptr, &p1)) break;
    96b0:	8e 01       	movw	r16, r28
    96b2:	0e 5f       	subi	r16, 0xFE	; 254
    96b4:	1f 4f       	sbci	r17, 0xFF	; 255
    96b6:	c8 01       	movw	r24, r16
    96b8:	be 01       	movw	r22, r28
    96ba:	62 5f       	subi	r22, 0xF2	; 242
    96bc:	7f 4f       	sbci	r23, 0xFF	; 255
    96be:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    96c2:	88 23       	and	r24, r24
    96c4:	51 f2       	breq	.-108    	; 0x965a <main+0xd0>
				if (!xatoi(&ptr, &p2)) p2 = sect;
    96c6:	c8 01       	movw	r24, r16
    96c8:	be 01       	movw	r22, r28
    96ca:	6e 5e       	subi	r22, 0xEE	; 238
    96cc:	7f 4f       	sbci	r23, 0xFF	; 255
    96ce:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    96d2:	88 23       	and	r24, r24
    96d4:	21 f4       	brne	.+8      	; 0x96de <main+0x154>
    96d6:	2a 8a       	std	Y+18, r2	; 0x12
    96d8:	3b 8a       	std	Y+19, r3	; 0x13
    96da:	4c 8a       	std	Y+20, r4	; 0x14
    96dc:	5d 8a       	std	Y+21, r5	; 0x15
				res = disk_read((BYTE)p1, Buff, p2, 1);
    96de:	2a 89       	ldd	r18, Y+18	; 0x12
    96e0:	3b 89       	ldd	r19, Y+19	; 0x13
    96e2:	4c 89       	ldd	r20, Y+20	; 0x14
    96e4:	5d 89       	ldd	r21, Y+21	; 0x15
    96e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    96e8:	6e e9       	ldi	r22, 0x9E	; 158
    96ea:	77 e0       	ldi	r23, 0x07	; 7
    96ec:	01 e0       	ldi	r16, 0x01	; 1
    96ee:	0e 94 15 58 	call	0xb02a	; 0xb02a <disk_read>
    96f2:	28 2f       	mov	r18, r24
				if (res) { xprintf(PSTR("rc=%d\n"), res); break; }
    96f4:	88 23       	and	r24, r24
    96f6:	79 f0       	breq	.+30     	; 0x9716 <main+0x18c>
    96f8:	00 d0       	rcall	.+0      	; 0x96fa <main+0x170>
    96fa:	00 d0       	rcall	.+0      	; 0x96fc <main+0x172>
    96fc:	ed b7       	in	r30, 0x3d	; 61
    96fe:	fe b7       	in	r31, 0x3e	; 62
    9700:	31 96       	adiw	r30, 0x01	; 1
    9702:	8b eb       	ldi	r24, 0xBB	; 187
    9704:	93 e0       	ldi	r25, 0x03	; 3
    9706:	ad b7       	in	r26, 0x3d	; 61
    9708:	be b7       	in	r27, 0x3e	; 62
    970a:	12 96       	adiw	r26, 0x02	; 2
    970c:	9c 93       	st	X, r25
    970e:	8e 93       	st	-X, r24
    9710:	11 97       	sbiw	r26, 0x01	; 1
    9712:	22 83       	std	Z+2, r18	; 0x02
    9714:	60 c0       	rjmp	.+192    	; 0x97d6 <main+0x24c>
				sect = p2 + 1;
    9716:	8a 88       	ldd	r8, Y+18	; 0x12
    9718:	9b 88       	ldd	r9, Y+19	; 0x13
    971a:	ac 88       	ldd	r10, Y+20	; 0x14
    971c:	bd 88       	ldd	r11, Y+21	; 0x15
				xprintf(PSTR("Sector:%lu\n"), p2);
    971e:	00 d0       	rcall	.+0      	; 0x9720 <main+0x196>
    9720:	00 d0       	rcall	.+0      	; 0x9722 <main+0x198>
    9722:	00 d0       	rcall	.+0      	; 0x9724 <main+0x19a>
    9724:	8f ea       	ldi	r24, 0xAF	; 175
    9726:	93 e0       	ldi	r25, 0x03	; 3
    9728:	ed b7       	in	r30, 0x3d	; 61
    972a:	fe b7       	in	r31, 0x3e	; 62
    972c:	92 83       	std	Z+2, r25	; 0x02
    972e:	81 83       	std	Z+1, r24	; 0x01
    9730:	ad b7       	in	r26, 0x3d	; 61
    9732:	be b7       	in	r27, 0x3e	; 62
    9734:	13 96       	adiw	r26, 0x03	; 3
    9736:	8d 92       	st	X+, r8
    9738:	9d 92       	st	X+, r9
    973a:	ad 92       	st	X+, r10
    973c:	bc 92       	st	X, r11
    973e:	16 97       	sbiw	r26, 0x06	; 6
    9740:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
    9744:	0e e9       	ldi	r16, 0x9E	; 158
    9746:	c0 2e       	mov	r12, r16
    9748:	07 e0       	ldi	r16, 0x07	; 7
    974a:	d0 2e       	mov	r13, r16
    974c:	ee 24       	eor	r14, r14
    974e:	ff 24       	eor	r15, r15
    9750:	87 01       	movw	r16, r14
    9752:	ed b7       	in	r30, 0x3d	; 61
    9754:	fe b7       	in	r31, 0x3e	; 62
    9756:	36 96       	adiw	r30, 0x06	; 6
    9758:	0f b6       	in	r0, 0x3f	; 63
    975a:	f8 94       	cli
    975c:	fe bf       	out	0x3e, r31	; 62
    975e:	0f be       	out	0x3f, r0	; 63
    9760:	ed bf       	out	0x3d, r30	; 61
				for (bp=Buff, ofs = 0; ofs < 0x200; bp+=16, ofs+=16)
					put_dump(bp, ofs, 16);
    9762:	c6 01       	movw	r24, r12
    9764:	b8 01       	movw	r22, r16
    9766:	a7 01       	movw	r20, r14
    9768:	20 e1       	ldi	r18, 0x10	; 16
    976a:	0e 94 25 49 	call	0x924a	; 0x924a <put_dump>
				if (!xatoi(&ptr, &p2)) p2 = sect;
				res = disk_read((BYTE)p1, Buff, p2, 1);
				if (res) { xprintf(PSTR("rc=%d\n"), res); break; }
				sect = p2 + 1;
				xprintf(PSTR("Sector:%lu\n"), p2);
				for (bp=Buff, ofs = 0; ofs < 0x200; bp+=16, ofs+=16)
    976e:	80 e1       	ldi	r24, 0x10	; 16
    9770:	90 e0       	ldi	r25, 0x00	; 0
    9772:	c8 0e       	add	r12, r24
    9774:	d9 1e       	adc	r13, r25
    9776:	80 e1       	ldi	r24, 0x10	; 16
    9778:	90 e0       	ldi	r25, 0x00	; 0
    977a:	a0 e0       	ldi	r26, 0x00	; 0
    977c:	b0 e0       	ldi	r27, 0x00	; 0
    977e:	e8 0e       	add	r14, r24
    9780:	f9 1e       	adc	r15, r25
    9782:	0a 1f       	adc	r16, r26
    9784:	1b 1f       	adc	r17, r27
    9786:	9e e9       	ldi	r25, 0x9E	; 158
    9788:	c9 16       	cp	r12, r25
    978a:	99 e0       	ldi	r25, 0x09	; 9
    978c:	d9 06       	cpc	r13, r25
    978e:	49 f7       	brne	.-46     	; 0x9762 <main+0x1d8>
			case 'd' :	/* dd <phy_drv#> [<sector>] - Dump secrtor */
				if (!xatoi(&ptr, &p1)) break;
				if (!xatoi(&ptr, &p2)) p2 = sect;
				res = disk_read((BYTE)p1, Buff, p2, 1);
				if (res) { xprintf(PSTR("rc=%d\n"), res); break; }
				sect = p2 + 1;
    9790:	14 01       	movw	r2, r8
    9792:	25 01       	movw	r4, r10
    9794:	08 94       	sec
    9796:	21 1c       	adc	r2, r1
    9798:	31 1c       	adc	r3, r1
    979a:	41 1c       	adc	r4, r1
    979c:	51 1c       	adc	r5, r1
    979e:	5d cf       	rjmp	.-326    	; 0x965a <main+0xd0>
				for (bp=Buff, ofs = 0; ofs < 0x200; bp+=16, ofs+=16)
					put_dump(bp, ofs, 16);
				break;

			case 'i' :	/* di <phy_drv#> - Initialize disk */
				if (!xatoi(&ptr, &p1)) break;
    97a0:	ce 01       	movw	r24, r28
    97a2:	02 96       	adiw	r24, 0x02	; 2
    97a4:	be 01       	movw	r22, r28
    97a6:	62 5f       	subi	r22, 0xF2	; 242
    97a8:	7f 4f       	sbci	r23, 0xFF	; 255
    97aa:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    97ae:	88 23       	and	r24, r24
    97b0:	09 f4       	brne	.+2      	; 0x97b4 <main+0x22a>
    97b2:	53 cf       	rjmp	.-346    	; 0x965a <main+0xd0>
				xprintf(PSTR("rc=%d\n"), disk_initialize((BYTE)p1));
    97b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    97b6:	0e 94 32 57 	call	0xae64	; 0xae64 <disk_initialize>
    97ba:	00 d0       	rcall	.+0      	; 0x97bc <main+0x232>
    97bc:	00 d0       	rcall	.+0      	; 0x97be <main+0x234>
    97be:	ed b7       	in	r30, 0x3d	; 61
    97c0:	fe b7       	in	r31, 0x3e	; 62
    97c2:	31 96       	adiw	r30, 0x01	; 1
    97c4:	28 ea       	ldi	r18, 0xA8	; 168
    97c6:	33 e0       	ldi	r19, 0x03	; 3
    97c8:	ad b7       	in	r26, 0x3d	; 61
    97ca:	be b7       	in	r27, 0x3e	; 62
    97cc:	12 96       	adiw	r26, 0x02	; 2
    97ce:	3c 93       	st	X, r19
    97d0:	2e 93       	st	-X, r18
    97d2:	11 97       	sbiw	r26, 0x01	; 1
    97d4:	82 83       	std	Z+2, r24	; 0x02
    97d6:	13 82       	std	Z+3, r1	; 0x03
    97d8:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
    97dc:	0f 90       	pop	r0
    97de:	0f 90       	pop	r0
    97e0:	0f 90       	pop	r0
    97e2:	0f 90       	pop	r0
    97e4:	3a cf       	rjmp	.-396    	; 0x965a <main+0xd0>
				break;

			case 's' :	/* ds <phy_drv#> - Show disk status */
				if (!xatoi(&ptr, &p1)) break;
    97e6:	ce 01       	movw	r24, r28
    97e8:	02 96       	adiw	r24, 0x02	; 2
    97ea:	be 01       	movw	r22, r28
    97ec:	62 5f       	subi	r22, 0xF2	; 242
    97ee:	7f 4f       	sbci	r23, 0xFF	; 255
    97f0:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    97f4:	88 23       	and	r24, r24
    97f6:	09 f4       	brne	.+2      	; 0x97fa <main+0x270>
    97f8:	30 cf       	rjmp	.-416    	; 0x965a <main+0xd0>
				if (disk_ioctl((BYTE)p1, GET_SECTOR_COUNT, &p2) == RES_OK)
    97fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    97fc:	61 e0       	ldi	r22, 0x01	; 1
    97fe:	ae 01       	movw	r20, r28
    9800:	4e 5e       	subi	r20, 0xEE	; 238
    9802:	5f 4f       	sbci	r21, 0xFF	; 255
    9804:	0e 94 df 58 	call	0xb1be	; 0xb1be <disk_ioctl>
    9808:	88 23       	and	r24, r24
    980a:	d9 f4       	brne	.+54     	; 0x9842 <main+0x2b8>
					{ xprintf(PSTR("Drive size: %lu sectors\n"), p2); }
    980c:	00 d0       	rcall	.+0      	; 0x980e <main+0x284>
    980e:	00 d0       	rcall	.+0      	; 0x9810 <main+0x286>
    9810:	00 d0       	rcall	.+0      	; 0x9812 <main+0x288>
    9812:	8f e8       	ldi	r24, 0x8F	; 143
    9814:	93 e0       	ldi	r25, 0x03	; 3
    9816:	ed b7       	in	r30, 0x3d	; 61
    9818:	fe b7       	in	r31, 0x3e	; 62
    981a:	92 83       	std	Z+2, r25	; 0x02
    981c:	81 83       	std	Z+1, r24	; 0x01
    981e:	8a 89       	ldd	r24, Y+18	; 0x12
    9820:	9b 89       	ldd	r25, Y+19	; 0x13
    9822:	ac 89       	ldd	r26, Y+20	; 0x14
    9824:	bd 89       	ldd	r27, Y+21	; 0x15
    9826:	83 83       	std	Z+3, r24	; 0x03
    9828:	94 83       	std	Z+4, r25	; 0x04
    982a:	a5 83       	std	Z+5, r26	; 0x05
    982c:	b6 83       	std	Z+6, r27	; 0x06
    982e:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
    9832:	8d b7       	in	r24, 0x3d	; 61
    9834:	9e b7       	in	r25, 0x3e	; 62
    9836:	06 96       	adiw	r24, 0x06	; 6
    9838:	0f b6       	in	r0, 0x3f	; 63
    983a:	f8 94       	cli
    983c:	9e bf       	out	0x3e, r25	; 62
    983e:	0f be       	out	0x3f, r0	; 63
    9840:	8d bf       	out	0x3d, r24	; 61
				if (disk_ioctl((BYTE)p1, GET_SECTOR_SIZE, &w1) == RES_OK)
    9842:	8e 85       	ldd	r24, Y+14	; 0x0e
    9844:	62 e0       	ldi	r22, 0x02	; 2
    9846:	ae 01       	movw	r20, r28
    9848:	4c 5f       	subi	r20, 0xFC	; 252
    984a:	5f 4f       	sbci	r21, 0xFF	; 255
    984c:	0e 94 df 58 	call	0xb1be	; 0xb1be <disk_ioctl>
    9850:	88 23       	and	r24, r24
    9852:	b1 f4       	brne	.+44     	; 0x9880 <main+0x2f6>
					{ xprintf(PSTR("Sector size: %u\n"), w1); }
    9854:	00 d0       	rcall	.+0      	; 0x9856 <main+0x2cc>
    9856:	00 d0       	rcall	.+0      	; 0x9858 <main+0x2ce>
    9858:	8e e7       	ldi	r24, 0x7E	; 126
    985a:	93 e0       	ldi	r25, 0x03	; 3
    985c:	ad b7       	in	r26, 0x3d	; 61
    985e:	be b7       	in	r27, 0x3e	; 62
    9860:	12 96       	adiw	r26, 0x02	; 2
    9862:	9c 93       	st	X, r25
    9864:	8e 93       	st	-X, r24
    9866:	11 97       	sbiw	r26, 0x01	; 1
    9868:	8c 81       	ldd	r24, Y+4	; 0x04
    986a:	9d 81       	ldd	r25, Y+5	; 0x05
    986c:	14 96       	adiw	r26, 0x04	; 4
    986e:	9c 93       	st	X, r25
    9870:	8e 93       	st	-X, r24
    9872:	13 97       	sbiw	r26, 0x03	; 3
    9874:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
    9878:	0f 90       	pop	r0
    987a:	0f 90       	pop	r0
    987c:	0f 90       	pop	r0
    987e:	0f 90       	pop	r0
				if (disk_ioctl((BYTE)p1, GET_BLOCK_SIZE, &p2) == RES_OK)
    9880:	8e 85       	ldd	r24, Y+14	; 0x0e
    9882:	63 e0       	ldi	r22, 0x03	; 3
    9884:	ae 01       	movw	r20, r28
    9886:	4e 5e       	subi	r20, 0xEE	; 238
    9888:	5f 4f       	sbci	r21, 0xFF	; 255
    988a:	0e 94 df 58 	call	0xb1be	; 0xb1be <disk_ioctl>
    988e:	88 23       	and	r24, r24
    9890:	d9 f4       	brne	.+54     	; 0x98c8 <main+0x33e>
					{ xprintf(PSTR("Erase block: %lu sectors\n"), p2); }
    9892:	00 d0       	rcall	.+0      	; 0x9894 <main+0x30a>
    9894:	00 d0       	rcall	.+0      	; 0x9896 <main+0x30c>
    9896:	00 d0       	rcall	.+0      	; 0x9898 <main+0x30e>
    9898:	84 e6       	ldi	r24, 0x64	; 100
    989a:	93 e0       	ldi	r25, 0x03	; 3
    989c:	ed b7       	in	r30, 0x3d	; 61
    989e:	fe b7       	in	r31, 0x3e	; 62
    98a0:	92 83       	std	Z+2, r25	; 0x02
    98a2:	81 83       	std	Z+1, r24	; 0x01
    98a4:	8a 89       	ldd	r24, Y+18	; 0x12
    98a6:	9b 89       	ldd	r25, Y+19	; 0x13
    98a8:	ac 89       	ldd	r26, Y+20	; 0x14
    98aa:	bd 89       	ldd	r27, Y+21	; 0x15
    98ac:	83 83       	std	Z+3, r24	; 0x03
    98ae:	94 83       	std	Z+4, r25	; 0x04
    98b0:	a5 83       	std	Z+5, r26	; 0x05
    98b2:	b6 83       	std	Z+6, r27	; 0x06
    98b4:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
    98b8:	8d b7       	in	r24, 0x3d	; 61
    98ba:	9e b7       	in	r25, 0x3e	; 62
    98bc:	06 96       	adiw	r24, 0x06	; 6
    98be:	0f b6       	in	r0, 0x3f	; 63
    98c0:	f8 94       	cli
    98c2:	9e bf       	out	0x3e, r25	; 62
    98c4:	0f be       	out	0x3f, r0	; 63
    98c6:	8d bf       	out	0x3d, r24	; 61
				if (disk_ioctl((BYTE)p1, MMC_GET_TYPE, &b1) == RES_OK)
    98c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    98ca:	6a e0       	ldi	r22, 0x0A	; 10
    98cc:	ae 01       	movw	r20, r28
    98ce:	4f 5f       	subi	r20, 0xFF	; 255
    98d0:	5f 4f       	sbci	r21, 0xFF	; 255
    98d2:	0e 94 df 58 	call	0xb1be	; 0xb1be <disk_ioctl>
    98d6:	88 23       	and	r24, r24
    98d8:	b1 f4       	brne	.+44     	; 0x9906 <main+0x37c>
					{ xprintf(PSTR("Card type: %u\n"), b1); }
    98da:	00 d0       	rcall	.+0      	; 0x98dc <main+0x352>
    98dc:	00 d0       	rcall	.+0      	; 0x98de <main+0x354>
    98de:	ed b7       	in	r30, 0x3d	; 61
    98e0:	fe b7       	in	r31, 0x3e	; 62
    98e2:	31 96       	adiw	r30, 0x01	; 1
    98e4:	85 e5       	ldi	r24, 0x55	; 85
    98e6:	93 e0       	ldi	r25, 0x03	; 3
    98e8:	ad b7       	in	r26, 0x3d	; 61
    98ea:	be b7       	in	r27, 0x3e	; 62
    98ec:	12 96       	adiw	r26, 0x02	; 2
    98ee:	9c 93       	st	X, r25
    98f0:	8e 93       	st	-X, r24
    98f2:	11 97       	sbiw	r26, 0x01	; 1
    98f4:	89 81       	ldd	r24, Y+1	; 0x01
    98f6:	82 83       	std	Z+2, r24	; 0x02
    98f8:	13 82       	std	Z+3, r1	; 0x03
    98fa:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
    98fe:	0f 90       	pop	r0
    9900:	0f 90       	pop	r0
    9902:	0f 90       	pop	r0
    9904:	0f 90       	pop	r0
				if (disk_ioctl((BYTE)p1, MMC_GET_CSD, Buff) == RES_OK)
    9906:	8e 85       	ldd	r24, Y+14	; 0x0e
    9908:	6b e0       	ldi	r22, 0x0B	; 11
    990a:	4e e9       	ldi	r20, 0x9E	; 158
    990c:	57 e0       	ldi	r21, 0x07	; 7
    990e:	0e 94 df 58 	call	0xb1be	; 0xb1be <disk_ioctl>
    9912:	88 23       	and	r24, r24
    9914:	69 f4       	brne	.+26     	; 0x9930 <main+0x3a6>
					{ xputs(PSTR("CSD:\n")); put_dump(Buff, 0, 16); }
    9916:	8f e4       	ldi	r24, 0x4F	; 79
    9918:	93 e0       	ldi	r25, 0x03	; 3
    991a:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <xputs>
    991e:	8e e9       	ldi	r24, 0x9E	; 158
    9920:	97 e0       	ldi	r25, 0x07	; 7
    9922:	40 e0       	ldi	r20, 0x00	; 0
    9924:	50 e0       	ldi	r21, 0x00	; 0
    9926:	60 e0       	ldi	r22, 0x00	; 0
    9928:	70 e0       	ldi	r23, 0x00	; 0
    992a:	20 e1       	ldi	r18, 0x10	; 16
    992c:	0e 94 25 49 	call	0x924a	; 0x924a <put_dump>
				if (disk_ioctl((BYTE)p1, MMC_GET_CID, Buff) == RES_OK)
    9930:	8e 85       	ldd	r24, Y+14	; 0x0e
    9932:	6c e0       	ldi	r22, 0x0C	; 12
    9934:	4e e9       	ldi	r20, 0x9E	; 158
    9936:	57 e0       	ldi	r21, 0x07	; 7
    9938:	0e 94 df 58 	call	0xb1be	; 0xb1be <disk_ioctl>
    993c:	88 23       	and	r24, r24
    993e:	69 f4       	brne	.+26     	; 0x995a <main+0x3d0>
					{ xputs(PSTR("CID:\n")); put_dump(Buff, 0, 16); }
    9940:	89 e4       	ldi	r24, 0x49	; 73
    9942:	93 e0       	ldi	r25, 0x03	; 3
    9944:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <xputs>
    9948:	8e e9       	ldi	r24, 0x9E	; 158
    994a:	97 e0       	ldi	r25, 0x07	; 7
    994c:	40 e0       	ldi	r20, 0x00	; 0
    994e:	50 e0       	ldi	r21, 0x00	; 0
    9950:	60 e0       	ldi	r22, 0x00	; 0
    9952:	70 e0       	ldi	r23, 0x00	; 0
    9954:	20 e1       	ldi	r18, 0x10	; 16
    9956:	0e 94 25 49 	call	0x924a	; 0x924a <put_dump>
				if (disk_ioctl((BYTE)p1, MMC_GET_OCR, Buff) == RES_OK)
    995a:	8e 85       	ldd	r24, Y+14	; 0x0e
    995c:	6d e0       	ldi	r22, 0x0D	; 13
    995e:	4e e9       	ldi	r20, 0x9E	; 158
    9960:	57 e0       	ldi	r21, 0x07	; 7
    9962:	0e 94 df 58 	call	0xb1be	; 0xb1be <disk_ioctl>
    9966:	88 23       	and	r24, r24
    9968:	69 f4       	brne	.+26     	; 0x9984 <main+0x3fa>
					{ xputs(PSTR("OCR:\n")); put_dump(Buff, 0, 4); }
    996a:	83 e4       	ldi	r24, 0x43	; 67
    996c:	93 e0       	ldi	r25, 0x03	; 3
    996e:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <xputs>
    9972:	8e e9       	ldi	r24, 0x9E	; 158
    9974:	97 e0       	ldi	r25, 0x07	; 7
    9976:	40 e0       	ldi	r20, 0x00	; 0
    9978:	50 e0       	ldi	r21, 0x00	; 0
    997a:	60 e0       	ldi	r22, 0x00	; 0
    997c:	70 e0       	ldi	r23, 0x00	; 0
    997e:	24 e0       	ldi	r18, 0x04	; 4
    9980:	0e 94 25 49 	call	0x924a	; 0x924a <put_dump>
				if (disk_ioctl((BYTE)p1, MMC_GET_SDSTAT, Buff) == RES_OK) {
    9984:	8e 85       	ldd	r24, Y+14	; 0x0e
    9986:	6e e0       	ldi	r22, 0x0E	; 14
    9988:	4e e9       	ldi	r20, 0x9E	; 158
    998a:	57 e0       	ldi	r21, 0x07	; 7
    998c:	0e 94 df 58 	call	0xb1be	; 0xb1be <disk_ioctl>
    9990:	88 23       	and	r24, r24
    9992:	c9 f4       	brne	.+50     	; 0x99c6 <main+0x43c>
					xputs(PSTR("SD Status:\n"));
    9994:	87 e3       	ldi	r24, 0x37	; 55
    9996:	93 e0       	ldi	r25, 0x03	; 3
    9998:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <xputs>
					for (s1 = 0; s1 < 64; s1 += 16) put_dump(Buff+s1, s1, 16);
    999c:	1f 82       	std	Y+7, r1	; 0x07
    999e:	1e 82       	std	Y+6, r1	; 0x06
    99a0:	0d c0       	rjmp	.+26     	; 0x99bc <main+0x432>
    99a2:	ac 01       	movw	r20, r24
    99a4:	60 e0       	ldi	r22, 0x00	; 0
    99a6:	70 e0       	ldi	r23, 0x00	; 0
    99a8:	82 56       	subi	r24, 0x62	; 98
    99aa:	98 4f       	sbci	r25, 0xF8	; 248
    99ac:	20 e1       	ldi	r18, 0x10	; 16
    99ae:	0e 94 25 49 	call	0x924a	; 0x924a <put_dump>
    99b2:	8e 81       	ldd	r24, Y+6	; 0x06
    99b4:	9f 81       	ldd	r25, Y+7	; 0x07
    99b6:	40 96       	adiw	r24, 0x10	; 16
    99b8:	9f 83       	std	Y+7, r25	; 0x07
    99ba:	8e 83       	std	Y+6, r24	; 0x06
    99bc:	8e 81       	ldd	r24, Y+6	; 0x06
    99be:	9f 81       	ldd	r25, Y+7	; 0x07
    99c0:	80 34       	cpi	r24, 0x40	; 64
    99c2:	91 05       	cpc	r25, r1
    99c4:	70 f3       	brcs	.-36     	; 0x99a2 <main+0x418>
				}
				if (disk_ioctl((BYTE)p1, ATA_GET_MODEL, Line) == RES_OK)
    99c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    99c8:	65 e1       	ldi	r22, 0x15	; 21
    99ca:	43 e2       	ldi	r20, 0x23	; 35
    99cc:	5a e0       	ldi	r21, 0x0A	; 10
    99ce:	0e 94 df 58 	call	0xb1be	; 0xb1be <disk_ioctl>
    99d2:	88 23       	and	r24, r24
    99d4:	91 f4       	brne	.+36     	; 0x99fa <main+0x470>
					{ Line[40] = '\0'; xprintf(PSTR("Model: %s\n"), Line); }
    99d6:	10 92 4b 0a 	sts	0x0A4B, r1
    99da:	00 d0       	rcall	.+0      	; 0x99dc <main+0x452>
    99dc:	00 d0       	rcall	.+0      	; 0x99de <main+0x454>
    99de:	8c e2       	ldi	r24, 0x2C	; 44
    99e0:	93 e0       	ldi	r25, 0x03	; 3
    99e2:	ed b7       	in	r30, 0x3d	; 61
    99e4:	fe b7       	in	r31, 0x3e	; 62
    99e6:	92 83       	std	Z+2, r25	; 0x02
    99e8:	81 83       	std	Z+1, r24	; 0x01
    99ea:	74 82       	std	Z+4, r7	; 0x04
    99ec:	63 82       	std	Z+3, r6	; 0x03
    99ee:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
    99f2:	0f 90       	pop	r0
    99f4:	0f 90       	pop	r0
    99f6:	0f 90       	pop	r0
    99f8:	0f 90       	pop	r0
				if (disk_ioctl((BYTE)p1, ATA_GET_SN, Line) == RES_OK)
    99fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    99fc:	66 e1       	ldi	r22, 0x16	; 22
    99fe:	43 e2       	ldi	r20, 0x23	; 35
    9a00:	5a e0       	ldi	r21, 0x0A	; 10
    9a02:	0e 94 df 58 	call	0xb1be	; 0xb1be <disk_ioctl>
    9a06:	88 23       	and	r24, r24
    9a08:	09 f0       	breq	.+2      	; 0x9a0c <main+0x482>
    9a0a:	27 ce       	rjmp	.-946    	; 0x965a <main+0xd0>
					{ Line[20] = '\0'; xprintf(PSTR("S/N: %s\n"), Line); }
    9a0c:	10 92 37 0a 	sts	0x0A37, r1
    9a10:	00 d0       	rcall	.+0      	; 0x9a12 <main+0x488>
    9a12:	00 d0       	rcall	.+0      	; 0x9a14 <main+0x48a>
    9a14:	83 e2       	ldi	r24, 0x23	; 35
    9a16:	93 e0       	ldi	r25, 0x03	; 3
    9a18:	0c 94 20 55 	jmp	0xaa40	; 0xaa40 <main+0x14b6>
				break;
			}
			break;

		case 'b' :
			switch (*ptr++) {
    9a1c:	11 96       	adiw	r26, 0x01	; 1
    9a1e:	8c 91       	ld	r24, X
    9a20:	31 96       	adiw	r30, 0x01	; 1
    9a22:	fb 83       	std	Y+3, r31	; 0x03
    9a24:	ea 83       	std	Y+2, r30	; 0x02
    9a26:	86 36       	cpi	r24, 0x66	; 102
    9a28:	09 f4       	brne	.+2      	; 0x9a2c <main+0x4a2>
    9a2a:	3e c1       	rjmp	.+636    	; 0x9ca8 <main+0x71e>
    9a2c:	87 36       	cpi	r24, 0x67	; 103
    9a2e:	30 f4       	brcc	.+12     	; 0x9a3c <main+0x4b2>
    9a30:	84 36       	cpi	r24, 0x64	; 100
    9a32:	59 f0       	breq	.+22     	; 0x9a4a <main+0x4c0>
    9a34:	85 36       	cpi	r24, 0x65	; 101
    9a36:	09 f0       	breq	.+2      	; 0x9a3a <main+0x4b0>
    9a38:	10 ce       	rjmp	.-992    	; 0x965a <main+0xd0>
    9a3a:	3f c0       	rjmp	.+126    	; 0x9aba <main+0x530>
    9a3c:	82 37       	cpi	r24, 0x72	; 114
    9a3e:	09 f4       	brne	.+2      	; 0x9a42 <main+0x4b8>
    9a40:	c5 c0       	rjmp	.+394    	; 0x9bcc <main+0x642>
    9a42:	87 37       	cpi	r24, 0x77	; 119
    9a44:	09 f0       	breq	.+2      	; 0x9a48 <main+0x4be>
    9a46:	09 ce       	rjmp	.-1006   	; 0x965a <main+0xd0>
    9a48:	f8 c0       	rjmp	.+496    	; 0x9c3a <main+0x6b0>
			case 'd' :	/* bd <addr> - Dump R/W buffer */
				if (!xatoi(&ptr, &p1)) break;
    9a4a:	ce 01       	movw	r24, r28
    9a4c:	02 96       	adiw	r24, 0x02	; 2
    9a4e:	be 01       	movw	r22, r28
    9a50:	62 5f       	subi	r22, 0xF2	; 242
    9a52:	7f 4f       	sbci	r23, 0xFF	; 255
    9a54:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    9a58:	88 23       	and	r24, r24
    9a5a:	09 f4       	brne	.+2      	; 0x9a5e <main+0x4d4>
    9a5c:	fe cd       	rjmp	.-1028   	; 0x965a <main+0xd0>
				for (bp=&Buff[p1], ofs = p1, cnt = 32; cnt; cnt--, ptr+=16, ofs+=16)
    9a5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    9a60:	9f 85       	ldd	r25, Y+15	; 0x0f
    9a62:	a8 89       	ldd	r26, Y+16	; 0x10
    9a64:	b9 89       	ldd	r27, Y+17	; 0x11
    9a66:	1e e9       	ldi	r17, 0x9E	; 158
    9a68:	c1 2e       	mov	r12, r17
    9a6a:	17 e0       	ldi	r17, 0x07	; 7
    9a6c:	d1 2e       	mov	r13, r17
    9a6e:	c8 0e       	add	r12, r24
    9a70:	d9 1e       	adc	r13, r25
    9a72:	7c 01       	movw	r14, r24
    9a74:	8d 01       	movw	r16, r26
    9a76:	80 e2       	ldi	r24, 0x20	; 32
    9a78:	90 e0       	ldi	r25, 0x00	; 0
    9a7a:	9b 87       	std	Y+11, r25	; 0x0b
    9a7c:	8a 87       	std	Y+10, r24	; 0x0a
    9a7e:	18 c0       	rjmp	.+48     	; 0x9ab0 <main+0x526>
					put_dump(bp, ofs, 16);
    9a80:	c6 01       	movw	r24, r12
    9a82:	b8 01       	movw	r22, r16
    9a84:	a7 01       	movw	r20, r14
    9a86:	20 e1       	ldi	r18, 0x10	; 16
    9a88:	0e 94 25 49 	call	0x924a	; 0x924a <put_dump>

		case 'b' :
			switch (*ptr++) {
			case 'd' :	/* bd <addr> - Dump R/W buffer */
				if (!xatoi(&ptr, &p1)) break;
				for (bp=&Buff[p1], ofs = p1, cnt = 32; cnt; cnt--, ptr+=16, ofs+=16)
    9a8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    9a8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    9a90:	01 97       	sbiw	r24, 0x01	; 1
    9a92:	9b 87       	std	Y+11, r25	; 0x0b
    9a94:	8a 87       	std	Y+10, r24	; 0x0a
    9a96:	8a 81       	ldd	r24, Y+2	; 0x02
    9a98:	9b 81       	ldd	r25, Y+3	; 0x03
    9a9a:	40 96       	adiw	r24, 0x10	; 16
    9a9c:	9b 83       	std	Y+3, r25	; 0x03
    9a9e:	8a 83       	std	Y+2, r24	; 0x02
    9aa0:	80 e1       	ldi	r24, 0x10	; 16
    9aa2:	90 e0       	ldi	r25, 0x00	; 0
    9aa4:	a0 e0       	ldi	r26, 0x00	; 0
    9aa6:	b0 e0       	ldi	r27, 0x00	; 0
    9aa8:	e8 0e       	add	r14, r24
    9aaa:	f9 1e       	adc	r15, r25
    9aac:	0a 1f       	adc	r16, r26
    9aae:	1b 1f       	adc	r17, r27
    9ab0:	8a 85       	ldd	r24, Y+10	; 0x0a
    9ab2:	9b 85       	ldd	r25, Y+11	; 0x0b
    9ab4:	89 2b       	or	r24, r25
    9ab6:	21 f7       	brne	.-56     	; 0x9a80 <main+0x4f6>
    9ab8:	d0 cd       	rjmp	.-1120   	; 0x965a <main+0xd0>
					put_dump(bp, ofs, 16);
				break;

			case 'e' :	/* be <addr> [<data>] ... - Edit R/W buffer */
				if (!xatoi(&ptr, &p1)) break;
    9aba:	8e 01       	movw	r16, r28
    9abc:	0e 5f       	subi	r16, 0xFE	; 254
    9abe:	1f 4f       	sbci	r17, 0xFF	; 255
    9ac0:	c8 01       	movw	r24, r16
    9ac2:	be 01       	movw	r22, r28
    9ac4:	62 5f       	subi	r22, 0xF2	; 242
    9ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    9ac8:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    9acc:	88 23       	and	r24, r24
    9ace:	09 f4       	brne	.+2      	; 0x9ad2 <main+0x548>
    9ad0:	c4 cd       	rjmp	.-1144   	; 0x965a <main+0xd0>
				if (xatoi(&ptr, &p2)) {
    9ad2:	b2 e1       	ldi	r27, 0x12	; 18
    9ad4:	eb 2e       	mov	r14, r27
    9ad6:	f1 2c       	mov	r15, r1
    9ad8:	ec 0e       	add	r14, r28
    9ada:	fd 1e       	adc	r15, r29
    9adc:	c8 01       	movw	r24, r16
    9ade:	b7 01       	movw	r22, r14
    9ae0:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    9ae4:	88 23       	and	r24, r24
    9ae6:	c9 f0       	breq	.+50     	; 0x9b1a <main+0x590>
					do {
						Buff[p1++] = (BYTE)p2;
					} while (xatoi(&ptr, &p2));
    9ae8:	68 01       	movw	r12, r16
    9aea:	87 01       	movw	r16, r14

			case 'e' :	/* be <addr> [<data>] ... - Edit R/W buffer */
				if (!xatoi(&ptr, &p1)) break;
				if (xatoi(&ptr, &p2)) {
					do {
						Buff[p1++] = (BYTE)p2;
    9aec:	8e 85       	ldd	r24, Y+14	; 0x0e
    9aee:	9f 85       	ldd	r25, Y+15	; 0x0f
    9af0:	a8 89       	ldd	r26, Y+16	; 0x10
    9af2:	b9 89       	ldd	r27, Y+17	; 0x11
    9af4:	fc 01       	movw	r30, r24
    9af6:	e2 56       	subi	r30, 0x62	; 98
    9af8:	f8 4f       	sbci	r31, 0xF8	; 248
    9afa:	2a 89       	ldd	r18, Y+18	; 0x12
    9afc:	20 83       	st	Z, r18
    9afe:	01 96       	adiw	r24, 0x01	; 1
    9b00:	a1 1d       	adc	r26, r1
    9b02:	b1 1d       	adc	r27, r1
    9b04:	8e 87       	std	Y+14, r24	; 0x0e
    9b06:	9f 87       	std	Y+15, r25	; 0x0f
    9b08:	a8 8b       	std	Y+16, r26	; 0x10
    9b0a:	b9 8b       	std	Y+17, r27	; 0x11
					} while (xatoi(&ptr, &p2));
    9b0c:	c6 01       	movw	r24, r12
    9b0e:	b8 01       	movw	r22, r16
    9b10:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    9b14:	88 23       	and	r24, r24
    9b16:	51 f7       	brne	.-44     	; 0x9aec <main+0x562>
    9b18:	a0 cd       	rjmp	.-1216   	; 0x965a <main+0xd0>
					xprintf(PSTR("%04X %02X-"), (WORD)p1, Buff[p1]);
					get_line(Line, sizeof(Line));
					ptr = Line;
					if (*ptr == '.') break;
					if (*ptr < ' ') { p1++; continue; }
					if (xatoi(&ptr, &p2))
    9b1a:	68 01       	movw	r12, r16
    9b1c:	87 01       	movw	r16, r14
						Buff[p1++] = (BYTE)p2;
					} while (xatoi(&ptr, &p2));
					break;
				}
				for (;;) {
					xprintf(PSTR("%04X %02X-"), (WORD)p1, Buff[p1]);
    9b1e:	2e 85       	ldd	r18, Y+14	; 0x0e
    9b20:	3f 85       	ldd	r19, Y+15	; 0x0f
    9b22:	48 89       	ldd	r20, Y+16	; 0x10
    9b24:	59 89       	ldd	r21, Y+17	; 0x11
    9b26:	00 d0       	rcall	.+0      	; 0x9b28 <main+0x59e>
    9b28:	00 d0       	rcall	.+0      	; 0x9b2a <main+0x5a0>
    9b2a:	00 d0       	rcall	.+0      	; 0x9b2c <main+0x5a2>
    9b2c:	ed b7       	in	r30, 0x3d	; 61
    9b2e:	fe b7       	in	r31, 0x3e	; 62
    9b30:	31 96       	adiw	r30, 0x01	; 1
    9b32:	a8 e1       	ldi	r26, 0x18	; 24
    9b34:	aa 2e       	mov	r10, r26
    9b36:	a3 e0       	ldi	r26, 0x03	; 3
    9b38:	ba 2e       	mov	r11, r26
    9b3a:	ad b7       	in	r26, 0x3d	; 61
    9b3c:	be b7       	in	r27, 0x3e	; 62
    9b3e:	12 96       	adiw	r26, 0x02	; 2
    9b40:	bc 92       	st	X, r11
    9b42:	ae 92       	st	-X, r10
    9b44:	11 97       	sbiw	r26, 0x01	; 1
    9b46:	33 83       	std	Z+3, r19	; 0x03
    9b48:	22 83       	std	Z+2, r18	; 0x02
    9b4a:	c9 01       	movw	r24, r18
    9b4c:	82 56       	subi	r24, 0x62	; 98
    9b4e:	98 4f       	sbci	r25, 0xF8	; 248
    9b50:	dc 01       	movw	r26, r24
    9b52:	8c 91       	ld	r24, X
    9b54:	84 83       	std	Z+4, r24	; 0x04
    9b56:	15 82       	std	Z+5, r1	; 0x05
    9b58:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
					get_line(Line, sizeof(Line));
    9b5c:	ed b7       	in	r30, 0x3d	; 61
    9b5e:	fe b7       	in	r31, 0x3e	; 62
    9b60:	36 96       	adiw	r30, 0x06	; 6
    9b62:	0f b6       	in	r0, 0x3f	; 63
    9b64:	f8 94       	cli
    9b66:	fe bf       	out	0x3e, r31	; 62
    9b68:	0f be       	out	0x3f, r0	; 63
    9b6a:	ed bf       	out	0x3d, r30	; 61
    9b6c:	83 e2       	ldi	r24, 0x23	; 35
    9b6e:	9a e0       	ldi	r25, 0x0A	; 10
    9b70:	60 e8       	ldi	r22, 0x80	; 128
    9b72:	70 e0       	ldi	r23, 0x00	; 0
    9b74:	0e 94 93 4a 	call	0x9526	; 0x9526 <get_line>
					ptr = Line;
    9b78:	7b 82       	std	Y+3, r7	; 0x03
    9b7a:	6a 82       	std	Y+2, r6	; 0x02
					if (*ptr == '.') break;
    9b7c:	80 91 23 0a 	lds	r24, 0x0A23
    9b80:	8e 32       	cpi	r24, 0x2E	; 46
    9b82:	09 f4       	brne	.+2      	; 0x9b86 <main+0x5fc>
    9b84:	6a cd       	rjmp	.-1324   	; 0x965a <main+0xd0>
					if (*ptr < ' ') { p1++; continue; }
    9b86:	80 32       	cpi	r24, 0x20	; 32
    9b88:	28 f4       	brcc	.+10     	; 0x9b94 <main+0x60a>
    9b8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    9b8c:	9f 85       	ldd	r25, Y+15	; 0x0f
    9b8e:	a8 89       	ldd	r26, Y+16	; 0x10
    9b90:	b9 89       	ldd	r27, Y+17	; 0x11
    9b92:	0f c0       	rjmp	.+30     	; 0x9bb2 <main+0x628>
					if (xatoi(&ptr, &p2))
    9b94:	c6 01       	movw	r24, r12
    9b96:	b8 01       	movw	r22, r16
    9b98:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    9b9c:	88 23       	and	r24, r24
    9b9e:	89 f0       	breq	.+34     	; 0x9bc2 <main+0x638>
						Buff[p1++] = (BYTE)p2;
    9ba0:	8e 85       	ldd	r24, Y+14	; 0x0e
    9ba2:	9f 85       	ldd	r25, Y+15	; 0x0f
    9ba4:	a8 89       	ldd	r26, Y+16	; 0x10
    9ba6:	b9 89       	ldd	r27, Y+17	; 0x11
    9ba8:	fc 01       	movw	r30, r24
    9baa:	e2 56       	subi	r30, 0x62	; 98
    9bac:	f8 4f       	sbci	r31, 0xF8	; 248
    9bae:	2a 89       	ldd	r18, Y+18	; 0x12
    9bb0:	20 83       	st	Z, r18
    9bb2:	01 96       	adiw	r24, 0x01	; 1
    9bb4:	a1 1d       	adc	r26, r1
    9bb6:	b1 1d       	adc	r27, r1
    9bb8:	8e 87       	std	Y+14, r24	; 0x0e
    9bba:	9f 87       	std	Y+15, r25	; 0x0f
    9bbc:	a8 8b       	std	Y+16, r26	; 0x10
    9bbe:	b9 8b       	std	Y+17, r27	; 0x11
    9bc0:	ae cf       	rjmp	.-164    	; 0x9b1e <main+0x594>
					else
						xputs(PSTR("???\n"));
    9bc2:	83 e1       	ldi	r24, 0x13	; 19
    9bc4:	93 e0       	ldi	r25, 0x03	; 3
    9bc6:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <xputs>
    9bca:	a9 cf       	rjmp	.-174    	; 0x9b1e <main+0x594>
				}
				break;

			case 'r' :	/* br <phy_drv#> <sector> [<n>] - Read disk into R/W buffer */
				if (!xatoi(&ptr, &p1)) break;
    9bcc:	8e 01       	movw	r16, r28
    9bce:	0e 5f       	subi	r16, 0xFE	; 254
    9bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    9bd2:	c8 01       	movw	r24, r16
    9bd4:	be 01       	movw	r22, r28
    9bd6:	62 5f       	subi	r22, 0xF2	; 242
    9bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    9bda:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    9bde:	88 23       	and	r24, r24
    9be0:	09 f4       	brne	.+2      	; 0x9be4 <main+0x65a>
    9be2:	3b cd       	rjmp	.-1418   	; 0x965a <main+0xd0>
				if (!xatoi(&ptr, &p2)) break;
    9be4:	c8 01       	movw	r24, r16
    9be6:	be 01       	movw	r22, r28
    9be8:	6e 5e       	subi	r22, 0xEE	; 238
    9bea:	7f 4f       	sbci	r23, 0xFF	; 255
    9bec:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    9bf0:	88 23       	and	r24, r24
    9bf2:	09 f4       	brne	.+2      	; 0x9bf6 <main+0x66c>
    9bf4:	32 cd       	rjmp	.-1436   	; 0x965a <main+0xd0>
				if (!xatoi(&ptr, &p3)) p3 = 1;
    9bf6:	c8 01       	movw	r24, r16
    9bf8:	be 01       	movw	r22, r28
    9bfa:	6a 5e       	subi	r22, 0xEA	; 234
    9bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    9bfe:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    9c02:	88 23       	and	r24, r24
    9c04:	41 f4       	brne	.+16     	; 0x9c16 <main+0x68c>
    9c06:	81 e0       	ldi	r24, 0x01	; 1
    9c08:	90 e0       	ldi	r25, 0x00	; 0
    9c0a:	a0 e0       	ldi	r26, 0x00	; 0
    9c0c:	b0 e0       	ldi	r27, 0x00	; 0
    9c0e:	8e 8b       	std	Y+22, r24	; 0x16
    9c10:	9f 8b       	std	Y+23, r25	; 0x17
    9c12:	a8 8f       	std	Y+24, r26	; 0x18
    9c14:	b9 8f       	std	Y+25, r27	; 0x19
				xprintf(PSTR("rc=%u\n"), disk_read((BYTE)p1, Buff, p2, p3));
    9c16:	2a 89       	ldd	r18, Y+18	; 0x12
    9c18:	3b 89       	ldd	r19, Y+19	; 0x13
    9c1a:	4c 89       	ldd	r20, Y+20	; 0x14
    9c1c:	5d 89       	ldd	r21, Y+21	; 0x15
    9c1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    9c20:	6e e9       	ldi	r22, 0x9E	; 158
    9c22:	77 e0       	ldi	r23, 0x07	; 7
    9c24:	0e 89       	ldd	r16, Y+22	; 0x16
    9c26:	0e 94 15 58 	call	0xb02a	; 0xb02a <disk_read>
    9c2a:	00 d0       	rcall	.+0      	; 0x9c2c <main+0x6a2>
    9c2c:	00 d0       	rcall	.+0      	; 0x9c2e <main+0x6a4>
    9c2e:	ed b7       	in	r30, 0x3d	; 61
    9c30:	fe b7       	in	r31, 0x3e	; 62
    9c32:	31 96       	adiw	r30, 0x01	; 1
    9c34:	2c e0       	ldi	r18, 0x0C	; 12
    9c36:	33 e0       	ldi	r19, 0x03	; 3
    9c38:	c7 cd       	rjmp	.-1138   	; 0x97c8 <main+0x23e>
				break;

			case 'w' :	/* bw <phy_drv#> <sector> [<n>] - Write R/W buffer into disk */
				if (!xatoi(&ptr, &p1)) break;
    9c3a:	8e 01       	movw	r16, r28
    9c3c:	0e 5f       	subi	r16, 0xFE	; 254
    9c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    9c40:	c8 01       	movw	r24, r16
    9c42:	be 01       	movw	r22, r28
    9c44:	62 5f       	subi	r22, 0xF2	; 242
    9c46:	7f 4f       	sbci	r23, 0xFF	; 255
    9c48:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    9c4c:	88 23       	and	r24, r24
    9c4e:	09 f4       	brne	.+2      	; 0x9c52 <main+0x6c8>
    9c50:	04 cd       	rjmp	.-1528   	; 0x965a <main+0xd0>
				if (!xatoi(&ptr, &p2)) break;
    9c52:	c8 01       	movw	r24, r16
    9c54:	be 01       	movw	r22, r28
    9c56:	6e 5e       	subi	r22, 0xEE	; 238
    9c58:	7f 4f       	sbci	r23, 0xFF	; 255
    9c5a:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    9c5e:	88 23       	and	r24, r24
    9c60:	09 f4       	brne	.+2      	; 0x9c64 <main+0x6da>
    9c62:	fb cc       	rjmp	.-1546   	; 0x965a <main+0xd0>
				if (!xatoi(&ptr, &p3)) p3 = 1;
    9c64:	c8 01       	movw	r24, r16
    9c66:	be 01       	movw	r22, r28
    9c68:	6a 5e       	subi	r22, 0xEA	; 234
    9c6a:	7f 4f       	sbci	r23, 0xFF	; 255
    9c6c:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    9c70:	88 23       	and	r24, r24
    9c72:	41 f4       	brne	.+16     	; 0x9c84 <main+0x6fa>
    9c74:	81 e0       	ldi	r24, 0x01	; 1
    9c76:	90 e0       	ldi	r25, 0x00	; 0
    9c78:	a0 e0       	ldi	r26, 0x00	; 0
    9c7a:	b0 e0       	ldi	r27, 0x00	; 0
    9c7c:	8e 8b       	std	Y+22, r24	; 0x16
    9c7e:	9f 8b       	std	Y+23, r25	; 0x17
    9c80:	a8 8f       	std	Y+24, r26	; 0x18
    9c82:	b9 8f       	std	Y+25, r27	; 0x19
				xprintf(PSTR("rc=%u\n"), disk_write((BYTE)p1, Buff, p2, p3));
    9c84:	2a 89       	ldd	r18, Y+18	; 0x12
    9c86:	3b 89       	ldd	r19, Y+19	; 0x13
    9c88:	4c 89       	ldd	r20, Y+20	; 0x14
    9c8a:	5d 89       	ldd	r21, Y+21	; 0x15
    9c8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    9c8e:	6e e9       	ldi	r22, 0x9E	; 158
    9c90:	77 e0       	ldi	r23, 0x07	; 7
    9c92:	0e 89       	ldd	r16, Y+22	; 0x16
    9c94:	0e 94 6e 58 	call	0xb0dc	; 0xb0dc <disk_write>
    9c98:	00 d0       	rcall	.+0      	; 0x9c9a <main+0x710>
    9c9a:	00 d0       	rcall	.+0      	; 0x9c9c <main+0x712>
    9c9c:	ed b7       	in	r30, 0x3d	; 61
    9c9e:	fe b7       	in	r31, 0x3e	; 62
    9ca0:	31 96       	adiw	r30, 0x01	; 1
    9ca2:	25 e0       	ldi	r18, 0x05	; 5
    9ca4:	33 e0       	ldi	r19, 0x03	; 3
    9ca6:	90 cd       	rjmp	.-1248   	; 0x97c8 <main+0x23e>
				break;

			case 'f' :	/* bf <n> - Fill working buffer */
				if (!xatoi(&ptr, &p1)) break;
    9ca8:	ce 01       	movw	r24, r28
    9caa:	02 96       	adiw	r24, 0x02	; 2
    9cac:	be 01       	movw	r22, r28
    9cae:	62 5f       	subi	r22, 0xF2	; 242
    9cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    9cb2:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    9cb6:	88 23       	and	r24, r24
    9cb8:	09 f4       	brne	.+2      	; 0x9cbc <main+0x732>
    9cba:	cf cc       	rjmp	.-1634   	; 0x965a <main+0xd0>
				memset(Buff, (BYTE)p1, sizeof(Buff));
    9cbc:	6e 85       	ldd	r22, Y+14	; 0x0e
    9cbe:	8e e9       	ldi	r24, 0x9E	; 158
    9cc0:	97 e0       	ldi	r25, 0x07	; 7
    9cc2:	70 e0       	ldi	r23, 0x00	; 0
    9cc4:	40 e0       	ldi	r20, 0x00	; 0
    9cc6:	52 e0       	ldi	r21, 0x02	; 2
    9cc8:	0e 94 63 5c 	call	0xb8c6	; 0xb8c6 <memset>
    9ccc:	c6 cc       	rjmp	.-1652   	; 0x965a <main+0xd0>

			}
			break;

		case 'f' :
			switch (*ptr++) {
    9cce:	11 96       	adiw	r26, 0x01	; 1
    9cd0:	8c 91       	ld	r24, X
    9cd2:	31 96       	adiw	r30, 0x01	; 1
    9cd4:	fb 83       	std	Y+3, r31	; 0x03
    9cd6:	ea 83       	std	Y+2, r30	; 0x02
    9cd8:	90 e0       	ldi	r25, 0x00	; 0
    9cda:	fc 01       	movw	r30, r24
    9cdc:	e1 56       	subi	r30, 0x61	; 97
    9cde:	f0 40       	sbci	r31, 0x00	; 0
    9ce0:	e8 31       	cpi	r30, 0x18	; 24
    9ce2:	f1 05       	cpc	r31, r1
    9ce4:	08 f0       	brcs	.+2      	; 0x9ce8 <main+0x75e>
    9ce6:	b9 cc       	rjmp	.-1678   	; 0x965a <main+0xd0>
    9ce8:	ec 5c       	subi	r30, 0xCC	; 204
    9cea:	ff 4f       	sbci	r31, 0xFF	; 255
    9cec:	ee 0f       	add	r30, r30
    9cee:	ff 1f       	adc	r31, r31
    9cf0:	05 90       	lpm	r0, Z+
    9cf2:	f4 91       	lpm	r31, Z+
    9cf4:	e0 2d       	mov	r30, r0
    9cf6:	09 94       	ijmp

			case 'i' :	/* fi <log drv#> - Initialize logical drive */
				if (!xatoi(&ptr, &p1)) break;
    9cf8:	ce 01       	movw	r24, r28
    9cfa:	02 96       	adiw	r24, 0x02	; 2
    9cfc:	be 01       	movw	r22, r28
    9cfe:	62 5f       	subi	r22, 0xF2	; 242
    9d00:	7f 4f       	sbci	r23, 0xFF	; 255
    9d02:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    9d06:	88 23       	and	r24, r24
    9d08:	09 f4       	brne	.+2      	; 0x9d0c <main+0x782>
    9d0a:	a7 cc       	rjmp	.-1714   	; 0x965a <main+0xd0>
				put_rc(f_mount((BYTE)p1, &Fatfs[p1]));
    9d0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    9d0e:	9f 85       	ldd	r25, Y+15	; 0x0f
    9d10:	a8 89       	ldd	r26, Y+16	; 0x10
    9d12:	b9 89       	ldd	r27, Y+17	; 0x11
    9d14:	22 e3       	ldi	r18, 0x32	; 50
    9d16:	32 e0       	ldi	r19, 0x02	; 2
    9d18:	82 9f       	mul	r24, r18
    9d1a:	b0 01       	movw	r22, r0
    9d1c:	83 9f       	mul	r24, r19
    9d1e:	70 0d       	add	r23, r0
    9d20:	92 9f       	mul	r25, r18
    9d22:	70 0d       	add	r23, r0
    9d24:	11 24       	eor	r1, r1
    9d26:	66 5e       	subi	r22, 0xE6	; 230
    9d28:	7c 4f       	sbci	r23, 0xFC	; 252
    9d2a:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <f_mount>
    9d2e:	da c6       	rjmp	.+3508   	; 0xaae4 <main+0x155a>
				break;

			case 's' :	/* fs [<path>] - Show logical drive status */
				while (*ptr == ' ') ptr++;
    9d30:	31 96       	adiw	r30, 0x01	; 1
    9d32:	fb 83       	std	Y+3, r31	; 0x03
    9d34:	ea 83       	std	Y+2, r30	; 0x02
    9d36:	ea 81       	ldd	r30, Y+2	; 0x02
    9d38:	fb 81       	ldd	r31, Y+3	; 0x03
    9d3a:	80 81       	ld	r24, Z
    9d3c:	80 32       	cpi	r24, 0x20	; 32
    9d3e:	c1 f3       	breq	.-16     	; 0x9d30 <main+0x7a6>
				res = f_getfree(ptr, (DWORD*)&p2, &fs);
    9d40:	cf 01       	movw	r24, r30
    9d42:	be 01       	movw	r22, r28
    9d44:	6e 5e       	subi	r22, 0xEE	; 238
    9d46:	7f 4f       	sbci	r23, 0xFF	; 255
    9d48:	ae 01       	movw	r20, r28
    9d4a:	44 5f       	subi	r20, 0xF4	; 244
    9d4c:	5f 4f       	sbci	r21, 0xFF	; 255
    9d4e:	0e 94 93 38 	call	0x7126	; 0x7126 <f_getfree>
				if (res) { put_rc(res); break; }
    9d52:	88 23       	and	r24, r24
    9d54:	09 f0       	breq	.+2      	; 0x9d58 <main+0x7ce>
    9d56:	c6 c6       	rjmp	.+3468   	; 0xaae4 <main+0x155a>
				xprintf(PSTR("FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
    9d58:	4c 85       	ldd	r20, Y+12	; 0x0c
    9d5a:	5d 85       	ldd	r21, Y+13	; 0x0d
    9d5c:	ed b7       	in	r30, 0x3d	; 61
    9d5e:	fe b7       	in	r31, 0x3e	; 62
    9d60:	b0 97       	sbiw	r30, 0x20	; 32
    9d62:	0f b6       	in	r0, 0x3f	; 63
    9d64:	f8 94       	cli
    9d66:	fe bf       	out	0x3e, r31	; 62
    9d68:	0f be       	out	0x3f, r0	; 63
    9d6a:	ed bf       	out	0x3d, r30	; 61
    9d6c:	2d b7       	in	r18, 0x3d	; 61
    9d6e:	3e b7       	in	r19, 0x3e	; 62
    9d70:	2f 5f       	subi	r18, 0xFF	; 255
    9d72:	3f 4f       	sbci	r19, 0xFF	; 255
    9d74:	7b e3       	ldi	r23, 0x3B	; 59
    9d76:	a7 2e       	mov	r10, r23
    9d78:	72 e0       	ldi	r23, 0x02	; 2
    9d7a:	b7 2e       	mov	r11, r23
    9d7c:	b2 82       	std	Z+2, r11	; 0x02
    9d7e:	a1 82       	std	Z+1, r10	; 0x01
    9d80:	da 01       	movw	r26, r20
    9d82:	ec 91       	ld	r30, X
    9d84:	f0 e0       	ldi	r31, 0x00	; 0
    9d86:	e3 70       	andi	r30, 0x03	; 3
    9d88:	f0 70       	andi	r31, 0x00	; 0
    9d8a:	ef 57       	subi	r30, 0x7F	; 127
    9d8c:	fe 4f       	sbci	r31, 0xFE	; 254
    9d8e:	80 81       	ld	r24, Z
    9d90:	f9 01       	movw	r30, r18
    9d92:	82 83       	std	Z+2, r24	; 0x02
    9d94:	13 82       	std	Z+3, r1	; 0x03
    9d96:	12 96       	adiw	r26, 0x02	; 2
    9d98:	8c 91       	ld	r24, X
    9d9a:	90 e0       	ldi	r25, 0x00	; 0
    9d9c:	a0 e0       	ldi	r26, 0x00	; 0
    9d9e:	b0 e0       	ldi	r27, 0x00	; 0
    9da0:	69 e0       	ldi	r22, 0x09	; 9
    9da2:	88 0f       	add	r24, r24
    9da4:	99 1f       	adc	r25, r25
    9da6:	aa 1f       	adc	r26, r26
    9da8:	bb 1f       	adc	r27, r27
    9daa:	6a 95       	dec	r22
    9dac:	d1 f7       	brne	.-12     	; 0x9da2 <main+0x818>
    9dae:	84 83       	std	Z+4, r24	; 0x04
    9db0:	95 83       	std	Z+5, r25	; 0x05
    9db2:	a6 83       	std	Z+6, r26	; 0x06
    9db4:	b7 83       	std	Z+7, r27	; 0x07
    9db6:	da 01       	movw	r26, r20
    9db8:	13 96       	adiw	r26, 0x03	; 3
    9dba:	8c 91       	ld	r24, X
    9dbc:	13 97       	sbiw	r26, 0x03	; 3
    9dbe:	80 87       	std	Z+8, r24	; 0x08
    9dc0:	11 86       	std	Z+9, r1	; 0x09
    9dc2:	18 96       	adiw	r26, 0x08	; 8
    9dc4:	8d 91       	ld	r24, X+
    9dc6:	9c 91       	ld	r25, X
    9dc8:	19 97       	sbiw	r26, 0x09	; 9
    9dca:	93 87       	std	Z+11, r25	; 0x0b
    9dcc:	82 87       	std	Z+10, r24	; 0x0a
    9dce:	5e 96       	adiw	r26, 0x1e	; 30
    9dd0:	8d 91       	ld	r24, X+
    9dd2:	9d 91       	ld	r25, X+
    9dd4:	0d 90       	ld	r0, X+
    9dd6:	bc 91       	ld	r27, X
    9dd8:	a0 2d       	mov	r26, r0
    9dda:	84 87       	std	Z+12, r24	; 0x0c
    9ddc:	95 87       	std	Z+13, r25	; 0x0d
    9dde:	a6 87       	std	Z+14, r26	; 0x0e
    9de0:	b7 87       	std	Z+15, r27	; 0x0f
    9de2:	fa 01       	movw	r30, r20
    9de4:	82 8d       	ldd	r24, Z+26	; 0x1a
    9de6:	93 8d       	ldd	r25, Z+27	; 0x1b
    9de8:	a4 8d       	ldd	r26, Z+28	; 0x1c
    9dea:	b5 8d       	ldd	r27, Z+29	; 0x1d
    9dec:	02 97       	sbiw	r24, 0x02	; 2
    9dee:	a1 09       	sbc	r26, r1
    9df0:	b1 09       	sbc	r27, r1
    9df2:	f9 01       	movw	r30, r18
    9df4:	80 8b       	std	Z+16, r24	; 0x10
    9df6:	91 8b       	std	Z+17, r25	; 0x11
    9df8:	a2 8b       	std	Z+18, r26	; 0x12
    9dfa:	b3 8b       	std	Z+19, r27	; 0x13
    9dfc:	fa 01       	movw	r30, r20
    9dfe:	82 a1       	ldd	r24, Z+34	; 0x22
    9e00:	93 a1       	ldd	r25, Z+35	; 0x23
    9e02:	a4 a1       	ldd	r26, Z+36	; 0x24
    9e04:	b5 a1       	ldd	r27, Z+37	; 0x25
    9e06:	f9 01       	movw	r30, r18
    9e08:	84 8b       	std	Z+20, r24	; 0x14
    9e0a:	95 8b       	std	Z+21, r25	; 0x15
    9e0c:	a6 8b       	std	Z+22, r26	; 0x16
    9e0e:	b7 8b       	std	Z+23, r27	; 0x17
    9e10:	fa 01       	movw	r30, r20
    9e12:	86 a1       	ldd	r24, Z+38	; 0x26
    9e14:	97 a1       	ldd	r25, Z+39	; 0x27
    9e16:	a0 a5       	ldd	r26, Z+40	; 0x28
    9e18:	b1 a5       	ldd	r27, Z+41	; 0x29
    9e1a:	f9 01       	movw	r30, r18
    9e1c:	80 8f       	std	Z+24, r24	; 0x18
    9e1e:	91 8f       	std	Z+25, r25	; 0x19
    9e20:	a2 8f       	std	Z+26, r26	; 0x1a
    9e22:	b3 8f       	std	Z+27, r27	; 0x1b
    9e24:	fa 01       	movw	r30, r20
    9e26:	82 a5       	ldd	r24, Z+42	; 0x2a
    9e28:	93 a5       	ldd	r25, Z+43	; 0x2b
    9e2a:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9e2c:	b5 a5       	ldd	r27, Z+45	; 0x2d
    9e2e:	f9 01       	movw	r30, r18
    9e30:	84 8f       	std	Z+28, r24	; 0x1c
    9e32:	95 8f       	std	Z+29, r25	; 0x1d
    9e34:	a6 8f       	std	Z+30, r26	; 0x1e
    9e36:	b7 8f       	std	Z+31, r27	; 0x1f
    9e38:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
							 "FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n..."),
						ft[fs->fs_type & 3], (DWORD)fs->csize * 512, fs->n_fats,
						fs->n_rootdir, fs->fsize, fs->n_fatent - 2,
						fs->fatbase, fs->dirbase, fs->database
				);
				acc_size = acc_files = acc_dirs = 0;
    9e3c:	10 92 99 07 	sts	0x0799, r1
    9e40:	10 92 98 07 	sts	0x0798, r1
    9e44:	10 92 9b 07 	sts	0x079B, r1
    9e48:	10 92 9a 07 	sts	0x079A, r1
    9e4c:	10 92 1f 0a 	sts	0x0A1F, r1
    9e50:	10 92 20 0a 	sts	0x0A20, r1
    9e54:	10 92 21 0a 	sts	0x0A21, r1
    9e58:	10 92 22 0a 	sts	0x0A22, r1
				res = scan_files(ptr);
    9e5c:	8d b7       	in	r24, 0x3d	; 61
    9e5e:	9e b7       	in	r25, 0x3e	; 62
    9e60:	80 96       	adiw	r24, 0x20	; 32
    9e62:	0f b6       	in	r0, 0x3f	; 63
    9e64:	f8 94       	cli
    9e66:	9e bf       	out	0x3e, r25	; 62
    9e68:	0f be       	out	0x3f, r0	; 63
    9e6a:	8d bf       	out	0x3d, r24	; 61
    9e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    9e6e:	9b 81       	ldd	r25, Y+3	; 0x03
    9e70:	0e 94 f6 49 	call	0x93ec	; 0x93ec <scan_files>
				if (res) { put_rc(res); break; }
    9e74:	88 23       	and	r24, r24
    9e76:	09 f0       	breq	.+2      	; 0x9e7a <main+0x8f0>
    9e78:	35 c6       	rjmp	.+3178   	; 0xaae4 <main+0x155a>
				xprintf(PSTR("\r%u files, %lu bytes.\n%u folders.\n"
    9e7a:	ec 85       	ldd	r30, Y+12	; 0x0c
    9e7c:	fd 85       	ldd	r31, Y+13	; 0x0d
    9e7e:	e2 80       	ldd	r14, Z+2	; 0x02
    9e80:	e6 94       	lsr	r14
    9e82:	ad b7       	in	r26, 0x3d	; 61
    9e84:	be b7       	in	r27, 0x3e	; 62
    9e86:	52 97       	sbiw	r26, 0x12	; 18
    9e88:	0f b6       	in	r0, 0x3f	; 63
    9e8a:	f8 94       	cli
    9e8c:	be bf       	out	0x3e, r27	; 62
    9e8e:	0f be       	out	0x3f, r0	; 63
    9e90:	ad bf       	out	0x3d, r26	; 61
    9e92:	cd b6       	in	r12, 0x3d	; 61
    9e94:	de b6       	in	r13, 0x3e	; 62
    9e96:	08 94       	sec
    9e98:	c1 1c       	adc	r12, r1
    9e9a:	d1 1c       	adc	r13, r1
    9e9c:	5d ee       	ldi	r21, 0xED	; 237
    9e9e:	a5 2e       	mov	r10, r21
    9ea0:	51 e0       	ldi	r21, 0x01	; 1
    9ea2:	b5 2e       	mov	r11, r21
    9ea4:	12 96       	adiw	r26, 0x02	; 2
    9ea6:	bc 92       	st	X, r11
    9ea8:	ae 92       	st	-X, r10
    9eaa:	11 97       	sbiw	r26, 0x01	; 1
    9eac:	80 91 9a 07 	lds	r24, 0x079A
    9eb0:	90 91 9b 07 	lds	r25, 0x079B
    9eb4:	d6 01       	movw	r26, r12
    9eb6:	13 96       	adiw	r26, 0x03	; 3
    9eb8:	9c 93       	st	X, r25
    9eba:	8e 93       	st	-X, r24
    9ebc:	12 97       	sbiw	r26, 0x02	; 2
    9ebe:	20 91 1f 0a 	lds	r18, 0x0A1F
    9ec2:	30 91 20 0a 	lds	r19, 0x0A20
    9ec6:	40 91 21 0a 	lds	r20, 0x0A21
    9eca:	50 91 22 0a 	lds	r21, 0x0A22
    9ece:	14 96       	adiw	r26, 0x04	; 4
    9ed0:	2d 93       	st	X+, r18
    9ed2:	3d 93       	st	X+, r19
    9ed4:	4d 93       	st	X+, r20
    9ed6:	5c 93       	st	X, r21
    9ed8:	17 97       	sbiw	r26, 0x07	; 7
    9eda:	80 91 98 07 	lds	r24, 0x0798
    9ede:	90 91 99 07 	lds	r25, 0x0799
    9ee2:	19 96       	adiw	r26, 0x09	; 9
    9ee4:	9c 93       	st	X, r25
    9ee6:	8e 93       	st	-X, r24
    9ee8:	18 97       	sbiw	r26, 0x08	; 8
    9eea:	ff 24       	eor	r15, r15
    9eec:	00 e0       	ldi	r16, 0x00	; 0
    9eee:	10 e0       	ldi	r17, 0x00	; 0
    9ef0:	22 8d       	ldd	r18, Z+26	; 0x1a
    9ef2:	33 8d       	ldd	r19, Z+27	; 0x1b
    9ef4:	44 8d       	ldd	r20, Z+28	; 0x1c
    9ef6:	55 8d       	ldd	r21, Z+29	; 0x1d
    9ef8:	22 50       	subi	r18, 0x02	; 2
    9efa:	30 40       	sbci	r19, 0x00	; 0
    9efc:	40 40       	sbci	r20, 0x00	; 0
    9efe:	50 40       	sbci	r21, 0x00	; 0
    9f00:	c8 01       	movw	r24, r16
    9f02:	b7 01       	movw	r22, r14
    9f04:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__mulsi3>
    9f08:	f6 01       	movw	r30, r12
    9f0a:	62 87       	std	Z+10, r22	; 0x0a
    9f0c:	73 87       	std	Z+11, r23	; 0x0b
    9f0e:	84 87       	std	Z+12, r24	; 0x0c
    9f10:	95 87       	std	Z+13, r25	; 0x0d
    9f12:	2a 89       	ldd	r18, Y+18	; 0x12
    9f14:	3b 89       	ldd	r19, Y+19	; 0x13
    9f16:	4c 89       	ldd	r20, Y+20	; 0x14
    9f18:	5d 89       	ldd	r21, Y+21	; 0x15
    9f1a:	c8 01       	movw	r24, r16
    9f1c:	b7 01       	movw	r22, r14
    9f1e:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__mulsi3>
    9f22:	d6 01       	movw	r26, r12
    9f24:	1e 96       	adiw	r26, 0x0e	; 14
    9f26:	6d 93       	st	X+, r22
    9f28:	7d 93       	st	X+, r23
    9f2a:	8d 93       	st	X+, r24
    9f2c:	9c 93       	st	X, r25
    9f2e:	51 97       	sbiw	r26, 0x11	; 17
    9f30:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
    9f34:	ed b7       	in	r30, 0x3d	; 61
    9f36:	fe b7       	in	r31, 0x3e	; 62
    9f38:	72 96       	adiw	r30, 0x12	; 18
    9f3a:	3f c6       	rjmp	.+3198   	; 0xabba <main+0x1630>
						(fs->n_fatent - 2) * (fs->csize / 2), p2 * (fs->csize / 2)
				);
				break;

			case 'l' :	/* fl [<path>] - Directory listing */
				while (*ptr == ' ') ptr++;
    9f3c:	31 96       	adiw	r30, 0x01	; 1
    9f3e:	fb 83       	std	Y+3, r31	; 0x03
    9f40:	ea 83       	std	Y+2, r30	; 0x02
    9f42:	ea 81       	ldd	r30, Y+2	; 0x02
    9f44:	fb 81       	ldd	r31, Y+3	; 0x03
    9f46:	80 81       	ld	r24, Z
    9f48:	80 32       	cpi	r24, 0x20	; 32
    9f4a:	c1 f3       	breq	.-16     	; 0x9f3c <main+0x9b2>
				res = f_opendir(&dir, ptr);
    9f4c:	8e 01       	movw	r16, r28
    9f4e:	0e 5d       	subi	r16, 0xDE	; 222
    9f50:	1f 4f       	sbci	r17, 0xFF	; 255
    9f52:	c8 01       	movw	r24, r16
    9f54:	bf 01       	movw	r22, r30
    9f56:	0e 94 c2 42 	call	0x8584	; 0x8584 <f_opendir>
				if (res) { put_rc(res); break; }
    9f5a:	88 23       	and	r24, r24
    9f5c:	09 f0       	breq	.+2      	; 0x9f60 <main+0x9d6>
    9f5e:	c2 c5       	rjmp	.+2948   	; 0xaae4 <main+0x155a>
				p1 = s1 = s2 = 0;
    9f60:	19 86       	std	Y+9, r1	; 0x09
    9f62:	18 86       	std	Y+8, r1	; 0x08
    9f64:	1f 82       	std	Y+7, r1	; 0x07
    9f66:	1e 82       	std	Y+6, r1	; 0x06
    9f68:	1e 86       	std	Y+14, r1	; 0x0e
    9f6a:	1f 86       	std	Y+15, r1	; 0x0f
    9f6c:	18 8a       	std	Y+16, r1	; 0x10
    9f6e:	19 8a       	std	Y+17, r1	; 0x11
				for(;;) {
					res = f_readdir(&dir, &Finfo);
    9f70:	68 01       	movw	r12, r16
    9f72:	c6 01       	movw	r24, r12
    9f74:	6e e7       	ldi	r22, 0x7E	; 126
    9f76:	77 e0       	ldi	r23, 0x07	; 7
    9f78:	0e 94 0d 3c 	call	0x781a	; 0x781a <f_readdir>
					if ((res != FR_OK) || !Finfo.fname[0]) break;
    9f7c:	88 23       	and	r24, r24
    9f7e:	09 f0       	breq	.+2      	; 0x9f82 <main+0x9f8>
    9f80:	f8 c0       	rjmp	.+496    	; 0xa172 <main+0xbe8>
    9f82:	80 91 87 07 	lds	r24, 0x0787
    9f86:	88 23       	and	r24, r24
    9f88:	09 f4       	brne	.+2      	; 0x9f8c <main+0xa02>
    9f8a:	f3 c0       	rjmp	.+486    	; 0xa172 <main+0xbe8>
					if (Finfo.fattrib & AM_DIR) {
    9f8c:	80 91 86 07 	lds	r24, 0x0786
    9f90:	84 ff       	sbrs	r24, 4
    9f92:	06 c0       	rjmp	.+12     	; 0x9fa0 <main+0xa16>
						s2++;
    9f94:	88 85       	ldd	r24, Y+8	; 0x08
    9f96:	99 85       	ldd	r25, Y+9	; 0x09
    9f98:	01 96       	adiw	r24, 0x01	; 1
    9f9a:	99 87       	std	Y+9, r25	; 0x09
    9f9c:	88 87       	std	Y+8, r24	; 0x08
    9f9e:	19 c0       	rjmp	.+50     	; 0x9fd2 <main+0xa48>
					} else {
						s1++; p1 += Finfo.fsize;
    9fa0:	8e 81       	ldd	r24, Y+6	; 0x06
    9fa2:	9f 81       	ldd	r25, Y+7	; 0x07
    9fa4:	01 96       	adiw	r24, 0x01	; 1
    9fa6:	9f 83       	std	Y+7, r25	; 0x07
    9fa8:	8e 83       	std	Y+6, r24	; 0x06
    9faa:	8e 85       	ldd	r24, Y+14	; 0x0e
    9fac:	9f 85       	ldd	r25, Y+15	; 0x0f
    9fae:	a8 89       	ldd	r26, Y+16	; 0x10
    9fb0:	b9 89       	ldd	r27, Y+17	; 0x11
    9fb2:	20 91 7e 07 	lds	r18, 0x077E
    9fb6:	30 91 7f 07 	lds	r19, 0x077F
    9fba:	40 91 80 07 	lds	r20, 0x0780
    9fbe:	50 91 81 07 	lds	r21, 0x0781
    9fc2:	82 0f       	add	r24, r18
    9fc4:	93 1f       	adc	r25, r19
    9fc6:	a4 1f       	adc	r26, r20
    9fc8:	b5 1f       	adc	r27, r21
    9fca:	8e 87       	std	Y+14, r24	; 0x0e
    9fcc:	9f 87       	std	Y+15, r25	; 0x0f
    9fce:	a8 8b       	std	Y+16, r26	; 0x10
    9fd0:	b9 8b       	std	Y+17, r27	; 0x11
					}
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s"), 
    9fd2:	80 91 86 07 	lds	r24, 0x0786
    9fd6:	84 fd       	sbrc	r24, 4
    9fd8:	04 c0       	rjmp	.+8      	; 0x9fe2 <main+0xa58>
    9fda:	4d e2       	ldi	r20, 0x2D	; 45
    9fdc:	e4 2e       	mov	r14, r20
    9fde:	f1 2c       	mov	r15, r1
    9fe0:	03 c0       	rjmp	.+6      	; 0x9fe8 <main+0xa5e>
    9fe2:	34 e4       	ldi	r19, 0x44	; 68
    9fe4:	e3 2e       	mov	r14, r19
    9fe6:	f1 2c       	mov	r15, r1
    9fe8:	80 fd       	sbrc	r24, 0
    9fea:	03 c0       	rjmp	.+6      	; 0x9ff2 <main+0xa68>
    9fec:	0d e2       	ldi	r16, 0x2D	; 45
    9fee:	10 e0       	ldi	r17, 0x00	; 0
    9ff0:	02 c0       	rjmp	.+4      	; 0x9ff6 <main+0xa6c>
    9ff2:	02 e5       	ldi	r16, 0x52	; 82
    9ff4:	10 e0       	ldi	r17, 0x00	; 0
    9ff6:	81 fd       	sbrc	r24, 1
    9ff8:	04 c0       	rjmp	.+8      	; 0xa002 <main+0xa78>
    9ffa:	2d e2       	ldi	r18, 0x2D	; 45
    9ffc:	82 2e       	mov	r8, r18
    9ffe:	91 2c       	mov	r9, r1
    a000:	03 c0       	rjmp	.+6      	; 0xa008 <main+0xa7e>
    a002:	98 e4       	ldi	r25, 0x48	; 72
    a004:	89 2e       	mov	r8, r25
    a006:	91 2c       	mov	r9, r1
    a008:	82 fd       	sbrc	r24, 2
    a00a:	03 c0       	rjmp	.+6      	; 0xa012 <main+0xa88>
    a00c:	6d e2       	ldi	r22, 0x2D	; 45
    a00e:	70 e0       	ldi	r23, 0x00	; 0
    a010:	02 c0       	rjmp	.+4      	; 0xa016 <main+0xa8c>
    a012:	63 e5       	ldi	r22, 0x53	; 83
    a014:	70 e0       	ldi	r23, 0x00	; 0
    a016:	85 fd       	sbrc	r24, 5
    a018:	03 c0       	rjmp	.+6      	; 0xa020 <main+0xa96>
    a01a:	8d e2       	ldi	r24, 0x2D	; 45
    a01c:	90 e0       	ldi	r25, 0x00	; 0
    a01e:	02 c0       	rjmp	.+4      	; 0xa024 <main+0xa9a>
    a020:	81 e4       	ldi	r24, 0x41	; 65
    a022:	90 e0       	ldi	r25, 0x00	; 0
    a024:	20 91 82 07 	lds	r18, 0x0782
    a028:	30 91 83 07 	lds	r19, 0x0783
    a02c:	40 91 84 07 	lds	r20, 0x0784
    a030:	50 91 85 07 	lds	r21, 0x0785
    a034:	ad b7       	in	r26, 0x3d	; 61
    a036:	be b7       	in	r27, 0x3e	; 62
    a038:	5c 97       	sbiw	r26, 0x1c	; 28
    a03a:	0f b6       	in	r0, 0x3f	; 63
    a03c:	f8 94       	cli
    a03e:	be bf       	out	0x3e, r27	; 62
    a040:	0f be       	out	0x3f, r0	; 63
    a042:	ad bf       	out	0x3d, r26	; 61
    a044:	ed b7       	in	r30, 0x3d	; 61
    a046:	fe b7       	in	r31, 0x3e	; 62
    a048:	31 96       	adiw	r30, 0x01	; 1
    a04a:	0f 2e       	mov	r0, r31
    a04c:	f2 ec       	ldi	r31, 0xC2	; 194
    a04e:	af 2e       	mov	r10, r31
    a050:	f1 e0       	ldi	r31, 0x01	; 1
    a052:	bf 2e       	mov	r11, r31
    a054:	f0 2d       	mov	r31, r0
    a056:	12 96       	adiw	r26, 0x02	; 2
    a058:	bc 92       	st	X, r11
    a05a:	ae 92       	st	-X, r10
    a05c:	11 97       	sbiw	r26, 0x01	; 1
    a05e:	f3 82       	std	Z+3, r15	; 0x03
    a060:	e2 82       	std	Z+2, r14	; 0x02
    a062:	15 83       	std	Z+5, r17	; 0x05
    a064:	04 83       	std	Z+4, r16	; 0x04
    a066:	97 82       	std	Z+7, r9	; 0x07
    a068:	86 82       	std	Z+6, r8	; 0x06
    a06a:	71 87       	std	Z+9, r23	; 0x09
    a06c:	60 87       	std	Z+8, r22	; 0x08
    a06e:	93 87       	std	Z+11, r25	; 0x0b
    a070:	82 87       	std	Z+10, r24	; 0x0a
    a072:	c9 01       	movw	r24, r18
    a074:	89 2f       	mov	r24, r25
    a076:	99 27       	eor	r25, r25
    a078:	86 95       	lsr	r24
    a07a:	84 54       	subi	r24, 0x44	; 68
    a07c:	98 4f       	sbci	r25, 0xF8	; 248
    a07e:	95 87       	std	Z+13, r25	; 0x0d
    a080:	84 87       	std	Z+12, r24	; 0x0c
    a082:	c9 01       	movw	r24, r18
    a084:	a5 e0       	ldi	r26, 0x05	; 5
    a086:	96 95       	lsr	r25
    a088:	87 95       	ror	r24
    a08a:	aa 95       	dec	r26
    a08c:	e1 f7       	brne	.-8      	; 0xa086 <main+0xafc>
    a08e:	8f 70       	andi	r24, 0x0F	; 15
    a090:	90 70       	andi	r25, 0x00	; 0
    a092:	97 87       	std	Z+15, r25	; 0x0f
    a094:	86 87       	std	Z+14, r24	; 0x0e
    a096:	2f 71       	andi	r18, 0x1F	; 31
    a098:	30 70       	andi	r19, 0x00	; 0
    a09a:	31 8b       	std	Z+17, r19	; 0x11
    a09c:	20 8b       	std	Z+16, r18	; 0x10
    a09e:	85 2f       	mov	r24, r21
    a0a0:	86 95       	lsr	r24
    a0a2:	86 95       	lsr	r24
    a0a4:	86 95       	lsr	r24
    a0a6:	82 8b       	std	Z+18, r24	; 0x12
    a0a8:	13 8a       	std	Z+19, r1	; 0x13
    a0aa:	75 e0       	ldi	r23, 0x05	; 5
    a0ac:	56 95       	lsr	r21
    a0ae:	47 95       	ror	r20
    a0b0:	7a 95       	dec	r23
    a0b2:	e1 f7       	brne	.-8      	; 0xa0ac <main+0xb22>
    a0b4:	4f 73       	andi	r20, 0x3F	; 63
    a0b6:	50 70       	andi	r21, 0x00	; 0
    a0b8:	55 8b       	std	Z+21, r21	; 0x15
    a0ba:	44 8b       	std	Z+20, r20	; 0x14
    a0bc:	80 91 7e 07 	lds	r24, 0x077E
    a0c0:	90 91 7f 07 	lds	r25, 0x077F
    a0c4:	a0 91 80 07 	lds	r26, 0x0780
    a0c8:	b0 91 81 07 	lds	r27, 0x0781
    a0cc:	86 8b       	std	Z+22, r24	; 0x16
    a0ce:	97 8b       	std	Z+23, r25	; 0x17
    a0d0:	a0 8f       	std	Z+24, r26	; 0x18
    a0d2:	b1 8f       	std	Z+25, r27	; 0x19
    a0d4:	87 e8       	ldi	r24, 0x87	; 135
    a0d6:	97 e0       	ldi	r25, 0x07	; 7
    a0d8:	93 8f       	std	Z+27, r25	; 0x1b
    a0da:	82 8f       	std	Z+26, r24	; 0x1a
    a0dc:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
								(Finfo.fattrib & AM_ARC) ? 'A' : '-',
								(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
								(Finfo.ftime >> 11), (Finfo.ftime >> 5) & 63,
								Finfo.fsize, &(Finfo.fname[0]));
#if _USE_LFN
					for (p2 = strlen(Finfo.fname); p2 < 14; p2++)
    a0e0:	a7 e8       	ldi	r26, 0x87	; 135
    a0e2:	b7 e0       	ldi	r27, 0x07	; 7
    a0e4:	0d 90       	ld	r0, X+
    a0e6:	00 20       	and	r0, r0
    a0e8:	e9 f7       	brne	.-6      	; 0xa0e4 <main+0xb5a>
    a0ea:	cd 01       	movw	r24, r26
    a0ec:	88 58       	subi	r24, 0x88	; 136
    a0ee:	97 40       	sbci	r25, 0x07	; 7
    a0f0:	a0 e0       	ldi	r26, 0x00	; 0
    a0f2:	b0 e0       	ldi	r27, 0x00	; 0
    a0f4:	8a 8b       	std	Y+18, r24	; 0x12
    a0f6:	9b 8b       	std	Y+19, r25	; 0x13
    a0f8:	ac 8b       	std	Y+20, r26	; 0x14
    a0fa:	bd 8b       	std	Y+21, r27	; 0x15
    a0fc:	ed b7       	in	r30, 0x3d	; 61
    a0fe:	fe b7       	in	r31, 0x3e	; 62
    a100:	7c 96       	adiw	r30, 0x1c	; 28
    a102:	0f b6       	in	r0, 0x3f	; 63
    a104:	f8 94       	cli
    a106:	fe bf       	out	0x3e, r31	; 62
    a108:	0f be       	out	0x3f, r0	; 63
    a10a:	ed bf       	out	0x3d, r30	; 61
    a10c:	0e c0       	rjmp	.+28     	; 0xa12a <main+0xba0>
						xputc(' ');
    a10e:	80 e2       	ldi	r24, 0x20	; 32
    a110:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <xputc>
								(Finfo.fattrib & AM_ARC) ? 'A' : '-',
								(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
								(Finfo.ftime >> 11), (Finfo.ftime >> 5) & 63,
								Finfo.fsize, &(Finfo.fname[0]));
#if _USE_LFN
					for (p2 = strlen(Finfo.fname); p2 < 14; p2++)
    a114:	8a 89       	ldd	r24, Y+18	; 0x12
    a116:	9b 89       	ldd	r25, Y+19	; 0x13
    a118:	ac 89       	ldd	r26, Y+20	; 0x14
    a11a:	bd 89       	ldd	r27, Y+21	; 0x15
    a11c:	01 96       	adiw	r24, 0x01	; 1
    a11e:	a1 1d       	adc	r26, r1
    a120:	b1 1d       	adc	r27, r1
    a122:	8a 8b       	std	Y+18, r24	; 0x12
    a124:	9b 8b       	std	Y+19, r25	; 0x13
    a126:	ac 8b       	std	Y+20, r26	; 0x14
    a128:	bd 8b       	std	Y+21, r27	; 0x15
    a12a:	8a 89       	ldd	r24, Y+18	; 0x12
    a12c:	9b 89       	ldd	r25, Y+19	; 0x13
    a12e:	ac 89       	ldd	r26, Y+20	; 0x14
    a130:	bd 89       	ldd	r27, Y+21	; 0x15
    a132:	0e 97       	sbiw	r24, 0x0e	; 14
    a134:	a1 05       	cpc	r26, r1
    a136:	b1 05       	cpc	r27, r1
    a138:	54 f3       	brlt	.-44     	; 0xa10e <main+0xb84>
						xputc(' ');
					xprintf(PSTR("%s\n"), Lfname);
    a13a:	00 d0       	rcall	.+0      	; 0xa13c <main+0xbb2>
    a13c:	00 d0       	rcall	.+0      	; 0xa13e <main+0xbb4>
    a13e:	ee eb       	ldi	r30, 0xBE	; 190
    a140:	f1 e0       	ldi	r31, 0x01	; 1
    a142:	ad b7       	in	r26, 0x3d	; 61
    a144:	be b7       	in	r27, 0x3e	; 62
    a146:	12 96       	adiw	r26, 0x02	; 2
    a148:	fc 93       	st	X, r31
    a14a:	ee 93       	st	-X, r30
    a14c:	11 97       	sbiw	r26, 0x01	; 1
    a14e:	ed 96       	adiw	r28, 0x3d	; 61
    a150:	ff ad       	ldd	r31, Y+63	; 0x3f
    a152:	ed 97       	sbiw	r28, 0x3d	; 61
    a154:	13 96       	adiw	r26, 0x03	; 3
    a156:	fc 93       	st	X, r31
    a158:	13 97       	sbiw	r26, 0x03	; 3
    a15a:	ee 96       	adiw	r28, 0x3e	; 62
    a15c:	af ac       	ldd	r10, Y+63	; 0x3f
    a15e:	ee 97       	sbiw	r28, 0x3e	; 62
    a160:	14 96       	adiw	r26, 0x04	; 4
    a162:	ac 92       	st	X, r10
    a164:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
    a168:	0f 90       	pop	r0
    a16a:	0f 90       	pop	r0
    a16c:	0f 90       	pop	r0
    a16e:	0f 90       	pop	r0
    a170:	00 cf       	rjmp	.-512    	; 0x9f72 <main+0x9e8>
#else
					xputc('\n');
#endif
				}
				xprintf(PSTR("%4u File(s),%10lu bytes total\n%4u Dir(s)"), s1, p1, s2);
    a172:	8d b7       	in	r24, 0x3d	; 61
    a174:	9e b7       	in	r25, 0x3e	; 62
    a176:	0a 97       	sbiw	r24, 0x0a	; 10
    a178:	0f b6       	in	r0, 0x3f	; 63
    a17a:	f8 94       	cli
    a17c:	9e bf       	out	0x3e, r25	; 62
    a17e:	0f be       	out	0x3f, r0	; 63
    a180:	8d bf       	out	0x3d, r24	; 61
    a182:	ed b7       	in	r30, 0x3d	; 61
    a184:	fe b7       	in	r31, 0x3e	; 62
    a186:	31 96       	adiw	r30, 0x01	; 1
    a188:	65 e9       	ldi	r22, 0x95	; 149
    a18a:	a6 2e       	mov	r10, r22
    a18c:	61 e0       	ldi	r22, 0x01	; 1
    a18e:	b6 2e       	mov	r11, r22
    a190:	ad b7       	in	r26, 0x3d	; 61
    a192:	be b7       	in	r27, 0x3e	; 62
    a194:	12 96       	adiw	r26, 0x02	; 2
    a196:	bc 92       	st	X, r11
    a198:	ae 92       	st	-X, r10
    a19a:	11 97       	sbiw	r26, 0x01	; 1
    a19c:	8e 81       	ldd	r24, Y+6	; 0x06
    a19e:	9f 81       	ldd	r25, Y+7	; 0x07
    a1a0:	93 83       	std	Z+3, r25	; 0x03
    a1a2:	82 83       	std	Z+2, r24	; 0x02
    a1a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    a1a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    a1a8:	a8 89       	ldd	r26, Y+16	; 0x10
    a1aa:	b9 89       	ldd	r27, Y+17	; 0x11
    a1ac:	84 83       	std	Z+4, r24	; 0x04
    a1ae:	95 83       	std	Z+5, r25	; 0x05
    a1b0:	a6 83       	std	Z+6, r26	; 0x06
    a1b2:	b7 83       	std	Z+7, r27	; 0x07
    a1b4:	88 85       	ldd	r24, Y+8	; 0x08
    a1b6:	99 85       	ldd	r25, Y+9	; 0x09
    a1b8:	91 87       	std	Z+9, r25	; 0x09
    a1ba:	80 87       	std	Z+8, r24	; 0x08
    a1bc:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
				if (f_getfree(ptr, (DWORD*)&p1, &fs) == FR_OK)
    a1c0:	8d b7       	in	r24, 0x3d	; 61
    a1c2:	9e b7       	in	r25, 0x3e	; 62
    a1c4:	0a 96       	adiw	r24, 0x0a	; 10
    a1c6:	0f b6       	in	r0, 0x3f	; 63
    a1c8:	f8 94       	cli
    a1ca:	9e bf       	out	0x3e, r25	; 62
    a1cc:	0f be       	out	0x3f, r0	; 63
    a1ce:	8d bf       	out	0x3d, r24	; 61
    a1d0:	8a 81       	ldd	r24, Y+2	; 0x02
    a1d2:	9b 81       	ldd	r25, Y+3	; 0x03
    a1d4:	be 01       	movw	r22, r28
    a1d6:	62 5f       	subi	r22, 0xF2	; 242
    a1d8:	7f 4f       	sbci	r23, 0xFF	; 255
    a1da:	ae 01       	movw	r20, r28
    a1dc:	44 5f       	subi	r20, 0xF4	; 244
    a1de:	5f 4f       	sbci	r21, 0xFF	; 255
    a1e0:	0e 94 93 38 	call	0x7126	; 0x7126 <f_getfree>
    a1e4:	88 23       	and	r24, r24
    a1e6:	09 f0       	breq	.+2      	; 0xa1ea <main+0xc60>
    a1e8:	38 ca       	rjmp	.-2960   	; 0x965a <main+0xd0>
					xprintf(PSTR(", %10luK bytes free\n"), p1 * fs->csize / 2);
    a1ea:	00 d0       	rcall	.+0      	; 0xa1ec <main+0xc62>
    a1ec:	00 d0       	rcall	.+0      	; 0xa1ee <main+0xc64>
    a1ee:	00 d0       	rcall	.+0      	; 0xa1f0 <main+0xc66>
    a1f0:	80 e8       	ldi	r24, 0x80	; 128
    a1f2:	91 e0       	ldi	r25, 0x01	; 1
    a1f4:	ad b7       	in	r26, 0x3d	; 61
    a1f6:	be b7       	in	r27, 0x3e	; 62
    a1f8:	12 96       	adiw	r26, 0x02	; 2
    a1fa:	9c 93       	st	X, r25
    a1fc:	8e 93       	st	-X, r24
    a1fe:	11 97       	sbiw	r26, 0x01	; 1
    a200:	ec 85       	ldd	r30, Y+12	; 0x0c
    a202:	fd 85       	ldd	r31, Y+13	; 0x0d
    a204:	62 81       	ldd	r22, Z+2	; 0x02
    a206:	70 e0       	ldi	r23, 0x00	; 0
    a208:	80 e0       	ldi	r24, 0x00	; 0
    a20a:	90 e0       	ldi	r25, 0x00	; 0
    a20c:	2e 85       	ldd	r18, Y+14	; 0x0e
    a20e:	3f 85       	ldd	r19, Y+15	; 0x0f
    a210:	48 89       	ldd	r20, Y+16	; 0x10
    a212:	59 89       	ldd	r21, Y+17	; 0x11
    a214:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__mulsi3>
    a218:	22 e0       	ldi	r18, 0x02	; 2
    a21a:	30 e0       	ldi	r19, 0x00	; 0
    a21c:	40 e0       	ldi	r20, 0x00	; 0
    a21e:	50 e0       	ldi	r21, 0x00	; 0
    a220:	0e 94 48 5c 	call	0xb890	; 0xb890 <__divmodsi4>
    a224:	ed b7       	in	r30, 0x3d	; 61
    a226:	fe b7       	in	r31, 0x3e	; 62
    a228:	23 83       	std	Z+3, r18	; 0x03
    a22a:	34 83       	std	Z+4, r19	; 0x04
    a22c:	45 83       	std	Z+5, r20	; 0x05
    a22e:	56 83       	std	Z+6, r21	; 0x06
    a230:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
    a234:	8d b7       	in	r24, 0x3d	; 61
    a236:	9e b7       	in	r25, 0x3e	; 62
    a238:	06 96       	adiw	r24, 0x06	; 6
    a23a:	0f b6       	in	r0, 0x3f	; 63
    a23c:	f8 94       	cli
    a23e:	9e bf       	out	0x3e, r25	; 62
    a240:	0f be       	out	0x3f, r0	; 63
    a242:	8d bf       	out	0x3d, r24	; 61
    a244:	0a ca       	rjmp	.-3052   	; 0x965a <main+0xd0>
				break;

			case 'o' :	/* fo <mode> <name> - Open a file */
				if (!xatoi(&ptr, &p1)) break;
    a246:	ce 01       	movw	r24, r28
    a248:	02 96       	adiw	r24, 0x02	; 2
    a24a:	be 01       	movw	r22, r28
    a24c:	62 5f       	subi	r22, 0xF2	; 242
    a24e:	7f 4f       	sbci	r23, 0xFF	; 255
    a250:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    a254:	88 23       	and	r24, r24
    a256:	09 f4       	brne	.+2      	; 0xa25a <main+0xcd0>
    a258:	00 ca       	rjmp	.-3072   	; 0x965a <main+0xd0>
    a25a:	03 c0       	rjmp	.+6      	; 0xa262 <main+0xcd8>
				while (*ptr == ' ') ptr++;
    a25c:	31 96       	adiw	r30, 0x01	; 1
    a25e:	fb 83       	std	Y+3, r31	; 0x03
    a260:	ea 83       	std	Y+2, r30	; 0x02
    a262:	ea 81       	ldd	r30, Y+2	; 0x02
    a264:	fb 81       	ldd	r31, Y+3	; 0x03
    a266:	80 81       	ld	r24, Z
    a268:	80 32       	cpi	r24, 0x20	; 32
    a26a:	c1 f3       	breq	.-16     	; 0xa25c <main+0xcd2>
				put_rc(f_open(&file1, ptr, (BYTE)p1));
    a26c:	ce 01       	movw	r24, r28
    a26e:	cc 96       	adiw	r24, 0x3c	; 60
    a270:	bf 01       	movw	r22, r30
    a272:	4e 85       	ldd	r20, Y+14	; 0x0e
    a274:	0e 94 d0 47 	call	0x8fa0	; 0x8fa0 <f_open>
    a278:	35 c4       	rjmp	.+2154   	; 0xaae4 <main+0x155a>
				break;

			case 'c' :	/* fc - Close a file */
				put_rc(f_close(&file1));
    a27a:	ce 01       	movw	r24, r28
    a27c:	cc 96       	adiw	r24, 0x3c	; 60
    a27e:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <f_close>
    a282:	30 c4       	rjmp	.+2144   	; 0xaae4 <main+0x155a>
				break;

			case 'e' :	/* fe - Seek file pointer */
				if (!xatoi(&ptr, &p1)) break;
    a284:	ce 01       	movw	r24, r28
    a286:	02 96       	adiw	r24, 0x02	; 2
    a288:	be 01       	movw	r22, r28
    a28a:	62 5f       	subi	r22, 0xF2	; 242
    a28c:	7f 4f       	sbci	r23, 0xFF	; 255
    a28e:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    a292:	88 23       	and	r24, r24
    a294:	09 f4       	brne	.+2      	; 0xa298 <main+0xd0e>
    a296:	e1 c9       	rjmp	.-3134   	; 0x965a <main+0xd0>
				res = f_lseek(&file1, p1);
    a298:	4e 85       	ldd	r20, Y+14	; 0x0e
    a29a:	5f 85       	ldd	r21, Y+15	; 0x0f
    a29c:	68 89       	ldd	r22, Y+16	; 0x10
    a29e:	79 89       	ldd	r23, Y+17	; 0x11
    a2a0:	ce 01       	movw	r24, r28
    a2a2:	cc 96       	adiw	r24, 0x3c	; 60
    a2a4:	0e 94 de 31 	call	0x63bc	; 0x63bc <f_lseek>
    a2a8:	18 2f       	mov	r17, r24
				put_rc(res);
    a2aa:	0e 94 f6 48 	call	0x91ec	; 0x91ec <put_rc>
				if (res == FR_OK)
    a2ae:	11 23       	and	r17, r17
    a2b0:	09 f0       	breq	.+2      	; 0xa2b4 <main+0xd2a>
    a2b2:	d3 c9       	rjmp	.-3162   	; 0x965a <main+0xd0>
					xprintf(PSTR("fptr = %lu(0x%lX)\n"), file1.fptr, file1.fptr);
    a2b4:	fe 01       	movw	r30, r28
    a2b6:	ee 5b       	subi	r30, 0xBE	; 190
    a2b8:	ff 4f       	sbci	r31, 0xFF	; 255
    a2ba:	20 81       	ld	r18, Z
    a2bc:	31 81       	ldd	r19, Z+1	; 0x01
    a2be:	42 81       	ldd	r20, Z+2	; 0x02
    a2c0:	53 81       	ldd	r21, Z+3	; 0x03
    a2c2:	ad b7       	in	r26, 0x3d	; 61
    a2c4:	be b7       	in	r27, 0x3e	; 62
    a2c6:	1a 97       	sbiw	r26, 0x0a	; 10
    a2c8:	0f b6       	in	r0, 0x3f	; 63
    a2ca:	f8 94       	cli
    a2cc:	be bf       	out	0x3e, r27	; 62
    a2ce:	0f be       	out	0x3f, r0	; 63
    a2d0:	ad bf       	out	0x3d, r26	; 61
    a2d2:	ed b7       	in	r30, 0x3d	; 61
    a2d4:	fe b7       	in	r31, 0x3e	; 62
    a2d6:	31 96       	adiw	r30, 0x01	; 1
    a2d8:	8d e6       	ldi	r24, 0x6D	; 109
    a2da:	91 e0       	ldi	r25, 0x01	; 1
    a2dc:	12 96       	adiw	r26, 0x02	; 2
    a2de:	9c 93       	st	X, r25
    a2e0:	8e 93       	st	-X, r24
    a2e2:	11 97       	sbiw	r26, 0x01	; 1
    a2e4:	22 83       	std	Z+2, r18	; 0x02
    a2e6:	33 83       	std	Z+3, r19	; 0x03
    a2e8:	44 83       	std	Z+4, r20	; 0x04
    a2ea:	55 83       	std	Z+5, r21	; 0x05
    a2ec:	9a c0       	rjmp	.+308    	; 0xa422 <main+0xe98>
				break;

			case 'r' :	/* fr <len> - read file */
				if (!xatoi(&ptr, &p1)) break;
    a2ee:	ce 01       	movw	r24, r28
    a2f0:	02 96       	adiw	r24, 0x02	; 2
    a2f2:	be 01       	movw	r22, r28
    a2f4:	62 5f       	subi	r22, 0xF2	; 242
    a2f6:	7f 4f       	sbci	r23, 0xFF	; 255
    a2f8:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    a2fc:	88 23       	and	r24, r24
    a2fe:	09 f4       	brne	.+2      	; 0xa302 <main+0xd78>
    a300:	ac c9       	rjmp	.-3240   	; 0x965a <main+0xd0>
				p2 = 0;
    a302:	1a 8a       	std	Y+18, r1	; 0x12
    a304:	1b 8a       	std	Y+19, r1	; 0x13
    a306:	1c 8a       	std	Y+20, r1	; 0x14
    a308:	1d 8a       	std	Y+21, r1	; 0x15
				Timer = 0;
    a30a:	10 92 9d 07 	sts	0x079D, r1
    a30e:	10 92 9c 07 	sts	0x079C, r1
				while (p1) {
					if (p1 >= sizeof(Buff))	{ cnt = sizeof(Buff); p1 -= sizeof(Buff); }
    a312:	e1 2c       	mov	r14, r1
    a314:	52 e0       	ldi	r21, 0x02	; 2
    a316:	f5 2e       	mov	r15, r21
					else 			{ cnt = (WORD)p1; p1 = 0; }
					res = f_read(&file1, Buff, cnt, &s2);
    a318:	8e 01       	movw	r16, r28
    a31a:	04 5c       	subi	r16, 0xC4	; 196
    a31c:	1f 4f       	sbci	r17, 0xFF	; 255
    a31e:	3e c0       	rjmp	.+124    	; 0xa39c <main+0xe12>
			case 'r' :	/* fr <len> - read file */
				if (!xatoi(&ptr, &p1)) break;
				p2 = 0;
				Timer = 0;
				while (p1) {
					if (p1 >= sizeof(Buff))	{ cnt = sizeof(Buff); p1 -= sizeof(Buff); }
    a320:	80 30       	cpi	r24, 0x00	; 0
    a322:	f2 e0       	ldi	r31, 0x02	; 2
    a324:	9f 07       	cpc	r25, r31
    a326:	f0 e0       	ldi	r31, 0x00	; 0
    a328:	af 07       	cpc	r26, r31
    a32a:	f0 e0       	ldi	r31, 0x00	; 0
    a32c:	bf 07       	cpc	r27, r31
    a32e:	5c f0       	brlt	.+22     	; 0xa346 <main+0xdbc>
    a330:	fb 86       	std	Y+11, r15	; 0x0b
    a332:	ea 86       	std	Y+10, r14	; 0x0a
    a334:	80 50       	subi	r24, 0x00	; 0
    a336:	92 40       	sbci	r25, 0x02	; 2
    a338:	a0 40       	sbci	r26, 0x00	; 0
    a33a:	b0 40       	sbci	r27, 0x00	; 0
    a33c:	8e 87       	std	Y+14, r24	; 0x0e
    a33e:	9f 87       	std	Y+15, r25	; 0x0f
    a340:	a8 8b       	std	Y+16, r26	; 0x10
    a342:	b9 8b       	std	Y+17, r27	; 0x11
    a344:	06 c0       	rjmp	.+12     	; 0xa352 <main+0xdc8>
					else 			{ cnt = (WORD)p1; p1 = 0; }
    a346:	9b 87       	std	Y+11, r25	; 0x0b
    a348:	8a 87       	std	Y+10, r24	; 0x0a
    a34a:	1e 86       	std	Y+14, r1	; 0x0e
    a34c:	1f 86       	std	Y+15, r1	; 0x0f
    a34e:	18 8a       	std	Y+16, r1	; 0x10
    a350:	19 8a       	std	Y+17, r1	; 0x11
					res = f_read(&file1, Buff, cnt, &s2);
    a352:	4a 85       	ldd	r20, Y+10	; 0x0a
    a354:	5b 85       	ldd	r21, Y+11	; 0x0b
    a356:	c8 01       	movw	r24, r16
    a358:	6e e9       	ldi	r22, 0x9E	; 158
    a35a:	77 e0       	ldi	r23, 0x07	; 7
    a35c:	9e 01       	movw	r18, r28
    a35e:	28 5f       	subi	r18, 0xF8	; 248
    a360:	3f 4f       	sbci	r19, 0xFF	; 255
    a362:	0e 94 8d 39 	call	0x731a	; 0x731a <f_read>
					if (res != FR_OK) { put_rc(res); break; }
    a366:	88 23       	and	r24, r24
    a368:	19 f0       	breq	.+6      	; 0xa370 <main+0xde6>
    a36a:	0e 94 f6 48 	call	0x91ec	; 0x91ec <put_rc>
    a36e:	1f c0       	rjmp	.+62     	; 0xa3ae <main+0xe24>
					p2 += s2;
    a370:	68 85       	ldd	r22, Y+8	; 0x08
    a372:	79 85       	ldd	r23, Y+9	; 0x09
    a374:	9b 01       	movw	r18, r22
    a376:	40 e0       	ldi	r20, 0x00	; 0
    a378:	50 e0       	ldi	r21, 0x00	; 0
    a37a:	8a 89       	ldd	r24, Y+18	; 0x12
    a37c:	9b 89       	ldd	r25, Y+19	; 0x13
    a37e:	ac 89       	ldd	r26, Y+20	; 0x14
    a380:	bd 89       	ldd	r27, Y+21	; 0x15
    a382:	82 0f       	add	r24, r18
    a384:	93 1f       	adc	r25, r19
    a386:	a4 1f       	adc	r26, r20
    a388:	b5 1f       	adc	r27, r21
    a38a:	8a 8b       	std	Y+18, r24	; 0x12
    a38c:	9b 8b       	std	Y+19, r25	; 0x13
    a38e:	ac 8b       	std	Y+20, r26	; 0x14
    a390:	bd 8b       	std	Y+21, r27	; 0x15
					if (cnt != s2) break;
    a392:	8a 85       	ldd	r24, Y+10	; 0x0a
    a394:	9b 85       	ldd	r25, Y+11	; 0x0b
    a396:	86 17       	cp	r24, r22
    a398:	97 07       	cpc	r25, r23
    a39a:	49 f4       	brne	.+18     	; 0xa3ae <main+0xe24>

			case 'r' :	/* fr <len> - read file */
				if (!xatoi(&ptr, &p1)) break;
				p2 = 0;
				Timer = 0;
				while (p1) {
    a39c:	8e 85       	ldd	r24, Y+14	; 0x0e
    a39e:	9f 85       	ldd	r25, Y+15	; 0x0f
    a3a0:	a8 89       	ldd	r26, Y+16	; 0x10
    a3a2:	b9 89       	ldd	r27, Y+17	; 0x11
    a3a4:	00 97       	sbiw	r24, 0x00	; 0
    a3a6:	a1 05       	cpc	r26, r1
    a3a8:	b1 05       	cpc	r27, r1
    a3aa:	09 f0       	breq	.+2      	; 0xa3ae <main+0xe24>
    a3ac:	b9 cf       	rjmp	.-142    	; 0xa320 <main+0xd96>
					res = f_read(&file1, Buff, cnt, &s2);
					if (res != FR_OK) { put_rc(res); break; }
					p2 += s2;
					if (cnt != s2) break;
				}
				s2 = Timer;
    a3ae:	00 91 9c 07 	lds	r16, 0x079C
    a3b2:	10 91 9d 07 	lds	r17, 0x079D
    a3b6:	19 87       	std	Y+9, r17	; 0x09
    a3b8:	08 87       	std	Y+8, r16	; 0x08
				xprintf(PSTR("%lu bytes read with %lu bytes/sec.\n"), p2, s2 ? (p2 * 100 / s2) : 0);
    a3ba:	ca 88       	ldd	r12, Y+18	; 0x12
    a3bc:	db 88       	ldd	r13, Y+19	; 0x13
    a3be:	ec 88       	ldd	r14, Y+20	; 0x14
    a3c0:	fd 88       	ldd	r15, Y+21	; 0x15
    a3c2:	01 15       	cp	r16, r1
    a3c4:	11 05       	cpc	r17, r1
    a3c6:	29 f4       	brne	.+10     	; 0xa3d2 <main+0xe48>
    a3c8:	20 e0       	ldi	r18, 0x00	; 0
    a3ca:	30 e0       	ldi	r19, 0x00	; 0
    a3cc:	40 e0       	ldi	r20, 0x00	; 0
    a3ce:	50 e0       	ldi	r21, 0x00	; 0
    a3d0:	11 c0       	rjmp	.+34     	; 0xa3f4 <main+0xe6a>
    a3d2:	c7 01       	movw	r24, r14
    a3d4:	b6 01       	movw	r22, r12
    a3d6:	24 e6       	ldi	r18, 0x64	; 100
    a3d8:	30 e0       	ldi	r19, 0x00	; 0
    a3da:	40 e0       	ldi	r20, 0x00	; 0
    a3dc:	50 e0       	ldi	r21, 0x00	; 0
    a3de:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__mulsi3>
    a3e2:	98 01       	movw	r18, r16
    a3e4:	40 e0       	ldi	r20, 0x00	; 0
    a3e6:	50 e0       	ldi	r21, 0x00	; 0
    a3e8:	0e 94 48 5c 	call	0xb890	; 0xb890 <__divmodsi4>
    a3ec:	c9 01       	movw	r24, r18
    a3ee:	da 01       	movw	r26, r20
    a3f0:	9c 01       	movw	r18, r24
    a3f2:	ad 01       	movw	r20, r26
    a3f4:	8d b7       	in	r24, 0x3d	; 61
    a3f6:	9e b7       	in	r25, 0x3e	; 62
    a3f8:	0a 97       	sbiw	r24, 0x0a	; 10
    a3fa:	0f b6       	in	r0, 0x3f	; 63
    a3fc:	f8 94       	cli
    a3fe:	9e bf       	out	0x3e, r25	; 62
    a400:	0f be       	out	0x3f, r0	; 63
    a402:	8d bf       	out	0x3d, r24	; 61
    a404:	ed b7       	in	r30, 0x3d	; 61
    a406:	fe b7       	in	r31, 0x3e	; 62
    a408:	31 96       	adiw	r30, 0x01	; 1
    a40a:	89 e4       	ldi	r24, 0x49	; 73
    a40c:	91 e0       	ldi	r25, 0x01	; 1
    a40e:	ad b7       	in	r26, 0x3d	; 61
    a410:	be b7       	in	r27, 0x3e	; 62
    a412:	12 96       	adiw	r26, 0x02	; 2
    a414:	9c 93       	st	X, r25
    a416:	8e 93       	st	-X, r24
    a418:	11 97       	sbiw	r26, 0x01	; 1
    a41a:	c2 82       	std	Z+2, r12	; 0x02
    a41c:	d3 82       	std	Z+3, r13	; 0x03
    a41e:	e4 82       	std	Z+4, r14	; 0x04
    a420:	f5 82       	std	Z+5, r15	; 0x05
    a422:	26 83       	std	Z+6, r18	; 0x06
    a424:	37 83       	std	Z+7, r19	; 0x07
    a426:	40 87       	std	Z+8, r20	; 0x08
    a428:	51 87       	std	Z+9, r21	; 0x09
    a42a:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
    a42e:	ed b7       	in	r30, 0x3d	; 61
    a430:	fe b7       	in	r31, 0x3e	; 62
    a432:	3a 96       	adiw	r30, 0x0a	; 10
    a434:	c2 c3       	rjmp	.+1924   	; 0xabba <main+0x1630>
				break;

			case 'd' :	/* fd <len> - read and dump file from current fp */
				if (!xatoi(&ptr, &p1)) break;
    a436:	ce 01       	movw	r24, r28
    a438:	02 96       	adiw	r24, 0x02	; 2
    a43a:	be 01       	movw	r22, r28
    a43c:	62 5f       	subi	r22, 0xF2	; 242
    a43e:	7f 4f       	sbci	r23, 0xFF	; 255
    a440:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    a444:	88 23       	and	r24, r24
    a446:	09 f4       	brne	.+2      	; 0xa44a <main+0xec0>
    a448:	08 c9       	rjmp	.-3568   	; 0x965a <main+0xd0>
				ofs = file1.fptr;
    a44a:	fe 01       	movw	r30, r28
    a44c:	ee 5b       	subi	r30, 0xBE	; 190
    a44e:	ff 4f       	sbci	r31, 0xFF	; 255
    a450:	e0 80       	ld	r14, Z
    a452:	f1 80       	ldd	r15, Z+1	; 0x01
    a454:	02 81       	ldd	r16, Z+2	; 0x02
    a456:	13 81       	ldd	r17, Z+3	; 0x03
				while (p1) {
					if (p1 >= 16)	{ cnt = 16; p1 -= 16; }
    a458:	40 e1       	ldi	r20, 0x10	; 16
    a45a:	84 2e       	mov	r8, r20
    a45c:	91 2c       	mov	r9, r1
					else 			{ cnt = (WORD)p1; p1 = 0; }
					res = f_read(&file1, Buff, cnt, &cnt);
    a45e:	3c e3       	ldi	r19, 0x3C	; 60
    a460:	a3 2e       	mov	r10, r19
    a462:	b1 2c       	mov	r11, r1
    a464:	ac 0e       	add	r10, r28
    a466:	bd 1e       	adc	r11, r29
    a468:	2a e0       	ldi	r18, 0x0A	; 10
    a46a:	c2 2e       	mov	r12, r18
    a46c:	d1 2c       	mov	r13, r1
    a46e:	cc 0e       	add	r12, r28
    a470:	dd 1e       	adc	r13, r29
    a472:	34 c0       	rjmp	.+104    	; 0xa4dc <main+0xf52>

			case 'd' :	/* fd <len> - read and dump file from current fp */
				if (!xatoi(&ptr, &p1)) break;
				ofs = file1.fptr;
				while (p1) {
					if (p1 >= 16)	{ cnt = 16; p1 -= 16; }
    a474:	80 31       	cpi	r24, 0x10	; 16
    a476:	91 05       	cpc	r25, r1
    a478:	a1 05       	cpc	r26, r1
    a47a:	b1 05       	cpc	r27, r1
    a47c:	54 f0       	brlt	.+20     	; 0xa492 <main+0xf08>
    a47e:	9b 86       	std	Y+11, r9	; 0x0b
    a480:	8a 86       	std	Y+10, r8	; 0x0a
    a482:	40 97       	sbiw	r24, 0x10	; 16
    a484:	a1 09       	sbc	r26, r1
    a486:	b1 09       	sbc	r27, r1
    a488:	8e 87       	std	Y+14, r24	; 0x0e
    a48a:	9f 87       	std	Y+15, r25	; 0x0f
    a48c:	a8 8b       	std	Y+16, r26	; 0x10
    a48e:	b9 8b       	std	Y+17, r27	; 0x11
    a490:	06 c0       	rjmp	.+12     	; 0xa49e <main+0xf14>
					else 			{ cnt = (WORD)p1; p1 = 0; }
    a492:	9b 87       	std	Y+11, r25	; 0x0b
    a494:	8a 87       	std	Y+10, r24	; 0x0a
    a496:	1e 86       	std	Y+14, r1	; 0x0e
    a498:	1f 86       	std	Y+15, r1	; 0x0f
    a49a:	18 8a       	std	Y+16, r1	; 0x10
    a49c:	19 8a       	std	Y+17, r1	; 0x11
					res = f_read(&file1, Buff, cnt, &cnt);
    a49e:	4a 85       	ldd	r20, Y+10	; 0x0a
    a4a0:	5b 85       	ldd	r21, Y+11	; 0x0b
    a4a2:	c5 01       	movw	r24, r10
    a4a4:	6e e9       	ldi	r22, 0x9E	; 158
    a4a6:	77 e0       	ldi	r23, 0x07	; 7
    a4a8:	96 01       	movw	r18, r12
    a4aa:	0e 94 8d 39 	call	0x731a	; 0x731a <f_read>
					if (res != FR_OK) { put_rc(res); break; }
    a4ae:	88 23       	and	r24, r24
    a4b0:	09 f0       	breq	.+2      	; 0xa4b4 <main+0xf2a>
    a4b2:	18 c3       	rjmp	.+1584   	; 0xaae4 <main+0x155a>
					if (!cnt) break;
    a4b4:	2a 85       	ldd	r18, Y+10	; 0x0a
    a4b6:	3b 85       	ldd	r19, Y+11	; 0x0b
    a4b8:	21 15       	cp	r18, r1
    a4ba:	31 05       	cpc	r19, r1
    a4bc:	09 f4       	brne	.+2      	; 0xa4c0 <main+0xf36>
    a4be:	cd c8       	rjmp	.-3686   	; 0x965a <main+0xd0>
					put_dump(Buff, ofs, cnt);
    a4c0:	8e e9       	ldi	r24, 0x9E	; 158
    a4c2:	97 e0       	ldi	r25, 0x07	; 7
    a4c4:	b8 01       	movw	r22, r16
    a4c6:	a7 01       	movw	r20, r14
    a4c8:	0e 94 25 49 	call	0x924a	; 0x924a <put_dump>
					ofs += 16;
    a4cc:	80 e1       	ldi	r24, 0x10	; 16
    a4ce:	90 e0       	ldi	r25, 0x00	; 0
    a4d0:	a0 e0       	ldi	r26, 0x00	; 0
    a4d2:	b0 e0       	ldi	r27, 0x00	; 0
    a4d4:	e8 0e       	add	r14, r24
    a4d6:	f9 1e       	adc	r15, r25
    a4d8:	0a 1f       	adc	r16, r26
    a4da:	1b 1f       	adc	r17, r27
				break;

			case 'd' :	/* fd <len> - read and dump file from current fp */
				if (!xatoi(&ptr, &p1)) break;
				ofs = file1.fptr;
				while (p1) {
    a4dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    a4de:	9f 85       	ldd	r25, Y+15	; 0x0f
    a4e0:	a8 89       	ldd	r26, Y+16	; 0x10
    a4e2:	b9 89       	ldd	r27, Y+17	; 0x11
    a4e4:	00 97       	sbiw	r24, 0x00	; 0
    a4e6:	a1 05       	cpc	r26, r1
    a4e8:	b1 05       	cpc	r27, r1
    a4ea:	21 f6       	brne	.-120    	; 0xa474 <main+0xeea>
    a4ec:	b6 c8       	rjmp	.-3732   	; 0x965a <main+0xd0>
					ofs += 16;
				}
				break;

			case 'w' :	/* fw <len> <val> - write file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
    a4ee:	8e 01       	movw	r16, r28
    a4f0:	0e 5f       	subi	r16, 0xFE	; 254
    a4f2:	1f 4f       	sbci	r17, 0xFF	; 255
    a4f4:	c8 01       	movw	r24, r16
    a4f6:	be 01       	movw	r22, r28
    a4f8:	62 5f       	subi	r22, 0xF2	; 242
    a4fa:	7f 4f       	sbci	r23, 0xFF	; 255
    a4fc:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    a500:	88 23       	and	r24, r24
    a502:	09 f4       	brne	.+2      	; 0xa506 <main+0xf7c>
    a504:	aa c8       	rjmp	.-3756   	; 0x965a <main+0xd0>
    a506:	c8 01       	movw	r24, r16
    a508:	be 01       	movw	r22, r28
    a50a:	6e 5e       	subi	r22, 0xEE	; 238
    a50c:	7f 4f       	sbci	r23, 0xFF	; 255
    a50e:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    a512:	88 23       	and	r24, r24
    a514:	09 f4       	brne	.+2      	; 0xa518 <main+0xf8e>
    a516:	a1 c8       	rjmp	.-3774   	; 0x965a <main+0xd0>
				memset(Buff, (BYTE)p2, sizeof(Buff));
    a518:	6a 89       	ldd	r22, Y+18	; 0x12
    a51a:	8e e9       	ldi	r24, 0x9E	; 158
    a51c:	97 e0       	ldi	r25, 0x07	; 7
    a51e:	70 e0       	ldi	r23, 0x00	; 0
    a520:	40 e0       	ldi	r20, 0x00	; 0
    a522:	52 e0       	ldi	r21, 0x02	; 2
    a524:	0e 94 63 5c 	call	0xb8c6	; 0xb8c6 <memset>
				p2 = 0;
    a528:	1a 8a       	std	Y+18, r1	; 0x12
    a52a:	1b 8a       	std	Y+19, r1	; 0x13
    a52c:	1c 8a       	std	Y+20, r1	; 0x14
    a52e:	1d 8a       	std	Y+21, r1	; 0x15
				Timer = 0;
    a530:	10 92 9d 07 	sts	0x079D, r1
    a534:	10 92 9c 07 	sts	0x079C, r1
				while (p1) {
					if (p1 >= sizeof(Buff))	{ cnt = sizeof(Buff); p1 -= sizeof(Buff); }
    a538:	e1 2c       	mov	r14, r1
    a53a:	92 e0       	ldi	r25, 0x02	; 2
    a53c:	f9 2e       	mov	r15, r25
					else 			{ cnt = (WORD)p1; p1 = 0; }
					res = f_write(&file1, Buff, cnt, &s2);
    a53e:	8e 01       	movw	r16, r28
    a540:	04 5c       	subi	r16, 0xC4	; 196
    a542:	1f 4f       	sbci	r17, 0xFF	; 255
    a544:	3e c0       	rjmp	.+124    	; 0xa5c2 <main+0x1038>
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
				memset(Buff, (BYTE)p2, sizeof(Buff));
				p2 = 0;
				Timer = 0;
				while (p1) {
					if (p1 >= sizeof(Buff))	{ cnt = sizeof(Buff); p1 -= sizeof(Buff); }
    a546:	80 30       	cpi	r24, 0x00	; 0
    a548:	e2 e0       	ldi	r30, 0x02	; 2
    a54a:	9e 07       	cpc	r25, r30
    a54c:	e0 e0       	ldi	r30, 0x00	; 0
    a54e:	ae 07       	cpc	r26, r30
    a550:	e0 e0       	ldi	r30, 0x00	; 0
    a552:	be 07       	cpc	r27, r30
    a554:	5c f0       	brlt	.+22     	; 0xa56c <main+0xfe2>
    a556:	fb 86       	std	Y+11, r15	; 0x0b
    a558:	ea 86       	std	Y+10, r14	; 0x0a
    a55a:	80 50       	subi	r24, 0x00	; 0
    a55c:	92 40       	sbci	r25, 0x02	; 2
    a55e:	a0 40       	sbci	r26, 0x00	; 0
    a560:	b0 40       	sbci	r27, 0x00	; 0
    a562:	8e 87       	std	Y+14, r24	; 0x0e
    a564:	9f 87       	std	Y+15, r25	; 0x0f
    a566:	a8 8b       	std	Y+16, r26	; 0x10
    a568:	b9 8b       	std	Y+17, r27	; 0x11
    a56a:	06 c0       	rjmp	.+12     	; 0xa578 <main+0xfee>
					else 			{ cnt = (WORD)p1; p1 = 0; }
    a56c:	9b 87       	std	Y+11, r25	; 0x0b
    a56e:	8a 87       	std	Y+10, r24	; 0x0a
    a570:	1e 86       	std	Y+14, r1	; 0x0e
    a572:	1f 86       	std	Y+15, r1	; 0x0f
    a574:	18 8a       	std	Y+16, r1	; 0x10
    a576:	19 8a       	std	Y+17, r1	; 0x11
					res = f_write(&file1, Buff, cnt, &s2);
    a578:	4a 85       	ldd	r20, Y+10	; 0x0a
    a57a:	5b 85       	ldd	r21, Y+11	; 0x0b
    a57c:	c8 01       	movw	r24, r16
    a57e:	6e e9       	ldi	r22, 0x9E	; 158
    a580:	77 e0       	ldi	r23, 0x07	; 7
    a582:	9e 01       	movw	r18, r28
    a584:	28 5f       	subi	r18, 0xF8	; 248
    a586:	3f 4f       	sbci	r19, 0xFF	; 255
    a588:	0e 94 5d 36 	call	0x6cba	; 0x6cba <f_write>
					if (res != FR_OK) { put_rc(res); break; }
    a58c:	88 23       	and	r24, r24
    a58e:	19 f0       	breq	.+6      	; 0xa596 <main+0x100c>
    a590:	0e 94 f6 48 	call	0x91ec	; 0x91ec <put_rc>
    a594:	1f c0       	rjmp	.+62     	; 0xa5d4 <main+0x104a>
					p2 += s2;
    a596:	68 85       	ldd	r22, Y+8	; 0x08
    a598:	79 85       	ldd	r23, Y+9	; 0x09
    a59a:	9b 01       	movw	r18, r22
    a59c:	40 e0       	ldi	r20, 0x00	; 0
    a59e:	50 e0       	ldi	r21, 0x00	; 0
    a5a0:	8a 89       	ldd	r24, Y+18	; 0x12
    a5a2:	9b 89       	ldd	r25, Y+19	; 0x13
    a5a4:	ac 89       	ldd	r26, Y+20	; 0x14
    a5a6:	bd 89       	ldd	r27, Y+21	; 0x15
    a5a8:	82 0f       	add	r24, r18
    a5aa:	93 1f       	adc	r25, r19
    a5ac:	a4 1f       	adc	r26, r20
    a5ae:	b5 1f       	adc	r27, r21
    a5b0:	8a 8b       	std	Y+18, r24	; 0x12
    a5b2:	9b 8b       	std	Y+19, r25	; 0x13
    a5b4:	ac 8b       	std	Y+20, r26	; 0x14
    a5b6:	bd 8b       	std	Y+21, r27	; 0x15
					if (cnt != s2) break;
    a5b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    a5ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    a5bc:	86 17       	cp	r24, r22
    a5be:	97 07       	cpc	r25, r23
    a5c0:	49 f4       	brne	.+18     	; 0xa5d4 <main+0x104a>
			case 'w' :	/* fw <len> <val> - write file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
				memset(Buff, (BYTE)p2, sizeof(Buff));
				p2 = 0;
				Timer = 0;
				while (p1) {
    a5c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    a5c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    a5c6:	a8 89       	ldd	r26, Y+16	; 0x10
    a5c8:	b9 89       	ldd	r27, Y+17	; 0x11
    a5ca:	00 97       	sbiw	r24, 0x00	; 0
    a5cc:	a1 05       	cpc	r26, r1
    a5ce:	b1 05       	cpc	r27, r1
    a5d0:	09 f0       	breq	.+2      	; 0xa5d4 <main+0x104a>
    a5d2:	b9 cf       	rjmp	.-142    	; 0xa546 <main+0xfbc>
					res = f_write(&file1, Buff, cnt, &s2);
					if (res != FR_OK) { put_rc(res); break; }
					p2 += s2;
					if (cnt != s2) break;
				}
				s2 = Timer;
    a5d4:	00 91 9c 07 	lds	r16, 0x079C
    a5d8:	10 91 9d 07 	lds	r17, 0x079D
    a5dc:	19 87       	std	Y+9, r17	; 0x09
    a5de:	08 87       	std	Y+8, r16	; 0x08
				xprintf(PSTR("%lu bytes written with %lu bytes/sec.\n"), p2, s2 ? (p2 * 100 / s2) : 0);
    a5e0:	ca 88       	ldd	r12, Y+18	; 0x12
    a5e2:	db 88       	ldd	r13, Y+19	; 0x13
    a5e4:	ec 88       	ldd	r14, Y+20	; 0x14
    a5e6:	fd 88       	ldd	r15, Y+21	; 0x15
    a5e8:	01 15       	cp	r16, r1
    a5ea:	11 05       	cpc	r17, r1
    a5ec:	29 f4       	brne	.+10     	; 0xa5f8 <main+0x106e>
    a5ee:	20 e0       	ldi	r18, 0x00	; 0
    a5f0:	30 e0       	ldi	r19, 0x00	; 0
    a5f2:	40 e0       	ldi	r20, 0x00	; 0
    a5f4:	50 e0       	ldi	r21, 0x00	; 0
    a5f6:	11 c0       	rjmp	.+34     	; 0xa61a <main+0x1090>
    a5f8:	c7 01       	movw	r24, r14
    a5fa:	b6 01       	movw	r22, r12
    a5fc:	24 e6       	ldi	r18, 0x64	; 100
    a5fe:	30 e0       	ldi	r19, 0x00	; 0
    a600:	40 e0       	ldi	r20, 0x00	; 0
    a602:	50 e0       	ldi	r21, 0x00	; 0
    a604:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__mulsi3>
    a608:	98 01       	movw	r18, r16
    a60a:	40 e0       	ldi	r20, 0x00	; 0
    a60c:	50 e0       	ldi	r21, 0x00	; 0
    a60e:	0e 94 48 5c 	call	0xb890	; 0xb890 <__divmodsi4>
    a612:	c9 01       	movw	r24, r18
    a614:	da 01       	movw	r26, r20
    a616:	9c 01       	movw	r18, r24
    a618:	ad 01       	movw	r20, r26
    a61a:	8d b7       	in	r24, 0x3d	; 61
    a61c:	9e b7       	in	r25, 0x3e	; 62
    a61e:	0a 97       	sbiw	r24, 0x0a	; 10
    a620:	0f b6       	in	r0, 0x3f	; 63
    a622:	f8 94       	cli
    a624:	9e bf       	out	0x3e, r25	; 62
    a626:	0f be       	out	0x3f, r0	; 63
    a628:	8d bf       	out	0x3d, r24	; 61
    a62a:	ed b7       	in	r30, 0x3d	; 61
    a62c:	fe b7       	in	r31, 0x3e	; 62
    a62e:	31 96       	adiw	r30, 0x01	; 1
    a630:	82 e2       	ldi	r24, 0x22	; 34
    a632:	91 e0       	ldi	r25, 0x01	; 1
    a634:	ec ce       	rjmp	.-552    	; 0xa40e <main+0xe84>
				break;

			case 'v' :	/* fv - Truncate file */
				put_rc(f_truncate(&file1));
    a636:	ce 01       	movw	r24, r28
    a638:	cc 96       	adiw	r24, 0x3c	; 60
    a63a:	0e 94 51 31 	call	0x62a2	; 0x62a2 <f_truncate>
    a63e:	52 c2       	rjmp	.+1188   	; 0xaae4 <main+0x155a>
				break;

			case 'n' :	/* fn <old_name> <new_name> - Change file/dir name */
				while (*ptr == ' ') ptr++;
    a640:	31 96       	adiw	r30, 0x01	; 1
    a642:	fb 83       	std	Y+3, r31	; 0x03
    a644:	ea 83       	std	Y+2, r30	; 0x02
    a646:	ea 81       	ldd	r30, Y+2	; 0x02
    a648:	fb 81       	ldd	r31, Y+3	; 0x03
    a64a:	80 81       	ld	r24, Z
    a64c:	80 32       	cpi	r24, 0x20	; 32
    a64e:	c1 f3       	breq	.-16     	; 0xa640 <main+0x10b6>
				ptr2 = strchr(ptr, ' ');
    a650:	cf 01       	movw	r24, r30
    a652:	60 e2       	ldi	r22, 0x20	; 32
    a654:	70 e0       	ldi	r23, 0x00	; 0
    a656:	0e 94 6a 5c 	call	0xb8d4	; 0xb8d4 <strchr>
				if (!ptr2) break;
    a65a:	00 97       	sbiw	r24, 0x00	; 0
    a65c:	11 f4       	brne	.+4      	; 0xa662 <main+0x10d8>
    a65e:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <main+0xd0>
				*ptr2++ = 0;
    a662:	fc 01       	movw	r30, r24
    a664:	11 92       	st	Z+, r1
    a666:	01 c0       	rjmp	.+2      	; 0xa66a <main+0x10e0>
				while (*ptr2 == ' ') ptr2++;
    a668:	31 96       	adiw	r30, 0x01	; 1
    a66a:	80 81       	ld	r24, Z
    a66c:	80 32       	cpi	r24, 0x20	; 32
    a66e:	e1 f3       	breq	.-8      	; 0xa668 <main+0x10de>
				put_rc(f_rename(ptr, ptr2));
    a670:	8a 81       	ldd	r24, Y+2	; 0x02
    a672:	9b 81       	ldd	r25, Y+3	; 0x03
    a674:	bf 01       	movw	r22, r30
    a676:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <f_rename>
    a67a:	34 c2       	rjmp	.+1128   	; 0xaae4 <main+0x155a>
				break;

			case 'u' :	/* fu <name> - Unlink a file or dir */
				while (*ptr == ' ') ptr++;
    a67c:	31 96       	adiw	r30, 0x01	; 1
    a67e:	fb 83       	std	Y+3, r31	; 0x03
    a680:	ea 83       	std	Y+2, r30	; 0x02
    a682:	ea 81       	ldd	r30, Y+2	; 0x02
    a684:	fb 81       	ldd	r31, Y+3	; 0x03
    a686:	80 81       	ld	r24, Z
    a688:	80 32       	cpi	r24, 0x20	; 32
    a68a:	c1 f3       	breq	.-16     	; 0xa67c <main+0x10f2>
				put_rc(f_unlink(ptr));
    a68c:	cf 01       	movw	r24, r30
    a68e:	0e 94 b9 41 	call	0x8372	; 0x8372 <f_unlink>
    a692:	28 c2       	rjmp	.+1104   	; 0xaae4 <main+0x155a>
				break;

			case 'k' :	/* fk <name> - Create a directory */
				while (*ptr == ' ') ptr++;
    a694:	31 96       	adiw	r30, 0x01	; 1
    a696:	fb 83       	std	Y+3, r31	; 0x03
    a698:	ea 83       	std	Y+2, r30	; 0x02
    a69a:	ea 81       	ldd	r30, Y+2	; 0x02
    a69c:	fb 81       	ldd	r31, Y+3	; 0x03
    a69e:	80 81       	ld	r24, Z
    a6a0:	80 32       	cpi	r24, 0x20	; 32
    a6a2:	c1 f3       	breq	.-16     	; 0xa694 <main+0x110a>
				put_rc(f_mkdir(ptr));
    a6a4:	cf 01       	movw	r24, r30
    a6a6:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <f_mkdir>
    a6aa:	1c c2       	rjmp	.+1080   	; 0xaae4 <main+0x155a>
				break;

			case 'a' :	/* fa <atrr> <mask> <name> - Change file/dir attribute */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
    a6ac:	8e 01       	movw	r16, r28
    a6ae:	0e 5f       	subi	r16, 0xFE	; 254
    a6b0:	1f 4f       	sbci	r17, 0xFF	; 255
    a6b2:	c8 01       	movw	r24, r16
    a6b4:	be 01       	movw	r22, r28
    a6b6:	62 5f       	subi	r22, 0xF2	; 242
    a6b8:	7f 4f       	sbci	r23, 0xFF	; 255
    a6ba:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    a6be:	88 23       	and	r24, r24
    a6c0:	11 f4       	brne	.+4      	; 0xa6c6 <main+0x113c>
    a6c2:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <main+0xd0>
    a6c6:	c8 01       	movw	r24, r16
    a6c8:	be 01       	movw	r22, r28
    a6ca:	6e 5e       	subi	r22, 0xEE	; 238
    a6cc:	7f 4f       	sbci	r23, 0xFF	; 255
    a6ce:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    a6d2:	88 23       	and	r24, r24
    a6d4:	11 f4       	brne	.+4      	; 0xa6da <main+0x1150>
    a6d6:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <main+0xd0>
    a6da:	03 c0       	rjmp	.+6      	; 0xa6e2 <main+0x1158>
				while (*ptr == ' ') ptr++;
    a6dc:	31 96       	adiw	r30, 0x01	; 1
    a6de:	fb 83       	std	Y+3, r31	; 0x03
    a6e0:	ea 83       	std	Y+2, r30	; 0x02
    a6e2:	ea 81       	ldd	r30, Y+2	; 0x02
    a6e4:	fb 81       	ldd	r31, Y+3	; 0x03
    a6e6:	80 81       	ld	r24, Z
    a6e8:	80 32       	cpi	r24, 0x20	; 32
    a6ea:	c1 f3       	breq	.-16     	; 0xa6dc <main+0x1152>
				put_rc(f_chmod(ptr, p1, p2));
    a6ec:	cf 01       	movw	r24, r30
    a6ee:	6e 85       	ldd	r22, Y+14	; 0x0e
    a6f0:	4a 89       	ldd	r20, Y+18	; 0x12
    a6f2:	0e 94 65 41 	call	0x82ca	; 0x82ca <f_chmod>
    a6f6:	f6 c1       	rjmp	.+1004   	; 0xaae4 <main+0x155a>
				break;

			case 't' :	/* ft <year> <month> <day> <hour> <min> <sec> <name> */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2) || !xatoi(&ptr, &p3)) break;
    a6f8:	8e 01       	movw	r16, r28
    a6fa:	0e 5f       	subi	r16, 0xFE	; 254
    a6fc:	1f 4f       	sbci	r17, 0xFF	; 255
    a6fe:	8e e0       	ldi	r24, 0x0E	; 14
    a700:	a8 2e       	mov	r10, r24
    a702:	b1 2c       	mov	r11, r1
    a704:	ac 0e       	add	r10, r28
    a706:	bd 1e       	adc	r11, r29
    a708:	c8 01       	movw	r24, r16
    a70a:	b5 01       	movw	r22, r10
    a70c:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    a710:	88 23       	and	r24, r24
    a712:	11 f4       	brne	.+4      	; 0xa718 <main+0x118e>
    a714:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <main+0xd0>
    a718:	b2 e1       	ldi	r27, 0x12	; 18
    a71a:	cb 2e       	mov	r12, r27
    a71c:	d1 2c       	mov	r13, r1
    a71e:	cc 0e       	add	r12, r28
    a720:	dd 1e       	adc	r13, r29
    a722:	c8 01       	movw	r24, r16
    a724:	b6 01       	movw	r22, r12
    a726:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    a72a:	88 23       	and	r24, r24
    a72c:	11 f4       	brne	.+4      	; 0xa732 <main+0x11a8>
    a72e:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <main+0xd0>
    a732:	a6 e1       	ldi	r26, 0x16	; 22
    a734:	ea 2e       	mov	r14, r26
    a736:	f1 2c       	mov	r15, r1
    a738:	ec 0e       	add	r14, r28
    a73a:	fd 1e       	adc	r15, r29
    a73c:	c8 01       	movw	r24, r16
    a73e:	b7 01       	movw	r22, r14
    a740:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    a744:	88 23       	and	r24, r24
    a746:	11 f4       	brne	.+4      	; 0xa74c <main+0x11c2>
    a748:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <main+0xd0>
				Finfo.fdate = ((p1 - 1980) << 9) | ((p2 & 15) << 5) | (p3 & 31);
    a74c:	8e 85       	ldd	r24, Y+14	; 0x0e
    a74e:	9f 85       	ldd	r25, Y+15	; 0x0f
    a750:	a8 89       	ldd	r26, Y+16	; 0x10
    a752:	b9 89       	ldd	r27, Y+17	; 0x11
    a754:	8c 5b       	subi	r24, 0xBC	; 188
    a756:	97 40       	sbci	r25, 0x07	; 7
    a758:	a0 40       	sbci	r26, 0x00	; 0
    a75a:	b0 40       	sbci	r27, 0x00	; 0
    a75c:	f9 e0       	ldi	r31, 0x09	; 9
    a75e:	88 0f       	add	r24, r24
    a760:	99 1f       	adc	r25, r25
    a762:	aa 1f       	adc	r26, r26
    a764:	bb 1f       	adc	r27, r27
    a766:	fa 95       	dec	r31
    a768:	d1 f7       	brne	.-12     	; 0xa75e <main+0x11d4>
    a76a:	2a 89       	ldd	r18, Y+18	; 0x12
    a76c:	3b 89       	ldd	r19, Y+19	; 0x13
    a76e:	4c 89       	ldd	r20, Y+20	; 0x14
    a770:	5d 89       	ldd	r21, Y+21	; 0x15
    a772:	2f 70       	andi	r18, 0x0F	; 15
    a774:	30 70       	andi	r19, 0x00	; 0
    a776:	40 70       	andi	r20, 0x00	; 0
    a778:	50 70       	andi	r21, 0x00	; 0
    a77a:	e5 e0       	ldi	r30, 0x05	; 5
    a77c:	22 0f       	add	r18, r18
    a77e:	33 1f       	adc	r19, r19
    a780:	44 1f       	adc	r20, r20
    a782:	55 1f       	adc	r21, r21
    a784:	ea 95       	dec	r30
    a786:	d1 f7       	brne	.-12     	; 0xa77c <main+0x11f2>
    a788:	82 2b       	or	r24, r18
    a78a:	93 2b       	or	r25, r19
    a78c:	2e 89       	ldd	r18, Y+22	; 0x16
    a78e:	3f 89       	ldd	r19, Y+23	; 0x17
    a790:	2f 71       	andi	r18, 0x1F	; 31
    a792:	30 70       	andi	r19, 0x00	; 0
    a794:	82 2b       	or	r24, r18
    a796:	93 2b       	or	r25, r19
    a798:	90 93 83 07 	sts	0x0783, r25
    a79c:	80 93 82 07 	sts	0x0782, r24
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2) || !xatoi(&ptr, &p3)) break;
    a7a0:	c8 01       	movw	r24, r16
    a7a2:	b5 01       	movw	r22, r10
    a7a4:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    a7a8:	88 23       	and	r24, r24
    a7aa:	11 f4       	brne	.+4      	; 0xa7b0 <main+0x1226>
    a7ac:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <main+0xd0>
    a7b0:	c8 01       	movw	r24, r16
    a7b2:	b6 01       	movw	r22, r12
    a7b4:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    a7b8:	88 23       	and	r24, r24
    a7ba:	11 f4       	brne	.+4      	; 0xa7c0 <main+0x1236>
    a7bc:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <main+0xd0>
    a7c0:	c8 01       	movw	r24, r16
    a7c2:	b7 01       	movw	r22, r14
    a7c4:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    a7c8:	88 23       	and	r24, r24
    a7ca:	11 f4       	brne	.+4      	; 0xa7d0 <main+0x1246>
    a7cc:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <main+0xd0>
				Finfo.ftime = ((p1 & 31) << 11) | ((p2 & 63) << 5) | ((p3 >> 1) & 31);
    a7d0:	8a 89       	ldd	r24, Y+18	; 0x12
    a7d2:	9b 89       	ldd	r25, Y+19	; 0x13
    a7d4:	ac 89       	ldd	r26, Y+20	; 0x14
    a7d6:	bd 89       	ldd	r27, Y+21	; 0x15
    a7d8:	8f 73       	andi	r24, 0x3F	; 63
    a7da:	90 70       	andi	r25, 0x00	; 0
    a7dc:	a0 70       	andi	r26, 0x00	; 0
    a7de:	b0 70       	andi	r27, 0x00	; 0
    a7e0:	75 e0       	ldi	r23, 0x05	; 5
    a7e2:	88 0f       	add	r24, r24
    a7e4:	99 1f       	adc	r25, r25
    a7e6:	aa 1f       	adc	r26, r26
    a7e8:	bb 1f       	adc	r27, r27
    a7ea:	7a 95       	dec	r23
    a7ec:	d1 f7       	brne	.-12     	; 0xa7e2 <main+0x1258>
    a7ee:	2e 89       	ldd	r18, Y+22	; 0x16
    a7f0:	3f 89       	ldd	r19, Y+23	; 0x17
    a7f2:	48 8d       	ldd	r20, Y+24	; 0x18
    a7f4:	59 8d       	ldd	r21, Y+25	; 0x19
    a7f6:	55 95       	asr	r21
    a7f8:	47 95       	ror	r20
    a7fa:	37 95       	ror	r19
    a7fc:	27 95       	ror	r18
    a7fe:	2f 71       	andi	r18, 0x1F	; 31
    a800:	30 70       	andi	r19, 0x00	; 0
    a802:	28 2b       	or	r18, r24
    a804:	39 2b       	or	r19, r25
    a806:	8e 85       	ldd	r24, Y+14	; 0x0e
    a808:	9f 85       	ldd	r25, Y+15	; 0x0f
    a80a:	a8 89       	ldd	r26, Y+16	; 0x10
    a80c:	b9 89       	ldd	r27, Y+17	; 0x11
    a80e:	4b e0       	ldi	r20, 0x0B	; 11
    a810:	88 0f       	add	r24, r24
    a812:	99 1f       	adc	r25, r25
    a814:	aa 1f       	adc	r26, r26
    a816:	bb 1f       	adc	r27, r27
    a818:	4a 95       	dec	r20
    a81a:	d1 f7       	brne	.-12     	; 0xa810 <main+0x1286>
    a81c:	28 2b       	or	r18, r24
    a81e:	39 2b       	or	r19, r25
    a820:	30 93 85 07 	sts	0x0785, r19
    a824:	20 93 84 07 	sts	0x0784, r18
    a828:	03 c0       	rjmp	.+6      	; 0xa830 <main+0x12a6>
				while (*ptr == ' ') ptr++;
    a82a:	31 96       	adiw	r30, 0x01	; 1
    a82c:	fb 83       	std	Y+3, r31	; 0x03
    a82e:	ea 83       	std	Y+2, r30	; 0x02
    a830:	ea 81       	ldd	r30, Y+2	; 0x02
    a832:	fb 81       	ldd	r31, Y+3	; 0x03
    a834:	80 81       	ld	r24, Z
    a836:	80 32       	cpi	r24, 0x20	; 32
    a838:	c1 f3       	breq	.-16     	; 0xa82a <main+0x12a0>
				put_rc(f_utime(ptr, &Finfo));
    a83a:	cf 01       	movw	r24, r30
    a83c:	6e e7       	ldi	r22, 0x7E	; 126
    a83e:	77 e0       	ldi	r23, 0x07	; 7
    a840:	0e 94 0e 41 	call	0x821c	; 0x821c <f_utime>
    a844:	4f c1       	rjmp	.+670    	; 0xaae4 <main+0x155a>
				break;

			case 'x' : /* fx <src_name> <dst_name> - Copy file */
				while (*ptr == ' ') ptr++;
    a846:	31 96       	adiw	r30, 0x01	; 1
    a848:	fb 83       	std	Y+3, r31	; 0x03
    a84a:	ea 83       	std	Y+2, r30	; 0x02
    a84c:	ea 81       	ldd	r30, Y+2	; 0x02
    a84e:	fb 81       	ldd	r31, Y+3	; 0x03
    a850:	80 81       	ld	r24, Z
    a852:	80 32       	cpi	r24, 0x20	; 32
    a854:	c1 f3       	breq	.-16     	; 0xa846 <main+0x12bc>
				ptr2 = strchr(ptr, ' ');
    a856:	cf 01       	movw	r24, r30
    a858:	60 e2       	ldi	r22, 0x20	; 32
    a85a:	70 e0       	ldi	r23, 0x00	; 0
    a85c:	0e 94 6a 5c 	call	0xb8d4	; 0xb8d4 <strchr>
				if (!ptr2) break;
    a860:	00 97       	sbiw	r24, 0x00	; 0
    a862:	11 f4       	brne	.+4      	; 0xa868 <main+0x12de>
    a864:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <main+0xd0>
				*ptr2++ = 0;
    a868:	dc 01       	movw	r26, r24
    a86a:	1d 92       	st	X+, r1
    a86c:	8d 01       	movw	r16, r26
    a86e:	02 c0       	rjmp	.+4      	; 0xa874 <main+0x12ea>
				while (*ptr2 == ' ') ptr2++;
    a870:	0f 5f       	subi	r16, 0xFF	; 255
    a872:	1f 4f       	sbci	r17, 0xFF	; 255
    a874:	f8 01       	movw	r30, r16
    a876:	80 81       	ld	r24, Z
    a878:	80 32       	cpi	r24, 0x20	; 32
    a87a:	d1 f3       	breq	.-12     	; 0xa870 <main+0x12e6>
				xprintf(PSTR("Opening \"%s\""), ptr);
    a87c:	00 d0       	rcall	.+0      	; 0xa87e <main+0x12f4>
    a87e:	00 d0       	rcall	.+0      	; 0xa880 <main+0x12f6>
    a880:	e5 e1       	ldi	r30, 0x15	; 21
    a882:	f1 e0       	ldi	r31, 0x01	; 1
    a884:	ad b7       	in	r26, 0x3d	; 61
    a886:	be b7       	in	r27, 0x3e	; 62
    a888:	12 96       	adiw	r26, 0x02	; 2
    a88a:	fc 93       	st	X, r31
    a88c:	ee 93       	st	-X, r30
    a88e:	11 97       	sbiw	r26, 0x01	; 1
    a890:	8a 81       	ldd	r24, Y+2	; 0x02
    a892:	9b 81       	ldd	r25, Y+3	; 0x03
    a894:	14 96       	adiw	r26, 0x04	; 4
    a896:	9c 93       	st	X, r25
    a898:	8e 93       	st	-X, r24
    a89a:	13 97       	sbiw	r26, 0x03	; 3
    a89c:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
				res = f_open(&file1, ptr, FA_OPEN_EXISTING | FA_READ);
    a8a0:	0f 90       	pop	r0
    a8a2:	0f 90       	pop	r0
    a8a4:	0f 90       	pop	r0
    a8a6:	0f 90       	pop	r0
    a8a8:	2c e3       	ldi	r18, 0x3C	; 60
    a8aa:	e2 2e       	mov	r14, r18
    a8ac:	f1 2c       	mov	r15, r1
    a8ae:	ec 0e       	add	r14, r28
    a8b0:	fd 1e       	adc	r15, r29
    a8b2:	6a 81       	ldd	r22, Y+2	; 0x02
    a8b4:	7b 81       	ldd	r23, Y+3	; 0x03
    a8b6:	c7 01       	movw	r24, r14
    a8b8:	41 e0       	ldi	r20, 0x01	; 1
    a8ba:	0e 94 d0 47 	call	0x8fa0	; 0x8fa0 <f_open>
				if (res) {
    a8be:	88 23       	and	r24, r24
    a8c0:	09 f0       	breq	.+2      	; 0xa8c4 <main+0x133a>
    a8c2:	10 c1       	rjmp	.+544    	; 0xaae4 <main+0x155a>
					put_rc(res);
					break;
				}
				xprintf(PSTR("\nCreating \"%s\""), ptr2);
    a8c4:	00 d0       	rcall	.+0      	; 0xa8c6 <main+0x133c>
    a8c6:	00 d0       	rcall	.+0      	; 0xa8c8 <main+0x133e>
    a8c8:	e6 e0       	ldi	r30, 0x06	; 6
    a8ca:	f1 e0       	ldi	r31, 0x01	; 1
    a8cc:	ad b7       	in	r26, 0x3d	; 61
    a8ce:	be b7       	in	r27, 0x3e	; 62
    a8d0:	12 96       	adiw	r26, 0x02	; 2
    a8d2:	fc 93       	st	X, r31
    a8d4:	ee 93       	st	-X, r30
    a8d6:	11 97       	sbiw	r26, 0x01	; 1
    a8d8:	14 96       	adiw	r26, 0x04	; 4
    a8da:	1c 93       	st	X, r17
    a8dc:	0e 93       	st	-X, r16
    a8de:	13 97       	sbiw	r26, 0x03	; 3
    a8e0:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
				res = f_open(&file2, ptr2, FA_CREATE_ALWAYS | FA_WRITE);
    a8e4:	0f 90       	pop	r0
    a8e6:	0f 90       	pop	r0
    a8e8:	0f 90       	pop	r0
    a8ea:	0f 90       	pop	r0
    a8ec:	ce 01       	movw	r24, r28
    a8ee:	84 5a       	subi	r24, 0xA4	; 164
    a8f0:	9f 4f       	sbci	r25, 0xFF	; 255
    a8f2:	b8 01       	movw	r22, r16
    a8f4:	4a e0       	ldi	r20, 0x0A	; 10
    a8f6:	0e 94 d0 47 	call	0x8fa0	; 0x8fa0 <f_open>
				if (res) {
    a8fa:	88 23       	and	r24, r24
    a8fc:	21 f0       	breq	.+8      	; 0xa906 <main+0x137c>
					put_rc(res);
    a8fe:	0e 94 f6 48 	call	0x91ec	; 0x91ec <put_rc>
					f_close(&file1);
    a902:	c7 01       	movw	r24, r14
    a904:	71 c0       	rjmp	.+226    	; 0xa9e8 <main+0x145e>
					break;
				}
				xprintf(PSTR("\nCopying..."));
    a906:	00 d0       	rcall	.+0      	; 0xa908 <main+0x137e>
    a908:	ea ef       	ldi	r30, 0xFA	; 250
    a90a:	f0 e0       	ldi	r31, 0x00	; 0
    a90c:	ad b7       	in	r26, 0x3d	; 61
    a90e:	be b7       	in	r27, 0x3e	; 62
    a910:	12 96       	adiw	r26, 0x02	; 2
    a912:	fc 93       	st	X, r31
    a914:	ee 93       	st	-X, r30
    a916:	11 97       	sbiw	r26, 0x01	; 1
    a918:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
				p1 = 0;
    a91c:	1e 86       	std	Y+14, r1	; 0x0e
    a91e:	1f 86       	std	Y+15, r1	; 0x0f
    a920:	18 8a       	std	Y+16, r1	; 0x10
    a922:	19 8a       	std	Y+17, r1	; 0x11
    a924:	0f 90       	pop	r0
    a926:	0f 90       	pop	r0
				for (;;) {
					res = f_read(&file1, Buff, sizeof(Buff), &s1);
    a928:	87 01       	movw	r16, r14
    a92a:	c8 01       	movw	r24, r16
    a92c:	6e e9       	ldi	r22, 0x9E	; 158
    a92e:	77 e0       	ldi	r23, 0x07	; 7
    a930:	40 e0       	ldi	r20, 0x00	; 0
    a932:	52 e0       	ldi	r21, 0x02	; 2
    a934:	9e 01       	movw	r18, r28
    a936:	2a 5f       	subi	r18, 0xFA	; 250
    a938:	3f 4f       	sbci	r19, 0xFF	; 255
    a93a:	0e 94 8d 39 	call	0x731a	; 0x731a <f_read>
    a93e:	68 2f       	mov	r22, r24
					if (res || s1 == 0) break;   /* error or eof */
    a940:	88 23       	and	r24, r24
    a942:	49 f5       	brne	.+82     	; 0xa996 <main+0x140c>
    a944:	4e 81       	ldd	r20, Y+6	; 0x06
    a946:	5f 81       	ldd	r21, Y+7	; 0x07
    a948:	41 15       	cp	r20, r1
    a94a:	51 05       	cpc	r21, r1
    a94c:	39 f1       	breq	.+78     	; 0xa99c <main+0x1412>
					res = f_write(&file2, Buff, s1, &s2);
    a94e:	ce 01       	movw	r24, r28
    a950:	84 5a       	subi	r24, 0xA4	; 164
    a952:	9f 4f       	sbci	r25, 0xFF	; 255
    a954:	6e e9       	ldi	r22, 0x9E	; 158
    a956:	77 e0       	ldi	r23, 0x07	; 7
    a958:	9e 01       	movw	r18, r28
    a95a:	28 5f       	subi	r18, 0xF8	; 248
    a95c:	3f 4f       	sbci	r19, 0xFF	; 255
    a95e:	0e 94 5d 36 	call	0x6cba	; 0x6cba <f_write>
    a962:	68 2f       	mov	r22, r24
					p1 += s2;
    a964:	e8 85       	ldd	r30, Y+8	; 0x08
    a966:	f9 85       	ldd	r31, Y+9	; 0x09
    a968:	9f 01       	movw	r18, r30
    a96a:	40 e0       	ldi	r20, 0x00	; 0
    a96c:	50 e0       	ldi	r21, 0x00	; 0
    a96e:	8e 85       	ldd	r24, Y+14	; 0x0e
    a970:	9f 85       	ldd	r25, Y+15	; 0x0f
    a972:	a8 89       	ldd	r26, Y+16	; 0x10
    a974:	b9 89       	ldd	r27, Y+17	; 0x11
    a976:	82 0f       	add	r24, r18
    a978:	93 1f       	adc	r25, r19
    a97a:	a4 1f       	adc	r26, r20
    a97c:	b5 1f       	adc	r27, r21
    a97e:	8e 87       	std	Y+14, r24	; 0x0e
    a980:	9f 87       	std	Y+15, r25	; 0x0f
    a982:	a8 8b       	std	Y+16, r26	; 0x10
    a984:	b9 8b       	std	Y+17, r27	; 0x11
					if (res || s2 < s1) break;   /* error or disk full */
    a986:	66 23       	and	r22, r22
    a988:	31 f4       	brne	.+12     	; 0xa996 <main+0x140c>
    a98a:	8e 81       	ldd	r24, Y+6	; 0x06
    a98c:	9f 81       	ldd	r25, Y+7	; 0x07
    a98e:	e8 17       	cp	r30, r24
    a990:	f9 07       	cpc	r31, r25
    a992:	58 f6       	brcc	.-106    	; 0xa92a <main+0x13a0>
    a994:	03 c0       	rjmp	.+6      	; 0xa99c <main+0x1412>
				}
				if (res) put_rc(res);
    a996:	86 2f       	mov	r24, r22
    a998:	0e 94 f6 48 	call	0x91ec	; 0x91ec <put_rc>
				xprintf(PSTR("\n%lu bytes copied.\n"), p1);
    a99c:	00 d0       	rcall	.+0      	; 0xa99e <main+0x1414>
    a99e:	00 d0       	rcall	.+0      	; 0xa9a0 <main+0x1416>
    a9a0:	00 d0       	rcall	.+0      	; 0xa9a2 <main+0x1418>
    a9a2:	e6 ee       	ldi	r30, 0xE6	; 230
    a9a4:	f0 e0       	ldi	r31, 0x00	; 0
    a9a6:	ad b7       	in	r26, 0x3d	; 61
    a9a8:	be b7       	in	r27, 0x3e	; 62
    a9aa:	12 96       	adiw	r26, 0x02	; 2
    a9ac:	fc 93       	st	X, r31
    a9ae:	ee 93       	st	-X, r30
    a9b0:	11 97       	sbiw	r26, 0x01	; 1
    a9b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    a9b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    a9b6:	a8 89       	ldd	r26, Y+16	; 0x10
    a9b8:	b9 89       	ldd	r27, Y+17	; 0x11
    a9ba:	ed b7       	in	r30, 0x3d	; 61
    a9bc:	fe b7       	in	r31, 0x3e	; 62
    a9be:	83 83       	std	Z+3, r24	; 0x03
    a9c0:	94 83       	std	Z+4, r25	; 0x04
    a9c2:	a5 83       	std	Z+5, r26	; 0x05
    a9c4:	b6 83       	std	Z+6, r27	; 0x06
    a9c6:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
				f_close(&file1);
    a9ca:	8d b7       	in	r24, 0x3d	; 61
    a9cc:	9e b7       	in	r25, 0x3e	; 62
    a9ce:	06 96       	adiw	r24, 0x06	; 6
    a9d0:	0f b6       	in	r0, 0x3f	; 63
    a9d2:	f8 94       	cli
    a9d4:	9e bf       	out	0x3e, r25	; 62
    a9d6:	0f be       	out	0x3f, r0	; 63
    a9d8:	8d bf       	out	0x3d, r24	; 61
    a9da:	ce 01       	movw	r24, r28
    a9dc:	cc 96       	adiw	r24, 0x3c	; 60
    a9de:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <f_close>
				f_close(&file2);
    a9e2:	ce 01       	movw	r24, r28
    a9e4:	84 5a       	subi	r24, 0xA4	; 164
    a9e6:	9f 4f       	sbci	r25, 0xFF	; 255
    a9e8:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <f_close>
    a9ec:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <main+0xd0>
				break;
#if _FS_RPATH
			case 'g' :	/* fg <path> - Change current directory */
				while (*ptr == ' ') ptr++;
    a9f0:	31 96       	adiw	r30, 0x01	; 1
    a9f2:	fb 83       	std	Y+3, r31	; 0x03
    a9f4:	ea 83       	std	Y+2, r30	; 0x02
    a9f6:	ea 81       	ldd	r30, Y+2	; 0x02
    a9f8:	fb 81       	ldd	r31, Y+3	; 0x03
    a9fa:	80 81       	ld	r24, Z
    a9fc:	80 32       	cpi	r24, 0x20	; 32
    a9fe:	c1 f3       	breq	.-16     	; 0xa9f0 <main+0x1466>
				put_rc(f_chdir(ptr));
    aa00:	cf 01       	movw	r24, r30
    aa02:	0e 94 29 43 	call	0x8652	; 0x8652 <f_chdir>
    aa06:	6e c0       	rjmp	.+220    	; 0xaae4 <main+0x155a>
				break;

			case 'j' :	/* fj <drive#> - Change current drive */
				if (xatoi(&ptr, &p1)) {
    aa08:	ce 01       	movw	r24, r28
    aa0a:	02 96       	adiw	r24, 0x02	; 2
    aa0c:	be 01       	movw	r22, r28
    aa0e:	62 5f       	subi	r22, 0xF2	; 242
    aa10:	7f 4f       	sbci	r23, 0xFF	; 255
    aa12:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    aa16:	88 23       	and	r24, r24
    aa18:	11 f4       	brne	.+4      	; 0xaa1e <main+0x1494>
    aa1a:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <main+0xd0>
					put_rc(f_chdrive((BYTE)p1));
    aa1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    aa20:	0e 94 0b 24 	call	0x4816	; 0x4816 <f_chdrive>
    aa24:	5f c0       	rjmp	.+190    	; 0xaae4 <main+0x155a>
				}
				break;
#if _FS_RPATH >= 2
			case 'q' :	/* fq - Show current dir path */
				res = f_getcwd(Line, sizeof(Line));
    aa26:	83 e2       	ldi	r24, 0x23	; 35
    aa28:	9a e0       	ldi	r25, 0x0A	; 10
    aa2a:	60 e8       	ldi	r22, 0x80	; 128
    aa2c:	70 e0       	ldi	r23, 0x00	; 0
    aa2e:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <f_getcwd>
				if (res)
    aa32:	88 23       	and	r24, r24
    aa34:	09 f0       	breq	.+2      	; 0xaa38 <main+0x14ae>
    aa36:	56 c0       	rjmp	.+172    	; 0xaae4 <main+0x155a>
					put_rc(res);
				else
					xprintf("%s\n", Line);
    aa38:	00 d0       	rcall	.+0      	; 0xaa3a <main+0x14b0>
    aa3a:	00 d0       	rcall	.+0      	; 0xaa3c <main+0x14b2>
    aa3c:	8d e7       	ldi	r24, 0x7D	; 125
    aa3e:	91 e0       	ldi	r25, 0x01	; 1
    aa40:	ad b7       	in	r26, 0x3d	; 61
    aa42:	be b7       	in	r27, 0x3e	; 62
    aa44:	12 96       	adiw	r26, 0x02	; 2
    aa46:	9c 93       	st	X, r25
    aa48:	8e 93       	st	-X, r24
    aa4a:	11 97       	sbiw	r26, 0x01	; 1
    aa4c:	14 96       	adiw	r26, 0x04	; 4
    aa4e:	7c 92       	st	X, r7
    aa50:	6e 92       	st	-X, r6
    aa52:	13 97       	sbiw	r26, 0x03	; 3
    aa54:	0c 94 ec 4b 	jmp	0x97d8	; 0x97d8 <main+0x24e>
				break;
#endif
#endif
#if _USE_MKFS
			case 'm' :	/* fm <logi drv#> <part type> <bytes/clust> - Create file system */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2) || !xatoi(&ptr, &p3)) break;
    aa58:	8e 01       	movw	r16, r28
    aa5a:	0e 5f       	subi	r16, 0xFE	; 254
    aa5c:	1f 4f       	sbci	r17, 0xFF	; 255
    aa5e:	c8 01       	movw	r24, r16
    aa60:	be 01       	movw	r22, r28
    aa62:	62 5f       	subi	r22, 0xF2	; 242
    aa64:	7f 4f       	sbci	r23, 0xFF	; 255
    aa66:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    aa6a:	88 23       	and	r24, r24
    aa6c:	11 f4       	brne	.+4      	; 0xaa72 <main+0x14e8>
    aa6e:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <main+0xd0>
    aa72:	c8 01       	movw	r24, r16
    aa74:	be 01       	movw	r22, r28
    aa76:	6e 5e       	subi	r22, 0xEE	; 238
    aa78:	7f 4f       	sbci	r23, 0xFF	; 255
    aa7a:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    aa7e:	88 23       	and	r24, r24
    aa80:	11 f4       	brne	.+4      	; 0xaa86 <main+0x14fc>
    aa82:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <main+0xd0>
    aa86:	c8 01       	movw	r24, r16
    aa88:	be 01       	movw	r22, r28
    aa8a:	6a 5e       	subi	r22, 0xEA	; 234
    aa8c:	7f 4f       	sbci	r23, 0xFF	; 255
    aa8e:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    aa92:	88 23       	and	r24, r24
    aa94:	11 f4       	brne	.+4      	; 0xaa9a <main+0x1510>
    aa96:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <main+0xd0>
				xprintf(PSTR("The drive %u will be formatted. Are you sure? (Y/n)="), (WORD)p1);
    aa9a:	00 d0       	rcall	.+0      	; 0xaa9c <main+0x1512>
    aa9c:	00 d0       	rcall	.+0      	; 0xaa9e <main+0x1514>
    aa9e:	81 eb       	ldi	r24, 0xB1	; 177
    aaa0:	90 e0       	ldi	r25, 0x00	; 0
    aaa2:	ed b7       	in	r30, 0x3d	; 61
    aaa4:	fe b7       	in	r31, 0x3e	; 62
    aaa6:	92 83       	std	Z+2, r25	; 0x02
    aaa8:	81 83       	std	Z+1, r24	; 0x01
    aaaa:	8e 85       	ldd	r24, Y+14	; 0x0e
    aaac:	9f 85       	ldd	r25, Y+15	; 0x0f
    aaae:	94 83       	std	Z+4, r25	; 0x04
    aab0:	83 83       	std	Z+3, r24	; 0x03
    aab2:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
				get_line(ptr, sizeof(Line));
    aab6:	0f 90       	pop	r0
    aab8:	0f 90       	pop	r0
    aaba:	0f 90       	pop	r0
    aabc:	0f 90       	pop	r0
    aabe:	8a 81       	ldd	r24, Y+2	; 0x02
    aac0:	9b 81       	ldd	r25, Y+3	; 0x03
    aac2:	60 e8       	ldi	r22, 0x80	; 128
    aac4:	70 e0       	ldi	r23, 0x00	; 0
    aac6:	0e 94 93 4a 	call	0x9526	; 0x9526 <get_line>
				if (*ptr == 'Y') put_rc(f_mkfs((BYTE)p1, (BYTE)p2, (WORD)p3));
    aaca:	ea 81       	ldd	r30, Y+2	; 0x02
    aacc:	fb 81       	ldd	r31, Y+3	; 0x03
    aace:	80 81       	ld	r24, Z
    aad0:	89 35       	cpi	r24, 0x59	; 89
    aad2:	11 f0       	breq	.+4      	; 0xaad8 <main+0x154e>
    aad4:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <main+0xd0>
    aad8:	4e 89       	ldd	r20, Y+22	; 0x16
    aada:	5f 89       	ldd	r21, Y+23	; 0x17
    aadc:	8e 85       	ldd	r24, Y+14	; 0x0e
    aade:	6a 89       	ldd	r22, Y+18	; 0x12
    aae0:	0e 94 13 24 	call	0x4826	; 0x4826 <f_mkfs>
    aae4:	0e 94 f6 48 	call	0x91ec	; 0x91ec <put_rc>
    aae8:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <main+0xd0>
#endif
			}
			break;

		case 't' :	/* t [<year> <mon> <mday> <hour> <min> <sec>] */
			if (xatoi(&ptr, &p1)) {
    aaec:	8e 01       	movw	r16, r28
    aaee:	0e 5f       	subi	r16, 0xFE	; 254
    aaf0:	1f 4f       	sbci	r17, 0xFF	; 255
    aaf2:	9e e0       	ldi	r25, 0x0E	; 14
    aaf4:	e9 2e       	mov	r14, r25
    aaf6:	f1 2c       	mov	r15, r1
    aaf8:	ec 0e       	add	r14, r28
    aafa:	fd 1e       	adc	r15, r29
    aafc:	c8 01       	movw	r24, r16
    aafe:	b7 01       	movw	r22, r14
    ab00:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    ab04:	88 23       	and	r24, r24
    ab06:	51 f1       	breq	.+84     	; 0xab5c <main+0x15d2>
				rtc.year = (WORD)p1;
    ab08:	8e 85       	ldd	r24, Y+14	; 0x0e
    ab0a:	9f 85       	ldd	r25, Y+15	; 0x0f
    ab0c:	9b 8f       	std	Y+27, r25	; 0x1b
    ab0e:	8a 8f       	std	Y+26, r24	; 0x1a
				xatoi(&ptr, &p1); rtc.month = (BYTE)p1;
    ab10:	c8 01       	movw	r24, r16
    ab12:	b7 01       	movw	r22, r14
    ab14:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    ab18:	8e 85       	ldd	r24, Y+14	; 0x0e
    ab1a:	8c 8f       	std	Y+28, r24	; 0x1c
				xatoi(&ptr, &p1); rtc.mday = (BYTE)p1;
    ab1c:	c8 01       	movw	r24, r16
    ab1e:	b7 01       	movw	r22, r14
    ab20:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    ab24:	8e 85       	ldd	r24, Y+14	; 0x0e
    ab26:	8d 8f       	std	Y+29, r24	; 0x1d
				xatoi(&ptr, &p1); rtc.hour = (BYTE)p1;
    ab28:	c8 01       	movw	r24, r16
    ab2a:	b7 01       	movw	r22, r14
    ab2c:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    ab30:	8e 85       	ldd	r24, Y+14	; 0x0e
    ab32:	8f 8f       	std	Y+31, r24	; 0x1f
				xatoi(&ptr, &p1); rtc.min = (BYTE)p1;
    ab34:	c8 01       	movw	r24, r16
    ab36:	b7 01       	movw	r22, r14
    ab38:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    ab3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    ab3e:	88 a3       	std	Y+32, r24	; 0x20
				if (!xatoi(&ptr, &p1)) break;
    ab40:	c8 01       	movw	r24, r16
    ab42:	b7 01       	movw	r22, r14
    ab44:	0e 94 91 22 	call	0x4522	; 0x4522 <xatoi>
    ab48:	88 23       	and	r24, r24
    ab4a:	11 f4       	brne	.+4      	; 0xab50 <main+0x15c6>
    ab4c:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <main+0xd0>
				rtc.sec = (BYTE)p1;
    ab50:	8e 85       	ldd	r24, Y+14	; 0x0e
    ab52:	89 a3       	std	Y+33, r24	; 0x21
				rtc_settime(&rtc);
    ab54:	ce 01       	movw	r24, r28
    ab56:	4a 96       	adiw	r24, 0x1a	; 26
    ab58:	0e 94 5d 5b 	call	0xb6ba	; 0xb6ba <rtc_settime>
			}
			rtc_gettime(&rtc);
    ab5c:	ce 01       	movw	r24, r28
    ab5e:	4a 96       	adiw	r24, 0x1a	; 26
    ab60:	0e 94 4b 5b 	call	0xb696	; 0xb696 <rtc_gettime>
			xprintf(PSTR("%u/%u/%u %02u:%02u:%02u\n"), rtc.year, rtc.month, rtc.mday, rtc.hour, rtc.min, rtc.sec);
    ab64:	8d b7       	in	r24, 0x3d	; 61
    ab66:	9e b7       	in	r25, 0x3e	; 62
    ab68:	0e 97       	sbiw	r24, 0x0e	; 14
    ab6a:	0f b6       	in	r0, 0x3f	; 63
    ab6c:	f8 94       	cli
    ab6e:	9e bf       	out	0x3e, r25	; 62
    ab70:	0f be       	out	0x3f, r0	; 63
    ab72:	8d bf       	out	0x3d, r24	; 61
    ab74:	ed b7       	in	r30, 0x3d	; 61
    ab76:	fe b7       	in	r31, 0x3e	; 62
    ab78:	31 96       	adiw	r30, 0x01	; 1
    ab7a:	88 e9       	ldi	r24, 0x98	; 152
    ab7c:	90 e0       	ldi	r25, 0x00	; 0
    ab7e:	ad b7       	in	r26, 0x3d	; 61
    ab80:	be b7       	in	r27, 0x3e	; 62
    ab82:	12 96       	adiw	r26, 0x02	; 2
    ab84:	9c 93       	st	X, r25
    ab86:	8e 93       	st	-X, r24
    ab88:	11 97       	sbiw	r26, 0x01	; 1
    ab8a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    ab8c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    ab8e:	93 83       	std	Z+3, r25	; 0x03
    ab90:	82 83       	std	Z+2, r24	; 0x02
    ab92:	8c 8d       	ldd	r24, Y+28	; 0x1c
    ab94:	84 83       	std	Z+4, r24	; 0x04
    ab96:	15 82       	std	Z+5, r1	; 0x05
    ab98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    ab9a:	86 83       	std	Z+6, r24	; 0x06
    ab9c:	17 82       	std	Z+7, r1	; 0x07
    ab9e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    aba0:	80 87       	std	Z+8, r24	; 0x08
    aba2:	11 86       	std	Z+9, r1	; 0x09
    aba4:	88 a1       	ldd	r24, Y+32	; 0x20
    aba6:	82 87       	std	Z+10, r24	; 0x0a
    aba8:	13 86       	std	Z+11, r1	; 0x0b
    abaa:	89 a1       	ldd	r24, Y+33	; 0x21
    abac:	84 87       	std	Z+12, r24	; 0x0c
    abae:	15 86       	std	Z+13, r1	; 0x0d
    abb0:	0e 94 33 22 	call	0x4466	; 0x4466 <xprintf>
    abb4:	ed b7       	in	r30, 0x3d	; 61
    abb6:	fe b7       	in	r31, 0x3e	; 62
    abb8:	3e 96       	adiw	r30, 0x0e	; 14
    abba:	0f b6       	in	r0, 0x3f	; 63
    abbc:	f8 94       	cli
    abbe:	fe bf       	out	0x3e, r31	; 62
    abc0:	0f be       	out	0x3f, r0	; 63
    abc2:	ed bf       	out	0x3d, r30	; 61
    abc4:	0c 94 2d 4b 	jmp	0x965a	; 0x965a <main+0xd0>

0000abc8 <__vector_7>:
/* 100Hz timer interrupt generated by OC2                  */
/*---------------------------------------------------------*/


ISR(TIMER2_COMPA_vect)
{
    abc8:	1f 92       	push	r1
    abca:	0f 92       	push	r0
    abcc:	0f b6       	in	r0, 0x3f	; 63
    abce:	0f 92       	push	r0
    abd0:	11 24       	eor	r1, r1
    abd2:	2f 93       	push	r18
    abd4:	3f 93       	push	r19
    abd6:	4f 93       	push	r20
    abd8:	5f 93       	push	r21
    abda:	6f 93       	push	r22
    abdc:	7f 93       	push	r23
    abde:	8f 93       	push	r24
    abe0:	9f 93       	push	r25
    abe2:	af 93       	push	r26
    abe4:	bf 93       	push	r27
    abe6:	ef 93       	push	r30
    abe8:	ff 93       	push	r31
	Timer++;			/* Performance counter for this module */
    abea:	80 91 9c 07 	lds	r24, 0x079C
    abee:	90 91 9d 07 	lds	r25, 0x079D
    abf2:	01 96       	adiw	r24, 0x01	; 1
    abf4:	90 93 9d 07 	sts	0x079D, r25
    abf8:	80 93 9c 07 	sts	0x079C, r24
	disk_timerproc();	/* Drive timer procedure of low level disk I/O module */
    abfc:	0e 94 91 5a 	call	0xb522	; 0xb522 <disk_timerproc>
}
    ac00:	ff 91       	pop	r31
    ac02:	ef 91       	pop	r30
    ac04:	bf 91       	pop	r27
    ac06:	af 91       	pop	r26
    ac08:	9f 91       	pop	r25
    ac0a:	8f 91       	pop	r24
    ac0c:	7f 91       	pop	r23
    ac0e:	6f 91       	pop	r22
    ac10:	5f 91       	pop	r21
    ac12:	4f 91       	pop	r20
    ac14:	3f 91       	pop	r19
    ac16:	2f 91       	pop	r18
    ac18:	0f 90       	pop	r0
    ac1a:	0f be       	out	0x3f, r0	; 63
    ac1c:	0f 90       	pop	r0
    ac1e:	1f 90       	pop	r1
    ac20:	18 95       	reti

0000ac22 <wait_ready>:
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    ac22:	82 e3       	ldi	r24, 0x32	; 50
    ac24:	80 93 92 02 	sts	0x0292, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    ac28:	8f ef       	ldi	r24, 0xFF	; 255
    ac2a:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    ac2c:	0d b4       	in	r0, 0x2d	; 45
    ac2e:	07 fe       	sbrs	r0, 7
    ac30:	fd cf       	rjmp	.-6      	; 0xac2c <wait_ready+0xa>
	return SPDR;
    ac32:	8e b5       	in	r24, 0x2e	; 46
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    ac34:	9f ef       	ldi	r25, 0xFF	; 255
    ac36:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    ac38:	0d b4       	in	r0, 0x2d	; 45
    ac3a:	07 fe       	sbrs	r0, 7
    ac3c:	fd cf       	rjmp	.-6      	; 0xac38 <wait_ready+0x16>
	return SPDR;
    ac3e:	8e b5       	in	r24, 0x2e	; 46
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		if (rcvr_spi() == 0xFF) return 1;
    ac40:	8f 3f       	cpi	r24, 0xFF	; 255
    ac42:	19 f4       	brne	.+6      	; 0xac4a <wait_ready+0x28>
    ac44:	21 e0       	ldi	r18, 0x01	; 1
    ac46:	30 e0       	ldi	r19, 0x00	; 0
    ac48:	06 c0       	rjmp	.+12     	; 0xac56 <wait_ready+0x34>
	while (Timer2);
    ac4a:	80 91 92 02 	lds	r24, 0x0292
    ac4e:	88 23       	and	r24, r24
    ac50:	91 f7       	brne	.-28     	; 0xac36 <wait_ready+0x14>
    ac52:	20 e0       	ldi	r18, 0x00	; 0
    ac54:	30 e0       	ldi	r19, 0x00	; 0

	return 0;
}
    ac56:	c9 01       	movw	r24, r18
    ac58:	08 95       	ret

0000ac5a <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
    ac5a:	2a 98       	cbi	0x05, 2	; 5
	if (!wait_ready()) {
    ac5c:	0e 94 11 56 	call	0xac22	; 0xac22 <wait_ready>
    ac60:	89 2b       	or	r24, r25
    ac62:	19 f0       	breq	.+6      	; 0xac6a <select+0x10>
    ac64:	21 e0       	ldi	r18, 0x01	; 1
    ac66:	30 e0       	ldi	r19, 0x00	; 0
    ac68:	09 c0       	rjmp	.+18     	; 0xac7c <select+0x22>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    ac6a:	2a 9a       	sbi	0x05, 2	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    ac6c:	8f ef       	ldi	r24, 0xFF	; 255
    ac6e:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    ac70:	0d b4       	in	r0, 0x2d	; 45
    ac72:	07 fe       	sbrs	r0, 7
    ac74:	fd cf       	rjmp	.-6      	; 0xac70 <select+0x16>
	return SPDR;
    ac76:	8e b5       	in	r24, 0x2e	; 46
    ac78:	20 e0       	ldi	r18, 0x00	; 0
    ac7a:	30 e0       	ldi	r19, 0x00	; 0
	if (!wait_ready()) {
		deselect();
		return 0;
	}
	return 1;
}
    ac7c:	c9 01       	movw	r24, r18
    ac7e:	08 95       	ret

0000ac80 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    ac80:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
    ac82:	84 e1       	ldi	r24, 0x14	; 20
    ac84:	80 93 91 02 	sts	0x0291, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    ac88:	9f ef       	ldi	r25, 0xFF	; 255
    ac8a:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    ac8c:	0d b4       	in	r0, 0x2d	; 45
    ac8e:	07 fe       	sbrs	r0, 7
    ac90:	fd cf       	rjmp	.-6      	; 0xac8c <rcvr_datablock+0xc>
	return SPDR;
    ac92:	8e b5       	in	r24, 0x2e	; 46


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
    ac94:	8f 3f       	cpi	r24, 0xFF	; 255
    ac96:	29 f4       	brne	.+10     	; 0xaca2 <rcvr_datablock+0x22>
    ac98:	80 91 91 02 	lds	r24, 0x0291
    ac9c:	88 23       	and	r24, r24
    ac9e:	a9 f7       	brne	.-22     	; 0xac8a <rcvr_datablock+0xa>
    aca0:	2f c0       	rjmp	.+94     	; 0xad00 <rcvr_datablock+0x80>
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
    aca2:	8e 3f       	cpi	r24, 0xFE	; 254
    aca4:	69 f5       	brne	.+90     	; 0xad00 <rcvr_datablock+0x80>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
    aca6:	9f ef       	ldi	r25, 0xFF	; 255
    aca8:	9e bd       	out	0x2e, r25	; 46
    acaa:	0d b4       	in	r0, 0x2d	; 45
    acac:	07 fe       	sbrs	r0, 7
    acae:	fd cf       	rjmp	.-6      	; 0xacaa <rcvr_datablock+0x2a>
    acb0:	8e b5       	in	r24, 0x2e	; 46
    acb2:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
    acb4:	9e bd       	out	0x2e, r25	; 46
    acb6:	0d b4       	in	r0, 0x2d	; 45
    acb8:	07 fe       	sbrs	r0, 7
    acba:	fd cf       	rjmp	.-6      	; 0xacb6 <rcvr_datablock+0x36>
    acbc:	8e b5       	in	r24, 0x2e	; 46
    acbe:	81 83       	std	Z+1, r24	; 0x01
		rcvr_spi_m(buff++);
    acc0:	9e bd       	out	0x2e, r25	; 46
    acc2:	0d b4       	in	r0, 0x2d	; 45
    acc4:	07 fe       	sbrs	r0, 7
    acc6:	fd cf       	rjmp	.-6      	; 0xacc2 <rcvr_datablock+0x42>
    acc8:	8e b5       	in	r24, 0x2e	; 46
    acca:	82 83       	std	Z+2, r24	; 0x02
		rcvr_spi_m(buff++);
    accc:	9e bd       	out	0x2e, r25	; 46
    acce:	0d b4       	in	r0, 0x2d	; 45
    acd0:	07 fe       	sbrs	r0, 7
    acd2:	fd cf       	rjmp	.-6      	; 0xacce <rcvr_datablock+0x4e>
    acd4:	8e b5       	in	r24, 0x2e	; 46
    acd6:	83 83       	std	Z+3, r24	; 0x03
	} while (btr -= 4);
    acd8:	64 50       	subi	r22, 0x04	; 4
    acda:	70 40       	sbci	r23, 0x00	; 0
    acdc:	11 f0       	breq	.+4      	; 0xace2 <rcvr_datablock+0x62>
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    acde:	34 96       	adiw	r30, 0x04	; 4
    ace0:	e3 cf       	rjmp	.-58     	; 0xaca8 <rcvr_datablock+0x28>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    ace2:	8f ef       	ldi	r24, 0xFF	; 255
    ace4:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    ace6:	0d b4       	in	r0, 0x2d	; 45
    ace8:	07 fe       	sbrs	r0, 7
    acea:	fd cf       	rjmp	.-6      	; 0xace6 <rcvr_datablock+0x66>
	return SPDR;
    acec:	8e b5       	in	r24, 0x2e	; 46
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    acee:	8f ef       	ldi	r24, 0xFF	; 255
    acf0:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    acf2:	0d b4       	in	r0, 0x2d	; 45
    acf4:	07 fe       	sbrs	r0, 7
    acf6:	fd cf       	rjmp	.-6      	; 0xacf2 <rcvr_datablock+0x72>
	return SPDR;
    acf8:	8e b5       	in	r24, 0x2e	; 46
    acfa:	21 e0       	ldi	r18, 0x01	; 1
    acfc:	30 e0       	ldi	r19, 0x00	; 0
    acfe:	02 c0       	rjmp	.+4      	; 0xad04 <rcvr_datablock+0x84>
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return 1;						/* Return with success */
    ad00:	20 e0       	ldi	r18, 0x00	; 0
    ad02:	30 e0       	ldi	r19, 0x00	; 0
}
    ad04:	c9 01       	movw	r24, r18
    ad06:	08 95       	ret

0000ad08 <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    ad08:	1f 93       	push	r17
    ad0a:	cf 93       	push	r28
    ad0c:	df 93       	push	r29
    ad0e:	ec 01       	movw	r28, r24
    ad10:	16 2f       	mov	r17, r22
	BYTE resp, wc;


	if (!wait_ready()) return 0;
    ad12:	0e 94 11 56 	call	0xac22	; 0xac22 <wait_ready>
    ad16:	89 2b       	or	r24, r25
    ad18:	19 f4       	brne	.+6      	; 0xad20 <xmit_datablock+0x18>
    ad1a:	20 e0       	ldi	r18, 0x00	; 0
    ad1c:	30 e0       	ldi	r19, 0x00	; 0
    ad1e:	31 c0       	rjmp	.+98     	; 0xad82 <xmit_datablock+0x7a>

	xmit_spi(token);					/* Xmit data token */
    ad20:	1e bd       	out	0x2e, r17	; 46
    ad22:	0d b4       	in	r0, 0x2d	; 45
    ad24:	07 fe       	sbrs	r0, 7
    ad26:	fd cf       	rjmp	.-6      	; 0xad22 <xmit_datablock+0x1a>
	if (token != 0xFD) {	/* Is data token */
    ad28:	1d 3f       	cpi	r17, 0xFD	; 253
    ad2a:	19 f4       	brne	.+6      	; 0xad32 <xmit_datablock+0x2a>
    ad2c:	21 e0       	ldi	r18, 0x01	; 1
    ad2e:	30 e0       	ldi	r19, 0x00	; 0
    ad30:	28 c0       	rjmp	.+80     	; 0xad82 <xmit_datablock+0x7a>
    ad32:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
    ad34:	88 81       	ld	r24, Y
    ad36:	8e bd       	out	0x2e, r24	; 46
    ad38:	0d b4       	in	r0, 0x2d	; 45
    ad3a:	07 fe       	sbrs	r0, 7
    ad3c:	fd cf       	rjmp	.-6      	; 0xad38 <xmit_datablock+0x30>
			xmit_spi(*buff++);
    ad3e:	89 81       	ldd	r24, Y+1	; 0x01
    ad40:	8e bd       	out	0x2e, r24	; 46
    ad42:	0d b4       	in	r0, 0x2d	; 45
    ad44:	07 fe       	sbrs	r0, 7
    ad46:	fd cf       	rjmp	.-6      	; 0xad42 <xmit_datablock+0x3a>
		} while (--wc);
    ad48:	91 50       	subi	r25, 0x01	; 1
    ad4a:	11 f0       	breq	.+4      	; 0xad50 <xmit_datablock+0x48>
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    ad4c:	22 96       	adiw	r28, 0x02	; 2
    ad4e:	f2 cf       	rjmp	.-28     	; 0xad34 <xmit_datablock+0x2c>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
    ad50:	8f ef       	ldi	r24, 0xFF	; 255
    ad52:	8e bd       	out	0x2e, r24	; 46
    ad54:	0d b4       	in	r0, 0x2d	; 45
    ad56:	07 fe       	sbrs	r0, 7
    ad58:	fd cf       	rjmp	.-6      	; 0xad54 <xmit_datablock+0x4c>
		xmit_spi(0xFF);
    ad5a:	8f ef       	ldi	r24, 0xFF	; 255
    ad5c:	8e bd       	out	0x2e, r24	; 46
    ad5e:	0d b4       	in	r0, 0x2d	; 45
    ad60:	07 fe       	sbrs	r0, 7
    ad62:	fd cf       	rjmp	.-6      	; 0xad5e <xmit_datablock+0x56>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    ad64:	8f ef       	ldi	r24, 0xFF	; 255
    ad66:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    ad68:	0d b4       	in	r0, 0x2d	; 45
    ad6a:	07 fe       	sbrs	r0, 7
    ad6c:	fd cf       	rjmp	.-6      	; 0xad68 <xmit_datablock+0x60>
	return SPDR;
    ad6e:	8e b5       	in	r24, 0x2e	; 46
    ad70:	90 e0       	ldi	r25, 0x00	; 0
    ad72:	8f 71       	andi	r24, 0x1F	; 31
    ad74:	85 30       	cpi	r24, 0x05	; 5
    ad76:	09 f0       	breq	.+2      	; 0xad7a <xmit_datablock+0x72>
    ad78:	91 e0       	ldi	r25, 0x01	; 1
    ad7a:	81 e0       	ldi	r24, 0x01	; 1
    ad7c:	98 27       	eor	r25, r24
    ad7e:	29 2f       	mov	r18, r25
    ad80:	30 e0       	ldi	r19, 0x00	; 0
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
}
    ad82:	c9 01       	movw	r24, r18
    ad84:	df 91       	pop	r29
    ad86:	cf 91       	pop	r28
    ad88:	1f 91       	pop	r17
    ad8a:	08 95       	ret

0000ad8c <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    ad8c:	df 92       	push	r13
    ad8e:	ef 92       	push	r14
    ad90:	ff 92       	push	r15
    ad92:	0f 93       	push	r16
    ad94:	1f 93       	push	r17
    ad96:	d8 2e       	mov	r13, r24
    ad98:	7a 01       	movw	r14, r20
    ad9a:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    ad9c:	87 ff       	sbrs	r24, 7
    ad9e:	0c c0       	rjmp	.+24     	; 0xadb8 <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    ada0:	87 e3       	ldi	r24, 0x37	; 55
    ada2:	40 e0       	ldi	r20, 0x00	; 0
    ada4:	50 e0       	ldi	r21, 0x00	; 0
    ada6:	60 e0       	ldi	r22, 0x00	; 0
    ada8:	70 e0       	ldi	r23, 0x00	; 0
    adaa:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
		if (res > 1) return res;
    adae:	82 30       	cpi	r24, 0x02	; 2
    adb0:	08 f0       	brcs	.+2      	; 0xadb4 <send_cmd+0x28>
    adb2:	52 c0       	rjmp	.+164    	; 0xae58 <send_cmd+0xcc>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    adb4:	8f e7       	ldi	r24, 0x7F	; 127
    adb6:	d8 22       	and	r13, r24
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    adb8:	2a 9a       	sbi	0x05, 2	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    adba:	8f ef       	ldi	r24, 0xFF	; 255
    adbc:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    adbe:	0d b4       	in	r0, 0x2d	; 45
    adc0:	07 fe       	sbrs	r0, 7
    adc2:	fd cf       	rjmp	.-6      	; 0xadbe <send_cmd+0x32>
	return SPDR;
    adc4:	8e b5       	in	r24, 0x2e	; 46
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
    adc6:	0e 94 2d 56 	call	0xac5a	; 0xac5a <select>
    adca:	89 2b       	or	r24, r25
    adcc:	11 f4       	brne	.+4      	; 0xadd2 <send_cmd+0x46>
    adce:	8f ef       	ldi	r24, 0xFF	; 255
    add0:	43 c0       	rjmp	.+134    	; 0xae58 <send_cmd+0xcc>

	/* Send command packet */
	xmit_spi(0x40 | cmd);				/* Start + Command index */
    add2:	8d 2d       	mov	r24, r13
    add4:	80 64       	ori	r24, 0x40	; 64
    add6:	8e bd       	out	0x2e, r24	; 46
    add8:	0d b4       	in	r0, 0x2d	; 45
    adda:	07 fe       	sbrs	r0, 7
    addc:	fd cf       	rjmp	.-6      	; 0xadd8 <send_cmd+0x4c>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    adde:	81 2f       	mov	r24, r17
    ade0:	99 27       	eor	r25, r25
    ade2:	aa 27       	eor	r26, r26
    ade4:	bb 27       	eor	r27, r27
    ade6:	8e bd       	out	0x2e, r24	; 46
    ade8:	0d b4       	in	r0, 0x2d	; 45
    adea:	07 fe       	sbrs	r0, 7
    adec:	fd cf       	rjmp	.-6      	; 0xade8 <send_cmd+0x5c>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    adee:	c8 01       	movw	r24, r16
    adf0:	aa 27       	eor	r26, r26
    adf2:	bb 27       	eor	r27, r27
    adf4:	8e bd       	out	0x2e, r24	; 46
    adf6:	0d b4       	in	r0, 0x2d	; 45
    adf8:	07 fe       	sbrs	r0, 7
    adfa:	fd cf       	rjmp	.-6      	; 0xadf6 <send_cmd+0x6a>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    adfc:	bb 27       	eor	r27, r27
    adfe:	a1 2f       	mov	r26, r17
    ae00:	90 2f       	mov	r25, r16
    ae02:	8f 2d       	mov	r24, r15
    ae04:	8e bd       	out	0x2e, r24	; 46
    ae06:	0d b4       	in	r0, 0x2d	; 45
    ae08:	07 fe       	sbrs	r0, 7
    ae0a:	fd cf       	rjmp	.-6      	; 0xae06 <send_cmd+0x7a>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    ae0c:	ee bc       	out	0x2e, r14	; 46
    ae0e:	0d b4       	in	r0, 0x2d	; 45
    ae10:	07 fe       	sbrs	r0, 7
    ae12:	fd cf       	rjmp	.-6      	; 0xae0e <send_cmd+0x82>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    ae14:	dd 20       	and	r13, r13
    ae16:	11 f4       	brne	.+4      	; 0xae1c <send_cmd+0x90>
    ae18:	85 e9       	ldi	r24, 0x95	; 149
    ae1a:	06 c0       	rjmp	.+12     	; 0xae28 <send_cmd+0x9c>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    ae1c:	88 e0       	ldi	r24, 0x08	; 8
    ae1e:	d8 16       	cp	r13, r24
    ae20:	11 f4       	brne	.+4      	; 0xae26 <send_cmd+0x9a>
    ae22:	87 e8       	ldi	r24, 0x87	; 135
    ae24:	01 c0       	rjmp	.+2      	; 0xae28 <send_cmd+0x9c>
    ae26:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
    ae28:	8e bd       	out	0x2e, r24	; 46
    ae2a:	0d b4       	in	r0, 0x2d	; 45
    ae2c:	07 fe       	sbrs	r0, 7
    ae2e:	fd cf       	rjmp	.-6      	; 0xae2a <send_cmd+0x9e>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
    ae30:	8c e0       	ldi	r24, 0x0C	; 12
    ae32:	d8 16       	cp	r13, r24
    ae34:	31 f4       	brne	.+12     	; 0xae42 <send_cmd+0xb6>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    ae36:	8f ef       	ldi	r24, 0xFF	; 255
    ae38:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    ae3a:	0d b4       	in	r0, 0x2d	; 45
    ae3c:	07 fe       	sbrs	r0, 7
    ae3e:	fd cf       	rjmp	.-6      	; 0xae3a <send_cmd+0xae>
	return SPDR;
    ae40:	8e b5       	in	r24, 0x2e	; 46
    ae42:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    ae44:	2f ef       	ldi	r18, 0xFF	; 255
    ae46:	2e bd       	out	0x2e, r18	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    ae48:	0d b4       	in	r0, 0x2d	; 45
    ae4a:	07 fe       	sbrs	r0, 7
    ae4c:	fd cf       	rjmp	.-6      	; 0xae48 <send_cmd+0xbc>
	return SPDR;
    ae4e:	8e b5       	in	r24, 0x2e	; 46
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
    ae50:	87 ff       	sbrs	r24, 7
    ae52:	02 c0       	rjmp	.+4      	; 0xae58 <send_cmd+0xcc>
    ae54:	91 50       	subi	r25, 0x01	; 1
    ae56:	b9 f7       	brne	.-18     	; 0xae46 <send_cmd+0xba>

	return res;			/* Return with the response value */
}
    ae58:	1f 91       	pop	r17
    ae5a:	0f 91       	pop	r16
    ae5c:	ff 90       	pop	r15
    ae5e:	ef 90       	pop	r14
    ae60:	df 90       	pop	r13
    ae62:	08 95       	ret

0000ae64 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    ae64:	ef 92       	push	r14
    ae66:	ff 92       	push	r15
    ae68:	0f 93       	push	r16
    ae6a:	1f 93       	push	r17
    ae6c:	df 93       	push	r29
    ae6e:	cf 93       	push	r28
    ae70:	00 d0       	rcall	.+0      	; 0xae72 <disk_initialize+0xe>
    ae72:	00 d0       	rcall	.+0      	; 0xae74 <disk_initialize+0x10>
    ae74:	cd b7       	in	r28, 0x3d	; 61
    ae76:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    ae78:	88 23       	and	r24, r24
    ae7a:	11 f0       	breq	.+4      	; 0xae80 <disk_initialize+0x1c>
    ae7c:	81 e0       	ldi	r24, 0x01	; 1
    ae7e:	c3 c0       	rjmp	.+390    	; 0xb006 <disk_initialize+0x1a2>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    ae80:	80 91 85 01 	lds	r24, 0x0185
    ae84:	81 fd       	sbrc	r24, 1
    ae86:	bd c0       	rjmp	.+378    	; 0xb002 <disk_initialize+0x19e>

static
void power_on (void)
{
	//PORTE &= ~0x80;				/* Socket power on June23/2011 mod there is no power control*/
	for (Timer1 = 2; Timer1; );	/* Wait for 20ms */
    ae88:	82 e0       	ldi	r24, 0x02	; 2
    ae8a:	80 93 91 02 	sts	0x0291, r24
    ae8e:	80 91 91 02 	lds	r24, 0x0291
    ae92:	88 23       	and	r24, r24
    ae94:	e1 f7       	brne	.-8      	; 0xae8e <disk_initialize+0x2a>
	PORTB = 0b00001100;			/* Enable drivers  Modified June 23/11 for Atmega328*/
    ae96:	8c e0       	ldi	r24, 0x0C	; 12
    ae98:	85 b9       	out	0x05, r24	; 5
	DDRB  = 0b00101100;    /* Enable drivers  Modified June 23/11 for Atmega328*/
    ae9a:	8c e2       	ldi	r24, 0x2C	; 44
    ae9c:	84 b9       	out	0x04, r24	; 4

	SPCR = 0x52;			/* Enable SPI function in mode 0 */
    ae9e:	92 e5       	ldi	r25, 0x52	; 82
    aea0:	9c bd       	out	0x2c, r25	; 44
	SPSR = 0x01;			/* SPI 2x mode */
    aea2:	81 e0       	ldi	r24, 0x01	; 1
    aea4:	8d bd       	out	0x2d, r24	; 45

	if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on */
	FCLK_SLOW();
    aea6:	9c bd       	out	0x2c, r25	; 44
    aea8:	8a e0       	ldi	r24, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    aeaa:	9f ef       	ldi	r25, 0xFF	; 255
    aeac:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    aeae:	0d b4       	in	r0, 0x2d	; 45
    aeb0:	07 fe       	sbrs	r0, 7
    aeb2:	fd cf       	rjmp	.-6      	; 0xaeae <disk_initialize+0x4a>
	return SPDR;
    aeb4:	2e b5       	in	r18, 0x2e	; 46
	if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
    aeb6:	81 50       	subi	r24, 0x01	; 1
    aeb8:	c9 f7       	brne	.-14     	; 0xaeac <disk_initialize+0x48>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    aeba:	40 e0       	ldi	r20, 0x00	; 0
    aebc:	50 e0       	ldi	r21, 0x00	; 0
    aebe:	60 e0       	ldi	r22, 0x00	; 0
    aec0:	70 e0       	ldi	r23, 0x00	; 0
    aec2:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
    aec6:	81 30       	cpi	r24, 0x01	; 1
    aec8:	09 f0       	breq	.+2      	; 0xaecc <disk_initialize+0x68>
    aeca:	7e c0       	rjmp	.+252    	; 0xafc8 <disk_initialize+0x164>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    aecc:	84 e6       	ldi	r24, 0x64	; 100
    aece:	80 93 91 02 	sts	0x0291, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    aed2:	88 e0       	ldi	r24, 0x08	; 8
    aed4:	4a ea       	ldi	r20, 0xAA	; 170
    aed6:	51 e0       	ldi	r21, 0x01	; 1
    aed8:	60 e0       	ldi	r22, 0x00	; 0
    aeda:	70 e0       	ldi	r23, 0x00	; 0
    aedc:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
    aee0:	81 30       	cpi	r24, 0x01	; 1
    aee2:	09 f0       	breq	.+2      	; 0xaee6 <disk_initialize+0x82>
    aee4:	4a c0       	rjmp	.+148    	; 0xaf7a <disk_initialize+0x116>
    aee6:	7e 01       	movw	r14, r28
    aee8:	08 94       	sec
    aeea:	e1 1c       	adc	r14, r1
    aeec:	f1 1c       	adc	r15, r1
    aeee:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    aef0:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    aef2:	9e 01       	movw	r18, r28
    aef4:	2b 5f       	subi	r18, 0xFB	; 251
    aef6:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    aef8:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    aefa:	0d b4       	in	r0, 0x2d	; 45
    aefc:	07 fe       	sbrs	r0, 7
    aefe:	fd cf       	rjmp	.-6      	; 0xaefa <disk_initialize+0x96>
	return SPDR;
    af00:	8e b5       	in	r24, 0x2e	; 46

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    af02:	f8 01       	movw	r30, r16
    af04:	81 93       	st	Z+, r24
    af06:	8f 01       	movw	r16, r30
    af08:	e2 17       	cp	r30, r18
    af0a:	f3 07       	cpc	r31, r19
    af0c:	a9 f7       	brne	.-22     	; 0xaef8 <disk_initialize+0x94>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    af0e:	8b 81       	ldd	r24, Y+3	; 0x03
    af10:	81 30       	cpi	r24, 0x01	; 1
    af12:	09 f0       	breq	.+2      	; 0xaf16 <disk_initialize+0xb2>
    af14:	59 c0       	rjmp	.+178    	; 0xafc8 <disk_initialize+0x164>
    af16:	8c 81       	ldd	r24, Y+4	; 0x04
    af18:	8a 3a       	cpi	r24, 0xAA	; 170
    af1a:	09 f0       	breq	.+2      	; 0xaf1e <disk_initialize+0xba>
    af1c:	55 c0       	rjmp	.+170    	; 0xafc8 <disk_initialize+0x164>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    af1e:	80 91 91 02 	lds	r24, 0x0291
    af22:	88 23       	and	r24, r24
    af24:	49 f0       	breq	.+18     	; 0xaf38 <disk_initialize+0xd4>
    af26:	89 ea       	ldi	r24, 0xA9	; 169
    af28:	40 e0       	ldi	r20, 0x00	; 0
    af2a:	50 e0       	ldi	r21, 0x00	; 0
    af2c:	60 e0       	ldi	r22, 0x00	; 0
    af2e:	70 e4       	ldi	r23, 0x40	; 64
    af30:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
    af34:	88 23       	and	r24, r24
    af36:	99 f7       	brne	.-26     	; 0xaf1e <disk_initialize+0xba>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    af38:	80 91 91 02 	lds	r24, 0x0291
    af3c:	88 23       	and	r24, r24
    af3e:	09 f4       	brne	.+2      	; 0xaf42 <disk_initialize+0xde>
    af40:	43 c0       	rjmp	.+134    	; 0xafc8 <disk_initialize+0x164>
    af42:	8a e3       	ldi	r24, 0x3A	; 58
    af44:	40 e0       	ldi	r20, 0x00	; 0
    af46:	50 e0       	ldi	r21, 0x00	; 0
    af48:	60 e0       	ldi	r22, 0x00	; 0
    af4a:	70 e0       	ldi	r23, 0x00	; 0
    af4c:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
    af50:	88 23       	and	r24, r24
    af52:	d1 f5       	brne	.+116    	; 0xafc8 <disk_initialize+0x164>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    af54:	9f ef       	ldi	r25, 0xFF	; 255
    af56:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    af58:	0d b4       	in	r0, 0x2d	; 45
    af5a:	07 fe       	sbrs	r0, 7
    af5c:	fd cf       	rjmp	.-6      	; 0xaf58 <disk_initialize+0xf4>
	return SPDR;
    af5e:	8e b5       	in	r24, 0x2e	; 46
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    af60:	f7 01       	movw	r30, r14
    af62:	81 93       	st	Z+, r24
    af64:	7f 01       	movw	r14, r30
    af66:	e0 17       	cp	r30, r16
    af68:	f1 07       	cpc	r31, r17
    af6a:	a9 f7       	brne	.-22     	; 0xaf56 <disk_initialize+0xf2>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    af6c:	89 81       	ldd	r24, Y+1	; 0x01
    af6e:	86 fd       	sbrc	r24, 6
    af70:	02 c0       	rjmp	.+4      	; 0xaf76 <disk_initialize+0x112>
    af72:	14 e0       	ldi	r17, 0x04	; 4
    af74:	2a c0       	rjmp	.+84     	; 0xafca <disk_initialize+0x166>
    af76:	1c e0       	ldi	r17, 0x0C	; 12
    af78:	28 c0       	rjmp	.+80     	; 0xafca <disk_initialize+0x166>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    af7a:	89 ea       	ldi	r24, 0xA9	; 169
    af7c:	40 e0       	ldi	r20, 0x00	; 0
    af7e:	50 e0       	ldi	r21, 0x00	; 0
    af80:	60 e0       	ldi	r22, 0x00	; 0
    af82:	70 e0       	ldi	r23, 0x00	; 0
    af84:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
    af88:	82 30       	cpi	r24, 0x02	; 2
    af8a:	18 f0       	brcs	.+6      	; 0xaf92 <disk_initialize+0x12e>
    af8c:	01 e0       	ldi	r16, 0x01	; 1
    af8e:	11 e0       	ldi	r17, 0x01	; 1
    af90:	02 c0       	rjmp	.+4      	; 0xaf96 <disk_initialize+0x132>
    af92:	09 ea       	ldi	r16, 0xA9	; 169
    af94:	12 e0       	ldi	r17, 0x02	; 2
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    af96:	80 91 91 02 	lds	r24, 0x0291
    af9a:	88 23       	and	r24, r24
    af9c:	49 f0       	breq	.+18     	; 0xafb0 <disk_initialize+0x14c>
    af9e:	80 2f       	mov	r24, r16
    afa0:	40 e0       	ldi	r20, 0x00	; 0
    afa2:	50 e0       	ldi	r21, 0x00	; 0
    afa4:	60 e0       	ldi	r22, 0x00	; 0
    afa6:	70 e0       	ldi	r23, 0x00	; 0
    afa8:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
    afac:	88 23       	and	r24, r24
    afae:	99 f7       	brne	.-26     	; 0xaf96 <disk_initialize+0x132>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    afb0:	80 91 91 02 	lds	r24, 0x0291
    afb4:	88 23       	and	r24, r24
    afb6:	41 f0       	breq	.+16     	; 0xafc8 <disk_initialize+0x164>
    afb8:	80 e1       	ldi	r24, 0x10	; 16
    afba:	40 e0       	ldi	r20, 0x00	; 0
    afbc:	52 e0       	ldi	r21, 0x02	; 2
    afbe:	60 e0       	ldi	r22, 0x00	; 0
    afc0:	70 e0       	ldi	r23, 0x00	; 0
    afc2:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
    afc6:	81 11       	cpse	r24, r1
    afc8:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
    afca:	10 93 93 02 	sts	0x0293, r17
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    afce:	2a 9a       	sbi	0x05, 2	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    afd0:	8f ef       	ldi	r24, 0xFF	; 255
    afd2:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    afd4:	0d b4       	in	r0, 0x2d	; 45
    afd6:	07 fe       	sbrs	r0, 7
    afd8:	fd cf       	rjmp	.-6      	; 0xafd4 <disk_initialize+0x170>
	return SPDR;
    afda:	8e b5       	in	r24, 0x2e	; 46
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
    afdc:	11 23       	and	r17, r17
    afde:	41 f0       	breq	.+16     	; 0xaff0 <disk_initialize+0x18c>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    afe0:	80 91 85 01 	lds	r24, 0x0185
    afe4:	8e 7f       	andi	r24, 0xFE	; 254
    afe6:	80 93 85 01 	sts	0x0185, r24
		FCLK_FAST();
    afea:	80 e5       	ldi	r24, 0x50	; 80
    afec:	8c bd       	out	0x2c, r24	; 44
    afee:	09 c0       	rjmp	.+18     	; 0xb002 <disk_initialize+0x19e>


static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
    aff0:	1c bc       	out	0x2c, r1	; 44
	DDRB  = 0b11000000;		/* Disable drivers */
    aff2:	80 ec       	ldi	r24, 0xC0	; 192
    aff4:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000000;
    aff6:	15 b8       	out	0x05, r1	; 5

	// PORTE |=  0x80;			/* Socket power off comented out June23*/
	Stat |= STA_NOINIT;
    aff8:	80 91 85 01 	lds	r24, 0x0185
    affc:	81 60       	ori	r24, 0x01	; 1
    affe:	80 93 85 01 	sts	0x0185, r24
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    b002:	80 91 85 01 	lds	r24, 0x0185
}
    b006:	0f 90       	pop	r0
    b008:	0f 90       	pop	r0
    b00a:	0f 90       	pop	r0
    b00c:	0f 90       	pop	r0
    b00e:	cf 91       	pop	r28
    b010:	df 91       	pop	r29
    b012:	1f 91       	pop	r17
    b014:	0f 91       	pop	r16
    b016:	ff 90       	pop	r15
    b018:	ef 90       	pop	r14
    b01a:	08 95       	ret

0000b01c <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    b01c:	88 23       	and	r24, r24
    b01e:	11 f0       	breq	.+4      	; 0xb024 <disk_status+0x8>
    b020:	81 e0       	ldi	r24, 0x01	; 1
    b022:	08 95       	ret
	return Stat;
    b024:	80 91 85 01 	lds	r24, 0x0185
}
    b028:	08 95       	ret

0000b02a <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    b02a:	0f 93       	push	r16
    b02c:	cf 93       	push	r28
    b02e:	df 93       	push	r29
    b030:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
    b032:	88 23       	and	r24, r24
    b034:	09 f0       	breq	.+2      	; 0xb038 <disk_read+0xe>
    b036:	4c c0       	rjmp	.+152    	; 0xb0d0 <disk_read+0xa6>
    b038:	00 23       	and	r16, r16
    b03a:	09 f4       	brne	.+2      	; 0xb03e <disk_read+0x14>
    b03c:	49 c0       	rjmp	.+146    	; 0xb0d0 <disk_read+0xa6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    b03e:	80 91 85 01 	lds	r24, 0x0185
    b042:	80 ff       	sbrs	r24, 0
    b044:	02 c0       	rjmp	.+4      	; 0xb04a <disk_read+0x20>
    b046:	03 e0       	ldi	r16, 0x03	; 3
    b048:	44 c0       	rjmp	.+136    	; 0xb0d2 <disk_read+0xa8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    b04a:	80 91 93 02 	lds	r24, 0x0293
    b04e:	83 fd       	sbrc	r24, 3
    b050:	07 c0       	rjmp	.+14     	; 0xb060 <disk_read+0x36>
    b052:	69 e0       	ldi	r22, 0x09	; 9
    b054:	22 0f       	add	r18, r18
    b056:	33 1f       	adc	r19, r19
    b058:	44 1f       	adc	r20, r20
    b05a:	55 1f       	adc	r21, r21
    b05c:	6a 95       	dec	r22
    b05e:	d1 f7       	brne	.-12     	; 0xb054 <disk_read+0x2a>

	if (count == 1) {	/* Single block read */
    b060:	01 30       	cpi	r16, 0x01	; 1
    b062:	89 f4       	brne	.+34     	; 0xb086 <disk_read+0x5c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    b064:	81 e1       	ldi	r24, 0x11	; 17
    b066:	ba 01       	movw	r22, r20
    b068:	a9 01       	movw	r20, r18
    b06a:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
    b06e:	88 23       	and	r24, r24
    b070:	21 f5       	brne	.+72     	; 0xb0ba <disk_read+0x90>
    b072:	ce 01       	movw	r24, r28
    b074:	60 e0       	ldi	r22, 0x00	; 0
    b076:	72 e0       	ldi	r23, 0x02	; 2
    b078:	0e 94 40 56 	call	0xac80	; 0xac80 <rcvr_datablock>
    b07c:	00 e0       	ldi	r16, 0x00	; 0
    b07e:	89 2b       	or	r24, r25
    b080:	e1 f4       	brne	.+56     	; 0xb0ba <disk_read+0x90>
    b082:	01 e0       	ldi	r16, 0x01	; 1
    b084:	1a c0       	rjmp	.+52     	; 0xb0ba <disk_read+0x90>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    b086:	82 e1       	ldi	r24, 0x12	; 18
    b088:	ba 01       	movw	r22, r20
    b08a:	a9 01       	movw	r20, r18
    b08c:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
    b090:	88 23       	and	r24, r24
    b092:	99 f4       	brne	.+38     	; 0xb0ba <disk_read+0x90>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    b094:	ce 01       	movw	r24, r28
    b096:	60 e0       	ldi	r22, 0x00	; 0
    b098:	72 e0       	ldi	r23, 0x02	; 2
    b09a:	0e 94 40 56 	call	0xac80	; 0xac80 <rcvr_datablock>
    b09e:	89 2b       	or	r24, r25
    b0a0:	29 f0       	breq	.+10     	; 0xb0ac <disk_read+0x82>
				buff += 512;
			} while (--count);
    b0a2:	01 50       	subi	r16, 0x01	; 1
    b0a4:	19 f0       	breq	.+6      	; 0xb0ac <disk_read+0x82>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
    b0a6:	c0 50       	subi	r28, 0x00	; 0
    b0a8:	de 4f       	sbci	r29, 0xFE	; 254
    b0aa:	f4 cf       	rjmp	.-24     	; 0xb094 <disk_read+0x6a>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    b0ac:	8c e0       	ldi	r24, 0x0C	; 12
    b0ae:	40 e0       	ldi	r20, 0x00	; 0
    b0b0:	50 e0       	ldi	r21, 0x00	; 0
    b0b2:	60 e0       	ldi	r22, 0x00	; 0
    b0b4:	70 e0       	ldi	r23, 0x00	; 0
    b0b6:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    b0ba:	2a 9a       	sbi	0x05, 2	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    b0bc:	8f ef       	ldi	r24, 0xFF	; 255
    b0be:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    b0c0:	0d b4       	in	r0, 0x2d	; 45
    b0c2:	07 fe       	sbrs	r0, 7
    b0c4:	fd cf       	rjmp	.-6      	; 0xb0c0 <disk_read+0x96>
	return SPDR;
    b0c6:	8e b5       	in	r24, 0x2e	; 46
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
    b0c8:	00 23       	and	r16, r16
    b0ca:	19 f0       	breq	.+6      	; 0xb0d2 <disk_read+0xa8>
    b0cc:	01 e0       	ldi	r16, 0x01	; 1
    b0ce:	01 c0       	rjmp	.+2      	; 0xb0d2 <disk_read+0xa8>
    b0d0:	04 e0       	ldi	r16, 0x04	; 4
}
    b0d2:	80 2f       	mov	r24, r16
    b0d4:	df 91       	pop	r29
    b0d6:	cf 91       	pop	r28
    b0d8:	0f 91       	pop	r16
    b0da:	08 95       	ret

0000b0dc <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    b0dc:	cf 92       	push	r12
    b0de:	df 92       	push	r13
    b0e0:	ef 92       	push	r14
    b0e2:	ff 92       	push	r15
    b0e4:	0f 93       	push	r16
    b0e6:	cf 93       	push	r28
    b0e8:	df 93       	push	r29
    b0ea:	eb 01       	movw	r28, r22
    b0ec:	69 01       	movw	r12, r18
    b0ee:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
    b0f0:	88 23       	and	r24, r24
    b0f2:	09 f0       	breq	.+2      	; 0xb0f6 <disk_write+0x1a>
    b0f4:	5a c0       	rjmp	.+180    	; 0xb1aa <disk_write+0xce>
    b0f6:	00 23       	and	r16, r16
    b0f8:	09 f4       	brne	.+2      	; 0xb0fc <disk_write+0x20>
    b0fa:	57 c0       	rjmp	.+174    	; 0xb1aa <disk_write+0xce>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    b0fc:	80 91 85 01 	lds	r24, 0x0185
    b100:	80 ff       	sbrs	r24, 0
    b102:	02 c0       	rjmp	.+4      	; 0xb108 <disk_write+0x2c>
    b104:	03 e0       	ldi	r16, 0x03	; 3
    b106:	52 c0       	rjmp	.+164    	; 0xb1ac <disk_write+0xd0>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    b108:	80 91 85 01 	lds	r24, 0x0185
    b10c:	82 ff       	sbrs	r24, 2
    b10e:	02 c0       	rjmp	.+4      	; 0xb114 <disk_write+0x38>
    b110:	02 e0       	ldi	r16, 0x02	; 2
    b112:	4c c0       	rjmp	.+152    	; 0xb1ac <disk_write+0xd0>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    b114:	80 91 93 02 	lds	r24, 0x0293
    b118:	90 e0       	ldi	r25, 0x00	; 0
    b11a:	83 fd       	sbrc	r24, 3
    b11c:	07 c0       	rjmp	.+14     	; 0xb12c <disk_write+0x50>
    b11e:	79 e0       	ldi	r23, 0x09	; 9
    b120:	cc 0c       	add	r12, r12
    b122:	dd 1c       	adc	r13, r13
    b124:	ee 1c       	adc	r14, r14
    b126:	ff 1c       	adc	r15, r15
    b128:	7a 95       	dec	r23
    b12a:	d1 f7       	brne	.-12     	; 0xb120 <disk_write+0x44>

	if (count == 1) {	/* Single block write */
    b12c:	01 30       	cpi	r16, 0x01	; 1
    b12e:	69 f4       	brne	.+26     	; 0xb14a <disk_write+0x6e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    b130:	88 e1       	ldi	r24, 0x18	; 24
    b132:	b7 01       	movw	r22, r14
    b134:	a6 01       	movw	r20, r12
    b136:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
    b13a:	88 23       	and	r24, r24
    b13c:	59 f5       	brne	.+86     	; 0xb194 <disk_write+0xb8>
    b13e:	ce 01       	movw	r24, r28
    b140:	6e ef       	ldi	r22, 0xFE	; 254
    b142:	0e 94 84 56 	call	0xad08	; 0xad08 <xmit_datablock>
    b146:	00 e0       	ldi	r16, 0x00	; 0
    b148:	22 c0       	rjmp	.+68     	; 0xb18e <disk_write+0xb2>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    b14a:	86 70       	andi	r24, 0x06	; 6
    b14c:	90 70       	andi	r25, 0x00	; 0
    b14e:	89 2b       	or	r24, r25
    b150:	39 f0       	breq	.+14     	; 0xb160 <disk_write+0x84>
    b152:	40 2f       	mov	r20, r16
    b154:	50 e0       	ldi	r21, 0x00	; 0
    b156:	60 e0       	ldi	r22, 0x00	; 0
    b158:	70 e0       	ldi	r23, 0x00	; 0
    b15a:	87 e9       	ldi	r24, 0x97	; 151
    b15c:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    b160:	89 e1       	ldi	r24, 0x19	; 25
    b162:	b7 01       	movw	r22, r14
    b164:	a6 01       	movw	r20, r12
    b166:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
    b16a:	88 23       	and	r24, r24
    b16c:	99 f4       	brne	.+38     	; 0xb194 <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    b16e:	ce 01       	movw	r24, r28
    b170:	6c ef       	ldi	r22, 0xFC	; 252
    b172:	0e 94 84 56 	call	0xad08	; 0xad08 <xmit_datablock>
    b176:	89 2b       	or	r24, r25
    b178:	29 f0       	breq	.+10     	; 0xb184 <disk_write+0xa8>
				buff += 512;
			} while (--count);
    b17a:	01 50       	subi	r16, 0x01	; 1
    b17c:	19 f0       	breq	.+6      	; 0xb184 <disk_write+0xa8>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
    b17e:	c0 50       	subi	r28, 0x00	; 0
    b180:	de 4f       	sbci	r29, 0xFE	; 254
    b182:	f5 cf       	rjmp	.-22     	; 0xb16e <disk_write+0x92>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    b184:	80 e0       	ldi	r24, 0x00	; 0
    b186:	90 e0       	ldi	r25, 0x00	; 0
    b188:	6d ef       	ldi	r22, 0xFD	; 253
    b18a:	0e 94 84 56 	call	0xad08	; 0xad08 <xmit_datablock>
    b18e:	89 2b       	or	r24, r25
    b190:	09 f4       	brne	.+2      	; 0xb194 <disk_write+0xb8>
    b192:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    b194:	2a 9a       	sbi	0x05, 2	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    b196:	8f ef       	ldi	r24, 0xFF	; 255
    b198:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    b19a:	0d b4       	in	r0, 0x2d	; 45
    b19c:	07 fe       	sbrs	r0, 7
    b19e:	fd cf       	rjmp	.-6      	; 0xb19a <disk_write+0xbe>
	return SPDR;
    b1a0:	8e b5       	in	r24, 0x2e	; 46
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
    b1a2:	00 23       	and	r16, r16
    b1a4:	19 f0       	breq	.+6      	; 0xb1ac <disk_write+0xd0>
    b1a6:	01 e0       	ldi	r16, 0x01	; 1
    b1a8:	01 c0       	rjmp	.+2      	; 0xb1ac <disk_write+0xd0>
    b1aa:	04 e0       	ldi	r16, 0x04	; 4
}
    b1ac:	80 2f       	mov	r24, r16
    b1ae:	df 91       	pop	r29
    b1b0:	cf 91       	pop	r28
    b1b2:	0f 91       	pop	r16
    b1b4:	ff 90       	pop	r15
    b1b6:	ef 90       	pop	r14
    b1b8:	df 90       	pop	r13
    b1ba:	cf 90       	pop	r12
    b1bc:	08 95       	ret

0000b1be <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    b1be:	ff 92       	push	r15
    b1c0:	0f 93       	push	r16
    b1c2:	1f 93       	push	r17
    b1c4:	df 93       	push	r29
    b1c6:	cf 93       	push	r28
    b1c8:	cd b7       	in	r28, 0x3d	; 61
    b1ca:	de b7       	in	r29, 0x3e	; 62
    b1cc:	60 97       	sbiw	r28, 0x10	; 16
    b1ce:	0f b6       	in	r0, 0x3f	; 63
    b1d0:	f8 94       	cli
    b1d2:	de bf       	out	0x3e, r29	; 62
    b1d4:	0f be       	out	0x3f, r0	; 63
    b1d6:	cd bf       	out	0x3d, r28	; 61
    b1d8:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    b1da:	88 23       	and	r24, r24
    b1dc:	09 f0       	breq	.+2      	; 0xb1e0 <disk_ioctl+0x22>
    b1de:	93 c1       	rjmp	.+806    	; 0xb506 <disk_ioctl+0x348>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
    b1e0:	65 30       	cpi	r22, 0x05	; 5
    b1e2:	b1 f4       	brne	.+44     	; 0xb210 <disk_ioctl+0x52>
		switch (ptr[0]) {
    b1e4:	fa 01       	movw	r30, r20
    b1e6:	80 81       	ld	r24, Z
    b1e8:	88 23       	and	r24, r24
    b1ea:	21 f0       	breq	.+8      	; 0xb1f4 <disk_ioctl+0x36>
    b1ec:	81 30       	cpi	r24, 0x01	; 1
    b1ee:	09 f0       	breq	.+2      	; 0xb1f2 <disk_ioctl+0x34>
    b1f0:	8a c1       	rjmp	.+788    	; 0xb506 <disk_ioctl+0x348>
    b1f2:	0a c0       	rjmp	.+20     	; 0xb208 <disk_ioctl+0x4a>


static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
    b1f4:	1c bc       	out	0x2c, r1	; 44
	DDRB  = 0b11000000;		/* Disable drivers */
    b1f6:	80 ec       	ldi	r24, 0xC0	; 192
    b1f8:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000000;
    b1fa:	15 b8       	out	0x05, r1	; 5

	// PORTE |=  0x80;			/* Socket power off comented out June23*/
	Stat |= STA_NOINIT;
    b1fc:	80 91 85 01 	lds	r24, 0x0185
    b200:	81 60       	ori	r24, 0x01	; 1
    b202:	80 93 85 01 	sts	0x0185, r24
    b206:	02 c0       	rjmp	.+4      	; 0xb20c <disk_ioctl+0x4e>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
			res = RES_OK;
			break;
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
    b208:	fa 01       	movw	r30, r20
    b20a:	81 83       	std	Z+1, r24	; 0x01
    b20c:	20 e0       	ldi	r18, 0x00	; 0
    b20e:	7c c1       	rjmp	.+760    	; 0xb508 <disk_ioctl+0x34a>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    b210:	80 91 85 01 	lds	r24, 0x0185
    b214:	80 ff       	sbrs	r24, 0
    b216:	02 c0       	rjmp	.+4      	; 0xb21c <disk_ioctl+0x5e>
    b218:	23 e0       	ldi	r18, 0x03	; 3
    b21a:	76 c1       	rjmp	.+748    	; 0xb508 <disk_ioctl+0x34a>

		switch (ctrl) {
    b21c:	6a 30       	cpi	r22, 0x0A	; 10
    b21e:	09 f4       	brne	.+2      	; 0xb222 <disk_ioctl+0x64>
    b220:	25 c1       	rjmp	.+586    	; 0xb46c <disk_ioctl+0x2ae>
    b222:	6b 30       	cpi	r22, 0x0B	; 11
    b224:	50 f4       	brcc	.+20     	; 0xb23a <disk_ioctl+0x7c>
    b226:	61 30       	cpi	r22, 0x01	; 1
    b228:	19 f1       	breq	.+70     	; 0xb270 <disk_ioctl+0xb2>
    b22a:	61 30       	cpi	r22, 0x01	; 1
    b22c:	a0 f0       	brcs	.+40     	; 0xb256 <disk_ioctl+0x98>
    b22e:	62 30       	cpi	r22, 0x02	; 2
    b230:	09 f4       	brne	.+2      	; 0xb234 <disk_ioctl+0x76>
    b232:	84 c0       	rjmp	.+264    	; 0xb33c <disk_ioctl+0x17e>
    b234:	63 30       	cpi	r22, 0x03	; 3
    b236:	69 f4       	brne	.+26     	; 0xb252 <disk_ioctl+0x94>
    b238:	87 c0       	rjmp	.+270    	; 0xb348 <disk_ioctl+0x18a>
    b23a:	6c 30       	cpi	r22, 0x0C	; 12
    b23c:	09 f4       	brne	.+2      	; 0xb240 <disk_ioctl+0x82>
    b23e:	1d c1       	rjmp	.+570    	; 0xb47a <disk_ioctl+0x2bc>
    b240:	6c 30       	cpi	r22, 0x0C	; 12
    b242:	08 f4       	brcc	.+2      	; 0xb246 <disk_ioctl+0x88>
    b244:	18 c1       	rjmp	.+560    	; 0xb476 <disk_ioctl+0x2b8>
    b246:	6d 30       	cpi	r22, 0x0D	; 13
    b248:	09 f4       	brne	.+2      	; 0xb24c <disk_ioctl+0x8e>
    b24a:	24 c1       	rjmp	.+584    	; 0xb494 <disk_ioctl+0x2d6>
    b24c:	6e 30       	cpi	r22, 0x0E	; 14
    b24e:	09 f4       	brne	.+2      	; 0xb252 <disk_ioctl+0x94>
    b250:	3a c1       	rjmp	.+628    	; 0xb4c6 <disk_ioctl+0x308>
    b252:	24 e0       	ldi	r18, 0x04	; 4
    b254:	50 c1       	rjmp	.+672    	; 0xb4f6 <disk_ioctl+0x338>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
    b256:	0e 94 2d 56 	call	0xac5a	; 0xac5a <select>
    b25a:	89 2b       	or	r24, r25
    b25c:	09 f4       	brne	.+2      	; 0xb260 <disk_ioctl+0xa2>
    b25e:	4a c1       	rjmp	.+660    	; 0xb4f4 <disk_ioctl+0x336>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    b260:	2a 9a       	sbi	0x05, 2	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    b262:	8f ef       	ldi	r24, 0xFF	; 255
    b264:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    b266:	0d b4       	in	r0, 0x2d	; 45
    b268:	07 fe       	sbrs	r0, 7
    b26a:	fd cf       	rjmp	.-6      	; 0xb266 <disk_ioctl+0xa8>
	return SPDR;
    b26c:	8e b5       	in	r24, 0x2e	; 46
    b26e:	fc c0       	rjmp	.+504    	; 0xb468 <disk_ioctl+0x2aa>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    b270:	89 e0       	ldi	r24, 0x09	; 9
    b272:	40 e0       	ldi	r20, 0x00	; 0
    b274:	50 e0       	ldi	r21, 0x00	; 0
    b276:	60 e0       	ldi	r22, 0x00	; 0
    b278:	70 e0       	ldi	r23, 0x00	; 0
    b27a:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
    b27e:	88 23       	and	r24, r24
    b280:	09 f0       	breq	.+2      	; 0xb284 <disk_ioctl+0xc6>
    b282:	38 c1       	rjmp	.+624    	; 0xb4f4 <disk_ioctl+0x336>
    b284:	ce 01       	movw	r24, r28
    b286:	01 96       	adiw	r24, 0x01	; 1
    b288:	60 e1       	ldi	r22, 0x10	; 16
    b28a:	70 e0       	ldi	r23, 0x00	; 0
    b28c:	0e 94 40 56 	call	0xac80	; 0xac80 <rcvr_datablock>
    b290:	89 2b       	or	r24, r25
    b292:	09 f4       	brne	.+2      	; 0xb296 <disk_ioctl+0xd8>
    b294:	2f c1       	rjmp	.+606    	; 0xb4f4 <disk_ioctl+0x336>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    b296:	89 81       	ldd	r24, Y+1	; 0x01
    b298:	82 95       	swap	r24
    b29a:	86 95       	lsr	r24
    b29c:	86 95       	lsr	r24
    b29e:	83 70       	andi	r24, 0x03	; 3
    b2a0:	7a 85       	ldd	r23, Y+10	; 0x0a
    b2a2:	49 85       	ldd	r20, Y+9	; 0x09
    b2a4:	81 30       	cpi	r24, 0x01	; 1
    b2a6:	b1 f4       	brne	.+44     	; 0xb2d4 <disk_ioctl+0x116>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
    b2a8:	87 2f       	mov	r24, r23
    b2aa:	90 e0       	ldi	r25, 0x00	; 0
    b2ac:	01 96       	adiw	r24, 0x01	; 1
    b2ae:	34 2f       	mov	r19, r20
    b2b0:	20 e0       	ldi	r18, 0x00	; 0
    b2b2:	82 0f       	add	r24, r18
    b2b4:	93 1f       	adc	r25, r19
    b2b6:	a0 e0       	ldi	r26, 0x00	; 0
    b2b8:	b0 e0       	ldi	r27, 0x00	; 0
    b2ba:	3a e0       	ldi	r19, 0x0A	; 10
    b2bc:	88 0f       	add	r24, r24
    b2be:	99 1f       	adc	r25, r25
    b2c0:	aa 1f       	adc	r26, r26
    b2c2:	bb 1f       	adc	r27, r27
    b2c4:	3a 95       	dec	r19
    b2c6:	d1 f7       	brne	.-12     	; 0xb2bc <disk_ioctl+0xfe>
    b2c8:	f8 01       	movw	r30, r16
    b2ca:	80 83       	st	Z, r24
    b2cc:	91 83       	std	Z+1, r25	; 0x01
    b2ce:	a2 83       	std	Z+2, r26	; 0x02
    b2d0:	b3 83       	std	Z+3, r27	; 0x03
    b2d2:	11 c1       	rjmp	.+546    	; 0xb4f6 <disk_ioctl+0x338>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    b2d4:	42 95       	swap	r20
    b2d6:	46 95       	lsr	r20
    b2d8:	46 95       	lsr	r20
    b2da:	43 70       	andi	r20, 0x03	; 3
    b2dc:	28 85       	ldd	r18, Y+8	; 0x08
    b2de:	30 e0       	ldi	r19, 0x00	; 0
    b2e0:	22 0f       	add	r18, r18
    b2e2:	33 1f       	adc	r19, r19
    b2e4:	22 0f       	add	r18, r18
    b2e6:	33 1f       	adc	r19, r19
    b2e8:	24 0f       	add	r18, r20
    b2ea:	31 1d       	adc	r19, r1
    b2ec:	2f 5f       	subi	r18, 0xFF	; 255
    b2ee:	3f 4f       	sbci	r19, 0xFF	; 255
    b2f0:	8f 81       	ldd	r24, Y+7	; 0x07
    b2f2:	90 e0       	ldi	r25, 0x00	; 0
    b2f4:	83 70       	andi	r24, 0x03	; 3
    b2f6:	90 70       	andi	r25, 0x00	; 0
    b2f8:	98 2f       	mov	r25, r24
    b2fa:	88 27       	eor	r24, r24
    b2fc:	99 0f       	add	r25, r25
    b2fe:	99 0f       	add	r25, r25
    b300:	28 0f       	add	r18, r24
    b302:	39 1f       	adc	r19, r25
    b304:	40 e0       	ldi	r20, 0x00	; 0
    b306:	50 e0       	ldi	r21, 0x00	; 0
    b308:	8e 81       	ldd	r24, Y+6	; 0x06
    b30a:	8f 70       	andi	r24, 0x0F	; 15
    b30c:	6b 85       	ldd	r22, Y+11	; 0x0b
    b30e:	66 1f       	adc	r22, r22
    b310:	66 27       	eor	r22, r22
    b312:	66 1f       	adc	r22, r22
    b314:	86 0f       	add	r24, r22
    b316:	8e 5f       	subi	r24, 0xFE	; 254
    b318:	73 70       	andi	r23, 0x03	; 3
    b31a:	77 0f       	add	r23, r23
    b31c:	87 0f       	add	r24, r23
    b31e:	90 e0       	ldi	r25, 0x00	; 0
    b320:	09 97       	sbiw	r24, 0x09	; 9
    b322:	04 c0       	rjmp	.+8      	; 0xb32c <disk_ioctl+0x16e>
    b324:	22 0f       	add	r18, r18
    b326:	33 1f       	adc	r19, r19
    b328:	44 1f       	adc	r20, r20
    b32a:	55 1f       	adc	r21, r21
    b32c:	8a 95       	dec	r24
    b32e:	d2 f7       	brpl	.-12     	; 0xb324 <disk_ioctl+0x166>
    b330:	f8 01       	movw	r30, r16
    b332:	20 83       	st	Z, r18
    b334:	31 83       	std	Z+1, r19	; 0x01
    b336:	42 83       	std	Z+2, r20	; 0x02
    b338:	53 83       	std	Z+3, r21	; 0x03
    b33a:	96 c0       	rjmp	.+300    	; 0xb468 <disk_ioctl+0x2aa>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    b33c:	80 e0       	ldi	r24, 0x00	; 0
    b33e:	92 e0       	ldi	r25, 0x02	; 2
    b340:	fa 01       	movw	r30, r20
    b342:	91 83       	std	Z+1, r25	; 0x01
    b344:	80 83       	st	Z, r24
    b346:	90 c0       	rjmp	.+288    	; 0xb468 <disk_ioctl+0x2aa>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
    b348:	80 91 93 02 	lds	r24, 0x0293
    b34c:	f8 2e       	mov	r15, r24
    b34e:	82 ff       	sbrs	r24, 2
    b350:	31 c0       	rjmp	.+98     	; 0xb3b4 <disk_ioctl+0x1f6>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    b352:	8d e8       	ldi	r24, 0x8D	; 141
    b354:	40 e0       	ldi	r20, 0x00	; 0
    b356:	50 e0       	ldi	r21, 0x00	; 0
    b358:	60 e0       	ldi	r22, 0x00	; 0
    b35a:	70 e0       	ldi	r23, 0x00	; 0
    b35c:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
    b360:	88 23       	and	r24, r24
    b362:	09 f0       	breq	.+2      	; 0xb366 <disk_ioctl+0x1a8>
    b364:	c7 c0       	rjmp	.+398    	; 0xb4f4 <disk_ioctl+0x336>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    b366:	8f ef       	ldi	r24, 0xFF	; 255
    b368:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    b36a:	0d b4       	in	r0, 0x2d	; 45
    b36c:	07 fe       	sbrs	r0, 7
    b36e:	fd cf       	rjmp	.-6      	; 0xb36a <disk_ioctl+0x1ac>
	return SPDR;
    b370:	8e b5       	in	r24, 0x2e	; 46

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    b372:	ce 01       	movw	r24, r28
    b374:	01 96       	adiw	r24, 0x01	; 1
    b376:	60 e1       	ldi	r22, 0x10	; 16
    b378:	70 e0       	ldi	r23, 0x00	; 0
    b37a:	0e 94 40 56 	call	0xac80	; 0xac80 <rcvr_datablock>
    b37e:	89 2b       	or	r24, r25
    b380:	09 f4       	brne	.+2      	; 0xb384 <disk_ioctl+0x1c6>
    b382:	b8 c0       	rjmp	.+368    	; 0xb4f4 <disk_ioctl+0x336>
    b384:	80 e3       	ldi	r24, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    b386:	9f ef       	ldi	r25, 0xFF	; 255
    b388:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    b38a:	0d b4       	in	r0, 0x2d	; 45
    b38c:	07 fe       	sbrs	r0, 7
    b38e:	fd cf       	rjmp	.-6      	; 0xb38a <disk_ioctl+0x1cc>
	return SPDR;
    b390:	2e b5       	in	r18, 0x2e	; 46
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    b392:	81 50       	subi	r24, 0x01	; 1
    b394:	c9 f7       	brne	.-14     	; 0xb388 <disk_ioctl+0x1ca>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    b396:	2b 85       	ldd	r18, Y+11	; 0x0b
    b398:	22 95       	swap	r18
    b39a:	2f 70       	andi	r18, 0x0F	; 15
    b39c:	80 e1       	ldi	r24, 0x10	; 16
    b39e:	90 e0       	ldi	r25, 0x00	; 0
    b3a0:	a0 e0       	ldi	r26, 0x00	; 0
    b3a2:	b0 e0       	ldi	r27, 0x00	; 0
    b3a4:	04 c0       	rjmp	.+8      	; 0xb3ae <disk_ioctl+0x1f0>
    b3a6:	88 0f       	add	r24, r24
    b3a8:	99 1f       	adc	r25, r25
    b3aa:	aa 1f       	adc	r26, r26
    b3ac:	bb 1f       	adc	r27, r27
    b3ae:	2a 95       	dec	r18
    b3b0:	d2 f7       	brpl	.-12     	; 0xb3a6 <disk_ioctl+0x1e8>
    b3b2:	55 c0       	rjmp	.+170    	; 0xb45e <disk_ioctl+0x2a0>
						res = RES_OK;
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    b3b4:	89 e0       	ldi	r24, 0x09	; 9
    b3b6:	40 e0       	ldi	r20, 0x00	; 0
    b3b8:	50 e0       	ldi	r21, 0x00	; 0
    b3ba:	60 e0       	ldi	r22, 0x00	; 0
    b3bc:	70 e0       	ldi	r23, 0x00	; 0
    b3be:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
    b3c2:	88 23       	and	r24, r24
    b3c4:	09 f0       	breq	.+2      	; 0xb3c8 <disk_ioctl+0x20a>
    b3c6:	96 c0       	rjmp	.+300    	; 0xb4f4 <disk_ioctl+0x336>
    b3c8:	ce 01       	movw	r24, r28
    b3ca:	01 96       	adiw	r24, 0x01	; 1
    b3cc:	60 e1       	ldi	r22, 0x10	; 16
    b3ce:	70 e0       	ldi	r23, 0x00	; 0
    b3d0:	0e 94 40 56 	call	0xac80	; 0xac80 <rcvr_datablock>
    b3d4:	89 2b       	or	r24, r25
    b3d6:	09 f4       	brne	.+2      	; 0xb3da <disk_ioctl+0x21c>
    b3d8:	8d c0       	rjmp	.+282    	; 0xb4f4 <disk_ioctl+0x336>
    b3da:	4b 85       	ldd	r20, Y+11	; 0x0b
    b3dc:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDv1 */
    b3de:	f1 fe       	sbrs	r15, 1
    b3e0:	1b c0       	rjmp	.+54     	; 0xb418 <disk_ioctl+0x25a>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    b3e2:	88 1f       	adc	r24, r24
    b3e4:	88 27       	eor	r24, r24
    b3e6:	88 1f       	adc	r24, r24
    b3e8:	90 e0       	ldi	r25, 0x00	; 0
    b3ea:	01 96       	adiw	r24, 0x01	; 1
    b3ec:	24 2f       	mov	r18, r20
    b3ee:	30 e0       	ldi	r19, 0x00	; 0
    b3f0:	2f 73       	andi	r18, 0x3F	; 63
    b3f2:	30 70       	andi	r19, 0x00	; 0
    b3f4:	22 0f       	add	r18, r18
    b3f6:	33 1f       	adc	r19, r19
    b3f8:	82 0f       	add	r24, r18
    b3fa:	93 1f       	adc	r25, r19
    b3fc:	2e 85       	ldd	r18, Y+14	; 0x0e
    b3fe:	22 95       	swap	r18
    b400:	26 95       	lsr	r18
    b402:	26 95       	lsr	r18
    b404:	23 70       	andi	r18, 0x03	; 3
    b406:	30 e0       	ldi	r19, 0x00	; 0
    b408:	21 50       	subi	r18, 0x01	; 1
    b40a:	30 40       	sbci	r19, 0x00	; 0
    b40c:	02 c0       	rjmp	.+4      	; 0xb412 <disk_ioctl+0x254>
    b40e:	88 0f       	add	r24, r24
    b410:	99 1f       	adc	r25, r25
    b412:	2a 95       	dec	r18
    b414:	e2 f7       	brpl	.-8      	; 0xb40e <disk_ioctl+0x250>
    b416:	21 c0       	rjmp	.+66     	; 0xb45a <disk_ioctl+0x29c>
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    b418:	28 2f       	mov	r18, r24
    b41a:	30 e0       	ldi	r19, 0x00	; 0
    b41c:	23 70       	andi	r18, 0x03	; 3
    b41e:	30 70       	andi	r19, 0x00	; 0
    b420:	f3 e0       	ldi	r31, 0x03	; 3
    b422:	22 0f       	add	r18, r18
    b424:	33 1f       	adc	r19, r19
    b426:	fa 95       	dec	r31
    b428:	e1 f7       	brne	.-8      	; 0xb422 <disk_ioctl+0x264>
    b42a:	82 95       	swap	r24
    b42c:	86 95       	lsr	r24
    b42e:	87 70       	andi	r24, 0x07	; 7
    b430:	28 0f       	add	r18, r24
    b432:	31 1d       	adc	r19, r1
    b434:	2f 5f       	subi	r18, 0xFF	; 255
    b436:	3f 4f       	sbci	r19, 0xFF	; 255
    b438:	84 2f       	mov	r24, r20
    b43a:	90 e0       	ldi	r25, 0x00	; 0
    b43c:	8c 77       	andi	r24, 0x7C	; 124
    b43e:	90 70       	andi	r25, 0x00	; 0
    b440:	95 95       	asr	r25
    b442:	87 95       	ror	r24
    b444:	95 95       	asr	r25
    b446:	87 95       	ror	r24
    b448:	01 96       	adiw	r24, 0x01	; 1
    b44a:	ac 01       	movw	r20, r24
    b44c:	24 9f       	mul	r18, r20
    b44e:	c0 01       	movw	r24, r0
    b450:	25 9f       	mul	r18, r21
    b452:	90 0d       	add	r25, r0
    b454:	34 9f       	mul	r19, r20
    b456:	90 0d       	add	r25, r0
    b458:	11 24       	eor	r1, r1
    b45a:	a0 e0       	ldi	r26, 0x00	; 0
    b45c:	b0 e0       	ldi	r27, 0x00	; 0
    b45e:	f8 01       	movw	r30, r16
    b460:	80 83       	st	Z, r24
    b462:	91 83       	std	Z+1, r25	; 0x01
    b464:	a2 83       	std	Z+2, r26	; 0x02
    b466:	b3 83       	std	Z+3, r27	; 0x03
    b468:	20 e0       	ldi	r18, 0x00	; 0
    b46a:	45 c0       	rjmp	.+138    	; 0xb4f6 <disk_ioctl+0x338>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    b46c:	80 91 93 02 	lds	r24, 0x0293
    b470:	fa 01       	movw	r30, r20
    b472:	80 83       	st	Z, r24
    b474:	f9 cf       	rjmp	.-14     	; 0xb468 <disk_ioctl+0x2aa>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    b476:	89 e0       	ldi	r24, 0x09	; 9
    b478:	01 c0       	rjmp	.+2      	; 0xb47c <disk_ioctl+0x2be>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    b47a:	8a e0       	ldi	r24, 0x0A	; 10
    b47c:	40 e0       	ldi	r20, 0x00	; 0
    b47e:	50 e0       	ldi	r21, 0x00	; 0
    b480:	60 e0       	ldi	r22, 0x00	; 0
    b482:	70 e0       	ldi	r23, 0x00	; 0
    b484:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
    b488:	88 23       	and	r24, r24
    b48a:	a1 f5       	brne	.+104    	; 0xb4f4 <disk_ioctl+0x336>
    b48c:	c8 01       	movw	r24, r16
    b48e:	60 e1       	ldi	r22, 0x10	; 16
    b490:	70 e0       	ldi	r23, 0x00	; 0
    b492:	2b c0       	rjmp	.+86     	; 0xb4ea <disk_ioctl+0x32c>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    b494:	8a e3       	ldi	r24, 0x3A	; 58
    b496:	40 e0       	ldi	r20, 0x00	; 0
    b498:	50 e0       	ldi	r21, 0x00	; 0
    b49a:	60 e0       	ldi	r22, 0x00	; 0
    b49c:	70 e0       	ldi	r23, 0x00	; 0
    b49e:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
    b4a2:	88 23       	and	r24, r24
    b4a4:	39 f5       	brne	.+78     	; 0xb4f4 <disk_ioctl+0x336>
    b4a6:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    b4a8:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    b4aa:	98 01       	movw	r18, r16
    b4ac:	2d 5f       	subi	r18, 0xFD	; 253
    b4ae:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    b4b0:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    b4b2:	0d b4       	in	r0, 0x2d	; 45
    b4b4:	07 fe       	sbrs	r0, 7
    b4b6:	fd cf       	rjmp	.-6      	; 0xb4b2 <disk_ioctl+0x2f4>
	return SPDR;
    b4b8:	8e b5       	in	r24, 0x2e	; 46
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    b4ba:	80 83       	st	Z, r24
    b4bc:	e2 17       	cp	r30, r18
    b4be:	f3 07       	cpc	r31, r19
    b4c0:	99 f2       	breq	.-90     	; 0xb468 <disk_ioctl+0x2aa>
    b4c2:	31 96       	adiw	r30, 0x01	; 1
    b4c4:	f5 cf       	rjmp	.-22     	; 0xb4b0 <disk_ioctl+0x2f2>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    b4c6:	8d e8       	ldi	r24, 0x8D	; 141
    b4c8:	40 e0       	ldi	r20, 0x00	; 0
    b4ca:	50 e0       	ldi	r21, 0x00	; 0
    b4cc:	60 e0       	ldi	r22, 0x00	; 0
    b4ce:	70 e0       	ldi	r23, 0x00	; 0
    b4d0:	0e 94 c6 56 	call	0xad8c	; 0xad8c <send_cmd>
    b4d4:	88 23       	and	r24, r24
    b4d6:	71 f4       	brne	.+28     	; 0xb4f4 <disk_ioctl+0x336>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    b4d8:	8f ef       	ldi	r24, 0xFF	; 255
    b4da:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    b4dc:	0d b4       	in	r0, 0x2d	; 45
    b4de:	07 fe       	sbrs	r0, 7
    b4e0:	fd cf       	rjmp	.-6      	; 0xb4dc <disk_ioctl+0x31e>
	return SPDR;
    b4e2:	8e b5       	in	r24, 0x2e	; 46
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
    b4e4:	c8 01       	movw	r24, r16
    b4e6:	60 e4       	ldi	r22, 0x40	; 64
    b4e8:	70 e0       	ldi	r23, 0x00	; 0
    b4ea:	0e 94 40 56 	call	0xac80	; 0xac80 <rcvr_datablock>
    b4ee:	20 e0       	ldi	r18, 0x00	; 0
    b4f0:	89 2b       	or	r24, r25
    b4f2:	09 f4       	brne	.+2      	; 0xb4f6 <disk_ioctl+0x338>
    b4f4:	21 e0       	ldi	r18, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    b4f6:	2a 9a       	sbi	0x05, 2	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    b4f8:	8f ef       	ldi	r24, 0xFF	; 255
    b4fa:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    b4fc:	0d b4       	in	r0, 0x2d	; 45
    b4fe:	07 fe       	sbrs	r0, 7
    b500:	fd cf       	rjmp	.-6      	; 0xb4fc <disk_ioctl+0x33e>
	return SPDR;
    b502:	8e b5       	in	r24, 0x2e	; 46
    b504:	01 c0       	rjmp	.+2      	; 0xb508 <disk_ioctl+0x34a>
    b506:	24 e0       	ldi	r18, 0x04	; 4

		deselect();
	}

	return res;
}
    b508:	82 2f       	mov	r24, r18
    b50a:	60 96       	adiw	r28, 0x10	; 16
    b50c:	0f b6       	in	r0, 0x3f	; 63
    b50e:	f8 94       	cli
    b510:	de bf       	out	0x3e, r29	; 62
    b512:	0f be       	out	0x3f, r0	; 63
    b514:	cd bf       	out	0x3d, r28	; 61
    b516:	cf 91       	pop	r28
    b518:	df 91       	pop	r29
    b51a:	1f 91       	pop	r17
    b51c:	0f 91       	pop	r16
    b51e:	ff 90       	pop	r15
    b520:	08 95       	ret

0000b522 <disk_timerproc>:
{

	BYTE n;


	n = Timer1;						/* 100Hz decrement timer */
    b522:	80 91 91 02 	lds	r24, 0x0291
	if (n) Timer1 = --n;
    b526:	88 23       	and	r24, r24
    b528:	19 f0       	breq	.+6      	; 0xb530 <disk_timerproc+0xe>
    b52a:	81 50       	subi	r24, 0x01	; 1
    b52c:	80 93 91 02 	sts	0x0291, r24
	n = Timer2;
    b530:	80 91 92 02 	lds	r24, 0x0292
	if (n) Timer2 = --n;
    b534:	88 23       	and	r24, r24
    b536:	19 f0       	breq	.+6      	; 0xb53e <disk_timerproc+0x1c>
    b538:	81 50       	subi	r24, 0x01	; 1
    b53a:	80 93 92 02 	sts	0x0292, r24
    b53e:	08 95       	ret

0000b540 <uart_init>:

/* Initialize UART */

void uart_init()
{
	rxfifo.idx_r = 0;
    b540:	10 92 d8 02 	sts	0x02D8, r1
	rxfifo.idx_w = 0;
    b544:	10 92 d7 02 	sts	0x02D7, r1
	rxfifo.count = 0;
    b548:	10 92 d9 02 	sts	0x02D9, r1
	txfifo.idx_r = 0;
    b54c:	10 92 95 02 	sts	0x0295, r1
	txfifo.idx_w = 0;
    b550:	10 92 94 02 	sts	0x0294, r1
	txfifo.count = 0;
    b554:	10 92 96 02 	sts	0x0296, r1
	
	DDRD = 0b11111110;
    b558:	8e ef       	ldi	r24, 0xFE	; 254
    b55a:	8a b9       	out	0x0a, r24	; 10

//	UBRR0L = SYSCLK/BAUD/16-1;
//	UCSR0B = _BV(RXEN0)|_BV(RXCIE0)|_BV(TXEN0);

UBRR0H = MYUBRR >> 8;
    b55c:	10 92 c5 00 	sts	0x00C5, r1
UBRR0L = MYUBRR;
    b560:	8c e0       	ldi	r24, 0x0C	; 12
    b562:	80 93 c4 00 	sts	0x00C4, r24
UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    b566:	88 e1       	ldi	r24, 0x18	; 24
    b568:	80 93 c1 00 	sts	0x00C1, r24

}
    b56c:	08 95       	ret

0000b56e <uart_test>:

/* Get a received character */

uint8_t uart_test ()
{
	return rxfifo.count;
    b56e:	80 91 d9 02 	lds	r24, 0x02D9
}
    b572:	08 95       	ret

0000b574 <uart_get>:
uint8_t uart_get ()
{
	uint8_t d, i;


	i = rxfifo.idx_r;
    b574:	90 91 d8 02 	lds	r25, 0x02D8
	while(rxfifo.count == 0);
    b578:	80 91 d9 02 	lds	r24, 0x02D9
    b57c:	88 23       	and	r24, r24
    b57e:	e1 f3       	breq	.-8      	; 0xb578 <uart_get+0x4>
	d = rxfifo.buff[i++];
    b580:	e9 2f       	mov	r30, r25
    b582:	f0 e0       	ldi	r31, 0x00	; 0
    b584:	e9 52       	subi	r30, 0x29	; 41
    b586:	fd 4f       	sbci	r31, 0xFD	; 253
    b588:	23 81       	ldd	r18, Z+3	; 0x03
    b58a:	e9 2f       	mov	r30, r25
    b58c:	ef 5f       	subi	r30, 0xFF	; 255
	cli();
    b58e:	f8 94       	cli
	rxfifo.count--;
    b590:	80 91 d9 02 	lds	r24, 0x02D9
    b594:	81 50       	subi	r24, 0x01	; 1
    b596:	80 93 d9 02 	sts	0x02D9, r24
	sei();
    b59a:	78 94       	sei
	if(i >= sizeof(rxfifo.buff))
    b59c:	e0 34       	cpi	r30, 0x40	; 64
    b59e:	08 f0       	brcs	.+2      	; 0xb5a2 <uart_get+0x2e>
    b5a0:	e0 e0       	ldi	r30, 0x00	; 0
		i = 0;
	rxfifo.idx_r = i;
    b5a2:	e0 93 d8 02 	sts	0x02D8, r30

	return d;
}
    b5a6:	82 2f       	mov	r24, r18
    b5a8:	08 95       	ret

0000b5aa <uart_put>:


/* Put a character to transmit */

void uart_put (uint8_t d)
{
    b5aa:	28 2f       	mov	r18, r24
	uint8_t i;


	i = txfifo.idx_w;
    b5ac:	90 91 94 02 	lds	r25, 0x0294
	while(txfifo.count >= sizeof(txfifo.buff));
    b5b0:	80 91 96 02 	lds	r24, 0x0296
    b5b4:	80 34       	cpi	r24, 0x40	; 64
    b5b6:	e0 f7       	brcc	.-8      	; 0xb5b0 <uart_put+0x6>
	txfifo.buff[i++] = d;
    b5b8:	e9 2f       	mov	r30, r25
    b5ba:	f0 e0       	ldi	r31, 0x00	; 0
    b5bc:	ec 56       	subi	r30, 0x6C	; 108
    b5be:	fd 4f       	sbci	r31, 0xFD	; 253
    b5c0:	23 83       	std	Z+3, r18	; 0x03
    b5c2:	e9 2f       	mov	r30, r25
    b5c4:	ef 5f       	subi	r30, 0xFF	; 255
	cli();
    b5c6:	f8 94       	cli
	txfifo.count++;
    b5c8:	80 91 96 02 	lds	r24, 0x0296
    b5cc:	8f 5f       	subi	r24, 0xFF	; 255
    b5ce:	80 93 96 02 	sts	0x0296, r24
	UCSR0B = _BV(RXEN0)|_BV(RXCIE0)|_BV(TXEN0)|_BV(UDRIE0);
    b5d2:	88 eb       	ldi	r24, 0xB8	; 184
    b5d4:	80 93 c1 00 	sts	0x00C1, r24
	sei();
    b5d8:	78 94       	sei
	if(i >= sizeof(txfifo.buff))
    b5da:	e0 34       	cpi	r30, 0x40	; 64
    b5dc:	08 f0       	brcs	.+2      	; 0xb5e0 <uart_put+0x36>
    b5de:	e0 e0       	ldi	r30, 0x00	; 0
		i = 0;
	txfifo.idx_w = i;
    b5e0:	e0 93 94 02 	sts	0x0294, r30
}
    b5e4:	08 95       	ret

0000b5e6 <__vector_18>:
/* UART RXC interrupt */

//SIGNAL(SIG_UART0_RECV)  *** Deprecated

ISR (USART_RX_vect)
{
    b5e6:	1f 92       	push	r1
    b5e8:	0f 92       	push	r0
    b5ea:	0f b6       	in	r0, 0x3f	; 63
    b5ec:	0f 92       	push	r0
    b5ee:	11 24       	eor	r1, r1
    b5f0:	8f 93       	push	r24
    b5f2:	9f 93       	push	r25
    b5f4:	ef 93       	push	r30
    b5f6:	ff 93       	push	r31
	uint8_t d, n, i;


	d = UDR0;
    b5f8:	90 91 c6 00 	lds	r25, 0x00C6
	n = rxfifo.count;
    b5fc:	80 91 d9 02 	lds	r24, 0x02D9
	if(n < sizeof(rxfifo.buff)) {
    b600:	80 34       	cpi	r24, 0x40	; 64
    b602:	80 f4       	brcc	.+32     	; 0xb624 <__vector_18+0x3e>
		rxfifo.count = ++n;
    b604:	8f 5f       	subi	r24, 0xFF	; 255
    b606:	80 93 d9 02 	sts	0x02D9, r24
		i = rxfifo.idx_w;
    b60a:	80 91 d7 02 	lds	r24, 0x02D7
		rxfifo.buff[i++] = d;
    b60e:	e8 2f       	mov	r30, r24
    b610:	f0 e0       	ldi	r31, 0x00	; 0
    b612:	e9 52       	subi	r30, 0x29	; 41
    b614:	fd 4f       	sbci	r31, 0xFD	; 253
    b616:	93 83       	std	Z+3, r25	; 0x03
    b618:	8f 5f       	subi	r24, 0xFF	; 255
		if(i >= sizeof(rxfifo.buff))
    b61a:	80 34       	cpi	r24, 0x40	; 64
    b61c:	08 f0       	brcs	.+2      	; 0xb620 <__vector_18+0x3a>
    b61e:	80 e0       	ldi	r24, 0x00	; 0
			i = 0;
		rxfifo.idx_w = i;
    b620:	80 93 d7 02 	sts	0x02D7, r24
	}
}
    b624:	ff 91       	pop	r31
    b626:	ef 91       	pop	r30
    b628:	9f 91       	pop	r25
    b62a:	8f 91       	pop	r24
    b62c:	0f 90       	pop	r0
    b62e:	0f be       	out	0x3f, r0	; 63
    b630:	0f 90       	pop	r0
    b632:	1f 90       	pop	r1
    b634:	18 95       	reti

0000b636 <__vector_19>:

// SIGNAL(SIG_UART0_DATA)   *** Deprecated


ISR (USART_UDRE_vect)
{
    b636:	1f 92       	push	r1
    b638:	0f 92       	push	r0
    b63a:	0f b6       	in	r0, 0x3f	; 63
    b63c:	0f 92       	push	r0
    b63e:	11 24       	eor	r1, r1
    b640:	2f 93       	push	r18
    b642:	8f 93       	push	r24
    b644:	9f 93       	push	r25
    b646:	ef 93       	push	r30
    b648:	ff 93       	push	r31
	uint8_t n, i;


	n = txfifo.count;
    b64a:	80 91 96 02 	lds	r24, 0x0296
	if(n) {
    b64e:	88 23       	and	r24, r24
    b650:	a9 f0       	breq	.+42     	; 0xb67c <__vector_19+0x46>
		txfifo.count = --n;
    b652:	28 2f       	mov	r18, r24
    b654:	21 50       	subi	r18, 0x01	; 1
    b656:	20 93 96 02 	sts	0x0296, r18
		i = txfifo.idx_r;
    b65a:	80 91 95 02 	lds	r24, 0x0295
		UDR0 = txfifo.buff[i++];
    b65e:	e8 2f       	mov	r30, r24
    b660:	f0 e0       	ldi	r31, 0x00	; 0
    b662:	ec 56       	subi	r30, 0x6C	; 108
    b664:	fd 4f       	sbci	r31, 0xFD	; 253
    b666:	93 81       	ldd	r25, Z+3	; 0x03
    b668:	90 93 c6 00 	sts	0x00C6, r25
    b66c:	8f 5f       	subi	r24, 0xFF	; 255
		if(i >= sizeof(txfifo.buff))
    b66e:	80 34       	cpi	r24, 0x40	; 64
    b670:	08 f0       	brcs	.+2      	; 0xb674 <__vector_19+0x3e>
    b672:	80 e0       	ldi	r24, 0x00	; 0
			i = 0;
		txfifo.idx_r = i;
    b674:	80 93 95 02 	sts	0x0295, r24
	}
	if(n == 0)
    b678:	22 23       	and	r18, r18
    b67a:	19 f4       	brne	.+6      	; 0xb682 <__vector_19+0x4c>
		UCSR0B = _BV(RXEN0)|_BV(RXCIE0)|_BV(TXEN0);
    b67c:	88 e9       	ldi	r24, 0x98	; 152
    b67e:	80 93 c1 00 	sts	0x00C1, r24
}
    b682:	ff 91       	pop	r31
    b684:	ef 91       	pop	r30
    b686:	9f 91       	pop	r25
    b688:	8f 91       	pop	r24
    b68a:	2f 91       	pop	r18
    b68c:	0f 90       	pop	r0
    b68e:	0f be       	out	0x3f, r0	; 63
    b690:	0f 90       	pop	r0
    b692:	1f 90       	pop	r1
    b694:	18 95       	reti

0000b696 <rtc_gettime>:
#include <string.h> 
#include "rtc.h" 


int rtc_gettime(RTC *rtc) 
{ 
    b696:	fc 01       	movw	r30, r24
//   rtc->month = (buf[5] & 0x0F) + ((buf[5] >> 4) & 1) * 10; 
//   rtc->year = 2000 + (buf[6] & 0x0F) + (buf[6] >> 4) * 10; 


   //This code is just to provide some kind of a valid response. 
   rtc->sec = 1; 
    b698:	81 e0       	ldi	r24, 0x01	; 1
    b69a:	87 83       	std	Z+7, r24	; 0x07
   rtc->min = 2; 
    b69c:	82 e0       	ldi	r24, 0x02	; 2
    b69e:	86 83       	std	Z+6, r24	; 0x06
   rtc->hour = 3; 
    b6a0:	83 e0       	ldi	r24, 0x03	; 3
    b6a2:	85 83       	std	Z+5, r24	; 0x05
   rtc->mday = 4; 
    b6a4:	84 e0       	ldi	r24, 0x04	; 4
    b6a6:	83 83       	std	Z+3, r24	; 0x03
   rtc->month = 5; 
    b6a8:	85 e0       	ldi	r24, 0x05	; 5
    b6aa:	82 83       	std	Z+2, r24	; 0x02
   rtc->year = 2006; 
    b6ac:	86 ed       	ldi	r24, 0xD6	; 214
    b6ae:	97 e0       	ldi	r25, 0x07	; 7
    b6b0:	91 83       	std	Z+1, r25	; 0x01
    b6b2:	80 83       	st	Z, r24


   return 1; 
} 
    b6b4:	81 e0       	ldi	r24, 0x01	; 1
    b6b6:	90 e0       	ldi	r25, 0x00	; 0
    b6b8:	08 95       	ret

0000b6ba <rtc_settime>:
   buf[6] = (rtc->year - 2000) / 10 * 16 + (rtc->year - 2000) % 10; 

/*This is where you would set the new time to the clock*/ 

   return 1; 
} 
    b6ba:	81 e0       	ldi	r24, 0x01	; 1
    b6bc:	90 e0       	ldi	r25, 0x00	; 0
    b6be:	08 95       	ret

0000b6c0 <rtc_init>:
//      for (n = 8; n < 64; n += 8) 
//         rtc_write(buf); 
      return 0; 
   } 
   return 1; 
} 
    b6c0:	81 e0       	ldi	r24, 0x01	; 1
    b6c2:	90 e0       	ldi	r25, 0x00	; 0
    b6c4:	08 95       	ret

0000b6c6 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
    b6c6:	ef 92       	push	r14
    b6c8:	ff 92       	push	r15
    b6ca:	0f 93       	push	r16
    b6cc:	1f 93       	push	r17
    b6ce:	cf 93       	push	r28
    b6d0:	df 93       	push	r29
    b6d2:	8c 01       	movw	r16, r24
	const prog_uint16_t *p;
	WCHAR c, d;
	int i, n, li, hi;


	if (src <= 0x80) {	/* ASCII */
    b6d4:	81 38       	cpi	r24, 0x81	; 129
    b6d6:	91 05       	cpc	r25, r1
    b6d8:	10 f4       	brcc	.+4      	; 0xb6de <ff_convert+0x18>
    b6da:	9c 01       	movw	r18, r24
    b6dc:	48 c0       	rjmp	.+144    	; 0xb76e <ff_convert+0xa8>
		c = src;
	} else {
		if (dir) {		/* OEMCP to unicode (Incremental search)*/
    b6de:	67 2b       	or	r22, r23
    b6e0:	89 f0       	breq	.+34     	; 0xb704 <ff_convert+0x3e>
    b6e2:	80 ed       	ldi	r24, 0xD0	; 208
    b6e4:	96 e0       	ldi	r25, 0x06	; 6
			p = &uni2sjis[1];
			do {
				c = pgm_read_word(p);
    b6e6:	fc 01       	movw	r30, r24
    b6e8:	25 91       	lpm	r18, Z+
    b6ea:	34 91       	lpm	r19, Z+
				p += 2;
    b6ec:	04 96       	adiw	r24, 0x04	; 4
			} while (c && c != src);
    b6ee:	21 15       	cp	r18, r1
    b6f0:	31 05       	cpc	r19, r1
    b6f2:	19 f0       	breq	.+6      	; 0xb6fa <ff_convert+0x34>
    b6f4:	20 17       	cp	r18, r16
    b6f6:	31 07       	cpc	r19, r17
    b6f8:	b1 f7       	brne	.-20     	; 0xb6e6 <ff_convert+0x20>
			c = pgm_read_word(p - 3);
    b6fa:	fc 01       	movw	r30, r24
    b6fc:	36 97       	sbiw	r30, 0x06	; 6
    b6fe:	25 91       	lpm	r18, Z+
    b700:	34 91       	lpm	r19, Z+
    b702:	35 c0       	rjmp	.+106    	; 0xb76e <ff_convert+0xa8>
    b704:	20 e1       	ldi	r18, 0x10	; 16
    b706:	30 e0       	ldi	r19, 0x00	; 0
    b708:	c0 e0       	ldi	r28, 0x00	; 0
    b70a:	d0 e0       	ldi	r29, 0x00	; 0
    b70c:	4c e2       	ldi	r20, 0x2C	; 44
    b70e:	e4 2e       	mov	r14, r20
    b710:	4f e0       	ldi	r20, 0x0F	; 15
    b712:	f4 2e       	mov	r15, r20
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
				i = li + (hi - li) / 2;
    b714:	c7 01       	movw	r24, r14
    b716:	8c 1b       	sub	r24, r28
    b718:	9d 0b       	sbc	r25, r29
    b71a:	62 e0       	ldi	r22, 0x02	; 2
    b71c:	70 e0       	ldi	r23, 0x00	; 0
    b71e:	0e 94 13 5c 	call	0xb826	; 0xb826 <__divmodhi4>
    b722:	6c 0f       	add	r22, r28
    b724:	7d 1f       	adc	r23, r29
				d = pgm_read_word(&uni2sjis[i * 2]);
    b726:	fb 01       	movw	r30, r22
    b728:	ee 0f       	add	r30, r30
    b72a:	ff 1f       	adc	r31, r31
    b72c:	ee 0f       	add	r30, r30
    b72e:	ff 1f       	adc	r31, r31
    b730:	e2 53       	subi	r30, 0x32	; 50
    b732:	f9 4f       	sbci	r31, 0xF9	; 249
    b734:	85 91       	lpm	r24, Z+
    b736:	94 91       	lpm	r25, Z+
				if (src == d) break;
    b738:	08 17       	cp	r16, r24
    b73a:	19 07       	cpc	r17, r25
    b73c:	51 f0       	breq	.+20     	; 0xb752 <ff_convert+0x8c>
				if (src > d)
    b73e:	80 17       	cp	r24, r16
    b740:	91 07       	cpc	r25, r17
    b742:	10 f0       	brcs	.+4      	; 0xb748 <ff_convert+0x82>
    b744:	7b 01       	movw	r14, r22
    b746:	01 c0       	rjmp	.+2      	; 0xb74a <ff_convert+0x84>
    b748:	eb 01       	movw	r28, r22
				p += 2;
			} while (c && c != src);
			c = pgm_read_word(p - 3);
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
			for (n = 16; n; n--) {
    b74a:	21 50       	subi	r18, 0x01	; 1
    b74c:	30 40       	sbci	r19, 0x00	; 0
    b74e:	11 f7       	brne	.-60     	; 0xb714 <ff_convert+0x4e>
    b750:	0c c0       	rjmp	.+24     	; 0xb76a <ff_convert+0xa4>
				if (src > d)
					li = i;
				else
					hi = i;
			}
			c = n ? pgm_read_word(&uni2sjis[i * 2 + 1]) : 0;
    b752:	23 2b       	or	r18, r19
    b754:	51 f0       	breq	.+20     	; 0xb76a <ff_convert+0xa4>
    b756:	fb 01       	movw	r30, r22
    b758:	ee 0f       	add	r30, r30
    b75a:	ff 1f       	adc	r31, r31
    b75c:	ee 0f       	add	r30, r30
    b75e:	ff 1f       	adc	r31, r31
    b760:	e0 53       	subi	r30, 0x30	; 48
    b762:	f9 4f       	sbci	r31, 0xF9	; 249
    b764:	25 91       	lpm	r18, Z+
    b766:	34 91       	lpm	r19, Z+
    b768:	02 c0       	rjmp	.+4      	; 0xb76e <ff_convert+0xa8>
    b76a:	20 e0       	ldi	r18, 0x00	; 0
    b76c:	30 e0       	ldi	r19, 0x00	; 0
		}
	}

	return c;
}
    b76e:	c9 01       	movw	r24, r18
    b770:	df 91       	pop	r29
    b772:	cf 91       	pop	r28
    b774:	1f 91       	pop	r17
    b776:	0f 91       	pop	r16
    b778:	ff 90       	pop	r15
    b77a:	ef 90       	pop	r14
    b77c:	08 95       	ret

0000b77e <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
    b77e:	dc 01       	movw	r26, r24
    b780:	20 e0       	ldi	r18, 0x00	; 0
    b782:	30 e0       	ldi	r19, 0x00	; 0
    b784:	b9 01       	movw	r22, r18
    b786:	62 52       	subi	r22, 0x22	; 34
    b788:	7a 4f       	sbci	r23, 0xFA	; 250
	int i;
	static const prog_uint16_t tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const prog_uint16_t tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };


	for (i = 0; pgm_read_word(&tbl_lower[i]) && chr != pgm_read_word(&tbl_lower[i]); i++) ;
    b78a:	fb 01       	movw	r30, r22
    b78c:	85 91       	lpm	r24, Z+
    b78e:	94 91       	lpm	r25, Z+
    b790:	00 97       	sbiw	r24, 0x00	; 0
    b792:	41 f0       	breq	.+16     	; 0xb7a4 <ff_wtoupper+0x26>
    b794:	a9 01       	movw	r20, r18
    b796:	4e 5f       	subi	r20, 0xFE	; 254
    b798:	5f 4f       	sbci	r21, 0xFF	; 255
    b79a:	a8 17       	cp	r26, r24
    b79c:	b9 07       	cpc	r27, r25
    b79e:	11 f0       	breq	.+4      	; 0xb7a4 <ff_wtoupper+0x26>
    b7a0:	9a 01       	movw	r18, r20
    b7a2:	f0 cf       	rjmp	.-32     	; 0xb784 <ff_wtoupper+0x6>

	return pgm_read_word(&tbl_lower[i]) ? pgm_read_word(&tbl_upper[i]) : chr;
    b7a4:	fb 01       	movw	r30, r22
    b7a6:	85 91       	lpm	r24, Z+
    b7a8:	94 91       	lpm	r25, Z+
    b7aa:	89 2b       	or	r24, r25
    b7ac:	11 f4       	brne	.+4      	; 0xb7b2 <ff_wtoupper+0x34>
    b7ae:	9d 01       	movw	r18, r26
    b7b0:	05 c0       	rjmp	.+10     	; 0xb7bc <ff_wtoupper+0x3e>
    b7b2:	f9 01       	movw	r30, r18
    b7b4:	e2 51       	subi	r30, 0x12	; 18
    b7b6:	fb 4f       	sbci	r31, 0xFB	; 251
    b7b8:	25 91       	lpm	r18, Z+
    b7ba:	34 91       	lpm	r19, Z+
}
    b7bc:	c9 01       	movw	r24, r18
    b7be:	08 95       	ret

0000b7c0 <__mulsi3>:
    b7c0:	62 9f       	mul	r22, r18
    b7c2:	d0 01       	movw	r26, r0
    b7c4:	73 9f       	mul	r23, r19
    b7c6:	f0 01       	movw	r30, r0
    b7c8:	82 9f       	mul	r24, r18
    b7ca:	e0 0d       	add	r30, r0
    b7cc:	f1 1d       	adc	r31, r1
    b7ce:	64 9f       	mul	r22, r20
    b7d0:	e0 0d       	add	r30, r0
    b7d2:	f1 1d       	adc	r31, r1
    b7d4:	92 9f       	mul	r25, r18
    b7d6:	f0 0d       	add	r31, r0
    b7d8:	83 9f       	mul	r24, r19
    b7da:	f0 0d       	add	r31, r0
    b7dc:	74 9f       	mul	r23, r20
    b7de:	f0 0d       	add	r31, r0
    b7e0:	65 9f       	mul	r22, r21
    b7e2:	f0 0d       	add	r31, r0
    b7e4:	99 27       	eor	r25, r25
    b7e6:	72 9f       	mul	r23, r18
    b7e8:	b0 0d       	add	r27, r0
    b7ea:	e1 1d       	adc	r30, r1
    b7ec:	f9 1f       	adc	r31, r25
    b7ee:	63 9f       	mul	r22, r19
    b7f0:	b0 0d       	add	r27, r0
    b7f2:	e1 1d       	adc	r30, r1
    b7f4:	f9 1f       	adc	r31, r25
    b7f6:	bd 01       	movw	r22, r26
    b7f8:	cf 01       	movw	r24, r30
    b7fa:	11 24       	eor	r1, r1
    b7fc:	08 95       	ret

0000b7fe <__udivmodhi4>:
    b7fe:	aa 1b       	sub	r26, r26
    b800:	bb 1b       	sub	r27, r27
    b802:	51 e1       	ldi	r21, 0x11	; 17
    b804:	07 c0       	rjmp	.+14     	; 0xb814 <__udivmodhi4_ep>

0000b806 <__udivmodhi4_loop>:
    b806:	aa 1f       	adc	r26, r26
    b808:	bb 1f       	adc	r27, r27
    b80a:	a6 17       	cp	r26, r22
    b80c:	b7 07       	cpc	r27, r23
    b80e:	10 f0       	brcs	.+4      	; 0xb814 <__udivmodhi4_ep>
    b810:	a6 1b       	sub	r26, r22
    b812:	b7 0b       	sbc	r27, r23

0000b814 <__udivmodhi4_ep>:
    b814:	88 1f       	adc	r24, r24
    b816:	99 1f       	adc	r25, r25
    b818:	5a 95       	dec	r21
    b81a:	a9 f7       	brne	.-22     	; 0xb806 <__udivmodhi4_loop>
    b81c:	80 95       	com	r24
    b81e:	90 95       	com	r25
    b820:	bc 01       	movw	r22, r24
    b822:	cd 01       	movw	r24, r26
    b824:	08 95       	ret

0000b826 <__divmodhi4>:
    b826:	97 fb       	bst	r25, 7
    b828:	09 2e       	mov	r0, r25
    b82a:	07 26       	eor	r0, r23
    b82c:	0a d0       	rcall	.+20     	; 0xb842 <__divmodhi4_neg1>
    b82e:	77 fd       	sbrc	r23, 7
    b830:	04 d0       	rcall	.+8      	; 0xb83a <__divmodhi4_neg2>
    b832:	e5 df       	rcall	.-54     	; 0xb7fe <__udivmodhi4>
    b834:	06 d0       	rcall	.+12     	; 0xb842 <__divmodhi4_neg1>
    b836:	00 20       	and	r0, r0
    b838:	1a f4       	brpl	.+6      	; 0xb840 <__divmodhi4_exit>

0000b83a <__divmodhi4_neg2>:
    b83a:	70 95       	com	r23
    b83c:	61 95       	neg	r22
    b83e:	7f 4f       	sbci	r23, 0xFF	; 255

0000b840 <__divmodhi4_exit>:
    b840:	08 95       	ret

0000b842 <__divmodhi4_neg1>:
    b842:	f6 f7       	brtc	.-4      	; 0xb840 <__divmodhi4_exit>
    b844:	90 95       	com	r25
    b846:	81 95       	neg	r24
    b848:	9f 4f       	sbci	r25, 0xFF	; 255
    b84a:	08 95       	ret

0000b84c <__udivmodsi4>:
    b84c:	a1 e2       	ldi	r26, 0x21	; 33
    b84e:	1a 2e       	mov	r1, r26
    b850:	aa 1b       	sub	r26, r26
    b852:	bb 1b       	sub	r27, r27
    b854:	fd 01       	movw	r30, r26
    b856:	0d c0       	rjmp	.+26     	; 0xb872 <__udivmodsi4_ep>

0000b858 <__udivmodsi4_loop>:
    b858:	aa 1f       	adc	r26, r26
    b85a:	bb 1f       	adc	r27, r27
    b85c:	ee 1f       	adc	r30, r30
    b85e:	ff 1f       	adc	r31, r31
    b860:	a2 17       	cp	r26, r18
    b862:	b3 07       	cpc	r27, r19
    b864:	e4 07       	cpc	r30, r20
    b866:	f5 07       	cpc	r31, r21
    b868:	20 f0       	brcs	.+8      	; 0xb872 <__udivmodsi4_ep>
    b86a:	a2 1b       	sub	r26, r18
    b86c:	b3 0b       	sbc	r27, r19
    b86e:	e4 0b       	sbc	r30, r20
    b870:	f5 0b       	sbc	r31, r21

0000b872 <__udivmodsi4_ep>:
    b872:	66 1f       	adc	r22, r22
    b874:	77 1f       	adc	r23, r23
    b876:	88 1f       	adc	r24, r24
    b878:	99 1f       	adc	r25, r25
    b87a:	1a 94       	dec	r1
    b87c:	69 f7       	brne	.-38     	; 0xb858 <__udivmodsi4_loop>
    b87e:	60 95       	com	r22
    b880:	70 95       	com	r23
    b882:	80 95       	com	r24
    b884:	90 95       	com	r25
    b886:	9b 01       	movw	r18, r22
    b888:	ac 01       	movw	r20, r24
    b88a:	bd 01       	movw	r22, r26
    b88c:	cf 01       	movw	r24, r30
    b88e:	08 95       	ret

0000b890 <__divmodsi4>:
    b890:	97 fb       	bst	r25, 7
    b892:	09 2e       	mov	r0, r25
    b894:	05 26       	eor	r0, r21
    b896:	0e d0       	rcall	.+28     	; 0xb8b4 <__divmodsi4_neg1>
    b898:	57 fd       	sbrc	r21, 7
    b89a:	04 d0       	rcall	.+8      	; 0xb8a4 <__divmodsi4_neg2>
    b89c:	d7 df       	rcall	.-82     	; 0xb84c <__udivmodsi4>
    b89e:	0a d0       	rcall	.+20     	; 0xb8b4 <__divmodsi4_neg1>
    b8a0:	00 1c       	adc	r0, r0
    b8a2:	38 f4       	brcc	.+14     	; 0xb8b2 <__divmodsi4_exit>

0000b8a4 <__divmodsi4_neg2>:
    b8a4:	50 95       	com	r21
    b8a6:	40 95       	com	r20
    b8a8:	30 95       	com	r19
    b8aa:	21 95       	neg	r18
    b8ac:	3f 4f       	sbci	r19, 0xFF	; 255
    b8ae:	4f 4f       	sbci	r20, 0xFF	; 255
    b8b0:	5f 4f       	sbci	r21, 0xFF	; 255

0000b8b2 <__divmodsi4_exit>:
    b8b2:	08 95       	ret

0000b8b4 <__divmodsi4_neg1>:
    b8b4:	f6 f7       	brtc	.-4      	; 0xb8b2 <__divmodsi4_exit>
    b8b6:	90 95       	com	r25
    b8b8:	80 95       	com	r24
    b8ba:	70 95       	com	r23
    b8bc:	61 95       	neg	r22
    b8be:	7f 4f       	sbci	r23, 0xFF	; 255
    b8c0:	8f 4f       	sbci	r24, 0xFF	; 255
    b8c2:	9f 4f       	sbci	r25, 0xFF	; 255
    b8c4:	08 95       	ret

0000b8c6 <memset>:
    b8c6:	dc 01       	movw	r26, r24
    b8c8:	01 c0       	rjmp	.+2      	; 0xb8cc <memset+0x6>
    b8ca:	6d 93       	st	X+, r22
    b8cc:	41 50       	subi	r20, 0x01	; 1
    b8ce:	50 40       	sbci	r21, 0x00	; 0
    b8d0:	e0 f7       	brcc	.-8      	; 0xb8ca <memset+0x4>
    b8d2:	08 95       	ret

0000b8d4 <strchr>:
    b8d4:	fc 01       	movw	r30, r24
    b8d6:	81 91       	ld	r24, Z+
    b8d8:	86 17       	cp	r24, r22
    b8da:	21 f0       	breq	.+8      	; 0xb8e4 <strchr+0x10>
    b8dc:	88 23       	and	r24, r24
    b8de:	d9 f7       	brne	.-10     	; 0xb8d6 <strchr+0x2>
    b8e0:	99 27       	eor	r25, r25
    b8e2:	08 95       	ret
    b8e4:	31 97       	sbiw	r30, 0x01	; 1
    b8e6:	cf 01       	movw	r24, r30
    b8e8:	08 95       	ret

0000b8ea <strcpy>:
    b8ea:	fb 01       	movw	r30, r22
    b8ec:	dc 01       	movw	r26, r24
    b8ee:	01 90       	ld	r0, Z+
    b8f0:	0d 92       	st	X+, r0
    b8f2:	00 20       	and	r0, r0
    b8f4:	e1 f7       	brne	.-8      	; 0xb8ee <strcpy+0x4>
    b8f6:	08 95       	ret

0000b8f8 <_exit>:
    b8f8:	f8 94       	cli

0000b8fa <__stop_program>:
    b8fa:	ff cf       	rjmp	.-2      	; 0xb8fa <__stop_program>
