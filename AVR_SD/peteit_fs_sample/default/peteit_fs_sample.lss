
peteit_fs_sample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00002284  00002318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000087  00800104  00800104  0000231c  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  00002320  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000103  00000000  00000000  000023e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018dd  00000000  00000000  000024e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067b  00000000  00000000  00003dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013be  00000000  00000000  0000443b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  000057fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003da  00000000  00000000  0000599c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e96  00000000  00000000  00005d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00007c0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ca 00 	jmp	0x194	; 0x194 <__ctors_end>
       4:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
       8:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
       c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      10:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      14:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      18:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      1c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      20:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      24:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      28:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      2c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      30:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      34:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      38:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      3c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      40:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      44:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      48:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      4c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      50:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      54:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      58:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      5c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      60:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      64:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      68:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      6c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      70:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      74:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      78:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      7c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      80:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      84:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      88:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>

0000008c <__c.1692>:
      8c:	25 75 20 69 74 65 6d 28 73 29 0a 00                 %u item(s)..

00000098 <__c.1689>:
      98:	25 39 6c 75 20 20 25 73 0a 00                       %9lu  %s..

000000a2 <__c.1687>:
      a2:	20 20 20 3c 44 49 52 3e 20 20 20 25 73 0a 00           <DIR>   %s..

000000b1 <__c.1680>:
      b1:	66 70 74 72 20 3d 20 25 6c 75 28 30 78 25 6c 58     fptr = %lu(0x%lX
      c1:	29 0a 00                                            )..

000000c4 <__c.1675>:
      c4:	54 79 70 65 20 61 6e 79 20 6c 69 6e 65 20 74 6f     Type any line to
      d4:	20 77 72 69 74 65 2e 20 41 20 62 6c 61 6e 6b 20      write. A blank 
      e4:	6c 69 6e 65 20 66 69 6e 61 6c 69 7a 65 20 74 68     line finalize th
      f4:	65 20 77 72 69 74 65 20 6f 70 65 72 61 74 69 6f     e write operatio
     104:	6e 2e 0a 00                                         n...

00000108 <__c.1672>:
     108:	25 6c 75 20 62 79 74 65 73 20 77 72 69 74 74 65     %lu bytes writte
     118:	6e 2e 0a 00                                         n...

0000011c <__c.1641>:
     11c:	0a 50 46 46 20 74 65 73 74 20 6d 6f 6e 69 74 6f     .PFF test monito
     12c:	72 0a 00                                            r..

0000012f <__c.1586>:
     12f:	72 63 3d 25 64 0a 00                                rc=%d..

00000136 <__c.1612>:
     136:	20 20 00                                              .

00000139 <__c.1580>:
     139:	72 63 3d 25 75 20 46 52 5f 25 53 0a 00              rc=%u FR_%S..

00000146 <str.1566>:
     146:	4f 4b 00 44 49 53 4b 5f 45 52 52 00 4e 4f 54 5f     OK.DISK_ERR.NOT_
     156:	52 45 41 44 59 00 4e 4f 5f 46 49 4c 45 00 4e 4f     READY.NO_FILE.NO
     166:	5f 50 41 54 48 00 4e 4f 54 5f 4f 50 45 4e 45 44     _PATH.NOT_OPENED
     176:	00 4e 4f 54 5f 45 4e 41 42 4c 45 44 00 4e 4f 5f     .NOT_ENABLED.NO_
     186:	46 49 4c 45 5f 53 59 53 54 45 4d 00 00 00           FILE_SYSTEM...

00000194 <__ctors_end>:
     194:	11 24       	eor	r1, r1
     196:	1f be       	out	0x3f, r1	; 63
     198:	cf ef       	ldi	r28, 0xFF	; 255
     19a:	d0 e1       	ldi	r29, 0x10	; 16
     19c:	de bf       	out	0x3e, r29	; 62
     19e:	cd bf       	out	0x3d, r28	; 61

000001a0 <__do_copy_data>:
     1a0:	11 e0       	ldi	r17, 0x01	; 1
     1a2:	a0 e0       	ldi	r26, 0x00	; 0
     1a4:	b1 e0       	ldi	r27, 0x01	; 1
     1a6:	e4 e8       	ldi	r30, 0x84	; 132
     1a8:	f2 e2       	ldi	r31, 0x22	; 34
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <.do_copy_data_start>

000001ac <.do_copy_data_loop>:
     1ac:	05 90       	lpm	r0, Z+
     1ae:	0d 92       	st	X+, r0

000001b0 <.do_copy_data_start>:
     1b0:	a4 30       	cpi	r26, 0x04	; 4
     1b2:	b1 07       	cpc	r27, r17
     1b4:	d9 f7       	brne	.-10     	; 0x1ac <.do_copy_data_loop>

000001b6 <__do_clear_bss>:
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	a4 e0       	ldi	r26, 0x04	; 4
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <.do_clear_bss_start>

000001be <.do_clear_bss_loop>:
     1be:	1d 92       	st	X+, r1

000001c0 <.do_clear_bss_start>:
     1c0:	ab 38       	cpi	r26, 0x8B	; 139
     1c2:	b1 07       	cpc	r27, r17
     1c4:	e1 f7       	brne	.-8      	; 0x1be <.do_clear_bss_loop>
     1c6:	0e 94 49 0b 	call	0x1692	; 0x1692 <main>
     1ca:	0c 94 40 11 	jmp	0x2280	; 0x2280 <_exit>

000001ce <__bad_interrupt>:
     1ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d2 <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     1d2:	cf 92       	push	r12
     1d4:	df 92       	push	r13
     1d6:	ef 92       	push	r14
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	6c 01       	movw	r12, r24
	CLUST clst;
	FATFS *fs = FatFs;
     1e4:	c0 91 04 01 	lds	r28, 0x0104
     1e8:	d0 91 05 01 	lds	r29, 0x0105


	dj->index = 0;
     1ec:	fc 01       	movw	r30, r24
     1ee:	11 82       	std	Z+1, r1	; 0x01
     1f0:	10 82       	st	Z, r1
	clst = dj->sclust;
     1f2:	24 81       	ldd	r18, Z+4	; 0x04
     1f4:	35 81       	ldd	r19, Z+5	; 0x05
     1f6:	46 81       	ldd	r20, Z+6	; 0x06
     1f8:	57 81       	ldd	r21, Z+7	; 0x07
	if (clst == 1 || clst >= fs->max_clust)	/* Check start cluster range */
     1fa:	21 30       	cpi	r18, 0x01	; 1
     1fc:	31 05       	cpc	r19, r1
     1fe:	41 05       	cpc	r20, r1
     200:	51 05       	cpc	r21, r1
     202:	09 f4       	brne	.+2      	; 0x206 <dir_rewind+0x34>
     204:	5b c0       	rjmp	.+182    	; 0x2bc <dir_rewind+0xea>
     206:	88 85       	ldd	r24, Y+8	; 0x08
     208:	99 85       	ldd	r25, Y+9	; 0x09
     20a:	aa 85       	ldd	r26, Y+10	; 0x0a
     20c:	bb 85       	ldd	r27, Y+11	; 0x0b
     20e:	28 17       	cp	r18, r24
     210:	39 07       	cpc	r19, r25
     212:	4a 07       	cpc	r20, r26
     214:	5b 07       	cpc	r21, r27
     216:	08 f0       	brcs	.+2      	; 0x21a <dir_rewind+0x48>
     218:	51 c0       	rjmp	.+162    	; 0x2bc <dir_rewind+0xea>
		return FR_DISK_ERR;
#if _FS_FAT32
	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     21a:	21 15       	cp	r18, r1
     21c:	31 05       	cpc	r19, r1
     21e:	41 05       	cpc	r20, r1
     220:	51 05       	cpc	r21, r1
     222:	39 f4       	brne	.+14     	; 0x232 <dir_rewind+0x60>
     224:	88 81       	ld	r24, Y
     226:	83 30       	cpi	r24, 0x03	; 3
     228:	21 f4       	brne	.+8      	; 0x232 <dir_rewind+0x60>
		clst = fs->dirbase;
     22a:	28 89       	ldd	r18, Y+16	; 0x10
     22c:	39 89       	ldd	r19, Y+17	; 0x11
     22e:	4a 89       	ldd	r20, Y+18	; 0x12
     230:	5b 89       	ldd	r21, Y+19	; 0x13
#endif
	dj->clust = clst;						/* Current cluster */
     232:	f6 01       	movw	r30, r12
     234:	20 87       	std	Z+8, r18	; 0x08
     236:	31 87       	std	Z+9, r19	; 0x09
     238:	42 87       	std	Z+10, r20	; 0x0a
     23a:	53 87       	std	Z+11, r21	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     23c:	21 15       	cp	r18, r1
     23e:	31 05       	cpc	r19, r1
     240:	41 05       	cpc	r20, r1
     242:	51 05       	cpc	r21, r1
     244:	81 f1       	breq	.+96     	; 0x2a6 <dir_rewind+0xd4>
)
{
	FATFS *fs = FatFs;


	clst -= 2;
     246:	8e ef       	ldi	r24, 0xFE	; 254
     248:	e8 2e       	mov	r14, r24
     24a:	8f ef       	ldi	r24, 0xFF	; 255
     24c:	f8 2e       	mov	r15, r24
     24e:	8f ef       	ldi	r24, 0xFF	; 255
     250:	08 2f       	mov	r16, r24
     252:	8f ef       	ldi	r24, 0xFF	; 255
     254:	18 2f       	mov	r17, r24
     256:	e2 0e       	add	r14, r18
     258:	f3 1e       	adc	r15, r19
     25a:	04 1f       	adc	r16, r20
     25c:	15 1f       	adc	r17, r21
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     25e:	88 85       	ldd	r24, Y+8	; 0x08
     260:	99 85       	ldd	r25, Y+9	; 0x09
     262:	aa 85       	ldd	r26, Y+10	; 0x0a
     264:	bb 85       	ldd	r27, Y+11	; 0x0b
     266:	02 97       	sbiw	r24, 0x02	; 2
     268:	a1 09       	sbc	r26, r1
     26a:	b1 09       	sbc	r27, r1
     26c:	e8 16       	cp	r14, r24
     26e:	f9 06       	cpc	r15, r25
     270:	0a 07       	cpc	r16, r26
     272:	1b 07       	cpc	r17, r27
     274:	28 f0       	brcs	.+10     	; 0x280 <dir_rewind+0xae>
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	40 e0       	ldi	r20, 0x00	; 0
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <dir_rewind+0xdc>
	return (DWORD)clst * fs->csize + fs->database;
     280:	29 81       	ldd	r18, Y+1	; 0x01
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	50 e0       	ldi	r21, 0x00	; 0
     288:	c8 01       	movw	r24, r16
     28a:	b7 01       	movw	r22, r14
     28c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsi3>
     290:	9b 01       	movw	r18, r22
     292:	ac 01       	movw	r20, r24
     294:	8c 89       	ldd	r24, Y+20	; 0x14
     296:	9d 89       	ldd	r25, Y+21	; 0x15
     298:	ae 89       	ldd	r26, Y+22	; 0x16
     29a:	bf 89       	ldd	r27, Y+23	; 0x17
     29c:	28 0f       	add	r18, r24
     29e:	39 1f       	adc	r19, r25
     2a0:	4a 1f       	adc	r20, r26
     2a2:	5b 1f       	adc	r21, r27
     2a4:	04 c0       	rjmp	.+8      	; 0x2ae <dir_rewind+0xdc>
#if _FS_FAT32
	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = fs->dirbase;
#endif
	dj->clust = clst;						/* Current cluster */
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     2a6:	28 89       	ldd	r18, Y+16	; 0x10
     2a8:	39 89       	ldd	r19, Y+17	; 0x11
     2aa:	4a 89       	ldd	r20, Y+18	; 0x12
     2ac:	5b 89       	ldd	r21, Y+19	; 0x13
     2ae:	f6 01       	movw	r30, r12
     2b0:	24 87       	std	Z+12, r18	; 0x0c
     2b2:	35 87       	std	Z+13, r19	; 0x0d
     2b4:	46 87       	std	Z+14, r20	; 0x0e
     2b6:	57 87       	std	Z+15, r21	; 0x0f
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	01 c0       	rjmp	.+2      	; 0x2be <dir_rewind+0xec>

	return FR_OK;	/* Seek succeeded */
     2bc:	81 e0       	ldi	r24, 0x01	; 1
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	df 90       	pop	r13
     2cc:	cf 90       	pop	r12
     2ce:	08 95       	ret

000002d0 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     2d0:	6f 92       	push	r6
     2d2:	7f 92       	push	r7
     2d4:	8f 92       	push	r8
     2d6:	9f 92       	push	r9
     2d8:	af 92       	push	r10
     2da:	bf 92       	push	r11
     2dc:	cf 92       	push	r12
     2de:	df 92       	push	r13
     2e0:	ef 92       	push	r14
     2e2:	ff 92       	push	r15
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	df 93       	push	r29
     2ea:	cf 93       	push	r28
     2ec:	00 d0       	rcall	.+0      	; 0x2ee <get_fat+0x1e>
     2ee:	00 d0       	rcall	.+0      	; 0x2f0 <get_fat+0x20>
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
     2f4:	4b 01       	movw	r8, r22
     2f6:	5c 01       	movw	r10, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
     2f8:	60 90 04 01 	lds	r6, 0x0104
     2fc:	70 90 05 01 	lds	r7, 0x0105


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
     300:	82 e0       	ldi	r24, 0x02	; 2
     302:	88 16       	cp	r8, r24
     304:	91 04       	cpc	r9, r1
     306:	a1 04       	cpc	r10, r1
     308:	b1 04       	cpc	r11, r1
     30a:	08 f4       	brcc	.+2      	; 0x30e <get_fat+0x3e>
     30c:	b4 c0       	rjmp	.+360    	; 0x476 <get_fat+0x1a6>
     30e:	f3 01       	movw	r30, r6
     310:	80 85       	ldd	r24, Z+8	; 0x08
     312:	91 85       	ldd	r25, Z+9	; 0x09
     314:	a2 85       	ldd	r26, Z+10	; 0x0a
     316:	b3 85       	ldd	r27, Z+11	; 0x0b
     318:	88 16       	cp	r8, r24
     31a:	99 06       	cpc	r9, r25
     31c:	aa 06       	cpc	r10, r26
     31e:	bb 06       	cpc	r11, r27
     320:	08 f0       	brcs	.+2      	; 0x324 <get_fat+0x54>
     322:	a9 c0       	rjmp	.+338    	; 0x476 <get_fat+0x1a6>
		return 1;

	switch (fs->fs_type) {
     324:	80 81       	ld	r24, Z
     326:	82 30       	cpi	r24, 0x02	; 2
     328:	09 f4       	brne	.+2      	; 0x32c <get_fat+0x5c>
     32a:	5f c0       	rjmp	.+190    	; 0x3ea <get_fat+0x11a>
     32c:	83 30       	cpi	r24, 0x03	; 3
     32e:	09 f4       	brne	.+2      	; 0x332 <get_fat+0x62>
     330:	7b c0       	rjmp	.+246    	; 0x428 <get_fat+0x158>
     332:	81 30       	cpi	r24, 0x01	; 1
     334:	09 f0       	breq	.+2      	; 0x338 <get_fat+0x68>
     336:	9f c0       	rjmp	.+318    	; 0x476 <get_fat+0x1a6>
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
     338:	c4 01       	movw	r24, r8
     33a:	96 95       	lsr	r25
     33c:	87 95       	ror	r24
     33e:	88 0d       	add	r24, r8
     340:	99 1d       	adc	r25, r9
		ofs = bc % 512; bc /= 512;
     342:	9c 01       	movw	r18, r24
     344:	31 70       	andi	r19, 0x01	; 1
     346:	89 2f       	mov	r24, r25
     348:	99 27       	eor	r25, r25
     34a:	86 95       	lsr	r24
     34c:	6c 01       	movw	r12, r24
     34e:	ee 24       	eor	r14, r14
     350:	ff 24       	eor	r15, r15
     352:	f3 01       	movw	r30, r6
     354:	44 85       	ldd	r20, Z+12	; 0x0c
     356:	55 85       	ldd	r21, Z+13	; 0x0d
     358:	66 85       	ldd	r22, Z+14	; 0x0e
     35a:	77 85       	ldd	r23, Z+15	; 0x0f
     35c:	ce 01       	movw	r24, r28
     35e:	01 96       	adiw	r24, 0x01	; 1
		if (ofs != 511) {
     360:	f1 e0       	ldi	r31, 0x01	; 1
     362:	2f 3f       	cpi	r18, 0xFF	; 255
     364:	3f 07       	cpc	r19, r31
     366:	49 f0       	breq	.+18     	; 0x37a <get_fat+0xaa>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
     368:	c4 0e       	add	r12, r20
     36a:	d5 1e       	adc	r13, r21
     36c:	e6 1e       	adc	r14, r22
     36e:	f7 1e       	adc	r15, r23
     370:	b7 01       	movw	r22, r14
     372:	a6 01       	movw	r20, r12
     374:	02 e0       	ldi	r16, 0x02	; 2
     376:	10 e0       	ldi	r17, 0x00	; 0
     378:	1e c0       	rjmp	.+60     	; 0x3b6 <get_fat+0xe6>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
     37a:	4c 0d       	add	r20, r12
     37c:	5d 1d       	adc	r21, r13
     37e:	6e 1d       	adc	r22, r14
     380:	7f 1d       	adc	r23, r15
     382:	2f ef       	ldi	r18, 0xFF	; 255
     384:	31 e0       	ldi	r19, 0x01	; 1
     386:	01 e0       	ldi	r16, 0x01	; 1
     388:	10 e0       	ldi	r17, 0x00	; 0
     38a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <disk_readp>
     38e:	88 23       	and	r24, r24
     390:	09 f0       	breq	.+2      	; 0x394 <get_fat+0xc4>
     392:	71 c0       	rjmp	.+226    	; 0x476 <get_fat+0x1a6>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
     394:	f3 01       	movw	r30, r6
     396:	44 85       	ldd	r20, Z+12	; 0x0c
     398:	55 85       	ldd	r21, Z+13	; 0x0d
     39a:	66 85       	ldd	r22, Z+14	; 0x0e
     39c:	77 85       	ldd	r23, Z+15	; 0x0f
     39e:	4f 5f       	subi	r20, 0xFF	; 255
     3a0:	5f 4f       	sbci	r21, 0xFF	; 255
     3a2:	6f 4f       	sbci	r22, 0xFF	; 255
     3a4:	7f 4f       	sbci	r23, 0xFF	; 255
     3a6:	4c 0d       	add	r20, r12
     3a8:	5d 1d       	adc	r21, r13
     3aa:	6e 1d       	adc	r22, r14
     3ac:	7f 1d       	adc	r23, r15
     3ae:	ce 01       	movw	r24, r28
     3b0:	02 96       	adiw	r24, 0x02	; 2
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <disk_readp>
     3ba:	88 23       	and	r24, r24
     3bc:	09 f0       	breq	.+2      	; 0x3c0 <get_fat+0xf0>
     3be:	5b c0       	rjmp	.+182    	; 0x476 <get_fat+0x1a6>
		}
		wc = LD_WORD(buf);
     3c0:	69 81       	ldd	r22, Y+1	; 0x01
     3c2:	7a 81       	ldd	r23, Y+2	; 0x02
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     3c4:	c4 01       	movw	r24, r8
     3c6:	81 70       	andi	r24, 0x01	; 1
     3c8:	90 70       	andi	r25, 0x00	; 0
     3ca:	89 2b       	or	r24, r25
     3cc:	39 f0       	breq	.+14     	; 0x3dc <get_fat+0x10c>
     3ce:	a4 e0       	ldi	r26, 0x04	; 4
     3d0:	76 95       	lsr	r23
     3d2:	67 95       	ror	r22
     3d4:	aa 95       	dec	r26
     3d6:	e1 f7       	brne	.-8      	; 0x3d0 <get_fat+0x100>
     3d8:	9b 01       	movw	r18, r22
     3da:	23 c0       	rjmp	.+70     	; 0x422 <get_fat+0x152>
     3dc:	9b 01       	movw	r18, r22
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	3f 70       	andi	r19, 0x0F	; 15
     3e4:	40 70       	andi	r20, 0x00	; 0
     3e6:	50 70       	andi	r21, 0x00	; 0
     3e8:	4a c0       	rjmp	.+148    	; 0x47e <get_fat+0x1ae>

	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
     3ea:	77 27       	eor	r23, r23
     3ec:	6b 2d       	mov	r22, r11
     3ee:	5a 2d       	mov	r21, r10
     3f0:	49 2d       	mov	r20, r9
     3f2:	f3 01       	movw	r30, r6
     3f4:	84 85       	ldd	r24, Z+12	; 0x0c
     3f6:	95 85       	ldd	r25, Z+13	; 0x0d
     3f8:	a6 85       	ldd	r26, Z+14	; 0x0e
     3fa:	b7 85       	ldd	r27, Z+15	; 0x0f
     3fc:	48 0f       	add	r20, r24
     3fe:	59 1f       	adc	r21, r25
     400:	6a 1f       	adc	r22, r26
     402:	7b 1f       	adc	r23, r27
     404:	94 01       	movw	r18, r8
     406:	30 70       	andi	r19, 0x00	; 0
     408:	22 0f       	add	r18, r18
     40a:	33 1f       	adc	r19, r19
     40c:	ce 01       	movw	r24, r28
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	02 e0       	ldi	r16, 0x02	; 2
     412:	10 e0       	ldi	r17, 0x00	; 0
     414:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <disk_readp>
     418:	88 23       	and	r24, r24
     41a:	69 f5       	brne	.+90     	; 0x476 <get_fat+0x1a6>
		return LD_WORD(buf);
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	9a 81       	ldd	r25, Y+2	; 0x02
     420:	9c 01       	movw	r18, r24
     422:	40 e0       	ldi	r20, 0x00	; 0
     424:	50 e0       	ldi	r21, 0x00	; 0
     426:	2b c0       	rjmp	.+86     	; 0x47e <get_fat+0x1ae>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
     428:	b5 01       	movw	r22, r10
     42a:	a4 01       	movw	r20, r8
     42c:	27 e0       	ldi	r18, 0x07	; 7
     42e:	76 95       	lsr	r23
     430:	67 95       	ror	r22
     432:	57 95       	ror	r21
     434:	47 95       	ror	r20
     436:	2a 95       	dec	r18
     438:	d1 f7       	brne	.-12     	; 0x42e <get_fat+0x15e>
     43a:	f3 01       	movw	r30, r6
     43c:	84 85       	ldd	r24, Z+12	; 0x0c
     43e:	95 85       	ldd	r25, Z+13	; 0x0d
     440:	a6 85       	ldd	r26, Z+14	; 0x0e
     442:	b7 85       	ldd	r27, Z+15	; 0x0f
     444:	48 0f       	add	r20, r24
     446:	59 1f       	adc	r21, r25
     448:	6a 1f       	adc	r22, r26
     44a:	7b 1f       	adc	r23, r27
     44c:	94 01       	movw	r18, r8
     44e:	2f 77       	andi	r18, 0x7F	; 127
     450:	30 70       	andi	r19, 0x00	; 0
     452:	22 0f       	add	r18, r18
     454:	33 1f       	adc	r19, r19
     456:	22 0f       	add	r18, r18
     458:	33 1f       	adc	r19, r19
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	04 e0       	ldi	r16, 0x04	; 4
     460:	10 e0       	ldi	r17, 0x00	; 0
     462:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <disk_readp>
     466:	88 23       	and	r24, r24
     468:	31 f4       	brne	.+12     	; 0x476 <get_fat+0x1a6>
		return LD_DWORD(buf) & 0x0FFFFFFF;
     46a:	29 81       	ldd	r18, Y+1	; 0x01
     46c:	3a 81       	ldd	r19, Y+2	; 0x02
     46e:	4b 81       	ldd	r20, Y+3	; 0x03
     470:	5c 81       	ldd	r21, Y+4	; 0x04
     472:	5f 70       	andi	r21, 0x0F	; 15
     474:	04 c0       	rjmp	.+8      	; 0x47e <get_fat+0x1ae>
     476:	21 e0       	ldi	r18, 0x01	; 1
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	40 e0       	ldi	r20, 0x00	; 0
     47c:	50 e0       	ldi	r21, 0x00	; 0
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
}
     47e:	b9 01       	movw	r22, r18
     480:	ca 01       	movw	r24, r20
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	cf 91       	pop	r28
     48c:	df 91       	pop	r29
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	ef 90       	pop	r14
     496:	df 90       	pop	r13
     498:	cf 90       	pop	r12
     49a:	bf 90       	pop	r11
     49c:	af 90       	pop	r10
     49e:	9f 90       	pop	r9
     4a0:	8f 90       	pop	r8
     4a2:	7f 90       	pop	r7
     4a4:	6f 90       	pop	r6
     4a6:	08 95       	ret

000004a8 <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
     4a8:	af 92       	push	r10
     4aa:	bf 92       	push	r11
     4ac:	cf 92       	push	r12
     4ae:	df 92       	push	r13
     4b0:	ef 92       	push	r14
     4b2:	ff 92       	push	r15
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	5c 01       	movw	r10, r24
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
     4be:	c0 91 04 01 	lds	r28, 0x0104
     4c2:	d0 91 05 01 	lds	r29, 0x0105


	i = dj->index + 1;
     4c6:	fc 01       	movw	r30, r24
     4c8:	c0 80       	ld	r12, Z
     4ca:	d1 80       	ldd	r13, Z+1	; 0x01
     4cc:	08 94       	sec
     4ce:	c1 1c       	adc	r12, r1
     4d0:	d1 1c       	adc	r13, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     4d2:	c1 14       	cp	r12, r1
     4d4:	d1 04       	cpc	r13, r1
     4d6:	09 f4       	brne	.+2      	; 0x4da <dir_next+0x32>
     4d8:	8f c0       	rjmp	.+286    	; 0x5f8 <dir_next+0x150>
     4da:	24 85       	ldd	r18, Z+12	; 0x0c
     4dc:	35 85       	ldd	r19, Z+13	; 0x0d
     4de:	46 85       	ldd	r20, Z+14	; 0x0e
     4e0:	57 85       	ldd	r21, Z+15	; 0x0f
     4e2:	21 15       	cp	r18, r1
     4e4:	31 05       	cpc	r19, r1
     4e6:	41 05       	cpc	r20, r1
     4e8:	51 05       	cpc	r21, r1
     4ea:	09 f4       	brne	.+2      	; 0x4ee <dir_next+0x46>
     4ec:	85 c0       	rjmp	.+266    	; 0x5f8 <dir_next+0x150>
		return FR_NO_FILE;

	if (!(i & (16-1))) {	/* Sector changed? */
     4ee:	c6 01       	movw	r24, r12
     4f0:	8f 70       	andi	r24, 0x0F	; 15
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	09 f0       	breq	.+2      	; 0x4fa <dir_next+0x52>
     4f8:	7a c0       	rjmp	.+244    	; 0x5ee <dir_next+0x146>
		dj->sect++;			/* Next sector */
     4fa:	2f 5f       	subi	r18, 0xFF	; 255
     4fc:	3f 4f       	sbci	r19, 0xFF	; 255
     4fe:	4f 4f       	sbci	r20, 0xFF	; 255
     500:	5f 4f       	sbci	r21, 0xFF	; 255
     502:	24 87       	std	Z+12, r18	; 0x0c
     504:	35 87       	std	Z+13, r19	; 0x0d
     506:	46 87       	std	Z+14, r20	; 0x0e
     508:	57 87       	std	Z+15, r21	; 0x0f

		if (dj->clust == 0) {	/* Static table */
     50a:	40 85       	ldd	r20, Z+8	; 0x08
     50c:	51 85       	ldd	r21, Z+9	; 0x09
     50e:	62 85       	ldd	r22, Z+10	; 0x0a
     510:	73 85       	ldd	r23, Z+11	; 0x0b
     512:	41 15       	cp	r20, r1
     514:	51 05       	cpc	r21, r1
     516:	61 05       	cpc	r22, r1
     518:	71 05       	cpc	r23, r1
     51a:	39 f4       	brne	.+14     	; 0x52a <dir_next+0x82>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
     51c:	8c 81       	ldd	r24, Y+4	; 0x04
     51e:	9d 81       	ldd	r25, Y+5	; 0x05
     520:	c8 16       	cp	r12, r24
     522:	d9 06       	cpc	r13, r25
     524:	08 f4       	brcc	.+2      	; 0x528 <dir_next+0x80>
     526:	63 c0       	rjmp	.+198    	; 0x5ee <dir_next+0x146>
     528:	67 c0       	rjmp	.+206    	; 0x5f8 <dir_next+0x150>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	01 97       	sbiw	r24, 0x01	; 1
     530:	96 01       	movw	r18, r12
     532:	e4 e0       	ldi	r30, 0x04	; 4
     534:	36 95       	lsr	r19
     536:	27 95       	ror	r18
     538:	ea 95       	dec	r30
     53a:	e1 f7       	brne	.-8      	; 0x534 <dir_next+0x8c>
     53c:	82 23       	and	r24, r18
     53e:	93 23       	and	r25, r19
     540:	89 2b       	or	r24, r25
     542:	09 f0       	breq	.+2      	; 0x546 <dir_next+0x9e>
     544:	54 c0       	rjmp	.+168    	; 0x5ee <dir_next+0x146>
				clst = get_fat(dj->clust);		/* Get next cluster */
     546:	cb 01       	movw	r24, r22
     548:	ba 01       	movw	r22, r20
     54a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <get_fat>
     54e:	9b 01       	movw	r18, r22
     550:	ac 01       	movw	r20, r24
				if (clst <= 1) return FR_DISK_ERR;
     552:	62 30       	cpi	r22, 0x02	; 2
     554:	71 05       	cpc	r23, r1
     556:	81 05       	cpc	r24, r1
     558:	91 05       	cpc	r25, r1
     55a:	10 f4       	brcc	.+4      	; 0x560 <dir_next+0xb8>
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	4d c0       	rjmp	.+154    	; 0x5fa <dir_next+0x152>
				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
     560:	88 85       	ldd	r24, Y+8	; 0x08
     562:	99 85       	ldd	r25, Y+9	; 0x09
     564:	aa 85       	ldd	r26, Y+10	; 0x0a
     566:	bb 85       	ldd	r27, Y+11	; 0x0b
     568:	28 17       	cp	r18, r24
     56a:	39 07       	cpc	r19, r25
     56c:	4a 07       	cpc	r20, r26
     56e:	5b 07       	cpc	r21, r27
     570:	08 f0       	brcs	.+2      	; 0x574 <dir_next+0xcc>
     572:	42 c0       	rjmp	.+132    	; 0x5f8 <dir_next+0x150>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
     574:	f5 01       	movw	r30, r10
     576:	20 87       	std	Z+8, r18	; 0x08
     578:	31 87       	std	Z+9, r19	; 0x09
     57a:	42 87       	std	Z+10, r20	; 0x0a
     57c:	53 87       	std	Z+11, r21	; 0x0b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
     57e:	c0 91 04 01 	lds	r28, 0x0104
     582:	d0 91 05 01 	lds	r29, 0x0105


	clst -= 2;
     586:	8e ef       	ldi	r24, 0xFE	; 254
     588:	e8 2e       	mov	r14, r24
     58a:	8f ef       	ldi	r24, 0xFF	; 255
     58c:	f8 2e       	mov	r15, r24
     58e:	8f ef       	ldi	r24, 0xFF	; 255
     590:	08 2f       	mov	r16, r24
     592:	8f ef       	ldi	r24, 0xFF	; 255
     594:	18 2f       	mov	r17, r24
     596:	e2 0e       	add	r14, r18
     598:	f3 1e       	adc	r15, r19
     59a:	04 1f       	adc	r16, r20
     59c:	15 1f       	adc	r17, r21
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     59e:	88 85       	ldd	r24, Y+8	; 0x08
     5a0:	99 85       	ldd	r25, Y+9	; 0x09
     5a2:	aa 85       	ldd	r26, Y+10	; 0x0a
     5a4:	bb 85       	ldd	r27, Y+11	; 0x0b
     5a6:	02 97       	sbiw	r24, 0x02	; 2
     5a8:	a1 09       	sbc	r26, r1
     5aa:	b1 09       	sbc	r27, r1
     5ac:	e8 16       	cp	r14, r24
     5ae:	f9 06       	cpc	r15, r25
     5b0:	0a 07       	cpc	r16, r26
     5b2:	1b 07       	cpc	r17, r27
     5b4:	28 f0       	brcs	.+10     	; 0x5c0 <dir_next+0x118>
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	40 e0       	ldi	r20, 0x00	; 0
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	12 c0       	rjmp	.+36     	; 0x5e4 <dir_next+0x13c>
	return (DWORD)clst * fs->csize + fs->database;
     5c0:	29 81       	ldd	r18, Y+1	; 0x01
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	c8 01       	movw	r24, r16
     5ca:	b7 01       	movw	r22, r14
     5cc:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsi3>
     5d0:	9b 01       	movw	r18, r22
     5d2:	ac 01       	movw	r20, r24
     5d4:	8c 89       	ldd	r24, Y+20	; 0x14
     5d6:	9d 89       	ldd	r25, Y+21	; 0x15
     5d8:	ae 89       	ldd	r26, Y+22	; 0x16
     5da:	bf 89       	ldd	r27, Y+23	; 0x17
     5dc:	28 0f       	add	r18, r24
     5de:	39 1f       	adc	r19, r25
     5e0:	4a 1f       	adc	r20, r26
     5e2:	5b 1f       	adc	r21, r27
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(clst);
     5e4:	f5 01       	movw	r30, r10
     5e6:	24 87       	std	Z+12, r18	; 0x0c
     5e8:	35 87       	std	Z+13, r19	; 0x0d
     5ea:	46 87       	std	Z+14, r20	; 0x0e
     5ec:	57 87       	std	Z+15, r21	; 0x0f
			}
		}
	}

	dj->index = i;
     5ee:	f5 01       	movw	r30, r10
     5f0:	d1 82       	std	Z+1, r13	; 0x01
     5f2:	c0 82       	st	Z, r12
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	01 c0       	rjmp	.+2      	; 0x5fa <dir_next+0x152>

	return FR_OK;
     5f8:	83 e0       	ldi	r24, 0x03	; 3
}
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	bf 90       	pop	r11
     60c:	af 90       	pop	r10
     60e:	08 95       	ret

00000610 <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
     610:	2f 92       	push	r2
     612:	3f 92       	push	r3
     614:	4f 92       	push	r4
     616:	5f 92       	push	r5
     618:	6f 92       	push	r6
     61a:	7f 92       	push	r7
     61c:	8f 92       	push	r8
     61e:	9f 92       	push	r9
     620:	af 92       	push	r10
     622:	bf 92       	push	r11
     624:	cf 92       	push	r12
     626:	df 92       	push	r13
     628:	ef 92       	push	r14
     62a:	ff 92       	push	r15
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	e8 2f       	mov	r30, r24
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
     636:	c0 91 04 01 	lds	r28, 0x0104
     63a:	d0 91 05 01 	lds	r29, 0x0105


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     63e:	20 97       	sbiw	r28, 0x00	; 0
     640:	11 f4       	brne	.+4      	; 0x646 <pf_lseek+0x36>
     642:	86 e0       	ldi	r24, 0x06	; 6
     644:	0d c1       	rjmp	.+538    	; 0x860 <pf_lseek+0x250>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
     646:	8a 81       	ldd	r24, Y+2	; 0x02
     648:	80 fd       	sbrc	r24, 0
     64a:	02 c0       	rjmp	.+4      	; 0x650 <pf_lseek+0x40>
     64c:	85 e0       	ldi	r24, 0x05	; 5
     64e:	08 c1       	rjmp	.+528    	; 0x860 <pf_lseek+0x250>
     650:	ac 8c       	ldd	r10, Y+28	; 0x1c
     652:	bd 8c       	ldd	r11, Y+29	; 0x1d
     654:	ce 8c       	ldd	r12, Y+30	; 0x1e
     656:	df 8c       	ldd	r13, Y+31	; 0x1f
     658:	4e 2f       	mov	r20, r30
     65a:	59 2f       	mov	r21, r25
     65c:	cb 01       	movw	r24, r22
     65e:	da 01       	movw	r26, r20
     660:	3c 01       	movw	r6, r24
     662:	4d 01       	movw	r8, r26
     664:	a6 14       	cp	r10, r6
     666:	b7 04       	cpc	r11, r7
     668:	c8 04       	cpc	r12, r8
     66a:	d9 04       	cpc	r13, r9
     66c:	10 f4       	brcc	.+4      	; 0x672 <pf_lseek+0x62>
     66e:	35 01       	movw	r6, r10
     670:	46 01       	movw	r8, r12
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
     672:	28 8d       	ldd	r18, Y+24	; 0x18
     674:	39 8d       	ldd	r19, Y+25	; 0x19
     676:	4a 8d       	ldd	r20, Y+26	; 0x1a
     678:	5b 8d       	ldd	r21, Y+27	; 0x1b
	fs->fptr = 0;
     67a:	18 8e       	std	Y+24, r1	; 0x18
     67c:	19 8e       	std	Y+25, r1	; 0x19
     67e:	1a 8e       	std	Y+26, r1	; 0x1a
     680:	1b 8e       	std	Y+27, r1	; 0x1b
	if (ofs > 0) {
     682:	61 14       	cp	r6, r1
     684:	71 04       	cpc	r7, r1
     686:	81 04       	cpc	r8, r1
     688:	91 04       	cpc	r9, r1
     68a:	09 f4       	brne	.+2      	; 0x68e <pf_lseek+0x7e>
     68c:	e8 c0       	rjmp	.+464    	; 0x85e <pf_lseek+0x24e>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	a8 2e       	mov	r10, r24
     692:	bb 24       	eor	r11, r11
     694:	cc 24       	eor	r12, r12
     696:	dd 24       	eor	r13, r13
     698:	99 e0       	ldi	r25, 0x09	; 9
     69a:	aa 0c       	add	r10, r10
     69c:	bb 1c       	adc	r11, r11
     69e:	cc 1c       	adc	r12, r12
     6a0:	dd 1c       	adc	r13, r13
     6a2:	9a 95       	dec	r25
     6a4:	d1 f7       	brne	.-12     	; 0x69a <pf_lseek+0x8a>
		if (ifptr > 0 &&
     6a6:	21 15       	cp	r18, r1
     6a8:	31 05       	cpc	r19, r1
     6aa:	41 05       	cpc	r20, r1
     6ac:	51 05       	cpc	r21, r1
     6ae:	b1 f1       	breq	.+108    	; 0x71c <pf_lseek+0x10c>
     6b0:	19 01       	movw	r2, r18
     6b2:	2a 01       	movw	r4, r20
     6b4:	08 94       	sec
     6b6:	21 08       	sbc	r2, r1
     6b8:	31 08       	sbc	r3, r1
     6ba:	41 08       	sbc	r4, r1
     6bc:	51 08       	sbc	r5, r1
     6be:	c4 01       	movw	r24, r8
     6c0:	b3 01       	movw	r22, r6
     6c2:	61 50       	subi	r22, 0x01	; 1
     6c4:	70 40       	sbci	r23, 0x00	; 0
     6c6:	80 40       	sbci	r24, 0x00	; 0
     6c8:	90 40       	sbci	r25, 0x00	; 0
     6ca:	a6 01       	movw	r20, r12
     6cc:	95 01       	movw	r18, r10
     6ce:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodsi4>
     6d2:	79 01       	movw	r14, r18
     6d4:	8a 01       	movw	r16, r20
     6d6:	c2 01       	movw	r24, r4
     6d8:	b1 01       	movw	r22, r2
     6da:	a6 01       	movw	r20, r12
     6dc:	95 01       	movw	r18, r10
     6de:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodsi4>
     6e2:	e2 16       	cp	r14, r18
     6e4:	f3 06       	cpc	r15, r19
     6e6:	04 07       	cpc	r16, r20
     6e8:	15 07       	cpc	r17, r21
     6ea:	c0 f0       	brcs	.+48     	; 0x71c <pf_lseek+0x10c>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
     6ec:	88 27       	eor	r24, r24
     6ee:	99 27       	eor	r25, r25
     6f0:	dc 01       	movw	r26, r24
     6f2:	8a 19       	sub	r24, r10
     6f4:	9b 09       	sbc	r25, r11
     6f6:	ac 09       	sbc	r26, r12
     6f8:	bd 09       	sbc	r27, r13
     6fa:	82 21       	and	r24, r2
     6fc:	93 21       	and	r25, r3
     6fe:	a4 21       	and	r26, r4
     700:	b5 21       	and	r27, r5
     702:	88 8f       	std	Y+24, r24	; 0x18
     704:	99 8f       	std	Y+25, r25	; 0x19
     706:	aa 8f       	std	Y+26, r26	; 0x1a
     708:	bb 8f       	std	Y+27, r27	; 0x1b
			ofs -= fs->fptr;
     70a:	68 1a       	sub	r6, r24
     70c:	79 0a       	sbc	r7, r25
     70e:	8a 0a       	sbc	r8, r26
     710:	9b 0a       	sbc	r9, r27
			clst = fs->curr_clust;
     712:	2c a1       	ldd	r18, Y+36	; 0x24
     714:	3d a1       	ldd	r19, Y+37	; 0x25
     716:	4e a1       	ldd	r20, Y+38	; 0x26
     718:	5f a1       	ldd	r21, Y+39	; 0x27
     71a:	33 c0       	rjmp	.+102    	; 0x782 <pf_lseek+0x172>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
     71c:	28 a1       	ldd	r18, Y+32	; 0x20
     71e:	39 a1       	ldd	r19, Y+33	; 0x21
     720:	4a a1       	ldd	r20, Y+34	; 0x22
     722:	5b a1       	ldd	r21, Y+35	; 0x23
			fs->curr_clust = clst;
     724:	2c a3       	std	Y+36, r18	; 0x24
     726:	3d a3       	std	Y+37, r19	; 0x25
     728:	4e a3       	std	Y+38, r20	; 0x26
     72a:	5f a3       	std	Y+39, r21	; 0x27
     72c:	2a c0       	rjmp	.+84     	; 0x782 <pf_lseek+0x172>
		}
		while (ofs > bcs) {				/* Cluster following loop */
			clst = get_fat(clst);		/* Follow cluster chain */
     72e:	ca 01       	movw	r24, r20
     730:	b9 01       	movw	r22, r18
     732:	0e 94 68 01 	call	0x2d0	; 0x2d0 <get_fat>
     736:	9b 01       	movw	r18, r22
     738:	ac 01       	movw	r20, r24
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
     73a:	62 30       	cpi	r22, 0x02	; 2
     73c:	71 05       	cpc	r23, r1
     73e:	81 05       	cpc	r24, r1
     740:	91 05       	cpc	r25, r1
     742:	08 f4       	brcc	.+2      	; 0x746 <pf_lseek+0x136>
     744:	89 c0       	rjmp	.+274    	; 0x858 <pf_lseek+0x248>
     746:	88 85       	ldd	r24, Y+8	; 0x08
     748:	99 85       	ldd	r25, Y+9	; 0x09
     74a:	aa 85       	ldd	r26, Y+10	; 0x0a
     74c:	bb 85       	ldd	r27, Y+11	; 0x0b
     74e:	28 17       	cp	r18, r24
     750:	39 07       	cpc	r19, r25
     752:	4a 07       	cpc	r20, r26
     754:	5b 07       	cpc	r21, r27
     756:	08 f0       	brcs	.+2      	; 0x75a <pf_lseek+0x14a>
     758:	7f c0       	rjmp	.+254    	; 0x858 <pf_lseek+0x248>
			fs->curr_clust = clst;
     75a:	2c a3       	std	Y+36, r18	; 0x24
     75c:	3d a3       	std	Y+37, r19	; 0x25
     75e:	4e a3       	std	Y+38, r20	; 0x26
     760:	5f a3       	std	Y+39, r21	; 0x27
			fs->fptr += bcs;
     762:	88 8d       	ldd	r24, Y+24	; 0x18
     764:	99 8d       	ldd	r25, Y+25	; 0x19
     766:	aa 8d       	ldd	r26, Y+26	; 0x1a
     768:	bb 8d       	ldd	r27, Y+27	; 0x1b
     76a:	8a 0d       	add	r24, r10
     76c:	9b 1d       	adc	r25, r11
     76e:	ac 1d       	adc	r26, r12
     770:	bd 1d       	adc	r27, r13
     772:	88 8f       	std	Y+24, r24	; 0x18
     774:	99 8f       	std	Y+25, r25	; 0x19
     776:	aa 8f       	std	Y+26, r26	; 0x1a
     778:	bb 8f       	std	Y+27, r27	; 0x1b
			ofs -= bcs;
     77a:	6a 18       	sub	r6, r10
     77c:	7b 08       	sbc	r7, r11
     77e:	8c 08       	sbc	r8, r12
     780:	9d 08       	sbc	r9, r13
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
     782:	a6 14       	cp	r10, r6
     784:	b7 04       	cpc	r11, r7
     786:	c8 04       	cpc	r12, r8
     788:	d9 04       	cpc	r13, r9
     78a:	88 f2       	brcs	.-94     	; 0x72e <pf_lseek+0x11e>
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
     78c:	88 8d       	ldd	r24, Y+24	; 0x18
     78e:	99 8d       	ldd	r25, Y+25	; 0x19
     790:	aa 8d       	ldd	r26, Y+26	; 0x1a
     792:	bb 8d       	ldd	r27, Y+27	; 0x1b
     794:	86 0d       	add	r24, r6
     796:	97 1d       	adc	r25, r7
     798:	a8 1d       	adc	r26, r8
     79a:	b9 1d       	adc	r27, r9
     79c:	88 8f       	std	Y+24, r24	; 0x18
     79e:	99 8f       	std	Y+25, r25	; 0x19
     7a0:	aa 8f       	std	Y+26, r26	; 0x1a
     7a2:	bb 8f       	std	Y+27, r27	; 0x1b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
     7a4:	00 91 04 01 	lds	r16, 0x0104
     7a8:	10 91 05 01 	lds	r17, 0x0105


	clst -= 2;
     7ac:	8e ef       	ldi	r24, 0xFE	; 254
     7ae:	a8 2e       	mov	r10, r24
     7b0:	8f ef       	ldi	r24, 0xFF	; 255
     7b2:	b8 2e       	mov	r11, r24
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	c8 2e       	mov	r12, r24
     7b8:	8f ef       	ldi	r24, 0xFF	; 255
     7ba:	d8 2e       	mov	r13, r24
     7bc:	a2 0e       	add	r10, r18
     7be:	b3 1e       	adc	r11, r19
     7c0:	c4 1e       	adc	r12, r20
     7c2:	d5 1e       	adc	r13, r21
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     7c4:	f8 01       	movw	r30, r16
     7c6:	80 85       	ldd	r24, Z+8	; 0x08
     7c8:	91 85       	ldd	r25, Z+9	; 0x09
     7ca:	a2 85       	ldd	r26, Z+10	; 0x0a
     7cc:	b3 85       	ldd	r27, Z+11	; 0x0b
     7ce:	02 97       	sbiw	r24, 0x02	; 2
     7d0:	a1 09       	sbc	r26, r1
     7d2:	b1 09       	sbc	r27, r1
     7d4:	a8 16       	cp	r10, r24
     7d6:	b9 06       	cpc	r11, r25
     7d8:	ca 06       	cpc	r12, r26
     7da:	db 06       	cpc	r13, r27
     7dc:	e8 f5       	brcc	.+122    	; 0x858 <pf_lseek+0x248>
	return (DWORD)clst * fs->csize + fs->database;
     7de:	21 81       	ldd	r18, Z+1	; 0x01
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	40 e0       	ldi	r20, 0x00	; 0
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	c6 01       	movw	r24, r12
     7e8:	b5 01       	movw	r22, r10
     7ea:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsi3>
     7ee:	9b 01       	movw	r18, r22
     7f0:	ac 01       	movw	r20, r24
     7f2:	f8 01       	movw	r30, r16
     7f4:	84 89       	ldd	r24, Z+20	; 0x14
     7f6:	95 89       	ldd	r25, Z+21	; 0x15
     7f8:	a6 89       	ldd	r26, Z+22	; 0x16
     7fa:	b7 89       	ldd	r27, Z+23	; 0x17
     7fc:	28 0f       	add	r18, r24
     7fe:	39 1f       	adc	r19, r25
     800:	4a 1f       	adc	r20, r26
     802:	5b 1f       	adc	r21, r27
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
     804:	21 15       	cp	r18, r1
     806:	31 05       	cpc	r19, r1
     808:	41 05       	cpc	r20, r1
     80a:	51 05       	cpc	r21, r1
     80c:	29 f1       	breq	.+74     	; 0x858 <pf_lseek+0x248>
		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
     80e:	d4 01       	movw	r26, r8
     810:	c3 01       	movw	r24, r6
     812:	19 e0       	ldi	r17, 0x09	; 9
     814:	b6 95       	lsr	r27
     816:	a7 95       	ror	r26
     818:	97 95       	ror	r25
     81a:	87 95       	ror	r24
     81c:	1a 95       	dec	r17
     81e:	d1 f7       	brne	.-12     	; 0x814 <pf_lseek+0x204>
     820:	98 2f       	mov	r25, r24
     822:	8b 83       	std	Y+3, r24	; 0x03
		if (ofs % 512)
     824:	ff ef       	ldi	r31, 0xFF	; 255
     826:	ef 2e       	mov	r14, r31
     828:	f1 e0       	ldi	r31, 0x01	; 1
     82a:	ff 2e       	mov	r15, r31
     82c:	01 2d       	mov	r16, r1
     82e:	11 2d       	mov	r17, r1
     830:	6e 20       	and	r6, r14
     832:	7f 20       	and	r7, r15
     834:	80 22       	and	r8, r16
     836:	91 22       	and	r9, r17
     838:	61 14       	cp	r6, r1
     83a:	71 04       	cpc	r7, r1
     83c:	81 04       	cpc	r8, r1
     83e:	91 04       	cpc	r9, r1
     840:	71 f0       	breq	.+28     	; 0x85e <pf_lseek+0x24e>
			fs->dsect = sect + fs->csect++;
     842:	28 0f       	add	r18, r24
     844:	31 1d       	adc	r19, r1
     846:	41 1d       	adc	r20, r1
     848:	51 1d       	adc	r21, r1
     84a:	28 a7       	std	Y+40, r18	; 0x28
     84c:	39 a7       	std	Y+41, r19	; 0x29
     84e:	4a a7       	std	Y+42, r20	; 0x2a
     850:	5b a7       	std	Y+43, r21	; 0x2b
     852:	9f 5f       	subi	r25, 0xFF	; 255
     854:	9b 83       	std	Y+3, r25	; 0x03
     856:	03 c0       	rjmp	.+6      	; 0x85e <pf_lseek+0x24e>
	}

	return FR_OK;

fe_abort:
	fs->flag = 0;
     858:	1a 82       	std	Y+2, r1	; 0x02
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	01 c0       	rjmp	.+2      	; 0x860 <pf_lseek+0x250>
	return FR_DISK_ERR;
     85e:	80 e0       	ldi	r24, 0x00	; 0
}
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	0f 91       	pop	r16
     868:	ff 90       	pop	r15
     86a:	ef 90       	pop	r14
     86c:	df 90       	pop	r13
     86e:	cf 90       	pop	r12
     870:	bf 90       	pop	r11
     872:	af 90       	pop	r10
     874:	9f 90       	pop	r9
     876:	8f 90       	pop	r8
     878:	7f 90       	pop	r7
     87a:	6f 90       	pop	r6
     87c:	5f 90       	pop	r5
     87e:	4f 90       	pop	r4
     880:	3f 90       	pop	r3
     882:	2f 90       	pop	r2
     884:	08 95       	ret

00000886 <pf_readdir>:

FRESULT pf_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
     886:	af 92       	push	r10
     888:	bf 92       	push	r11
     88a:	cf 92       	push	r12
     88c:	df 92       	push	r13
     88e:	ef 92       	push	r14
     890:	ff 92       	push	r15
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	df 93       	push	r29
     898:	cf 93       	push	r28
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	ac 97       	sbiw	r28, 0x2c	; 44
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	7c 01       	movw	r14, r24
     8ac:	5b 01       	movw	r10, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
     8ae:	e0 91 04 01 	lds	r30, 0x0104
     8b2:	f0 91 05 01 	lds	r31, 0x0105


	if (!fs) {				/* Check file system */
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	11 f4       	brne	.+4      	; 0x8be <pf_readdir+0x38>
     8ba:	86 e0       	ldi	r24, 0x06	; 6
     8bc:	c6 c0       	rjmp	.+396    	; 0xa4a <pf_readdir+0x1c4>
		res = FR_NOT_ENABLED;
	} else {
		fs->buf = dir;
     8be:	ce 01       	movw	r24, r28
     8c0:	0d 96       	adiw	r24, 0x0d	; 13
     8c2:	97 83       	std	Z+7, r25	; 0x07
     8c4:	86 83       	std	Z+6, r24	; 0x06
		dj->fn = sp;
     8c6:	ce 01       	movw	r24, r28
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	d7 01       	movw	r26, r14
     8cc:	13 96       	adiw	r26, 0x03	; 3
     8ce:	9c 93       	st	X, r25
     8d0:	8e 93       	st	-X, r24
     8d2:	12 97       	sbiw	r26, 0x02	; 2
		if (!fno) {
     8d4:	61 15       	cp	r22, r1
     8d6:	71 05       	cpc	r23, r1
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <pf_readdir+0x5c>
			res = dir_rewind(dj);
     8da:	c7 01       	movw	r24, r14
     8dc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <dir_rewind>
     8e0:	b4 c0       	rjmp	.+360    	; 0xa4a <pf_readdir+0x1c4>
	FRESULT res;
	BYTE a, c, *dir;


	res = FR_NO_FILE;
	dir = FatFs->buf;
     8e2:	c6 80       	ldd	r12, Z+6	; 0x06
     8e4:	d7 80       	ldd	r13, Z+7	; 0x07
     8e6:	83 e0       	ldi	r24, 0x03	; 3
     8e8:	26 c0       	rjmp	.+76     	; 0x936 <pf_readdir+0xb0>
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
     8ea:	f7 01       	movw	r30, r14
     8ec:	20 81       	ld	r18, Z
     8ee:	31 81       	ldd	r19, Z+1	; 0x01
     8f0:	2f 70       	andi	r18, 0x0F	; 15
     8f2:	30 70       	andi	r19, 0x00	; 0
     8f4:	e5 e0       	ldi	r30, 0x05	; 5
     8f6:	22 0f       	add	r18, r18
     8f8:	33 1f       	adc	r19, r19
     8fa:	ea 95       	dec	r30
     8fc:	e1 f7       	brne	.-8      	; 0x8f6 <pf_readdir+0x70>
     8fe:	c6 01       	movw	r24, r12
     900:	00 e2       	ldi	r16, 0x20	; 32
     902:	10 e0       	ldi	r17, 0x00	; 0
     904:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
     908:	88 23       	and	r24, r24
     90a:	11 f0       	breq	.+4      	; 0x910 <pf_readdir+0x8a>
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	1f c0       	rjmp	.+62     	; 0x94e <pf_readdir+0xc8>
		c = dir[DIR_Name];
     910:	d6 01       	movw	r26, r12
     912:	9c 91       	ld	r25, X
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     914:	99 23       	and	r25, r25
     916:	09 f4       	brne	.+2      	; 0x91a <pf_readdir+0x94>
     918:	a9 c0       	rjmp	.+338    	; 0xa6c <pf_readdir+0x1e6>
		a = dir[DIR_Attr] & AM_MASK;
     91a:	1b 96       	adiw	r26, 0x0b	; 11
     91c:	8c 91       	ld	r24, X
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
     91e:	95 3e       	cpi	r25, 0xE5	; 229
     920:	29 f0       	breq	.+10     	; 0x92c <pf_readdir+0xa6>
     922:	9e 32       	cpi	r25, 0x2E	; 46
     924:	19 f0       	breq	.+6      	; 0x92c <pf_readdir+0xa6>
     926:	8f 73       	andi	r24, 0x3F	; 63
     928:	83 ff       	sbrs	r24, 3
     92a:	1d c0       	rjmp	.+58     	; 0x966 <pf_readdir+0xe0>
			break;
		res = dir_next(dj);				/* Next entry */
     92c:	c7 01       	movw	r24, r14
     92e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <dir_next>
		if (res != FR_OK) break;
     932:	88 23       	and	r24, r24
     934:	61 f4       	brne	.+24     	; 0x94e <pf_readdir+0xc8>
	BYTE a, c, *dir;


	res = FR_NO_FILE;
	dir = FatFs->buf;
	while (dj->sect) {
     936:	f7 01       	movw	r30, r14
     938:	44 85       	ldd	r20, Z+12	; 0x0c
     93a:	55 85       	ldd	r21, Z+13	; 0x0d
     93c:	66 85       	ldd	r22, Z+14	; 0x0e
     93e:	77 85       	ldd	r23, Z+15	; 0x0f
     940:	41 15       	cp	r20, r1
     942:	51 05       	cpc	r21, r1
     944:	61 05       	cpc	r22, r1
     946:	71 05       	cpc	r23, r1
     948:	81 f6       	brne	.-96     	; 0x8ea <pf_readdir+0x64>
			break;
		res = dir_next(dj);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
     94a:	88 23       	and	r24, r24
     94c:	61 f0       	breq	.+24     	; 0x966 <pf_readdir+0xe0>
     94e:	d7 01       	movw	r26, r14
     950:	1c 96       	adiw	r26, 0x0c	; 12
     952:	1d 92       	st	X+, r1
     954:	1d 92       	st	X+, r1
     956:	1d 92       	st	X+, r1
     958:	1c 92       	st	X, r1
     95a:	1f 97       	sbiw	r26, 0x0f	; 15
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
		} else {
			res = dir_read(dj);
			if (res == FR_NO_FILE) {
     95c:	83 30       	cpi	r24, 0x03	; 3
     95e:	19 f0       	breq	.+6      	; 0x966 <pf_readdir+0xe0>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
     960:	88 23       	and	r24, r24
     962:	09 f0       	breq	.+2      	; 0x966 <pf_readdir+0xe0>
     964:	72 c0       	rjmp	.+228    	; 0xa4a <pf_readdir+0x1c4>
{
	BYTE i, c, *dir;
	char *p;


	p = fno->fname;
     966:	95 01       	movw	r18, r10
     968:	27 5f       	subi	r18, 0xF7	; 247
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
     96c:	f7 01       	movw	r30, r14
     96e:	84 85       	ldd	r24, Z+12	; 0x0c
     970:	95 85       	ldd	r25, Z+13	; 0x0d
     972:	a6 85       	ldd	r26, Z+14	; 0x0e
     974:	b7 85       	ldd	r27, Z+15	; 0x0f
     976:	00 97       	sbiw	r24, 0x00	; 0
     978:	a1 05       	cpc	r26, r1
     97a:	b1 05       	cpc	r27, r1
     97c:	09 f4       	brne	.+2      	; 0x980 <pf_readdir+0xfa>
     97e:	56 c0       	rjmp	.+172    	; 0xa2c <pf_readdir+0x1a6>
		dir = FatFs->buf;
     980:	e0 91 04 01 	lds	r30, 0x0104
     984:	f0 91 05 01 	lds	r31, 0x0105
     988:	46 81       	ldd	r20, Z+6	; 0x06
     98a:	57 81       	ldd	r21, Z+7	; 0x07
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
		for (i = 0; i < 8; i++) {	/* Copy file name body */
			c = dir[i];
     990:	fa 01       	movw	r30, r20
     992:	e8 0f       	add	r30, r24
     994:	f9 1f       	adc	r31, r25
     996:	e0 81       	ld	r30, Z
			if (c == ' ') break;
     998:	e0 32       	cpi	r30, 0x20	; 32
     99a:	51 f0       	breq	.+20     	; 0x9b0 <pf_readdir+0x12a>
			if (c == 0x05) c = 0xE5;
     99c:	e5 30       	cpi	r30, 0x05	; 5
     99e:	09 f4       	brne	.+2      	; 0x9a2 <pf_readdir+0x11c>
     9a0:	e5 ee       	ldi	r30, 0xE5	; 229
			*p++ = c;
     9a2:	d9 01       	movw	r26, r18
     9a4:	ed 93       	st	X+, r30
     9a6:	9d 01       	movw	r18, r26
     9a8:	01 96       	adiw	r24, 0x01	; 1


	p = fno->fname;
	if (dj->sect) {
		dir = FatFs->buf;
		for (i = 0; i < 8; i++) {	/* Copy file name body */
     9aa:	88 30       	cpi	r24, 0x08	; 8
     9ac:	91 05       	cpc	r25, r1
     9ae:	81 f7       	brne	.-32     	; 0x990 <pf_readdir+0x10a>
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
     9b0:	fa 01       	movw	r30, r20
     9b2:	80 85       	ldd	r24, Z+8	; 0x08
     9b4:	80 32       	cpi	r24, 0x20	; 32
     9b6:	11 f4       	brne	.+4      	; 0x9bc <pf_readdir+0x136>
     9b8:	f9 01       	movw	r30, r18
     9ba:	10 c0       	rjmp	.+32     	; 0x9dc <pf_readdir+0x156>
			*p++ = '.';
     9bc:	f9 01       	movw	r30, r18
     9be:	8e e2       	ldi	r24, 0x2E	; 46
     9c0:	81 93       	st	Z+, r24
     9c2:	da 01       	movw	r26, r20
			for (i = 8; i < 11; i++) {
     9c4:	2c 5f       	subi	r18, 0xFC	; 252
     9c6:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
     9c8:	18 96       	adiw	r26, 0x08	; 8
     9ca:	8c 91       	ld	r24, X
     9cc:	18 97       	sbiw	r26, 0x08	; 8
				if (c == ' ') break;
     9ce:	80 32       	cpi	r24, 0x20	; 32
     9d0:	29 f0       	breq	.+10     	; 0x9dc <pf_readdir+0x156>
				*p++ = c;
     9d2:	81 93       	st	Z+, r24
     9d4:	11 96       	adiw	r26, 0x01	; 1
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
     9d6:	e2 17       	cp	r30, r18
     9d8:	f3 07       	cpc	r31, r19
     9da:	b1 f7       	brne	.-20     	; 0x9c8 <pf_readdir+0x142>
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     9dc:	da 01       	movw	r26, r20
     9de:	1b 96       	adiw	r26, 0x0b	; 11
     9e0:	8c 91       	ld	r24, X
     9e2:	d5 01       	movw	r26, r10
     9e4:	18 96       	adiw	r26, 0x08	; 8
     9e6:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
     9e8:	da 01       	movw	r26, r20
     9ea:	5c 96       	adiw	r26, 0x1c	; 28
     9ec:	0d 91       	ld	r16, X+
     9ee:	1d 91       	ld	r17, X+
     9f0:	2d 91       	ld	r18, X+
     9f2:	3c 91       	ld	r19, X
     9f4:	5f 97       	sbiw	r26, 0x1f	; 31
     9f6:	d5 01       	movw	r26, r10
     9f8:	0d 93       	st	X+, r16
     9fa:	1d 93       	st	X+, r17
     9fc:	2d 93       	st	X+, r18
     9fe:	3c 93       	st	X, r19
     a00:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
     a02:	da 01       	movw	r26, r20
     a04:	58 96       	adiw	r26, 0x18	; 24
     a06:	8d 91       	ld	r24, X+
     a08:	9c 91       	ld	r25, X
     a0a:	59 97       	sbiw	r26, 0x19	; 25
     a0c:	d5 01       	movw	r26, r10
     a0e:	15 96       	adiw	r26, 0x05	; 5
     a10:	9c 93       	st	X, r25
     a12:	8e 93       	st	-X, r24
     a14:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
     a16:	da 01       	movw	r26, r20
     a18:	56 96       	adiw	r26, 0x16	; 22
     a1a:	8d 91       	ld	r24, X+
     a1c:	9c 91       	ld	r25, X
     a1e:	57 97       	sbiw	r26, 0x17	; 23
     a20:	d5 01       	movw	r26, r10
     a22:	17 96       	adiw	r26, 0x07	; 7
     a24:	9c 93       	st	X, r25
     a26:	8e 93       	st	-X, r24
     a28:	16 97       	sbiw	r26, 0x06	; 6
     a2a:	9f 01       	movw	r18, r30
	}
	*p = 0;
     a2c:	f9 01       	movw	r30, r18
     a2e:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
     a30:	c7 01       	movw	r24, r14
     a32:	0e 94 54 02 	call	0x4a8	; 0x4a8 <dir_next>
				if (res == FR_NO_FILE) {
     a36:	83 30       	cpi	r24, 0x03	; 3
     a38:	41 f4       	brne	.+16     	; 0xa4a <pf_readdir+0x1c4>
					dj->sect = 0;
     a3a:	d7 01       	movw	r26, r14
     a3c:	1c 96       	adiw	r26, 0x0c	; 12
     a3e:	1d 92       	st	X+, r1
     a40:	1d 92       	st	X+, r1
     a42:	1d 92       	st	X+, r1
     a44:	1c 92       	st	X, r1
     a46:	1f 97       	sbiw	r26, 0x0f	; 15
     a48:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	return res;
}
     a4a:	ac 96       	adiw	r28, 0x2c	; 44
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
     a56:	cf 91       	pop	r28
     a58:	df 91       	pop	r29
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ff 90       	pop	r15
     a60:	ef 90       	pop	r14
     a62:	df 90       	pop	r13
     a64:	cf 90       	pop	r12
     a66:	bf 90       	pop	r11
     a68:	af 90       	pop	r10
     a6a:	08 95       	ret
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
				if (res == FR_NO_FILE) {
					dj->sect = 0;
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	6f cf       	rjmp	.-290    	; 0x94e <pf_readdir+0xc8>

00000a70 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const char *path	/* Full-path string to find a file or directory */
)
{
     a70:	8f 92       	push	r8
     a72:	9f 92       	push	r9
     a74:	af 92       	push	r10
     a76:	bf 92       	push	r11
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	ec 01       	movw	r28, r24
     a8a:	7b 01       	movw	r14, r22
     a8c:	03 c0       	rjmp	.+6      	; 0xa94 <follow_path+0x24>
	FRESULT res;
	BYTE *dir;


	while (*path == ' ') path++;		/* Skip leading spaces */
     a8e:	08 94       	sec
     a90:	e1 1c       	adc	r14, r1
     a92:	f1 1c       	adc	r15, r1
     a94:	f7 01       	movw	r30, r14
     a96:	80 81       	ld	r24, Z
     a98:	80 32       	cpi	r24, 0x20	; 32
     a9a:	c9 f3       	breq	.-14     	; 0xa8e <follow_path+0x1e>
	if (*path == '/') path++;			/* Strip heading separator */
     a9c:	8f 32       	cpi	r24, 0x2F	; 47
     a9e:	19 f4       	brne	.+6      	; 0xaa6 <follow_path+0x36>
     aa0:	08 94       	sec
     aa2:	e1 1c       	adc	r14, r1
     aa4:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Set start directory (always root dir) */
     aa6:	1c 82       	std	Y+4, r1	; 0x04
     aa8:	1d 82       	std	Y+5, r1	; 0x05
     aaa:	1e 82       	std	Y+6, r1	; 0x06
     aac:	1f 82       	std	Y+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
     aae:	f7 01       	movw	r30, r14
     ab0:	80 81       	ld	r24, Z
     ab2:	81 32       	cpi	r24, 0x21	; 33
     ab4:	68 f4       	brcc	.+26     	; 0xad0 <follow_path+0x60>
		res = dir_rewind(dj);
     ab6:	ce 01       	movw	r24, r28
     ab8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <dir_rewind>
     abc:	b8 2e       	mov	r11, r24
		FatFs->buf[0] = 0;
     abe:	e0 91 04 01 	lds	r30, 0x0104
     ac2:	f0 91 05 01 	lds	r31, 0x0105
     ac6:	06 80       	ldd	r0, Z+6	; 0x06
     ac8:	f7 81       	ldd	r31, Z+7	; 0x07
     aca:	e0 2d       	mov	r30, r0
     acc:	10 82       	st	Z, r1
     ace:	ab c0       	rjmp	.+342    	; 0xc26 <follow_path+0x1b6>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     ad0:	80 e2       	ldi	r24, 0x20	; 32
     ad2:	88 2e       	mov	r8, r24
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     ad4:	99 24       	eor	r9, r9
     ad6:	93 94       	inc	r9
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
     ad8:	aa 81       	ldd	r26, Y+2	; 0x02
     ada:	bb 81       	ldd	r27, Y+3	; 0x03
     adc:	fd 01       	movw	r30, r26
     ade:	8b e0       	ldi	r24, 0x0B	; 11
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <follow_path+0x76>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     ae4:	81 92       	st	Z+, r8
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	2f ef       	ldi	r18, 0xFF	; 255
     aea:	8f 3f       	cpi	r24, 0xFF	; 255
     aec:	92 07       	cpc	r25, r18
     aee:	d1 f7       	brne	.-12     	; 0xae4 <follow_path+0x74>
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	aa 24       	eor	r10, r10
     af4:	38 e0       	ldi	r19, 0x08	; 8
     af6:	02 c0       	rjmp	.+4      	; 0xafc <follow_path+0x8c>
     af8:	28 e0       	ldi	r18, 0x08	; 8
     afa:	3b e0       	ldi	r19, 0x0B	; 11
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
     afc:	f7 01       	movw	r30, r14
     afe:	ea 0d       	add	r30, r10
     b00:	f1 1d       	adc	r31, r1
     b02:	90 81       	ld	r25, Z
     b04:	a3 94       	inc	r10
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
     b06:	91 32       	cpi	r25, 0x21	; 33
     b08:	b0 f0       	brcs	.+44     	; 0xb36 <follow_path+0xc6>
     b0a:	9f 32       	cpi	r25, 0x2F	; 47
     b0c:	a1 f0       	breq	.+40     	; 0xb36 <follow_path+0xc6>
		if (c == '.' || i >= ni) {
     b0e:	9e 32       	cpi	r25, 0x2E	; 46
     b10:	11 f0       	breq	.+4      	; 0xb16 <follow_path+0xa6>
     b12:	23 17       	cp	r18, r19
     b14:	28 f0       	brcs	.+10     	; 0xb20 <follow_path+0xb0>
			if (ni != 8 || c != '.') break;
     b16:	38 30       	cpi	r19, 0x08	; 8
     b18:	71 f4       	brne	.+28     	; 0xb36 <follow_path+0xc6>
     b1a:	9e 32       	cpi	r25, 0x2E	; 46
     b1c:	69 f3       	breq	.-38     	; 0xaf8 <follow_path+0x88>
     b1e:	0b c0       	rjmp	.+22     	; 0xb36 <follow_path+0xc6>
		if (IsDBCS1(c) && i >= ni - 1) {	/* DBC 1st byte? */
			d = p[si++];					/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
     b20:	89 2f       	mov	r24, r25
     b22:	81 56       	subi	r24, 0x61	; 97
     b24:	8a 31       	cpi	r24, 0x1A	; 26
     b26:	08 f4       	brcc	.+2      	; 0xb2a <follow_path+0xba>
     b28:	90 52       	subi	r25, 0x20	; 32
			sfn[i++] = c;
     b2a:	fd 01       	movw	r30, r26
     b2c:	e2 0f       	add	r30, r18
     b2e:	f1 1d       	adc	r31, r1
     b30:	90 83       	st	Z, r25
     b32:	2f 5f       	subi	r18, 0xFF	; 255
     b34:	e3 cf       	rjmp	.-58     	; 0xafc <follow_path+0x8c>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     b36:	1b 96       	adiw	r26, 0x0b	; 11
     b38:	1c 92       	st	X, r1
     b3a:	1b 97       	sbiw	r26, 0x0b	; 11
     b3c:	91 32       	cpi	r25, 0x21	; 33
     b3e:	10 f4       	brcc	.+4      	; 0xb44 <follow_path+0xd4>
     b40:	1b 96       	adiw	r26, 0x0b	; 11
     b42:	9c 92       	st	X, r9
{
	FRESULT res;
	BYTE c, *dir;


	res = dir_rewind(dj);			/* Rewind directory object */
     b44:	ce 01       	movw	r24, r28
     b46:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <dir_rewind>
     b4a:	b8 2e       	mov	r11, r24
	if (res != FR_OK) return res;
     b4c:	88 23       	and	r24, r24
     b4e:	09 f0       	breq	.+2      	; 0xb52 <follow_path+0xe2>
     b50:	3f c0       	rjmp	.+126    	; 0xbd0 <follow_path+0x160>

	dir = FatFs->buf;
     b52:	e0 91 04 01 	lds	r30, 0x0104
     b56:	f0 91 05 01 	lds	r31, 0x0105
     b5a:	c6 80       	ldd	r12, Z+6	; 0x06
     b5c:	d7 80       	ldd	r13, Z+7	; 0x07
	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
     b5e:	4c 85       	ldd	r20, Y+12	; 0x0c
     b60:	5d 85       	ldd	r21, Y+13	; 0x0d
     b62:	6e 85       	ldd	r22, Y+14	; 0x0e
     b64:	7f 85       	ldd	r23, Y+15	; 0x0f
     b66:	28 81       	ld	r18, Y
     b68:	39 81       	ldd	r19, Y+1	; 0x01
     b6a:	2f 70       	andi	r18, 0x0F	; 15
     b6c:	30 70       	andi	r19, 0x00	; 0
     b6e:	05 e0       	ldi	r16, 0x05	; 5
     b70:	22 0f       	add	r18, r18
     b72:	33 1f       	adc	r19, r19
     b74:	0a 95       	dec	r16
     b76:	e1 f7       	brne	.-8      	; 0xb70 <follow_path+0x100>
     b78:	c6 01       	movw	r24, r12
     b7a:	00 e2       	ldi	r16, 0x20	; 32
     b7c:	10 e0       	ldi	r17, 0x00	; 0
     b7e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
     b82:	88 23       	and	r24, r24
     b84:	11 f0       	breq	.+4      	; 0xb8a <follow_path+0x11a>
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	22 c0       	rjmp	.+68     	; 0xbce <follow_path+0x15e>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     b8a:	f6 01       	movw	r30, r12
     b8c:	80 81       	ld	r24, Z
     b8e:	88 23       	and	r24, r24
     b90:	09 f4       	brne	.+2      	; 0xb94 <follow_path+0x124>
     b92:	57 c0       	rjmp	.+174    	; 0xc42 <follow_path+0x1d2>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
     b94:	83 85       	ldd	r24, Z+11	; 0x0b
     b96:	83 fd       	sbrc	r24, 3
     b98:	15 c0       	rjmp	.+42     	; 0xbc4 <follow_path+0x154>
     b9a:	d6 01       	movw	r26, r12
     b9c:	8a 81       	ldd	r24, Y+2	; 0x02
     b9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ba0:	9c 01       	movw	r18, r24
     ba2:	f9 01       	movw	r30, r18
     ba4:	2b e0       	ldi	r18, 0x0B	; 11
     ba6:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
     ba8:	21 50       	subi	r18, 0x01	; 1
     baa:	30 40       	sbci	r19, 0x00	; 0
     bac:	8f ef       	ldi	r24, 0xFF	; 255
     bae:	2f 3f       	cpi	r18, 0xFF	; 255
     bb0:	38 07       	cpc	r19, r24
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <follow_path+0x146>
     bb4:	49 c0       	rjmp	.+146    	; 0xc48 <follow_path+0x1d8>
     bb6:	9c 91       	ld	r25, X
     bb8:	80 81       	ld	r24, Z
     bba:	98 17       	cp	r25, r24
     bbc:	19 f4       	brne	.+6      	; 0xbc4 <follow_path+0x154>
     bbe:	11 96       	adiw	r26, 0x01	; 1
     bc0:	31 96       	adiw	r30, 0x01	; 1
     bc2:	f2 cf       	rjmp	.-28     	; 0xba8 <follow_path+0x138>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);							/* Next entry */
     bc4:	ce 01       	movw	r24, r28
     bc6:	0e 94 54 02 	call	0x4a8	; 0x4a8 <dir_next>
	} while (res == FR_OK);
     bca:	88 23       	and	r24, r24
     bcc:	41 f2       	breq	.-112    	; 0xb5e <follow_path+0xee>
     bce:	b8 2e       	mov	r11, r24
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
     bd0:	e3 e0       	ldi	r30, 0x03	; 3
     bd2:	be 16       	cp	r11, r30
     bd4:	41 f5       	brne	.+80     	; 0xc26 <follow_path+0x1b6>
     bd6:	ea 81       	ldd	r30, Y+2	; 0x02
     bd8:	fb 81       	ldd	r31, Y+3	; 0x03
     bda:	83 85       	ldd	r24, Z+11	; 0x0b
     bdc:	88 23       	and	r24, r24
     bde:	09 f1       	breq	.+66     	; 0xc22 <follow_path+0x1b2>
     be0:	22 c0       	rjmp	.+68     	; 0xc26 <follow_path+0x1b6>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
     be2:	e0 91 04 01 	lds	r30, 0x0104
     be6:	f0 91 05 01 	lds	r31, 0x0105
     bea:	06 80       	ldd	r0, Z+6	; 0x06
     bec:	f7 81       	ldd	r31, Z+7	; 0x07
     bee:	e0 2d       	mov	r30, r0
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
     bf0:	83 85       	ldd	r24, Z+11	; 0x0b
     bf2:	84 ff       	sbrs	r24, 4
     bf4:	16 c0       	rjmp	.+44     	; 0xc22 <follow_path+0x1b2>
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
     bf6:	ea 0c       	add	r14, r10
     bf8:	f1 1c       	adc	r15, r1
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust =
     bfa:	84 89       	ldd	r24, Z+20	; 0x14
     bfc:	95 89       	ldd	r25, Z+21	; 0x15
     bfe:	a0 e0       	ldi	r26, 0x00	; 0
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	dc 01       	movw	r26, r24
     c04:	99 27       	eor	r25, r25
     c06:	88 27       	eor	r24, r24
     c08:	22 8d       	ldd	r18, Z+26	; 0x1a
     c0a:	33 8d       	ldd	r19, Z+27	; 0x1b
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	82 2b       	or	r24, r18
     c12:	93 2b       	or	r25, r19
     c14:	a4 2b       	or	r26, r20
     c16:	b5 2b       	or	r27, r21
     c18:	8c 83       	std	Y+4, r24	; 0x04
     c1a:	9d 83       	std	Y+5, r25	; 0x05
     c1c:	ae 83       	std	Y+6, r26	; 0x06
     c1e:	bf 83       	std	Y+7, r27	; 0x07
     c20:	5b cf       	rjmp	.-330    	; 0xad8 <follow_path+0x68>
#if _FS_FAT32
				((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | 
#endif
				LD_WORD(dir+DIR_FstClusLO);
		}
     c22:	a4 e0       	ldi	r26, 0x04	; 4
     c24:	ba 2e       	mov	r11, r26
	}

	return res;
}
     c26:	8b 2d       	mov	r24, r11
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	df 90       	pop	r13
     c36:	cf 90       	pop	r12
     c38:	bf 90       	pop	r11
     c3a:	af 90       	pop	r10
     c3c:	9f 90       	pop	r9
     c3e:	8f 90       	pop	r8
     c40:	08 95       	ret
			dj->sclust =
#if _FS_FAT32
				((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | 
#endif
				LD_WORD(dir+DIR_FstClusLO);
		}
     c42:	f3 e0       	ldi	r31, 0x03	; 3
     c44:	bf 2e       	mov	r11, r31
     c46:	c7 cf       	rjmp	.-114    	; 0xbd6 <follow_path+0x166>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
     c48:	ea 81       	ldd	r30, Y+2	; 0x02
     c4a:	fb 81       	ldd	r31, Y+3	; 0x03
     c4c:	83 85       	ldd	r24, Z+11	; 0x0b
     c4e:	88 23       	and	r24, r24
     c50:	41 f2       	breq	.-112    	; 0xbe2 <follow_path+0x172>
     c52:	e9 cf       	rjmp	.-46     	; 0xc26 <follow_path+0x1b6>

00000c54 <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	ac 97       	sbiw	r28, 0x2c	; 44
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	8c 01       	movw	r16, r24
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
     c72:	e0 91 04 01 	lds	r30, 0x0104
     c76:	f0 91 05 01 	lds	r31, 0x0105


	if (!fs) {				/* Check file system */
     c7a:	30 97       	sbiw	r30, 0x00	; 0
     c7c:	11 f4       	brne	.+4      	; 0xc82 <pf_opendir+0x2e>
     c7e:	86 e0       	ldi	r24, 0x06	; 6
     c80:	32 c0       	rjmp	.+100    	; 0xce6 <pf_opendir+0x92>
		res = FR_NOT_ENABLED;
	} else {
		fs->buf = dir;
     c82:	3d e0       	ldi	r19, 0x0D	; 13
     c84:	e3 2e       	mov	r14, r19
     c86:	f1 2c       	mov	r15, r1
     c88:	ec 0e       	add	r14, r28
     c8a:	fd 1e       	adc	r15, r29
     c8c:	f7 82       	std	Z+7, r15	; 0x07
     c8e:	e6 82       	std	Z+6, r14	; 0x06
		dj->fn = sp;
     c90:	ce 01       	movw	r24, r28
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	f8 01       	movw	r30, r16
     c96:	93 83       	std	Z+3, r25	; 0x03
     c98:	82 83       	std	Z+2, r24	; 0x02
		res = follow_path(dj, path);			/* Follow the path to the directory */
     c9a:	c8 01       	movw	r24, r16
     c9c:	0e 94 38 05 	call	0xa70	; 0xa70 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
     ca0:	88 23       	and	r24, r24
     ca2:	f1 f4       	brne	.+60     	; 0xce0 <pf_opendir+0x8c>
			if (dir[0]) {						/* It is not the root dir */
     ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ca6:	88 23       	and	r24, r24
     ca8:	c1 f0       	breq	.+48     	; 0xcda <pf_opendir+0x86>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
     caa:	88 8d       	ldd	r24, Y+24	; 0x18
     cac:	84 ff       	sbrs	r24, 4
     cae:	1a c0       	rjmp	.+52     	; 0xce4 <pf_opendir+0x90>
					dj->sclust =
     cb0:	f7 01       	movw	r30, r14
     cb2:	84 89       	ldd	r24, Z+20	; 0x14
     cb4:	95 89       	ldd	r25, Z+21	; 0x15
     cb6:	a0 e0       	ldi	r26, 0x00	; 0
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	dc 01       	movw	r26, r24
     cbc:	99 27       	eor	r25, r25
     cbe:	88 27       	eor	r24, r24
     cc0:	22 8d       	ldd	r18, Z+26	; 0x1a
     cc2:	33 8d       	ldd	r19, Z+27	; 0x1b
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	82 2b       	or	r24, r18
     cca:	93 2b       	or	r25, r19
     ccc:	a4 2b       	or	r26, r20
     cce:	b5 2b       	or	r27, r21
     cd0:	f8 01       	movw	r30, r16
     cd2:	84 83       	std	Z+4, r24	; 0x04
     cd4:	95 83       	std	Z+5, r25	; 0x05
     cd6:	a6 83       	std	Z+6, r26	; 0x06
     cd8:	b7 83       	std	Z+7, r27	; 0x07
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
     cda:	c8 01       	movw	r24, r16
     cdc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <dir_rewind>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
     ce0:	83 30       	cpi	r24, 0x03	; 3
     ce2:	09 f4       	brne	.+2      	; 0xce6 <pf_opendir+0x92>
     ce4:	84 e0       	ldi	r24, 0x04	; 4
	}

	return res;
}
     ce6:	ac 96       	adiw	r28, 0x2c	; 44
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	ff 90       	pop	r15
     cfc:	ef 90       	pop	r14
     cfe:	08 95       	ret

00000d00 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	ec 97       	sbiw	r28, 0x3c	; 60
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
     d1c:	bc 01       	movw	r22, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
     d1e:	00 91 04 01 	lds	r16, 0x0104
     d22:	10 91 05 01 	lds	r17, 0x0105


	if (!fs)						/* Check file system */
     d26:	01 15       	cp	r16, r1
     d28:	11 05       	cpc	r17, r1
     d2a:	11 f4       	brne	.+4      	; 0xd30 <pf_open+0x30>
     d2c:	66 e0       	ldi	r22, 0x06	; 6
     d2e:	41 c0       	rjmp	.+130    	; 0xdb2 <pf_open+0xb2>
		return FR_NOT_ENABLED;

	fs->flag = 0;
     d30:	f8 01       	movw	r30, r16
     d32:	12 82       	std	Z+2, r1	; 0x02
	fs->buf = dir;
     d34:	5d e1       	ldi	r21, 0x1D	; 29
     d36:	e5 2e       	mov	r14, r21
     d38:	f1 2c       	mov	r15, r1
     d3a:	ec 0e       	add	r14, r28
     d3c:	fd 1e       	adc	r15, r29
     d3e:	f7 82       	std	Z+7, r15	; 0x07
     d40:	e6 82       	std	Z+6, r14	; 0x06
	dj.fn = sp;
     d42:	ce 01       	movw	r24, r28
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	98 8b       	std	Y+16, r25	; 0x10
     d48:	8f 87       	std	Y+15, r24	; 0x0f
	res = follow_path(&dj, path);	/* Follow the file path */
     d4a:	ce 01       	movw	r24, r28
     d4c:	0d 96       	adiw	r24, 0x0d	; 13
     d4e:	0e 94 38 05 	call	0xa70	; 0xa70 <follow_path>
     d52:	68 2f       	mov	r22, r24
	if (res != FR_OK) return res;	/* Follow failed */
     d54:	88 23       	and	r24, r24
     d56:	69 f5       	brne	.+90     	; 0xdb2 <pf_open+0xb2>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
     d58:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d5a:	88 23       	and	r24, r24
     d5c:	49 f1       	breq	.+82     	; 0xdb0 <pf_open+0xb0>
     d5e:	88 a5       	ldd	r24, Y+40	; 0x28
     d60:	84 fd       	sbrc	r24, 4
     d62:	26 c0       	rjmp	.+76     	; 0xdb0 <pf_open+0xb0>
		return FR_NO_FILE;

	fs->org_clust =						/* File start cluster */
     d64:	f7 01       	movw	r30, r14
     d66:	84 89       	ldd	r24, Z+20	; 0x14
     d68:	95 89       	ldd	r25, Z+21	; 0x15
     d6a:	a0 e0       	ldi	r26, 0x00	; 0
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	dc 01       	movw	r26, r24
     d70:	99 27       	eor	r25, r25
     d72:	88 27       	eor	r24, r24
     d74:	22 8d       	ldd	r18, Z+26	; 0x1a
     d76:	33 8d       	ldd	r19, Z+27	; 0x1b
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	82 2b       	or	r24, r18
     d7e:	93 2b       	or	r25, r19
     d80:	a4 2b       	or	r26, r20
     d82:	b5 2b       	or	r27, r21
     d84:	f8 01       	movw	r30, r16
     d86:	80 a3       	std	Z+32, r24	; 0x20
     d88:	91 a3       	std	Z+33, r25	; 0x21
     d8a:	a2 a3       	std	Z+34, r26	; 0x22
     d8c:	b3 a3       	std	Z+35, r27	; 0x23
#if _FS_FAT32
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
#endif
		LD_WORD(dir+DIR_FstClusLO);
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
     d8e:	f7 01       	movw	r30, r14
     d90:	84 8d       	ldd	r24, Z+28	; 0x1c
     d92:	95 8d       	ldd	r25, Z+29	; 0x1d
     d94:	a6 8d       	ldd	r26, Z+30	; 0x1e
     d96:	b7 8d       	ldd	r27, Z+31	; 0x1f
     d98:	f8 01       	movw	r30, r16
     d9a:	84 8f       	std	Z+28, r24	; 0x1c
     d9c:	95 8f       	std	Z+29, r25	; 0x1d
     d9e:	a6 8f       	std	Z+30, r26	; 0x1e
     da0:	b7 8f       	std	Z+31, r27	; 0x1f
	fs->fptr = 0;						/* File pointer */
     da2:	10 8e       	std	Z+24, r1	; 0x18
     da4:	11 8e       	std	Z+25, r1	; 0x19
     da6:	12 8e       	std	Z+26, r1	; 0x1a
     da8:	13 8e       	std	Z+27, r1	; 0x1b
	fs->flag = FA_OPENED;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	82 83       	std	Z+2, r24	; 0x02
     dae:	01 c0       	rjmp	.+2      	; 0xdb2 <pf_open+0xb2>

	return FR_OK;
     db0:	63 e0       	ldi	r22, 0x03	; 3
}
     db2:	86 2f       	mov	r24, r22
     db4:	ec 96       	adiw	r28, 0x3c	; 60
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	08 95       	ret

00000dce <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
     dce:	4f 92       	push	r4
     dd0:	5f 92       	push	r5
     dd2:	6f 92       	push	r6
     dd4:	7f 92       	push	r7
     dd6:	8f 92       	push	r8
     dd8:	9f 92       	push	r9
     dda:	af 92       	push	r10
     ddc:	bf 92       	push	r11
     dde:	cf 92       	push	r12
     de0:	df 92       	push	r13
     de2:	ef 92       	push	r14
     de4:	ff 92       	push	r15
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	3c 01       	movw	r6, r24
     df0:	6b 01       	movw	r12, r22
     df2:	4a 01       	movw	r8, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	BYTE *rbuff = buff;
	WORD rcnt;
	FATFS *fs = FatFs;
     df4:	c0 91 04 01 	lds	r28, 0x0104
     df8:	d0 91 05 01 	lds	r29, 0x0105


	*br = 0;
     dfc:	fa 01       	movw	r30, r20
     dfe:	11 82       	std	Z+1, r1	; 0x01
     e00:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     e02:	20 97       	sbiw	r28, 0x00	; 0
     e04:	11 f4       	brne	.+4      	; 0xe0a <pf_read+0x3c>
     e06:	86 e0       	ldi	r24, 0x06	; 6
     e08:	da c0       	rjmp	.+436    	; 0xfbe <pf_read+0x1f0>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	80 fd       	sbrc	r24, 0
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <pf_read+0x46>
     e10:	85 e0       	ldi	r24, 0x05	; 5
     e12:	d5 c0       	rjmp	.+426    	; 0xfbe <pf_read+0x1f0>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
     e14:	2c 8d       	ldd	r18, Y+28	; 0x1c
     e16:	3d 8d       	ldd	r19, Y+29	; 0x1d
     e18:	4e 8d       	ldd	r20, Y+30	; 0x1e
     e1a:	5f 8d       	ldd	r21, Y+31	; 0x1f
     e1c:	88 8d       	ldd	r24, Y+24	; 0x18
     e1e:	99 8d       	ldd	r25, Y+25	; 0x19
     e20:	aa 8d       	ldd	r26, Y+26	; 0x1a
     e22:	bb 8d       	ldd	r27, Y+27	; 0x1b
     e24:	28 1b       	sub	r18, r24
     e26:	39 0b       	sbc	r19, r25
     e28:	4a 0b       	sbc	r20, r26
     e2a:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
     e2c:	cb 01       	movw	r24, r22
     e2e:	a0 e0       	ldi	r26, 0x00	; 0
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	28 17       	cp	r18, r24
     e34:	39 07       	cpc	r19, r25
     e36:	4a 07       	cpc	r20, r26
     e38:	5b 07       	cpc	r21, r27
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <pf_read+0x70>
     e3c:	69 01       	movw	r12, r18
)
{
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	BYTE *rbuff = buff;
     e3e:	53 01       	movw	r10, r6
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + fs->csect++;
		}
		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
     e40:	41 2c       	mov	r4, r1
     e42:	f2 e0       	ldi	r31, 0x02	; 2
     e44:	5f 2e       	mov	r5, r31
     e46:	b3 c0       	rjmp	.+358    	; 0xfae <pf_read+0x1e0>

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
     e48:	e8 8c       	ldd	r14, Y+24	; 0x18
     e4a:	f9 8c       	ldd	r15, Y+25	; 0x19
     e4c:	0a 8d       	ldd	r16, Y+26	; 0x1a
     e4e:	1b 8d       	ldd	r17, Y+27	; 0x1b
     e50:	d8 01       	movw	r26, r16
     e52:	c7 01       	movw	r24, r14
     e54:	91 70       	andi	r25, 0x01	; 1
     e56:	a0 70       	andi	r26, 0x00	; 0
     e58:	b0 70       	andi	r27, 0x00	; 0
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	a1 05       	cpc	r26, r1
     e5e:	b1 05       	cpc	r27, r1
     e60:	09 f0       	breq	.+2      	; 0xe64 <pf_read+0x96>
     e62:	6b c0       	rjmp	.+214    	; 0xf3a <pf_read+0x16c>
			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
     e64:	c8 01       	movw	r24, r16
     e66:	b7 01       	movw	r22, r14
     e68:	e9 e0       	ldi	r30, 0x09	; 9
     e6a:	96 95       	lsr	r25
     e6c:	87 95       	ror	r24
     e6e:	77 95       	ror	r23
     e70:	67 95       	ror	r22
     e72:	ea 95       	dec	r30
     e74:	d1 f7       	brne	.-12     	; 0xe6a <pf_read+0x9c>
     e76:	29 81       	ldd	r18, Y+1	; 0x01
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	40 e0       	ldi	r20, 0x00	; 0
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodsi4>
     e82:	61 15       	cp	r22, r1
     e84:	71 05       	cpc	r23, r1
     e86:	81 05       	cpc	r24, r1
     e88:	91 05       	cpc	r25, r1
     e8a:	d9 f4       	brne	.+54     	; 0xec2 <pf_read+0xf4>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
     e8c:	e1 14       	cp	r14, r1
     e8e:	f1 04       	cpc	r15, r1
     e90:	01 05       	cpc	r16, r1
     e92:	11 05       	cpc	r17, r1
     e94:	29 f4       	brne	.+10     	; 0xea0 <pf_read+0xd2>
     e96:	68 a1       	ldd	r22, Y+32	; 0x20
     e98:	79 a1       	ldd	r23, Y+33	; 0x21
     e9a:	8a a1       	ldd	r24, Y+34	; 0x22
     e9c:	9b a1       	ldd	r25, Y+35	; 0x23
     e9e:	06 c0       	rjmp	.+12     	; 0xeac <pf_read+0xde>
     ea0:	6c a1       	ldd	r22, Y+36	; 0x24
     ea2:	7d a1       	ldd	r23, Y+37	; 0x25
     ea4:	8e a1       	ldd	r24, Y+38	; 0x26
     ea6:	9f a1       	ldd	r25, Y+39	; 0x27
     ea8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
     eac:	62 30       	cpi	r22, 0x02	; 2
     eae:	71 05       	cpc	r23, r1
     eb0:	81 05       	cpc	r24, r1
     eb2:	91 05       	cpc	r25, r1
     eb4:	08 f4       	brcc	.+2      	; 0xeb8 <pf_read+0xea>
     eb6:	81 c0       	rjmp	.+258    	; 0xfba <pf_read+0x1ec>
				fs->curr_clust = clst;				/* Update current cluster */
     eb8:	6c a3       	std	Y+36, r22	; 0x24
     eba:	7d a3       	std	Y+37, r23	; 0x25
     ebc:	8e a3       	std	Y+38, r24	; 0x26
     ebe:	9f a3       	std	Y+39, r25	; 0x27
				fs->csect = 0;						/* Reset sector offset in the cluster */
     ec0:	1b 82       	std	Y+3, r1	; 0x03
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
     ec2:	00 91 04 01 	lds	r16, 0x0104
     ec6:	10 91 05 01 	lds	r17, 0x0105


	clst -= 2;
     eca:	2c a1       	ldd	r18, Y+36	; 0x24
     ecc:	3d a1       	ldd	r19, Y+37	; 0x25
     ece:	4e a1       	ldd	r20, Y+38	; 0x26
     ed0:	5f a1       	ldd	r21, Y+39	; 0x27
     ed2:	22 50       	subi	r18, 0x02	; 2
     ed4:	30 40       	sbci	r19, 0x00	; 0
     ed6:	40 40       	sbci	r20, 0x00	; 0
     ed8:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     eda:	f8 01       	movw	r30, r16
     edc:	80 85       	ldd	r24, Z+8	; 0x08
     ede:	91 85       	ldd	r25, Z+9	; 0x09
     ee0:	a2 85       	ldd	r26, Z+10	; 0x0a
     ee2:	b3 85       	ldd	r27, Z+11	; 0x0b
     ee4:	02 97       	sbiw	r24, 0x02	; 2
     ee6:	a1 09       	sbc	r26, r1
     ee8:	b1 09       	sbc	r27, r1
     eea:	28 17       	cp	r18, r24
     eec:	39 07       	cpc	r19, r25
     eee:	4a 07       	cpc	r20, r26
     ef0:	5b 07       	cpc	r21, r27
     ef2:	08 f0       	brcs	.+2      	; 0xef6 <pf_read+0x128>
     ef4:	62 c0       	rjmp	.+196    	; 0xfba <pf_read+0x1ec>
	return (DWORD)clst * fs->csize + fs->database;
     ef6:	61 81       	ldd	r22, Z+1	; 0x01
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsi3>
     f02:	9b 01       	movw	r18, r22
     f04:	ac 01       	movw	r20, r24
     f06:	f8 01       	movw	r30, r16
     f08:	84 89       	ldd	r24, Z+20	; 0x14
     f0a:	95 89       	ldd	r25, Z+21	; 0x15
     f0c:	a6 89       	ldd	r26, Z+22	; 0x16
     f0e:	b7 89       	ldd	r27, Z+23	; 0x17
     f10:	28 0f       	add	r18, r24
     f12:	39 1f       	adc	r19, r25
     f14:	4a 1f       	adc	r20, r26
     f16:	5b 1f       	adc	r21, r27
				if (clst <= 1) goto fr_abort;
				fs->curr_clust = clst;				/* Update current cluster */
				fs->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
     f18:	21 15       	cp	r18, r1
     f1a:	31 05       	cpc	r19, r1
     f1c:	41 05       	cpc	r20, r1
     f1e:	51 05       	cpc	r21, r1
     f20:	09 f4       	brne	.+2      	; 0xf24 <pf_read+0x156>
     f22:	4b c0       	rjmp	.+150    	; 0xfba <pf_read+0x1ec>
			fs->dsect = sect + fs->csect++;
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	28 0f       	add	r18, r24
     f28:	31 1d       	adc	r19, r1
     f2a:	41 1d       	adc	r20, r1
     f2c:	51 1d       	adc	r21, r1
     f2e:	28 a7       	std	Y+40, r18	; 0x28
     f30:	39 a7       	std	Y+41, r19	; 0x29
     f32:	4a a7       	std	Y+42, r20	; 0x2a
     f34:	5b a7       	std	Y+43, r21	; 0x2b
     f36:	8f 5f       	subi	r24, 0xFF	; 255
     f38:	8b 83       	std	Y+3, r24	; 0x03
		}
		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
     f3a:	08 8d       	ldd	r16, Y+24	; 0x18
     f3c:	19 8d       	ldd	r17, Y+25	; 0x19
     f3e:	2a 8d       	ldd	r18, Y+26	; 0x1a
     f40:	3b 8d       	ldd	r19, Y+27	; 0x1b
     f42:	c8 01       	movw	r24, r16
     f44:	91 70       	andi	r25, 0x01	; 1
     f46:	a2 01       	movw	r20, r4
     f48:	48 1b       	sub	r20, r24
     f4a:	59 0b       	sbc	r21, r25
     f4c:	76 01       	movw	r14, r12
     f4e:	4c 15       	cp	r20, r12
     f50:	5d 05       	cpc	r21, r13
     f52:	08 f4       	brcc	.+2      	; 0xf56 <pf_read+0x188>
     f54:	7a 01       	movw	r14, r20
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
     f56:	61 14       	cp	r6, r1
     f58:	71 04       	cpc	r7, r1
     f5a:	19 f4       	brne	.+6      	; 0xf62 <pf_read+0x194>
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <pf_read+0x196>
     f62:	c5 01       	movw	r24, r10
     f64:	48 a5       	ldd	r20, Y+40	; 0x28
     f66:	59 a5       	ldd	r21, Y+41	; 0x29
     f68:	6a a5       	ldd	r22, Y+42	; 0x2a
     f6a:	7b a5       	ldd	r23, Y+43	; 0x2b
     f6c:	98 01       	movw	r18, r16
     f6e:	31 70       	andi	r19, 0x01	; 1
     f70:	87 01       	movw	r16, r14
     f72:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <disk_readp>
		if (dr) goto fr_abort;
     f76:	88 23       	and	r24, r24
     f78:	01 f5       	brne	.+64     	; 0xfba <pf_read+0x1ec>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
     f7a:	c7 01       	movw	r24, r14
     f7c:	a0 e0       	ldi	r26, 0x00	; 0
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	28 8d       	ldd	r18, Y+24	; 0x18
     f82:	39 8d       	ldd	r19, Y+25	; 0x19
     f84:	4a 8d       	ldd	r20, Y+26	; 0x1a
     f86:	5b 8d       	ldd	r21, Y+27	; 0x1b
     f88:	28 0f       	add	r18, r24
     f8a:	39 1f       	adc	r19, r25
     f8c:	4a 1f       	adc	r20, r26
     f8e:	5b 1f       	adc	r21, r27
     f90:	28 8f       	std	Y+24, r18	; 0x18
     f92:	39 8f       	std	Y+25, r19	; 0x19
     f94:	4a 8f       	std	Y+26, r20	; 0x1a
     f96:	5b 8f       	std	Y+27, r21	; 0x1b
     f98:	ae 0c       	add	r10, r14
     f9a:	bf 1c       	adc	r11, r15
		btr -= rcnt; *br += rcnt;
     f9c:	ce 18       	sub	r12, r14
     f9e:	df 08       	sbc	r13, r15
     fa0:	f4 01       	movw	r30, r8
     fa2:	80 81       	ld	r24, Z
     fa4:	91 81       	ldd	r25, Z+1	; 0x01
     fa6:	8e 0d       	add	r24, r14
     fa8:	9f 1d       	adc	r25, r15
     faa:	91 83       	std	Z+1, r25	; 0x01
     fac:	80 83       	st	Z, r24
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
     fae:	c1 14       	cp	r12, r1
     fb0:	d1 04       	cpc	r13, r1
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <pf_read+0x1e8>
     fb4:	49 cf       	rjmp	.-366    	; 0xe48 <pf_read+0x7a>
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <pf_read+0x1f0>
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
     fba:	1a 82       	std	Y+2, r1	; 0x02
     fbc:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	df 90       	pop	r13
     fcc:	cf 90       	pop	r12
     fce:	bf 90       	pop	r11
     fd0:	af 90       	pop	r10
     fd2:	9f 90       	pop	r9
     fd4:	8f 90       	pop	r8
     fd6:	7f 90       	pop	r7
     fd8:	6f 90       	pop	r6
     fda:	5f 90       	pop	r5
     fdc:	4f 90       	pop	r4
     fde:	08 95       	ret

00000fe0 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     fe0:	af 92       	push	r10
     fe2:	bf 92       	push	r11
     fe4:	cf 92       	push	r12
     fe6:	df 92       	push	r13
     fe8:	ef 92       	push	r14
     fea:	ff 92       	push	r15
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	b8 2e       	mov	r11, r24
     ff6:	a9 2e       	mov	r10, r25
     ff8:	6a 01       	movw	r12, r20
     ffa:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
     ffc:	2e ef       	ldi	r18, 0xFE	; 254
     ffe:	31 e0       	ldi	r19, 0x01	; 1
    1000:	02 e0       	ldi	r16, 0x02	; 2
    1002:	10 e0       	ldi	r17, 0x00	; 0
    1004:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <disk_readp>
    1008:	88 23       	and	r24, r24
    100a:	11 f0       	breq	.+4      	; 0x1010 <check_fs+0x30>
    100c:	23 e0       	ldi	r18, 0x03	; 3
    100e:	33 c0       	rjmp	.+102    	; 0x1076 <check_fs+0x96>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
    1010:	cb 2d       	mov	r28, r11
    1012:	da 2d       	mov	r29, r10
    1014:	88 81       	ld	r24, Y
    1016:	99 81       	ldd	r25, Y+1	; 0x01
    1018:	85 55       	subi	r24, 0x55	; 85
    101a:	9a 4a       	sbci	r25, 0xAA	; 170
    101c:	11 f0       	breq	.+4      	; 0x1022 <check_fs+0x42>
    101e:	22 e0       	ldi	r18, 0x02	; 2
    1020:	2a c0       	rjmp	.+84     	; 0x1076 <check_fs+0x96>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
    1022:	8b 2d       	mov	r24, r11
    1024:	9a 2d       	mov	r25, r10
    1026:	b7 01       	movw	r22, r14
    1028:	a6 01       	movw	r20, r12
    102a:	26 e3       	ldi	r18, 0x36	; 54
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	02 e0       	ldi	r16, 0x02	; 2
    1030:	10 e0       	ldi	r17, 0x00	; 0
    1032:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <disk_readp>
    1036:	88 23       	and	r24, r24
    1038:	39 f4       	brne	.+14     	; 0x1048 <check_fs+0x68>
    103a:	88 81       	ld	r24, Y
    103c:	99 81       	ldd	r25, Y+1	; 0x01
    103e:	86 54       	subi	r24, 0x46	; 70
    1040:	91 44       	sbci	r25, 0x41	; 65
    1042:	11 f4       	brne	.+4      	; 0x1048 <check_fs+0x68>
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	17 c0       	rjmp	.+46     	; 0x1076 <check_fs+0x96>
		return 0;
#if _FS_FAT32
	if (!disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
    1048:	8b 2d       	mov	r24, r11
    104a:	9a 2d       	mov	r25, r10
    104c:	b7 01       	movw	r22, r14
    104e:	a6 01       	movw	r20, r12
    1050:	22 e5       	ldi	r18, 0x52	; 82
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	02 e0       	ldi	r16, 0x02	; 2
    1056:	10 e0       	ldi	r17, 0x00	; 0
    1058:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <disk_readp>
    105c:	88 23       	and	r24, r24
    105e:	11 f0       	breq	.+4      	; 0x1064 <check_fs+0x84>
    1060:	21 e0       	ldi	r18, 0x01	; 1
    1062:	09 c0       	rjmp	.+18     	; 0x1076 <check_fs+0x96>
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	88 81       	ld	r24, Y
    1068:	99 81       	ldd	r25, Y+1	; 0x01
    106a:	86 54       	subi	r24, 0x46	; 70
    106c:	91 44       	sbci	r25, 0x41	; 65
    106e:	09 f4       	brne	.+2      	; 0x1072 <check_fs+0x92>
    1070:	21 e0       	ldi	r18, 0x01	; 1
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	28 27       	eor	r18, r24
		return 0;
#endif
	return 1;
}
    1076:	82 2f       	mov	r24, r18
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	df 90       	pop	r13
    1086:	cf 90       	pop	r12
    1088:	bf 90       	pop	r11
    108a:	af 90       	pop	r10
    108c:	08 95       	ret

0000108e <pf_write>:
FRESULT pf_write (
	const void* buff,	/* Pointer to the data to be written */
	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
	WORD* bw			/* Pointer to number of bytes written */
)
{
    108e:	4f 92       	push	r4
    1090:	5f 92       	push	r5
    1092:	6f 92       	push	r6
    1094:	7f 92       	push	r7
    1096:	8f 92       	push	r8
    1098:	9f 92       	push	r9
    109a:	af 92       	push	r10
    109c:	bf 92       	push	r11
    109e:	cf 92       	push	r12
    10a0:	df 92       	push	r13
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	fc 01       	movw	r30, r24
    10b0:	5b 01       	movw	r10, r22
    10b2:	3a 01       	movw	r6, r20
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
	WORD wcnt;
	FATFS *fs = FatFs;
    10b4:	c0 91 04 01 	lds	r28, 0x0104
    10b8:	d0 91 05 01 	lds	r29, 0x0105


	*bw = 0;
    10bc:	da 01       	movw	r26, r20
    10be:	1d 92       	st	X+, r1
    10c0:	1c 92       	st	X, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    10c2:	20 97       	sbiw	r28, 0x00	; 0
    10c4:	11 f4       	brne	.+4      	; 0x10ca <pf_write+0x3c>
    10c6:	86 e0       	ldi	r24, 0x06	; 6
    10c8:	08 c1       	rjmp	.+528    	; 0x12da <__stack+0x1db>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	80 fd       	sbrc	r24, 0
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <pf_write+0x48>
    10d2:	85 e0       	ldi	r24, 0x05	; 5
    10d4:	02 c1       	rjmp	.+516    	; 0x12da <__stack+0x1db>
    10d6:	80 74       	andi	r24, 0x40	; 64
    10d8:	90 70       	andi	r25, 0x00	; 0
		return FR_NOT_OPENED;

	if (!btw) {		/* Finalize request */
    10da:	61 15       	cp	r22, r1
    10dc:	71 05       	cpc	r23, r1
    10de:	89 f4       	brne	.+34     	; 0x1102 <__stack+0x3>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
    10e0:	89 2b       	or	r24, r25
    10e2:	59 f0       	breq	.+22     	; 0x10fa <pf_write+0x6c>
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	40 e0       	ldi	r20, 0x00	; 0
    10ea:	50 e0       	ldi	r21, 0x00	; 0
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <disk_writep>
    10f4:	88 23       	and	r24, r24
    10f6:	09 f0       	breq	.+2      	; 0x10fa <pf_write+0x6c>
    10f8:	ee c0       	rjmp	.+476    	; 0x12d6 <__stack+0x1d7>
		fs->flag &= ~FA__WIP;
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	8f 7b       	andi	r24, 0xBF	; 191
    10fe:	8a 83       	std	Y+2, r24	; 0x02
    1100:	e8 c0       	rjmp	.+464    	; 0x12d2 <__stack+0x1d3>
		return FR_OK;
	} else {		/* Write data request */
		if (!(fs->flag & FA__WIP))		/* Round down fptr to the sector boundary */
    1102:	89 2b       	or	r24, r25
    1104:	51 f4       	brne	.+20     	; 0x111a <__stack+0x1b>
			fs->fptr &= 0xFFFFFE00;
    1106:	88 8d       	ldd	r24, Y+24	; 0x18
    1108:	99 8d       	ldd	r25, Y+25	; 0x19
    110a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    110c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    110e:	80 70       	andi	r24, 0x00	; 0
    1110:	9e 7f       	andi	r25, 0xFE	; 254
    1112:	88 8f       	std	Y+24, r24	; 0x18
    1114:	99 8f       	std	Y+25, r25	; 0x19
    1116:	aa 8f       	std	Y+26, r26	; 0x1a
    1118:	bb 8f       	std	Y+27, r27	; 0x1b
	}
	remain = fs->fsize - fs->fptr;
    111a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    111c:	3d 8d       	ldd	r19, Y+29	; 0x1d
    111e:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1120:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1122:	88 8d       	ldd	r24, Y+24	; 0x18
    1124:	99 8d       	ldd	r25, Y+25	; 0x19
    1126:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1128:	bb 8d       	ldd	r27, Y+27	; 0x1b
    112a:	28 1b       	sub	r18, r24
    112c:	39 0b       	sbc	r19, r25
    112e:	4a 0b       	sbc	r20, r26
    1130:	5b 0b       	sbc	r21, r27
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
    1132:	c5 01       	movw	r24, r10
    1134:	a0 e0       	ldi	r26, 0x00	; 0
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	28 17       	cp	r18, r24
    113a:	39 07       	cpc	r19, r25
    113c:	4a 07       	cpc	r20, r26
    113e:	5b 07       	cpc	r21, r27
    1140:	08 f4       	brcc	.+2      	; 0x1144 <__stack+0x45>
    1142:	59 01       	movw	r10, r18
	WORD* bw			/* Pointer to number of bytes written */
)
{
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
    1144:	4f 01       	movw	r8, r30
			if (!sect) goto fw_abort;
			fs->dsect = sect + fs->csect++;
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    1146:	41 2c       	mov	r4, r1
    1148:	b2 e0       	ldi	r27, 0x02	; 2
    114a:	5b 2e       	mov	r5, r27
    114c:	be c0       	rjmp	.+380    	; 0x12ca <__stack+0x1cb>
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
		if (((WORD)fs->fptr % 512) == 0) {				/* On the sector boundary? */
    114e:	e8 8c       	ldd	r14, Y+24	; 0x18
    1150:	f9 8c       	ldd	r15, Y+25	; 0x19
    1152:	0a 8d       	ldd	r16, Y+26	; 0x1a
    1154:	1b 8d       	ldd	r17, Y+27	; 0x1b
    1156:	c7 01       	movw	r24, r14
    1158:	91 70       	andi	r25, 0x01	; 1
    115a:	89 2b       	or	r24, r25
    115c:	09 f0       	breq	.+2      	; 0x1160 <__stack+0x61>
    115e:	77 c0       	rjmp	.+238    	; 0x124e <__stack+0x14f>
			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
    1160:	c8 01       	movw	r24, r16
    1162:	b7 01       	movw	r22, r14
    1164:	a9 e0       	ldi	r26, 0x09	; 9
    1166:	96 95       	lsr	r25
    1168:	87 95       	ror	r24
    116a:	77 95       	ror	r23
    116c:	67 95       	ror	r22
    116e:	aa 95       	dec	r26
    1170:	d1 f7       	brne	.-12     	; 0x1166 <__stack+0x67>
    1172:	29 81       	ldd	r18, Y+1	; 0x01
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodsi4>
    117e:	61 15       	cp	r22, r1
    1180:	71 05       	cpc	r23, r1
    1182:	81 05       	cpc	r24, r1
    1184:	91 05       	cpc	r25, r1
    1186:	d9 f4       	brne	.+54     	; 0x11be <__stack+0xbf>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    1188:	e1 14       	cp	r14, r1
    118a:	f1 04       	cpc	r15, r1
    118c:	01 05       	cpc	r16, r1
    118e:	11 05       	cpc	r17, r1
    1190:	29 f4       	brne	.+10     	; 0x119c <__stack+0x9d>
    1192:	68 a1       	ldd	r22, Y+32	; 0x20
    1194:	79 a1       	ldd	r23, Y+33	; 0x21
    1196:	8a a1       	ldd	r24, Y+34	; 0x22
    1198:	9b a1       	ldd	r25, Y+35	; 0x23
    119a:	06 c0       	rjmp	.+12     	; 0x11a8 <__stack+0xa9>
    119c:	6c a1       	ldd	r22, Y+36	; 0x24
    119e:	7d a1       	ldd	r23, Y+37	; 0x25
    11a0:	8e a1       	ldd	r24, Y+38	; 0x26
    11a2:	9f a1       	ldd	r25, Y+39	; 0x27
    11a4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
    11a8:	62 30       	cpi	r22, 0x02	; 2
    11aa:	71 05       	cpc	r23, r1
    11ac:	81 05       	cpc	r24, r1
    11ae:	91 05       	cpc	r25, r1
    11b0:	08 f4       	brcc	.+2      	; 0x11b4 <__stack+0xb5>
    11b2:	91 c0       	rjmp	.+290    	; 0x12d6 <__stack+0x1d7>
				fs->curr_clust = clst;				/* Update current cluster */
    11b4:	6c a3       	std	Y+36, r22	; 0x24
    11b6:	7d a3       	std	Y+37, r23	; 0x25
    11b8:	8e a3       	std	Y+38, r24	; 0x26
    11ba:	9f a3       	std	Y+39, r25	; 0x27
				fs->csect = 0;						/* Reset sector offset in the cluster */
    11bc:	1b 82       	std	Y+3, r1	; 0x03
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    11be:	00 91 04 01 	lds	r16, 0x0104
    11c2:	10 91 05 01 	lds	r17, 0x0105


	clst -= 2;
    11c6:	2c a1       	ldd	r18, Y+36	; 0x24
    11c8:	3d a1       	ldd	r19, Y+37	; 0x25
    11ca:	4e a1       	ldd	r20, Y+38	; 0x26
    11cc:	5f a1       	ldd	r21, Y+39	; 0x27
    11ce:	22 50       	subi	r18, 0x02	; 2
    11d0:	30 40       	sbci	r19, 0x00	; 0
    11d2:	40 40       	sbci	r20, 0x00	; 0
    11d4:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    11d6:	f8 01       	movw	r30, r16
    11d8:	80 85       	ldd	r24, Z+8	; 0x08
    11da:	91 85       	ldd	r25, Z+9	; 0x09
    11dc:	a2 85       	ldd	r26, Z+10	; 0x0a
    11de:	b3 85       	ldd	r27, Z+11	; 0x0b
    11e0:	02 97       	sbiw	r24, 0x02	; 2
    11e2:	a1 09       	sbc	r26, r1
    11e4:	b1 09       	sbc	r27, r1
    11e6:	28 17       	cp	r18, r24
    11e8:	39 07       	cpc	r19, r25
    11ea:	4a 07       	cpc	r20, r26
    11ec:	5b 07       	cpc	r21, r27
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <__stack+0xf3>
    11f0:	72 c0       	rjmp	.+228    	; 0x12d6 <__stack+0x1d7>
	return (DWORD)clst * fs->csize + fs->database;
    11f2:	61 81       	ldd	r22, Z+1	; 0x01
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsi3>
    11fe:	9b 01       	movw	r18, r22
    1200:	ac 01       	movw	r20, r24
    1202:	f8 01       	movw	r30, r16
    1204:	84 89       	ldd	r24, Z+20	; 0x14
    1206:	95 89       	ldd	r25, Z+21	; 0x15
    1208:	a6 89       	ldd	r26, Z+22	; 0x16
    120a:	b7 89       	ldd	r27, Z+23	; 0x17
    120c:	28 0f       	add	r18, r24
    120e:	39 1f       	adc	r19, r25
    1210:	4a 1f       	adc	r20, r26
    1212:	5b 1f       	adc	r21, r27
				if (clst <= 1) goto fw_abort;
				fs->curr_clust = clst;				/* Update current cluster */
				fs->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fw_abort;
    1214:	21 15       	cp	r18, r1
    1216:	31 05       	cpc	r19, r1
    1218:	41 05       	cpc	r20, r1
    121a:	51 05       	cpc	r21, r1
    121c:	09 f4       	brne	.+2      	; 0x1220 <__stack+0x121>
    121e:	5b c0       	rjmp	.+182    	; 0x12d6 <__stack+0x1d7>
			fs->dsect = sect + fs->csect++;
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	ba 01       	movw	r22, r20
    1224:	a9 01       	movw	r20, r18
    1226:	48 0f       	add	r20, r24
    1228:	51 1d       	adc	r21, r1
    122a:	61 1d       	adc	r22, r1
    122c:	71 1d       	adc	r23, r1
    122e:	48 a7       	std	Y+40, r20	; 0x28
    1230:	59 a7       	std	Y+41, r21	; 0x29
    1232:	6a a7       	std	Y+42, r22	; 0x2a
    1234:	7b a7       	std	Y+43, r23	; 0x2b
    1236:	8f 5f       	subi	r24, 0xFF	; 255
    1238:	8b 83       	std	Y+3, r24	; 0x03
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <disk_writep>
    1242:	88 23       	and	r24, r24
    1244:	09 f0       	breq	.+2      	; 0x1248 <__stack+0x149>
    1246:	47 c0       	rjmp	.+142    	; 0x12d6 <__stack+0x1d7>
			fs->flag |= FA__WIP;
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	80 64       	ori	r24, 0x40	; 64
    124c:	8a 83       	std	Y+2, r24	; 0x02
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    124e:	88 8d       	ldd	r24, Y+24	; 0x18
    1250:	99 8d       	ldd	r25, Y+25	; 0x19
    1252:	91 70       	andi	r25, 0x01	; 1
    1254:	92 01       	movw	r18, r4
    1256:	28 1b       	sub	r18, r24
    1258:	39 0b       	sbc	r19, r25
    125a:	65 01       	movw	r12, r10
    125c:	2a 15       	cp	r18, r10
    125e:	3b 05       	cpc	r19, r11
    1260:	08 f4       	brcc	.+2      	; 0x1264 <__stack+0x165>
    1262:	69 01       	movw	r12, r18
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
    1264:	76 01       	movw	r14, r12
    1266:	00 e0       	ldi	r16, 0x00	; 0
    1268:	10 e0       	ldi	r17, 0x00	; 0
    126a:	c4 01       	movw	r24, r8
    126c:	b8 01       	movw	r22, r16
    126e:	a7 01       	movw	r20, r14
    1270:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <disk_writep>
    1274:	88 23       	and	r24, r24
    1276:	79 f5       	brne	.+94     	; 0x12d6 <__stack+0x1d7>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    1278:	88 8d       	ldd	r24, Y+24	; 0x18
    127a:	99 8d       	ldd	r25, Y+25	; 0x19
    127c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    127e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1280:	8e 0d       	add	r24, r14
    1282:	9f 1d       	adc	r25, r15
    1284:	a0 1f       	adc	r26, r16
    1286:	b1 1f       	adc	r27, r17
    1288:	9c 01       	movw	r18, r24
    128a:	88 8f       	std	Y+24, r24	; 0x18
    128c:	99 8f       	std	Y+25, r25	; 0x19
    128e:	aa 8f       	std	Y+26, r26	; 0x1a
    1290:	bb 8f       	std	Y+27, r27	; 0x1b
		btw -= wcnt; *bw += wcnt;
    1292:	d3 01       	movw	r26, r6
    1294:	8d 91       	ld	r24, X+
    1296:	9c 91       	ld	r25, X
    1298:	11 97       	sbiw	r26, 0x01	; 1
    129a:	8c 0d       	add	r24, r12
    129c:	9d 1d       	adc	r25, r13
    129e:	8d 93       	st	X+, r24
    12a0:	9c 93       	st	X, r25
		if (((WORD)fs->fptr % 512) == 0) {
    12a2:	31 70       	andi	r19, 0x01	; 1
    12a4:	23 2b       	or	r18, r19
    12a6:	69 f4       	brne	.+26     	; 0x12c2 <__stack+0x1c3>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	40 e0       	ldi	r20, 0x00	; 0
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <disk_writep>
    12b8:	88 23       	and	r24, r24
    12ba:	69 f4       	brne	.+26     	; 0x12d6 <__stack+0x1d7>
			fs->flag &= ~FA__WIP;
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	8f 7b       	andi	r24, 0xBF	; 191
    12c0:	8a 83       	std	Y+2, r24	; 0x02
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    12c2:	8c 0c       	add	r8, r12
    12c4:	9d 1c       	adc	r9, r13
		btw -= wcnt; *bw += wcnt;
    12c6:	ac 18       	sub	r10, r12
    12c8:	bd 08       	sbc	r11, r13
			fs->fptr &= 0xFFFFFE00;
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
    12ca:	a1 14       	cp	r10, r1
    12cc:	b1 04       	cpc	r11, r1
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <__stack+0x1d3>
    12d0:	3e cf       	rjmp	.-388    	; 0x114e <__stack+0x4f>
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <__stack+0x1db>
	}

	return FR_OK;

fw_abort:
	fs->flag = 0;
    12d6:	1a 82       	std	Y+2, r1	; 0x02
    12d8:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	ff 90       	pop	r15
    12e4:	ef 90       	pop	r14
    12e6:	df 90       	pop	r13
    12e8:	cf 90       	pop	r12
    12ea:	bf 90       	pop	r11
    12ec:	af 90       	pop	r10
    12ee:	9f 90       	pop	r9
    12f0:	8f 90       	pop	r8
    12f2:	7f 90       	pop	r7
    12f4:	6f 90       	pop	r6
    12f6:	5f 90       	pop	r5
    12f8:	4f 90       	pop	r4
    12fa:	08 95       	ret

000012fc <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
    12fc:	6f 92       	push	r6
    12fe:	7f 92       	push	r7
    1300:	8f 92       	push	r8
    1302:	9f 92       	push	r9
    1304:	af 92       	push	r10
    1306:	bf 92       	push	r11
    1308:	cf 92       	push	r12
    130a:	df 92       	push	r13
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	a4 97       	sbiw	r28, 0x24	; 36
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	cd bf       	out	0x3d, r28	; 61
    1328:	5c 01       	movw	r10, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    132a:	10 92 05 01 	sts	0x0105, r1
    132e:	10 92 04 01 	sts	0x0104, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
    1332:	00 97       	sbiw	r24, 0x00	; 0
    1334:	09 f4       	brne	.+2      	; 0x1338 <pf_mount+0x3c>
    1336:	ed c0       	rjmp	.+474    	; 0x1512 <pf_mount+0x216>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    1338:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <disk_initialize>
    133c:	80 ff       	sbrs	r24, 0
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <pf_mount+0x48>
    1340:	82 e0       	ldi	r24, 0x02	; 2
    1342:	ec c0       	rjmp	.+472    	; 0x151c <pf_mount+0x220>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    1344:	4e 01       	movw	r8, r28
    1346:	08 94       	sec
    1348:	81 1c       	adc	r8, r1
    134a:	91 1c       	adc	r9, r1
    134c:	c4 01       	movw	r24, r8
    134e:	40 e0       	ldi	r20, 0x00	; 0
    1350:	50 e0       	ldi	r21, 0x00	; 0
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	21 f0       	breq	.+8      	; 0x1366 <pf_mount+0x6a>
    135e:	cc 24       	eor	r12, r12
    1360:	dd 24       	eor	r13, r13
    1362:	76 01       	movw	r14, r12
    1364:	1b c0       	rjmp	.+54     	; 0x139c <pf_mount+0xa0>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    1366:	c4 01       	movw	r24, r8
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	50 e0       	ldi	r21, 0x00	; 0
    136c:	60 e0       	ldi	r22, 0x00	; 0
    136e:	70 e0       	ldi	r23, 0x00	; 0
    1370:	2e eb       	ldi	r18, 0xBE	; 190
    1372:	31 e0       	ldi	r19, 0x01	; 1
    1374:	00 e1       	ldi	r16, 0x10	; 16
    1376:	10 e0       	ldi	r17, 0x00	; 0
    1378:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <disk_readp>
    137c:	88 23       	and	r24, r24
    137e:	09 f0       	breq	.+2      	; 0x1382 <pf_mount+0x86>
    1380:	ca c0       	rjmp	.+404    	; 0x1516 <pf_mount+0x21a>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	88 23       	and	r24, r24
    1386:	09 f4       	brne	.+2      	; 0x138a <pf_mount+0x8e>
    1388:	c8 c0       	rjmp	.+400    	; 0x151a <pf_mount+0x21e>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    138a:	c9 84       	ldd	r12, Y+9	; 0x09
    138c:	da 84       	ldd	r13, Y+10	; 0x0a
    138e:	eb 84       	ldd	r14, Y+11	; 0x0b
    1390:	fc 84       	ldd	r15, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
    1392:	c4 01       	movw	r24, r8
    1394:	b7 01       	movw	r22, r14
    1396:	a6 01       	movw	r20, r12
    1398:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <check_fs>
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    139c:	83 30       	cpi	r24, 0x03	; 3
    139e:	09 f4       	brne	.+2      	; 0x13a2 <pf_mount+0xa6>
    13a0:	ba c0       	rjmp	.+372    	; 0x1516 <pf_mount+0x21a>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    13a2:	88 23       	and	r24, r24
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <pf_mount+0xac>
    13a6:	b9 c0       	rjmp	.+370    	; 0x151a <pf_mount+0x21e>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    13a8:	ce 01       	movw	r24, r28
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	b7 01       	movw	r22, r14
    13ae:	a6 01       	movw	r20, r12
    13b0:	2d e0       	ldi	r18, 0x0D	; 13
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	04 e2       	ldi	r16, 0x24	; 36
    13b6:	10 e0       	ldi	r17, 0x00	; 0
    13b8:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <disk_readp>
    13bc:	88 23       	and	r24, r24
    13be:	09 f0       	breq	.+2      	; 0x13c2 <pf_mount+0xc6>
    13c0:	aa c0       	rjmp	.+340    	; 0x1516 <pf_mount+0x21a>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    13c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    13c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    13c6:	bc 01       	movw	r22, r24
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    13cc:	61 15       	cp	r22, r1
    13ce:	71 05       	cpc	r23, r1
    13d0:	81 05       	cpc	r24, r1
    13d2:	91 05       	cpc	r25, r1
    13d4:	21 f4       	brne	.+8      	; 0x13de <pf_mount+0xe2>
    13d6:	68 8d       	ldd	r22, Y+24	; 0x18
    13d8:	79 8d       	ldd	r23, Y+25	; 0x19
    13da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13dc:	9b 8d       	ldd	r25, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    13de:	2c 81       	ldd	r18, Y+4	; 0x04
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsi3>
    13ea:	3b 01       	movw	r6, r22
    13ec:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	9b 81       	ldd	r25, Y+3	; 0x03
    13f2:	a0 e0       	ldi	r26, 0x00	; 0
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	c8 0e       	add	r12, r24
    13f8:	d9 1e       	adc	r13, r25
    13fa:	ea 1e       	adc	r14, r26
    13fc:	fb 1e       	adc	r15, r27
    13fe:	f5 01       	movw	r30, r10
    1400:	c4 86       	std	Z+12, r12	; 0x0c
    1402:	d5 86       	std	Z+13, r13	; 0x0d
    1404:	e6 86       	std	Z+14, r14	; 0x0e
    1406:	f7 86       	std	Z+15, r15	; 0x0f
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	81 83       	std	Z+1, r24	; 0x01
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    140c:	2d 81       	ldd	r18, Y+5	; 0x05
    140e:	3e 81       	ldd	r19, Y+6	; 0x06
    1410:	35 83       	std	Z+5, r19	; 0x05
    1412:	24 83       	std	Z+4, r18	; 0x04
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    1414:	8f 81       	ldd	r24, Y+7	; 0x07
    1416:	98 85       	ldd	r25, Y+8	; 0x08
    1418:	7c 01       	movw	r14, r24
    141a:	00 e0       	ldi	r16, 0x00	; 0
    141c:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    141e:	e1 14       	cp	r14, r1
    1420:	f1 04       	cpc	r15, r1
    1422:	01 05       	cpc	r16, r1
    1424:	11 05       	cpc	r17, r1
    1426:	21 f4       	brne	.+8      	; 0x1430 <pf_mount+0x134>
    1428:	ec 88       	ldd	r14, Y+20	; 0x14
    142a:	fd 88       	ldd	r15, Y+21	; 0x15
    142c:	0e 89       	ldd	r16, Y+22	; 0x16
    142e:	1f 89       	ldd	r17, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	9b 81       	ldd	r25, Y+3	; 0x03
    1434:	a0 e0       	ldi	r26, 0x00	; 0
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e8 1a       	sub	r14, r24
    143a:	f9 0a       	sbc	r15, r25
    143c:	0a 0b       	sbc	r16, r26
    143e:	1b 0b       	sbc	r17, r27
    1440:	e6 18       	sub	r14, r6
    1442:	f7 08       	sbc	r15, r7
    1444:	08 09       	sbc	r16, r8
    1446:	19 09       	sbc	r17, r9
    1448:	84 e0       	ldi	r24, 0x04	; 4
    144a:	36 95       	lsr	r19
    144c:	27 95       	ror	r18
    144e:	8a 95       	dec	r24
    1450:	e1 f7       	brne	.-8      	; 0x144a <pf_mount+0x14e>
    1452:	c9 01       	movw	r24, r18
    1454:	a0 e0       	ldi	r26, 0x00	; 0
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e8 1a       	sub	r14, r24
    145a:	f9 0a       	sbc	r15, r25
    145c:	0a 0b       	sbc	r16, r26
    145e:	1b 0b       	sbc	r17, r27
    1460:	f5 01       	movw	r30, r10
    1462:	21 81       	ldd	r18, Z+1	; 0x01
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	40 e0       	ldi	r20, 0x00	; 0
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	c8 01       	movw	r24, r16
    146c:	b7 01       	movw	r22, r14
    146e:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodsi4>
    1472:	2e 5f       	subi	r18, 0xFE	; 254
    1474:	3f 4f       	sbci	r19, 0xFF	; 255
    1476:	4f 4f       	sbci	r20, 0xFF	; 255
    1478:	5f 4f       	sbci	r21, 0xFF	; 255
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->max_clust = (CLUST)mclst;
    147a:	f5 01       	movw	r30, r10
    147c:	20 87       	std	Z+8, r18	; 0x08
    147e:	31 87       	std	Z+9, r19	; 0x09
    1480:	42 87       	std	Z+10, r20	; 0x0a
    1482:	53 87       	std	Z+11, r21	; 0x0b

	fmt = FS_FAT12;							/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;		/* Number of clusters >= 0xFF5 */
    1484:	27 3f       	cpi	r18, 0xF7	; 247
    1486:	ff e0       	ldi	r31, 0x0F	; 15
    1488:	3f 07       	cpc	r19, r31
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	4f 07       	cpc	r20, r31
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	5f 07       	cpc	r21, r31
    1492:	10 f4       	brcc	.+4      	; 0x1498 <pf_mount+0x19c>
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	08 c0       	rjmp	.+16     	; 0x14a8 <pf_mount+0x1ac>
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    1498:	27 5f       	subi	r18, 0xF7	; 247
    149a:	3f 4f       	sbci	r19, 0xFF	; 255
    149c:	40 40       	sbci	r20, 0x00	; 0
    149e:	50 40       	sbci	r21, 0x00	; 0
    14a0:	10 f0       	brcs	.+4      	; 0x14a6 <pf_mount+0x1aa>
    14a2:	83 e0       	ldi	r24, 0x03	; 3
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <pf_mount+0x1ac>
    14a6:	82 e0       	ldi	r24, 0x02	; 2
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    14a8:	f5 01       	movw	r30, r10
    14aa:	80 83       	st	Z, r24
#if _FS_FAT32
	if (fmt == FS_FAT32)
    14ac:	83 30       	cpi	r24, 0x03	; 3
    14ae:	29 f4       	brne	.+10     	; 0x14ba <pf_mount+0x1be>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    14b0:	88 a1       	ldd	r24, Y+32	; 0x20
    14b2:	99 a1       	ldd	r25, Y+33	; 0x21
    14b4:	aa a1       	ldd	r26, Y+34	; 0x22
    14b6:	bb a1       	ldd	r27, Y+35	; 0x23
    14b8:	09 c0       	rjmp	.+18     	; 0x14cc <pf_mount+0x1d0>
	else
#endif
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    14ba:	f5 01       	movw	r30, r10
    14bc:	84 85       	ldd	r24, Z+12	; 0x0c
    14be:	95 85       	ldd	r25, Z+13	; 0x0d
    14c0:	a6 85       	ldd	r26, Z+14	; 0x0e
    14c2:	b7 85       	ldd	r27, Z+15	; 0x0f
    14c4:	86 0d       	add	r24, r6
    14c6:	97 1d       	adc	r25, r7
    14c8:	a8 1d       	adc	r26, r8
    14ca:	b9 1d       	adc	r27, r9
    14cc:	80 8b       	std	Z+16, r24	; 0x10
    14ce:	91 8b       	std	Z+17, r25	; 0x11
    14d0:	a2 8b       	std	Z+18, r26	; 0x12
    14d2:	b3 8b       	std	Z+19, r27	; 0x13
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    14d4:	f5 01       	movw	r30, r10
    14d6:	84 81       	ldd	r24, Z+4	; 0x04
    14d8:	95 81       	ldd	r25, Z+5	; 0x05
    14da:	14 e0       	ldi	r17, 0x04	; 4
    14dc:	96 95       	lsr	r25
    14de:	87 95       	ror	r24
    14e0:	1a 95       	dec	r17
    14e2:	e1 f7       	brne	.-8      	; 0x14dc <pf_mount+0x1e0>
    14e4:	a0 e0       	ldi	r26, 0x00	; 0
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	24 85       	ldd	r18, Z+12	; 0x0c
    14ea:	35 85       	ldd	r19, Z+13	; 0x0d
    14ec:	46 85       	ldd	r20, Z+14	; 0x0e
    14ee:	57 85       	ldd	r21, Z+15	; 0x0f
    14f0:	82 0f       	add	r24, r18
    14f2:	93 1f       	adc	r25, r19
    14f4:	a4 1f       	adc	r26, r20
    14f6:	b5 1f       	adc	r27, r21
    14f8:	86 0d       	add	r24, r6
    14fa:	97 1d       	adc	r25, r7
    14fc:	a8 1d       	adc	r26, r8
    14fe:	b9 1d       	adc	r27, r9
    1500:	84 8b       	std	Z+20, r24	; 0x14
    1502:	95 8b       	std	Z+21, r25	; 0x15
    1504:	a6 8b       	std	Z+22, r26	; 0x16
    1506:	b7 8b       	std	Z+23, r27	; 0x17

	fs->flag = 0;
    1508:	12 82       	std	Z+2, r1	; 0x02
	FatFs = fs;
    150a:	b0 92 05 01 	sts	0x0105, r11
    150e:	a0 92 04 01 	sts	0x0104, r10
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	03 c0       	rjmp	.+6      	; 0x151c <pf_mount+0x220>

	return FR_OK;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	01 c0       	rjmp	.+2      	; 0x151c <pf_mount+0x220>
    151a:	87 e0       	ldi	r24, 0x07	; 7
}
    151c:	a4 96       	adiw	r28, 0x24	; 36
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
    1534:	df 90       	pop	r13
    1536:	cf 90       	pop	r12
    1538:	bf 90       	pop	r11
    153a:	af 90       	pop	r10
    153c:	9f 90       	pop	r9
    153e:	8f 90       	pop	r8
    1540:	7f 90       	pop	r7
    1542:	6f 90       	pop	r6
    1544:	08 95       	ret

00001546 <put_rc>:



static
void put_rc (FRESULT rc)
{
    1546:	48 2f       	mov	r20, r24
    1548:	26 e4       	ldi	r18, 0x46	; 70
    154a:	31 e0       	ldi	r19, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	07 c0       	rjmp	.+14     	; 0x155e <put_rc+0x18>
	static const prog_char str[] =
		"OK\0" "DISK_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
		"NOT_OPENED\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0";
	FRESULT i;

	for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    1550:	f9 01       	movw	r30, r18
		while(pgm_read_byte_near(p++));
    1552:	2f 5f       	subi	r18, 0xFF	; 255
    1554:	3f 4f       	sbci	r19, 0xFF	; 255
    1556:	e4 91       	lpm	r30, Z+
    1558:	ee 23       	and	r30, r30
    155a:	d1 f7       	brne	.-12     	; 0x1550 <put_rc+0xa>
	static const prog_char str[] =
		"OK\0" "DISK_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
		"NOT_OPENED\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0";
	FRESULT i;

	for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    155c:	9f 5f       	subi	r25, 0xFF	; 255
    155e:	94 17       	cp	r25, r20
    1560:	21 f0       	breq	.+8      	; 0x156a <put_rc+0x24>
    1562:	f9 01       	movw	r30, r18
    1564:	84 91       	lpm	r24, Z+
    1566:	88 23       	and	r24, r24
    1568:	99 f7       	brne	.-26     	; 0x1550 <put_rc+0xa>
		while(pgm_read_byte_near(p++));
	}
	xprintf(PSTR("rc=%u FR_%S\n"), (WORD)rc, p);
    156a:	00 d0       	rcall	.+0      	; 0x156c <put_rc+0x26>
    156c:	00 d0       	rcall	.+0      	; 0x156e <put_rc+0x28>
    156e:	00 d0       	rcall	.+0      	; 0x1570 <put_rc+0x2a>
    1570:	ed b7       	in	r30, 0x3d	; 61
    1572:	fe b7       	in	r31, 0x3e	; 62
    1574:	31 96       	adiw	r30, 0x01	; 1
    1576:	89 e3       	ldi	r24, 0x39	; 57
    1578:	91 e0       	ldi	r25, 0x01	; 1
    157a:	ad b7       	in	r26, 0x3d	; 61
    157c:	be b7       	in	r27, 0x3e	; 62
    157e:	12 96       	adiw	r26, 0x02	; 2
    1580:	9c 93       	st	X, r25
    1582:	8e 93       	st	-X, r24
    1584:	11 97       	sbiw	r26, 0x01	; 1
    1586:	42 83       	std	Z+2, r20	; 0x02
    1588:	13 82       	std	Z+3, r1	; 0x03
    158a:	35 83       	std	Z+5, r19	; 0x05
    158c:	24 83       	std	Z+4, r18	; 0x04
    158e:	0e 94 30 10 	call	0x2060	; 0x2060 <xprintf>
    1592:	ed b7       	in	r30, 0x3d	; 61
    1594:	fe b7       	in	r31, 0x3e	; 62
    1596:	36 96       	adiw	r30, 0x06	; 6
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	fe bf       	out	0x3e, r31	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	ed bf       	out	0x3d, r30	; 61
}
    15a2:	08 95       	ret

000015a4 <put_dump>:



static
void put_dump (const BYTE *buff, DWORD ofs, int cnt)
{
    15a4:	cf 92       	push	r12
    15a6:	df 92       	push	r13
    15a8:	ef 92       	push	r14
    15aa:	ff 92       	push	r15
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	6c 01       	movw	r12, r24
    15b4:	79 01       	movw	r14, r18
	BYTE n;


	xitoa(ofs, 16, -8); xputc(' ');
    15b6:	cb 01       	movw	r24, r22
    15b8:	ba 01       	movw	r22, r20
    15ba:	40 e1       	ldi	r20, 0x10	; 16
    15bc:	28 ef       	ldi	r18, 0xF8	; 248
    15be:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <xitoa>
    15c2:	80 e2       	ldi	r24, 0x20	; 32
    15c4:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xputc>
    15c8:	10 e0       	ldi	r17, 0x00	; 0
    15ca:	0e c0       	rjmp	.+28     	; 0x15e8 <put_dump+0x44>
	for(n = 0; n < cnt; n++) {
		xputc(' ');	xitoa(buff[n], 16, -2); 
    15cc:	80 e2       	ldi	r24, 0x20	; 32
    15ce:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xputc>
    15d2:	cc 0d       	add	r28, r12
    15d4:	dd 1d       	adc	r29, r13
    15d6:	68 81       	ld	r22, Y
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	40 e1       	ldi	r20, 0x10	; 16
    15e0:	2e ef       	ldi	r18, 0xFE	; 254
    15e2:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <xitoa>
{
	BYTE n;


	xitoa(ofs, 16, -8); xputc(' ');
	for(n = 0; n < cnt; n++) {
    15e6:	1f 5f       	subi	r17, 0xFF	; 255
    15e8:	c1 2f       	mov	r28, r17
    15ea:	d0 e0       	ldi	r29, 0x00	; 0
    15ec:	ce 15       	cp	r28, r14
    15ee:	df 05       	cpc	r29, r15
    15f0:	6c f3       	brlt	.-38     	; 0x15cc <put_dump+0x28>
		xputc(' ');	xitoa(buff[n], 16, -2); 
	}
	xputs(PSTR("  "));
    15f2:	86 e3       	ldi	r24, 0x36	; 54
    15f4:	91 e0       	ldi	r25, 0x01	; 1
    15f6:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <xputs>
    15fa:	10 e0       	ldi	r17, 0x00	; 0
    15fc:	0c c0       	rjmp	.+24     	; 0x1616 <put_dump+0x72>
	for(n = 0; n < cnt; n++)
		xputc(((buff[n] < 0x20)||(buff[n] >= 0x7F)) ? '.' : buff[n]);
    15fe:	ec 0d       	add	r30, r12
    1600:	fd 1d       	adc	r31, r13
    1602:	90 81       	ld	r25, Z
    1604:	89 2f       	mov	r24, r25
    1606:	80 52       	subi	r24, 0x20	; 32
    1608:	8f 35       	cpi	r24, 0x5F	; 95
    160a:	08 f0       	brcs	.+2      	; 0x160e <put_dump+0x6a>
    160c:	9e e2       	ldi	r25, 0x2E	; 46
    160e:	89 2f       	mov	r24, r25
    1610:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xputc>
	xitoa(ofs, 16, -8); xputc(' ');
	for(n = 0; n < cnt; n++) {
		xputc(' ');	xitoa(buff[n], 16, -2); 
	}
	xputs(PSTR("  "));
	for(n = 0; n < cnt; n++)
    1614:	1f 5f       	subi	r17, 0xFF	; 255
    1616:	e1 2f       	mov	r30, r17
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	ee 15       	cp	r30, r14
    161c:	ff 05       	cpc	r31, r15
    161e:	7c f3       	brlt	.-34     	; 0x15fe <put_dump+0x5a>
		xputc(((buff[n] < 0x20)||(buff[n] >= 0x7F)) ? '.' : buff[n]);
	xputc('\n');
    1620:	8a e0       	ldi	r24, 0x0A	; 10
    1622:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xputc>
}
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	ff 90       	pop	r15
    162e:	ef 90       	pop	r14
    1630:	df 90       	pop	r13
    1632:	cf 90       	pop	r12
    1634:	08 95       	ret

00001636 <get_line>:



static
void get_line (char *buff, BYTE len)
{
    1636:	ef 92       	push	r14
    1638:	ff 92       	push	r15
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	ec 01       	movw	r28, r24
    1642:	10 e0       	ldi	r17, 0x00	; 0
	i = 0;
	for (;;) {
		c = rcvr();
		if (c == '\r') break;
		if ((c == '\b') && i) i--;
		if ((c >= ' ') && (i < len - 1))
    1644:	e6 2e       	mov	r14, r22
    1646:	ff 24       	eor	r15, r15
    1648:	08 94       	sec
    164a:	e1 08       	sbc	r14, r1
    164c:	f1 08       	sbc	r15, r1
{
	BYTE c, i;

	i = 0;
	for (;;) {
		c = rcvr();
    164e:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <rcvr>
		if (c == '\r') break;
    1652:	8d 30       	cpi	r24, 0x0D	; 13
    1654:	91 f0       	breq	.+36     	; 0x167a <get_line+0x44>
		if ((c == '\b') && i) i--;
    1656:	88 30       	cpi	r24, 0x08	; 8
    1658:	21 f4       	brne	.+8      	; 0x1662 <get_line+0x2c>
    165a:	11 23       	and	r17, r17
    165c:	c1 f3       	breq	.-16     	; 0x164e <get_line+0x18>
    165e:	11 50       	subi	r17, 0x01	; 1
    1660:	f6 cf       	rjmp	.-20     	; 0x164e <get_line+0x18>
		if ((c >= ' ') && (i < len - 1))
    1662:	80 32       	cpi	r24, 0x20	; 32
    1664:	a0 f3       	brcs	.-24     	; 0x164e <get_line+0x18>
    1666:	e1 2f       	mov	r30, r17
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	ee 15       	cp	r30, r14
    166c:	ff 05       	cpc	r31, r15
    166e:	7c f7       	brge	.-34     	; 0x164e <get_line+0x18>
				buff[i++] = c;
    1670:	ec 0f       	add	r30, r28
    1672:	fd 1f       	adc	r31, r29
    1674:	80 83       	st	Z, r24
    1676:	1f 5f       	subi	r17, 0xFF	; 255
    1678:	ea cf       	rjmp	.-44     	; 0x164e <get_line+0x18>
	}
	buff[i] = 0;
    167a:	c1 0f       	add	r28, r17
    167c:	d1 1d       	adc	r29, r1
    167e:	18 82       	st	Y, r1
	xmit('\n');
    1680:	8a e0       	ldi	r24, 0x0A	; 10
    1682:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <xmit>
}
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	1f 91       	pop	r17
    168c:	ff 90       	pop	r15
    168e:	ef 90       	pop	r14
    1690:	08 95       	ret

00001692 <main>:
/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
{
    1692:	2f 92       	push	r2
    1694:	3f 92       	push	r3
    1696:	4f 92       	push	r4
    1698:	5f 92       	push	r5
    169a:	6f 92       	push	r6
    169c:	7f 92       	push	r7
    169e:	8f 92       	push	r8
    16a0:	9f 92       	push	r9
    16a2:	af 92       	push	r10
    16a4:	bf 92       	push	r11
    16a6:	cf 92       	push	r12
    16a8:	df 92       	push	r13
    16aa:	ef 92       	push	r14
    16ac:	ff 92       	push	r15
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	c0 56       	subi	r28, 0x60	; 96
    16bc:	d0 40       	sbci	r29, 0x00	; 0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
	PORTB = 0b101011;		// u z H L H u
	DDRB =  0b001110;
*/

//Modified to run on Ampertronics CONT-3 With M64 at 16MHz
	PORTB = 0b00000001;		// SS high
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	88 bb       	out	0x18, r24	; 24
//	DDRB =  0b00000111;		// !SS,SCK and MOSI outputs
	DDRB =  0b00000111;		// !SS,SCK and MOSI outputs
    16cc:	87 e0       	ldi	r24, 0x07	; 7
    16ce:	87 bb       	out	0x17, r24	; 23

//Modified to use USART0 pins
	PORTE = 0xff;			// all pullup
    16d0:	8f ef       	ldi	r24, 0xFF	; 255
    16d2:	83 b9       	out	0x03, r24	; 3
	DDRE =  0b00000010;		// PE0 outputs
    16d4:	82 e0       	ldi	r24, 0x02	; 2
    16d6:	82 b9       	out	0x02, r24	; 2


	xfunc_out = xmit;
    16d8:	8a eb       	ldi	r24, 0xBA	; 186
    16da:	9f e0       	ldi	r25, 0x0F	; 15
    16dc:	90 93 0a 01 	sts	0x010A, r25
    16e0:	80 93 09 01 	sts	0x0109, r24
	xputs(PSTR("\nPFF test monitor\n"));
    16e4:	8c e1       	ldi	r24, 0x1C	; 28
    16e6:	91 e0       	ldi	r25, 0x01	; 1
    16e8:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <xputs>

	for (;;) {
		xputc('>');
		get_line(Line, sizeof(Line));
    16ec:	3b e0       	ldi	r19, 0x0B	; 11
    16ee:	83 2e       	mov	r8, r19
    16f0:	31 e0       	ldi	r19, 0x01	; 1
    16f2:	93 2e       	mov	r9, r19
		ptr = Line;

		switch (*ptr++) {
    16f4:	14 01       	movw	r2, r8
    16f6:	08 94       	sec
    16f8:	21 1c       	adc	r2, r1
    16fa:	31 1c       	adc	r3, r1
				xputs(PSTR("Type any line to write. A blank line finalize the write operation.\n"));
				for (;;) {
					get_line(Line, sizeof(Line));
					if (!Line[0]) break;
					strcat(Line, "\r\n");
					res = pf_write(Line, strlen(Line), &w);	/* Write a line to the file */
    16fc:	25 e0       	ldi	r18, 0x05	; 5
    16fe:	62 2e       	mov	r6, r18
    1700:	71 2c       	mov	r7, r1
    1702:	6c 0e       	add	r6, r28
    1704:	7d 1e       	adc	r7, r29
				} while (s1 == 32768);
				break;
#endif
#if _USE_WRITE
			case 'w' :	/* fw <len> <val> - Write data to the file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
    1706:	97 e0       	ldi	r25, 0x07	; 7
    1708:	49 2e       	mov	r4, r25
    170a:	51 2c       	mov	r5, r1
    170c:	4c 0e       	add	r4, r28
    170e:	5d 1e       	adc	r5, r29
    1710:	5e 01       	movw	r10, r28
    1712:	08 94       	sec
    1714:	a1 1c       	adc	r10, r1
    1716:	b1 1c       	adc	r11, r1

	xfunc_out = xmit;
	xputs(PSTR("\nPFF test monitor\n"));

	for (;;) {
		xputc('>');
    1718:	8e e3       	ldi	r24, 0x3E	; 62
    171a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <xputc>
		get_line(Line, sizeof(Line));
    171e:	8b e0       	ldi	r24, 0x0B	; 11
    1720:	91 e0       	ldi	r25, 0x01	; 1
    1722:	60 e8       	ldi	r22, 0x80	; 128
    1724:	0e 94 1b 0b 	call	0x1636	; 0x1636 <get_line>
		ptr = Line;

		switch (*ptr++) {
    1728:	80 91 0b 01 	lds	r24, 0x010B
    172c:	3a 82       	std	Y+2, r3	; 0x02
    172e:	29 82       	std	Y+1, r2	; 0x01
    1730:	84 36       	cpi	r24, 0x64	; 100
    1732:	19 f0       	breq	.+6      	; 0x173a <main+0xa8>
    1734:	86 36       	cpi	r24, 0x66	; 102
    1736:	81 f7       	brne	.-32     	; 0x1718 <main+0x86>
    1738:	62 c0       	rjmp	.+196    	; 0x17fe <main+0x16c>

		case 'd' :
			switch (*ptr++) {
    173a:	80 91 0c 01 	lds	r24, 0x010C
    173e:	2d e0       	ldi	r18, 0x0D	; 13
    1740:	31 e0       	ldi	r19, 0x01	; 1
    1742:	3a 83       	std	Y+2, r19	; 0x02
    1744:	29 83       	std	Y+1, r18	; 0x01
    1746:	84 36       	cpi	r24, 0x64	; 100
    1748:	29 f0       	breq	.+10     	; 0x1754 <main+0xc2>
    174a:	89 36       	cpi	r24, 0x69	; 105
    174c:	29 f7       	brne	.-54     	; 0x1718 <main+0x86>
			case 'i' :	/* di - Initialize physical drive */
				res = disk_initialize();
    174e:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <disk_initialize>
    1752:	1d c0       	rjmp	.+58     	; 0x178e <main+0xfc>
				put_drc(res);
				break;

			case 'd' :	/* dd <sector> <ofs> - Dump partial sector 128 bytes */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
    1754:	c5 01       	movw	r24, r10
    1756:	b2 01       	movw	r22, r4
    1758:	0e 94 8e 10 	call	0x211c	; 0x211c <xatoi>
    175c:	88 23       	and	r24, r24
    175e:	e1 f2       	breq	.-72     	; 0x1718 <main+0x86>
    1760:	c5 01       	movw	r24, r10
    1762:	be 01       	movw	r22, r28
    1764:	65 5f       	subi	r22, 0xF5	; 245
    1766:	7f 4f       	sbci	r23, 0xFF	; 255
    1768:	0e 94 8e 10 	call	0x211c	; 0x211c <xatoi>
    176c:	88 23       	and	r24, r24
    176e:	a1 f2       	breq	.-88     	; 0x1718 <main+0x86>
				s2 = p2;
    1770:	eb 84       	ldd	r14, Y+11	; 0x0b
    1772:	fc 84       	ldd	r15, Y+12	; 0x0c
				res = disk_readp((BYTE*)Line, p1, s2, 128);
    1774:	4f 81       	ldd	r20, Y+7	; 0x07
    1776:	58 85       	ldd	r21, Y+8	; 0x08
    1778:	69 85       	ldd	r22, Y+9	; 0x09
    177a:	7a 85       	ldd	r23, Y+10	; 0x0a
    177c:	c1 01       	movw	r24, r2
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	97 01       	movw	r18, r14
    1782:	00 e8       	ldi	r16, 0x80	; 128
    1784:	10 e0       	ldi	r17, 0x00	; 0
    1786:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <disk_readp>
				if (res) { put_drc(res); break; }
    178a:	88 23       	and	r24, r24
    178c:	81 f0       	breq	.+32     	; 0x17ae <main+0x11c>


static
void put_drc (BYTE res)
{
	xprintf(PSTR("rc=%d\n"), res);
    178e:	00 d0       	rcall	.+0      	; 0x1790 <main+0xfe>
    1790:	00 d0       	rcall	.+0      	; 0x1792 <main+0x100>
    1792:	ed b7       	in	r30, 0x3d	; 61
    1794:	fe b7       	in	r31, 0x3e	; 62
    1796:	31 96       	adiw	r30, 0x01	; 1
    1798:	2f e2       	ldi	r18, 0x2F	; 47
    179a:	31 e0       	ldi	r19, 0x01	; 1
    179c:	ad b7       	in	r26, 0x3d	; 61
    179e:	be b7       	in	r27, 0x3e	; 62
    17a0:	12 96       	adiw	r26, 0x02	; 2
    17a2:	3c 93       	st	X, r19
    17a4:	2e 93       	st	-X, r18
    17a6:	11 97       	sbiw	r26, 0x01	; 1
    17a8:	82 83       	std	Z+2, r24	; 0x02
    17aa:	13 82       	std	Z+3, r1	; 0x03
    17ac:	0a c2       	rjmp	.+1044   	; 0x1bc2 <main+0x530>
			case 'd' :	/* dd <sector> <ofs> - Dump partial sector 128 bytes */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
				s2 = p2;
				res = disk_readp((BYTE*)Line, p1, s2, 128);
				if (res) { put_drc(res); break; }
				s3 = s2 + 128;
    17ae:	80 e8       	ldi	r24, 0x80	; 128
    17b0:	c8 2e       	mov	r12, r24
    17b2:	d1 2c       	mov	r13, r1
    17b4:	ce 0c       	add	r12, r14
    17b6:	df 1c       	adc	r13, r15
				for (ptr = Line; s2 < s3; s2 += 16, ptr += 16, ofs += 16) {
    17b8:	9a 82       	std	Y+2, r9	; 0x02
    17ba:	89 82       	std	Y+1, r8	; 0x01
    17bc:	00 e8       	ldi	r16, 0x80	; 128
    17be:	10 e0       	ldi	r17, 0x00	; 0
    17c0:	1a c0       	rjmp	.+52     	; 0x17f6 <main+0x164>
					s1 = (s3 - s2 >= 16) ? 16 : s3 - s2;
    17c2:	98 01       	movw	r18, r16
    17c4:	01 31       	cpi	r16, 0x11	; 17
    17c6:	11 05       	cpc	r17, r1
    17c8:	10 f0       	brcs	.+4      	; 0x17ce <main+0x13c>
    17ca:	20 e1       	ldi	r18, 0x10	; 16
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	3c 83       	std	Y+4, r19	; 0x04
    17d0:	2b 83       	std	Y+3, r18	; 0x03
					put_dump((BYTE*)ptr, s2, s1);
    17d2:	a7 01       	movw	r20, r14
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	9a 81       	ldd	r25, Y+2	; 0x02
    17dc:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <put_dump>
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
				s2 = p2;
				res = disk_readp((BYTE*)Line, p1, s2, 128);
				if (res) { put_drc(res); break; }
				s3 = s2 + 128;
				for (ptr = Line; s2 < s3; s2 += 16, ptr += 16, ofs += 16) {
    17e0:	80 e1       	ldi	r24, 0x10	; 16
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	e8 0e       	add	r14, r24
    17e6:	f9 1e       	adc	r15, r25
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	9a 81       	ldd	r25, Y+2	; 0x02
    17ec:	40 96       	adiw	r24, 0x10	; 16
    17ee:	9a 83       	std	Y+2, r25	; 0x02
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	00 51       	subi	r16, 0x10	; 16
    17f4:	10 40       	sbci	r17, 0x00	; 0
    17f6:	ec 14       	cp	r14, r12
    17f8:	fd 04       	cpc	r15, r13
    17fa:	18 f3       	brcs	.-58     	; 0x17c2 <main+0x130>
    17fc:	8d cf       	rjmp	.-230    	; 0x1718 <main+0x86>
				break;
			}
			break;

		case 'f' :
			switch (*ptr++) {
    17fe:	80 91 0c 01 	lds	r24, 0x010C
    1802:	ad e0       	ldi	r26, 0x0D	; 13
    1804:	b1 e0       	ldi	r27, 0x01	; 1
    1806:	ba 83       	std	Y+2, r27	; 0x02
    1808:	a9 83       	std	Y+1, r26	; 0x01
    180a:	8c 36       	cpi	r24, 0x6C	; 108
    180c:	09 f4       	brne	.+2      	; 0x1810 <main+0x17e>
    180e:	5f c1       	rjmp	.+702    	; 0x1ace <main+0x43c>
    1810:	8d 36       	cpi	r24, 0x6D	; 109
    1812:	48 f4       	brcc	.+18     	; 0x1826 <main+0x194>
    1814:	85 36       	cpi	r24, 0x65	; 101
    1816:	09 f4       	brne	.+2      	; 0x181a <main+0x188>
    1818:	19 c1       	rjmp	.+562    	; 0x1a4c <main+0x3ba>
    181a:	89 36       	cpi	r24, 0x69	; 105
    181c:	a1 f0       	breq	.+40     	; 0x1846 <main+0x1b4>
    181e:	84 36       	cpi	r24, 0x64	; 100
    1820:	09 f0       	breq	.+2      	; 0x1824 <main+0x192>
    1822:	7a cf       	rjmp	.-268    	; 0x1718 <main+0x86>
    1824:	21 c0       	rjmp	.+66     	; 0x1868 <main+0x1d6>
    1826:	80 37       	cpi	r24, 0x70	; 112
    1828:	09 f4       	brne	.+2      	; 0x182c <main+0x19a>
    182a:	e6 c0       	rjmp	.+460    	; 0x19f8 <main+0x366>
    182c:	81 37       	cpi	r24, 0x71	; 113
    182e:	20 f4       	brcc	.+8      	; 0x1838 <main+0x1a6>
    1830:	8f 36       	cpi	r24, 0x6F	; 111
    1832:	09 f0       	breq	.+2      	; 0x1836 <main+0x1a4>
    1834:	71 cf       	rjmp	.-286    	; 0x1718 <main+0x86>
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <main+0x1c4>
    1838:	84 37       	cpi	r24, 0x74	; 116
    183a:	09 f4       	brne	.+2      	; 0x183e <main+0x1ac>
    183c:	48 c0       	rjmp	.+144    	; 0x18ce <main+0x23c>
    183e:	87 37       	cpi	r24, 0x77	; 119
    1840:	09 f0       	breq	.+2      	; 0x1844 <main+0x1b2>
    1842:	6a cf       	rjmp	.-300    	; 0x1718 <main+0x86>
    1844:	56 c0       	rjmp	.+172    	; 0x18f2 <main+0x260>

			case 'i' :	/* fi - Mount the volume */
				put_rc(pf_mount(&fs));
    1846:	ce 01       	movw	r24, r28
    1848:	c5 96       	adiw	r24, 0x35	; 53
    184a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <pf_mount>
    184e:	4b c1       	rjmp	.+662    	; 0x1ae6 <main+0x454>
				break;

			case 'o' :	/* fo <file> - Open a file */
				while (*ptr == ' ') ptr++;
    1850:	31 96       	adiw	r30, 0x01	; 1
    1852:	fa 83       	std	Y+2, r31	; 0x02
    1854:	e9 83       	std	Y+1, r30	; 0x01
    1856:	e9 81       	ldd	r30, Y+1	; 0x01
    1858:	fa 81       	ldd	r31, Y+2	; 0x02
    185a:	80 81       	ld	r24, Z
    185c:	80 32       	cpi	r24, 0x20	; 32
    185e:	c1 f3       	breq	.-16     	; 0x1850 <main+0x1be>
				put_rc(pf_open(ptr));
    1860:	cf 01       	movw	r24, r30
    1862:	0e 94 80 06 	call	0xd00	; 0xd00 <pf_open>
    1866:	3f c1       	rjmp	.+638    	; 0x1ae6 <main+0x454>
				break;
#if _USE_READ
			case 'd' :	/* fd - Read the file 128 bytes and dump it */
				ofs = fs.fptr;
    1868:	61 96       	adiw	r28, 0x11	; 17
    186a:	ec ac       	ldd	r14, Y+60	; 0x3c
    186c:	fd ac       	ldd	r15, Y+61	; 0x3d
    186e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1870:	1f ad       	ldd	r17, Y+63	; 0x3f
    1872:	61 97       	sbiw	r28, 0x11	; 17
				res = pf_read(Line, sizeof(Line), &s1);
    1874:	c1 01       	movw	r24, r2
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	60 e8       	ldi	r22, 0x80	; 128
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	ae 01       	movw	r20, r28
    187e:	4d 5f       	subi	r20, 0xFD	; 253
    1880:	5f 4f       	sbci	r21, 0xFF	; 255
    1882:	0e 94 e7 06 	call	0xdce	; 0xdce <pf_read>
				if (res != FR_OK) { put_rc(res); break; }
    1886:	88 23       	and	r24, r24
    1888:	09 f0       	breq	.+2      	; 0x188c <main+0x1fa>
    188a:	2d c1       	rjmp	.+602    	; 0x1ae6 <main+0x454>
				while (*ptr == ' ') ptr++;
				put_rc(pf_open(ptr));
				break;
#if _USE_READ
			case 'd' :	/* fd - Read the file 128 bytes and dump it */
				ofs = fs.fptr;
    188c:	87 01       	movw	r16, r14
				res = pf_read(Line, sizeof(Line), &s1);
				if (res != FR_OK) { put_rc(res); break; }
				ptr = Line;
    188e:	9a 82       	std	Y+2, r9	; 0x02
    1890:	89 82       	std	Y+1, r8	; 0x01
    1892:	18 c0       	rjmp	.+48     	; 0x18c4 <main+0x232>
				while (s1) {
					s2 = (s1 >= 16) ? 16 : s1;
    1894:	9c 01       	movw	r18, r24
    1896:	81 31       	cpi	r24, 0x11	; 17
    1898:	91 05       	cpc	r25, r1
    189a:	10 f0       	brcs	.+4      	; 0x18a0 <main+0x20e>
    189c:	20 e1       	ldi	r18, 0x10	; 16
    189e:	30 e0       	ldi	r19, 0x00	; 0
					s1 -= s2;
    18a0:	82 1b       	sub	r24, r18
    18a2:	93 0b       	sbc	r25, r19
    18a4:	9c 83       	std	Y+4, r25	; 0x04
    18a6:	8b 83       	std	Y+3, r24	; 0x03
					put_dump((BYTE*)ptr, ofs, s2);
    18a8:	a8 01       	movw	r20, r16
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	9a 81       	ldd	r25, Y+2	; 0x02
    18b2:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <put_dump>
					ptr += 16; ofs += 16;
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ba:	40 96       	adiw	r24, 0x10	; 16
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	00 5f       	subi	r16, 0xF0	; 240
    18c2:	1f 4f       	sbci	r17, 0xFF	; 255
			case 'd' :	/* fd - Read the file 128 bytes and dump it */
				ofs = fs.fptr;
				res = pf_read(Line, sizeof(Line), &s1);
				if (res != FR_OK) { put_rc(res); break; }
				ptr = Line;
				while (s1) {
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	9c 81       	ldd	r25, Y+4	; 0x04
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	21 f7       	brne	.-56     	; 0x1894 <main+0x202>
    18cc:	25 cf       	rjmp	.-438    	; 0x1718 <main+0x86>
				}
				break;

			case 't' :	/* ft - Type the file data via dreadp function */
				do {
					res = pf_read(0, 32768, &s1);
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	70 e8       	ldi	r23, 0x80	; 128
    18d6:	ae 01       	movw	r20, r28
    18d8:	4d 5f       	subi	r20, 0xFD	; 253
    18da:	5f 4f       	sbci	r21, 0xFF	; 255
    18dc:	0e 94 e7 06 	call	0xdce	; 0xdce <pf_read>
					if (res != FR_OK) { put_rc(res); break; }
    18e0:	88 23       	and	r24, r24
    18e2:	09 f0       	breq	.+2      	; 0x18e6 <main+0x254>
    18e4:	00 c1       	rjmp	.+512    	; 0x1ae6 <main+0x454>
				} while (s1 == 32768);
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ea:	80 50       	subi	r24, 0x00	; 0
    18ec:	90 48       	sbci	r25, 0x80	; 128
    18ee:	79 f3       	breq	.-34     	; 0x18ce <main+0x23c>
    18f0:	13 cf       	rjmp	.-474    	; 0x1718 <main+0x86>
				break;
#endif
#if _USE_WRITE
			case 'w' :	/* fw <len> <val> - Write data to the file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
    18f2:	c5 01       	movw	r24, r10
    18f4:	b2 01       	movw	r22, r4
    18f6:	0e 94 8e 10 	call	0x211c	; 0x211c <xatoi>
    18fa:	88 23       	and	r24, r24
    18fc:	09 f4       	brne	.+2      	; 0x1900 <main+0x26e>
    18fe:	0c cf       	rjmp	.-488    	; 0x1718 <main+0x86>
    1900:	c5 01       	movw	r24, r10
    1902:	be 01       	movw	r22, r28
    1904:	65 5f       	subi	r22, 0xF5	; 245
    1906:	7f 4f       	sbci	r23, 0xFF	; 255
    1908:	0e 94 8e 10 	call	0x211c	; 0x211c <xatoi>
    190c:	88 23       	and	r24, r24
    190e:	09 f4       	brne	.+2      	; 0x1912 <main+0x280>
    1910:	03 cf       	rjmp	.-506    	; 0x1718 <main+0x86>
				for (s1 = 0; s1 < sizeof(Line); Line[s1++] = (BYTE)p2) ;
    1912:	2b 85       	ldd	r18, Y+11	; 0x0b
    1914:	eb e0       	ldi	r30, 0x0B	; 11
    1916:	f1 e0       	ldi	r31, 0x01	; 1
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <main+0x290>
    191e:	21 93       	st	Z+, r18
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	80 38       	cpi	r24, 0x80	; 128
    1924:	91 05       	cpc	r25, r1
    1926:	d8 f3       	brcs	.-10     	; 0x191e <main+0x28c>
    1928:	9c 83       	std	Y+4, r25	; 0x04
    192a:	8b 83       	std	Y+3, r24	; 0x03
				p2 = 0;
    192c:	1b 86       	std	Y+11, r1	; 0x0b
    192e:	1c 86       	std	Y+12, r1	; 0x0c
    1930:	1d 86       	std	Y+13, r1	; 0x0d
    1932:	1e 86       	std	Y+14, r1	; 0x0e
    1934:	34 c0       	rjmp	.+104    	; 0x199e <main+0x30c>
				while (p1) {
					if ((UINT)p1 >= sizeof(Line)) {
    1936:	8c 01       	movw	r16, r24
    1938:	80 38       	cpi	r24, 0x80	; 128
    193a:	91 05       	cpc	r25, r1
    193c:	58 f0       	brcs	.+22     	; 0x1954 <main+0x2c2>
						cnt = sizeof(Line); p1 -= sizeof(Line);
    193e:	80 58       	subi	r24, 0x80	; 128
    1940:	90 40       	sbci	r25, 0x00	; 0
    1942:	a0 40       	sbci	r26, 0x00	; 0
    1944:	b0 40       	sbci	r27, 0x00	; 0
    1946:	8f 83       	std	Y+7, r24	; 0x07
    1948:	98 87       	std	Y+8, r25	; 0x08
    194a:	a9 87       	std	Y+9, r26	; 0x09
    194c:	ba 87       	std	Y+10, r27	; 0x0a
    194e:	00 e8       	ldi	r16, 0x80	; 128
    1950:	10 e0       	ldi	r17, 0x00	; 0
    1952:	04 c0       	rjmp	.+8      	; 0x195c <main+0x2ca>
					} else {
						cnt = (WORD)p1; p1 = 0;
    1954:	1f 82       	std	Y+7, r1	; 0x07
    1956:	18 86       	std	Y+8, r1	; 0x08
    1958:	19 86       	std	Y+9, r1	; 0x09
    195a:	1a 86       	std	Y+10, r1	; 0x0a
					}
					res = pf_write(Line, cnt, &w);	/* Write data to the file */
    195c:	8b e0       	ldi	r24, 0x0B	; 11
    195e:	91 e0       	ldi	r25, 0x01	; 1
    1960:	b8 01       	movw	r22, r16
    1962:	a3 01       	movw	r20, r6
    1964:	0e 94 47 08 	call	0x108e	; 0x108e <pf_write>
    1968:	e8 2f       	mov	r30, r24
					p2 += w;
    196a:	6d 81       	ldd	r22, Y+5	; 0x05
    196c:	7e 81       	ldd	r23, Y+6	; 0x06
    196e:	9b 01       	movw	r18, r22
    1970:	40 e0       	ldi	r20, 0x00	; 0
    1972:	50 e0       	ldi	r21, 0x00	; 0
    1974:	8b 85       	ldd	r24, Y+11	; 0x0b
    1976:	9c 85       	ldd	r25, Y+12	; 0x0c
    1978:	ad 85       	ldd	r26, Y+13	; 0x0d
    197a:	be 85       	ldd	r27, Y+14	; 0x0e
    197c:	82 0f       	add	r24, r18
    197e:	93 1f       	adc	r25, r19
    1980:	a4 1f       	adc	r26, r20
    1982:	b5 1f       	adc	r27, r21
    1984:	8b 87       	std	Y+11, r24	; 0x0b
    1986:	9c 87       	std	Y+12, r25	; 0x0c
    1988:	ad 87       	std	Y+13, r26	; 0x0d
    198a:	be 87       	std	Y+14, r27	; 0x0e
					if (res != FR_OK) { put_rc(res); break; }
    198c:	ee 23       	and	r30, r30
    198e:	21 f0       	breq	.+8      	; 0x1998 <main+0x306>
    1990:	8e 2f       	mov	r24, r30
    1992:	0e 94 a3 0a 	call	0x1546	; 0x1546 <put_rc>
    1996:	0b c0       	rjmp	.+22     	; 0x19ae <main+0x31c>
					if (cnt != w) break;
    1998:	06 17       	cp	r16, r22
    199a:	17 07       	cpc	r17, r23
    199c:	41 f4       	brne	.+16     	; 0x19ae <main+0x31c>
#if _USE_WRITE
			case 'w' :	/* fw <len> <val> - Write data to the file */
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
				for (s1 = 0; s1 < sizeof(Line); Line[s1++] = (BYTE)p2) ;
				p2 = 0;
				while (p1) {
    199e:	8f 81       	ldd	r24, Y+7	; 0x07
    19a0:	98 85       	ldd	r25, Y+8	; 0x08
    19a2:	a9 85       	ldd	r26, Y+9	; 0x09
    19a4:	ba 85       	ldd	r27, Y+10	; 0x0a
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	a1 05       	cpc	r26, r1
    19aa:	b1 05       	cpc	r27, r1
    19ac:	21 f6       	brne	.-120    	; 0x1936 <main+0x2a4>
					res = pf_write(Line, cnt, &w);	/* Write data to the file */
					p2 += w;
					if (res != FR_OK) { put_rc(res); break; }
					if (cnt != w) break;
				}
				res = pf_write(0, 0, &w);		/* Finalize the write process */
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	60 e0       	ldi	r22, 0x00	; 0
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	a3 01       	movw	r20, r6
    19b8:	0e 94 47 08 	call	0x108e	; 0x108e <pf_write>
    19bc:	18 2f       	mov	r17, r24
				put_rc(res);
    19be:	0e 94 a3 0a 	call	0x1546	; 0x1546 <put_rc>
				if (res == FR_OK)
    19c2:	11 23       	and	r17, r17
    19c4:	09 f0       	breq	.+2      	; 0x19c8 <main+0x336>
    19c6:	a8 ce       	rjmp	.-688    	; 0x1718 <main+0x86>
					xprintf(PSTR("%lu bytes written.\n"), p2);
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <main+0x338>
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <main+0x33a>
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <main+0x33c>
    19ce:	28 e0       	ldi	r18, 0x08	; 8
    19d0:	31 e0       	ldi	r19, 0x01	; 1
    19d2:	ed b7       	in	r30, 0x3d	; 61
    19d4:	fe b7       	in	r31, 0x3e	; 62
    19d6:	32 83       	std	Z+2, r19	; 0x02
    19d8:	21 83       	std	Z+1, r18	; 0x01
    19da:	8b 85       	ldd	r24, Y+11	; 0x0b
    19dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    19de:	ad 85       	ldd	r26, Y+13	; 0x0d
    19e0:	be 85       	ldd	r27, Y+14	; 0x0e
    19e2:	83 83       	std	Z+3, r24	; 0x03
    19e4:	94 83       	std	Z+4, r25	; 0x04
    19e6:	a5 83       	std	Z+5, r26	; 0x05
    19e8:	b6 83       	std	Z+6, r27	; 0x06
    19ea:	0e 94 30 10 	call	0x2060	; 0x2060 <xprintf>
    19ee:	2d b7       	in	r18, 0x3d	; 61
    19f0:	3e b7       	in	r19, 0x3e	; 62
    19f2:	2a 5f       	subi	r18, 0xFA	; 250
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	62 c0       	rjmp	.+196    	; 0x1abc <main+0x42a>
				break;

			case 'p' :	/* fp - Write console input to the file */
				xputs(PSTR("Type any line to write. A blank line finalize the write operation.\n"));
    19f8:	84 ec       	ldi	r24, 0xC4	; 196
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <xputs>
				for (;;) {
					get_line(Line, sizeof(Line));
    1a00:	8b e0       	ldi	r24, 0x0B	; 11
    1a02:	91 e0       	ldi	r25, 0x01	; 1
    1a04:	60 e8       	ldi	r22, 0x80	; 128
    1a06:	0e 94 1b 0b 	call	0x1636	; 0x1636 <get_line>
					if (!Line[0]) break;
    1a0a:	80 91 0b 01 	lds	r24, 0x010B
    1a0e:	88 23       	and	r24, r24
    1a10:	a9 f0       	breq	.+42     	; 0x1a3c <main+0x3aa>
					strcat(Line, "\r\n");
    1a12:	8b e0       	ldi	r24, 0x0B	; 11
    1a14:	91 e0       	ldi	r25, 0x01	; 1
    1a16:	60 e0       	ldi	r22, 0x00	; 0
    1a18:	71 e0       	ldi	r23, 0x01	; 1
    1a1a:	0e 94 35 11 	call	0x226a	; 0x226a <strcat>
					res = pf_write(Line, strlen(Line), &w);	/* Write a line to the file */
    1a1e:	f4 01       	movw	r30, r8
    1a20:	01 90       	ld	r0, Z+
    1a22:	00 20       	and	r0, r0
    1a24:	e9 f7       	brne	.-6      	; 0x1a20 <main+0x38e>
    1a26:	31 97       	sbiw	r30, 0x01	; 1
    1a28:	eb 50       	subi	r30, 0x0B	; 11
    1a2a:	f1 40       	sbci	r31, 0x01	; 1
    1a2c:	8b e0       	ldi	r24, 0x0B	; 11
    1a2e:	91 e0       	ldi	r25, 0x01	; 1
    1a30:	bf 01       	movw	r22, r30
    1a32:	a3 01       	movw	r20, r6
    1a34:	0e 94 47 08 	call	0x108e	; 0x108e <pf_write>
					if (res) break;
    1a38:	88 23       	and	r24, r24
    1a3a:	11 f3       	breq	.-60     	; 0x1a00 <main+0x36e>
				}
				res = pf_write(0, 0, &w);		/* Finalize the write process */
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	60 e0       	ldi	r22, 0x00	; 0
    1a42:	70 e0       	ldi	r23, 0x00	; 0
    1a44:	a3 01       	movw	r20, r6
    1a46:	0e 94 47 08 	call	0x108e	; 0x108e <pf_write>
    1a4a:	4d c0       	rjmp	.+154    	; 0x1ae6 <main+0x454>
				put_rc(res);
				break;
#endif
#if _USE_LSEEK
			case 'e' :	/* fe - Move file pointer of the file */
				if (!xatoi(&ptr, &p1)) break;
    1a4c:	c5 01       	movw	r24, r10
    1a4e:	b2 01       	movw	r22, r4
    1a50:	0e 94 8e 10 	call	0x211c	; 0x211c <xatoi>
    1a54:	88 23       	and	r24, r24
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <main+0x3c8>
    1a58:	5f ce       	rjmp	.-834    	; 0x1718 <main+0x86>
				res = pf_lseek(p1);
    1a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5c:	78 85       	ldd	r23, Y+8	; 0x08
    1a5e:	89 85       	ldd	r24, Y+9	; 0x09
    1a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a62:	0e 94 08 03 	call	0x610	; 0x610 <pf_lseek>
    1a66:	18 2f       	mov	r17, r24
				put_rc(res);
    1a68:	0e 94 a3 0a 	call	0x1546	; 0x1546 <put_rc>
				if (res == FR_OK)
    1a6c:	11 23       	and	r17, r17
    1a6e:	09 f0       	breq	.+2      	; 0x1a72 <main+0x3e0>
    1a70:	53 ce       	rjmp	.-858    	; 0x1718 <main+0x86>
					xprintf(PSTR("fptr = %lu(0x%lX)\n"), fs.fptr, fs.fptr);
    1a72:	61 96       	adiw	r28, 0x11	; 17
    1a74:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a76:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a78:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a7a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a7c:	61 97       	sbiw	r28, 0x11	; 17
    1a7e:	ed b7       	in	r30, 0x3d	; 61
    1a80:	fe b7       	in	r31, 0x3e	; 62
    1a82:	3a 97       	sbiw	r30, 0x0a	; 10
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	fe bf       	out	0x3e, r31	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	ed bf       	out	0x3d, r30	; 61
    1a8e:	4d b7       	in	r20, 0x3d	; 61
    1a90:	5e b7       	in	r21, 0x3e	; 62
    1a92:	4f 5f       	subi	r20, 0xFF	; 255
    1a94:	5f 4f       	sbci	r21, 0xFF	; 255
    1a96:	21 eb       	ldi	r18, 0xB1	; 177
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	32 83       	std	Z+2, r19	; 0x02
    1a9c:	21 83       	std	Z+1, r18	; 0x01
    1a9e:	fa 01       	movw	r30, r20
    1aa0:	82 83       	std	Z+2, r24	; 0x02
    1aa2:	93 83       	std	Z+3, r25	; 0x03
    1aa4:	a4 83       	std	Z+4, r26	; 0x04
    1aa6:	b5 83       	std	Z+5, r27	; 0x05
    1aa8:	86 83       	std	Z+6, r24	; 0x06
    1aaa:	97 83       	std	Z+7, r25	; 0x07
    1aac:	a0 87       	std	Z+8, r26	; 0x08
    1aae:	b1 87       	std	Z+9, r27	; 0x09
    1ab0:	0e 94 30 10 	call	0x2060	; 0x2060 <xprintf>
    1ab4:	2d b7       	in	r18, 0x3d	; 61
    1ab6:	3e b7       	in	r19, 0x3e	; 62
    1ab8:	26 5f       	subi	r18, 0xF6	; 246
    1aba:	3f 4f       	sbci	r19, 0xFF	; 255
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	3e bf       	out	0x3e, r19	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	2d bf       	out	0x3d, r18	; 61
    1ac6:	28 ce       	rjmp	.-944    	; 0x1718 <main+0x86>
				break;
#endif
#if _USE_DIR
			case 'l' :	/* fl [<path>] - Directory listing */
				while (*ptr == ' ') ptr++;
    1ac8:	31 96       	adiw	r30, 0x01	; 1
    1aca:	fa 83       	std	Y+2, r31	; 0x02
    1acc:	e9 83       	std	Y+1, r30	; 0x01
    1ace:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad2:	80 81       	ld	r24, Z
    1ad4:	80 32       	cpi	r24, 0x20	; 32
    1ad6:	c1 f3       	breq	.-16     	; 0x1ac8 <main+0x436>
				res = pf_opendir(&dir, ptr);
    1ad8:	ce 01       	movw	r24, r28
    1ada:	0f 96       	adiw	r24, 0x0f	; 15
    1adc:	bf 01       	movw	r22, r30
    1ade:	0e 94 2a 06 	call	0xc54	; 0xc54 <pf_opendir>
				if (res) { put_rc(res); break; }
    1ae2:	88 23       	and	r24, r24
    1ae4:	19 f0       	breq	.+6      	; 0x1aec <main+0x45a>
    1ae6:	0e 94 a3 0a 	call	0x1546	; 0x1546 <put_rc>
    1aea:	16 ce       	rjmp	.-980    	; 0x1718 <main+0x86>
				s1 = 0;
    1aec:	1c 82       	std	Y+4, r1	; 0x04
    1aee:	1b 82       	std	Y+3, r1	; 0x03
				for(;;) {
					res = pf_readdir(&dir, &fno);
    1af0:	ce 01       	movw	r24, r28
    1af2:	0f 96       	adiw	r24, 0x0f	; 15
    1af4:	be 01       	movw	r22, r28
    1af6:	61 5e       	subi	r22, 0xE1	; 225
    1af8:	7f 4f       	sbci	r23, 0xFF	; 255
    1afa:	0e 94 43 04 	call	0x886	; 0x886 <pf_readdir>
					if (res != FR_OK) { put_rc(res); break; }
    1afe:	88 23       	and	r24, r24
    1b00:	19 f0       	breq	.+6      	; 0x1b08 <main+0x476>
    1b02:	0e 94 a3 0a 	call	0x1546	; 0x1546 <put_rc>
    1b06:	51 c0       	rjmp	.+162    	; 0x1baa <main+0x518>
					if (!fno.fname[0]) break;
    1b08:	88 a5       	ldd	r24, Y+40	; 0x28
    1b0a:	88 23       	and	r24, r24
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <main+0x47e>
    1b0e:	4d c0       	rjmp	.+154    	; 0x1baa <main+0x518>
					if (fno.fattrib & AM_DIR)
    1b10:	8f a1       	ldd	r24, Y+39	; 0x27
    1b12:	84 ff       	sbrs	r24, 4
    1b14:	19 c0       	rjmp	.+50     	; 0x1b48 <main+0x4b6>
						xprintf(PSTR("   <DIR>   %s\n"), fno.fname);
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <main+0x486>
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <main+0x488>
    1b1a:	e2 ea       	ldi	r30, 0xA2	; 162
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	ad b7       	in	r26, 0x3d	; 61
    1b20:	be b7       	in	r27, 0x3e	; 62
    1b22:	12 96       	adiw	r26, 0x02	; 2
    1b24:	fc 93       	st	X, r31
    1b26:	ee 93       	st	-X, r30
    1b28:	11 97       	sbiw	r26, 0x01	; 1
    1b2a:	28 e2       	ldi	r18, 0x28	; 40
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	2c 0f       	add	r18, r28
    1b30:	3d 1f       	adc	r19, r29
    1b32:	14 96       	adiw	r26, 0x04	; 4
    1b34:	3c 93       	st	X, r19
    1b36:	2e 93       	st	-X, r18
    1b38:	13 97       	sbiw	r26, 0x03	; 3
    1b3a:	0e 94 30 10 	call	0x2060	; 0x2060 <xprintf>
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	2b c0       	rjmp	.+86     	; 0x1b9e <main+0x50c>
					else
						xprintf(PSTR("%9lu  %s\n"), fno.fsize, fno.fname);
    1b48:	8d b7       	in	r24, 0x3d	; 61
    1b4a:	9e b7       	in	r25, 0x3e	; 62
    1b4c:	08 97       	sbiw	r24, 0x08	; 8
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	9e bf       	out	0x3e, r25	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	8d bf       	out	0x3d, r24	; 61
    1b58:	ed b7       	in	r30, 0x3d	; 61
    1b5a:	fe b7       	in	r31, 0x3e	; 62
    1b5c:	31 96       	adiw	r30, 0x01	; 1
    1b5e:	28 e9       	ldi	r18, 0x98	; 152
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	ad b7       	in	r26, 0x3d	; 61
    1b64:	be b7       	in	r27, 0x3e	; 62
    1b66:	12 96       	adiw	r26, 0x02	; 2
    1b68:	3c 93       	st	X, r19
    1b6a:	2e 93       	st	-X, r18
    1b6c:	11 97       	sbiw	r26, 0x01	; 1
    1b6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b70:	98 a1       	ldd	r25, Y+32	; 0x20
    1b72:	a9 a1       	ldd	r26, Y+33	; 0x21
    1b74:	ba a1       	ldd	r27, Y+34	; 0x22
    1b76:	82 83       	std	Z+2, r24	; 0x02
    1b78:	93 83       	std	Z+3, r25	; 0x03
    1b7a:	a4 83       	std	Z+4, r26	; 0x04
    1b7c:	b5 83       	std	Z+5, r27	; 0x05
    1b7e:	88 e2       	ldi	r24, 0x28	; 40
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	8c 0f       	add	r24, r28
    1b84:	9d 1f       	adc	r25, r29
    1b86:	97 83       	std	Z+7, r25	; 0x07
    1b88:	86 83       	std	Z+6, r24	; 0x06
    1b8a:	0e 94 30 10 	call	0x2060	; 0x2060 <xprintf>
    1b8e:	ad b7       	in	r26, 0x3d	; 61
    1b90:	be b7       	in	r27, 0x3e	; 62
    1b92:	18 96       	adiw	r26, 0x08	; 8
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	be bf       	out	0x3e, r27	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	ad bf       	out	0x3d, r26	; 61
					s1++;
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	9c 83       	std	Y+4, r25	; 0x04
    1ba6:	8b 83       	std	Y+3, r24	; 0x03
    1ba8:	a3 cf       	rjmp	.-186    	; 0x1af0 <main+0x45e>
				}
				xprintf(PSTR("%u item(s)\n"), s1);
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <main+0x51a>
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <main+0x51c>
    1bae:	2c e8       	ldi	r18, 0x8C	; 140
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	ed b7       	in	r30, 0x3d	; 61
    1bb4:	fe b7       	in	r31, 0x3e	; 62
    1bb6:	32 83       	std	Z+2, r19	; 0x02
    1bb8:	21 83       	std	Z+1, r18	; 0x01
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	94 83       	std	Z+4, r25	; 0x04
    1bc0:	83 83       	std	Z+3, r24	; 0x03
    1bc2:	0e 94 30 10 	call	0x2060	; 0x2060 <xprintf>
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	a4 cd       	rjmp	.-1208   	; 0x1718 <main+0x86>

00001bd0 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    1bd0:	df 92       	push	r13
    1bd2:	ef 92       	push	r14
    1bd4:	ff 92       	push	r15
    1bd6:	0f 93       	push	r16
    1bd8:	1f 93       	push	r17
    1bda:	d8 2e       	mov	r13, r24
    1bdc:	7a 01       	movw	r14, r20
    1bde:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    1be0:	87 ff       	sbrs	r24, 7
    1be2:	0b c0       	rjmp	.+22     	; 0x1bfa <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    1be4:	87 e7       	ldi	r24, 0x77	; 119
    1be6:	40 e0       	ldi	r20, 0x00	; 0
    1be8:	50 e0       	ldi	r21, 0x00	; 0
    1bea:	60 e0       	ldi	r22, 0x00	; 0
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <send_cmd>
		if (res > 1) return res;
    1bf2:	82 30       	cpi	r24, 0x02	; 2
    1bf4:	98 f5       	brcc	.+102    	; 0x1c5c <send_cmd+0x8c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    1bf6:	8f e7       	ldi	r24, 0x7F	; 127
    1bf8:	d8 22       	and	r13, r24
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	DESELECT();
    1bfa:	c0 9a       	sbi	0x18, 0	; 24
	rcv_spi();
    1bfc:	0e 94 ee 10 	call	0x21dc	; 0x21dc <rcv_spi>
	SELECT();
    1c00:	c0 98       	cbi	0x18, 0	; 24
	rcv_spi();
    1c02:	0e 94 ee 10 	call	0x21dc	; 0x21dc <rcv_spi>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
    1c06:	8d 2d       	mov	r24, r13
    1c08:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    1c0c:	81 2f       	mov	r24, r17
    1c0e:	99 27       	eor	r25, r25
    1c10:	aa 27       	eor	r26, r26
    1c12:	bb 27       	eor	r27, r27
    1c14:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    1c18:	c8 01       	movw	r24, r16
    1c1a:	aa 27       	eor	r26, r26
    1c1c:	bb 27       	eor	r27, r27
    1c1e:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    1c22:	bb 27       	eor	r27, r27
    1c24:	a1 2f       	mov	r26, r17
    1c26:	90 2f       	mov	r25, r16
    1c28:	8f 2d       	mov	r24, r15
    1c2a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    1c2e:	8e 2d       	mov	r24, r14
    1c30:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    1c34:	80 e4       	ldi	r24, 0x40	; 64
    1c36:	d8 16       	cp	r13, r24
    1c38:	11 f4       	brne	.+4      	; 0x1c3e <send_cmd+0x6e>
    1c3a:	85 e9       	ldi	r24, 0x95	; 149
    1c3c:	06 c0       	rjmp	.+12     	; 0x1c4a <send_cmd+0x7a>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    1c3e:	88 e4       	ldi	r24, 0x48	; 72
    1c40:	d8 16       	cp	r13, r24
    1c42:	11 f4       	brne	.+4      	; 0x1c48 <send_cmd+0x78>
    1c44:	87 e8       	ldi	r24, 0x87	; 135
    1c46:	01 c0       	rjmp	.+2      	; 0x1c4a <send_cmd+0x7a>
    1c48:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
    1c4a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <xmit_spi>
    1c4e:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
    1c50:	0e 94 ee 10 	call	0x21dc	; 0x21dc <rcv_spi>
	} while ((res & 0x80) && --n);
    1c54:	87 ff       	sbrs	r24, 7
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <send_cmd+0x8c>
    1c58:	11 50       	subi	r17, 0x01	; 1
    1c5a:	d1 f7       	brne	.-12     	; 0x1c50 <send_cmd+0x80>

	return res;			/* Return with the response value */
}
    1c5c:	1f 91       	pop	r17
    1c5e:	0f 91       	pop	r16
    1c60:	ff 90       	pop	r15
    1c62:	ef 90       	pop	r14
    1c64:	df 90       	pop	r13
    1c66:	08 95       	ret

00001c68 <disk_writep>:

DRESULT disk_writep (
	const BYTE *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	DWORD sa			/* Number of bytes to send, Sector number (LBA) or zero */
)
{
    1c68:	0f 93       	push	r16
    1c6a:	1f 93       	push	r17
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	8c 01       	movw	r16, r24
	static WORD wc;


	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	d9 f0       	breq	.+54     	; 0x1cac <disk_writep+0x44>
		bc = (WORD)sa;
    1c76:	ea 01       	movw	r28, r20
    1c78:	0f c0       	rjmp	.+30     	; 0x1c98 <disk_writep+0x30>
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	81 91       	ld	r24, Z+
    1c7e:	8f 01       	movw	r16, r30
    1c80:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <xmit_spi>
			wc--; bc--;
    1c84:	80 91 06 01 	lds	r24, 0x0106
    1c88:	90 91 07 01 	lds	r25, 0x0107
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	90 93 07 01 	sts	0x0107, r25
    1c92:	80 93 06 01 	sts	0x0106, r24
    1c96:	21 97       	sbiw	r28, 0x01	; 1

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
    1c98:	20 97       	sbiw	r28, 0x00	; 0
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <disk_writep+0x36>
    1c9c:	50 c0       	rjmp	.+160    	; 0x1d3e <disk_writep+0xd6>
    1c9e:	80 91 06 01 	lds	r24, 0x0106
    1ca2:	90 91 07 01 	lds	r25, 0x0107
    1ca6:	89 2b       	or	r24, r25
    1ca8:	41 f7       	brne	.-48     	; 0x1c7a <disk_writep+0x12>
    1caa:	49 c0       	rjmp	.+146    	; 0x1d3e <disk_writep+0xd6>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
	} else {
		if (sa) {	/* Initiate sector write process */
    1cac:	41 15       	cp	r20, r1
    1cae:	51 05       	cpc	r21, r1
    1cb0:	61 05       	cpc	r22, r1
    1cb2:	71 05       	cpc	r23, r1
    1cb4:	f9 f0       	breq	.+62     	; 0x1cf4 <disk_writep+0x8c>
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
    1cb6:	80 91 08 01 	lds	r24, 0x0108
    1cba:	83 fd       	sbrc	r24, 3
    1cbc:	07 c0       	rjmp	.+14     	; 0x1ccc <disk_writep+0x64>
    1cbe:	39 e0       	ldi	r19, 0x09	; 9
    1cc0:	44 0f       	add	r20, r20
    1cc2:	55 1f       	adc	r21, r21
    1cc4:	66 1f       	adc	r22, r22
    1cc6:	77 1f       	adc	r23, r23
    1cc8:	3a 95       	dec	r19
    1cca:	d1 f7       	brne	.-12     	; 0x1cc0 <disk_writep+0x58>
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
    1ccc:	88 e5       	ldi	r24, 0x58	; 88
    1cce:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <send_cmd>
    1cd2:	88 23       	and	r24, r24
    1cd4:	11 f0       	breq	.+4      	; 0x1cda <disk_writep+0x72>
    1cd6:	11 e0       	ldi	r17, 0x01	; 1
    1cd8:	33 c0       	rjmp	.+102    	; 0x1d40 <disk_writep+0xd8>
				xmit_spi(0xFF); xmit_spi(0xFE);		/* Data block header */
    1cda:	8f ef       	ldi	r24, 0xFF	; 255
    1cdc:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <xmit_spi>
    1ce0:	8e ef       	ldi	r24, 0xFE	; 254
    1ce2:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <xmit_spi>
				wc = 512;							/* Set byte counter */
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	92 e0       	ldi	r25, 0x02	; 2
    1cea:	90 93 07 01 	sts	0x0107, r25
    1cee:	80 93 06 01 	sts	0x0106, r24
    1cf2:	25 c0       	rjmp	.+74     	; 0x1d3e <disk_writep+0xd6>
				res = RES_OK;
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
    1cf4:	c0 91 06 01 	lds	r28, 0x0106
    1cf8:	d0 91 07 01 	lds	r29, 0x0107
    1cfc:	22 96       	adiw	r28, 0x02	; 2
    1cfe:	04 c0       	rjmp	.+8      	; 0x1d08 <disk_writep+0xa0>
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <xmit_spi>
    1d06:	21 97       	sbiw	r28, 0x01	; 1
    1d08:	20 97       	sbiw	r28, 0x00	; 0
    1d0a:	d1 f7       	brne	.-12     	; 0x1d00 <disk_writep+0x98>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 300ms */
    1d0c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <rcv_spi>
    1d10:	8f 71       	andi	r24, 0x1F	; 31
    1d12:	85 30       	cpi	r24, 0x05	; 5
    1d14:	79 f4       	brne	.+30     	; 0x1d34 <disk_writep+0xcc>
    1d16:	c8 ee       	ldi	r28, 0xE8	; 232
    1d18:	dd ef       	ldi	r29, 0xFD	; 253
    1d1a:	01 c0       	rjmp	.+2      	; 0x1d1e <disk_writep+0xb6>
				for (bc = 65000; rcv_spi() != 0xFF && bc; bc--) ;	/* Wait ready */
    1d1c:	21 97       	sbiw	r28, 0x01	; 1
    1d1e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <rcv_spi>
    1d22:	8f 3f       	cpi	r24, 0xFF	; 255
    1d24:	19 f0       	breq	.+6      	; 0x1d2c <disk_writep+0xc4>
    1d26:	20 97       	sbiw	r28, 0x00	; 0
    1d28:	c9 f7       	brne	.-14     	; 0x1d1c <disk_writep+0xb4>
    1d2a:	04 c0       	rjmp	.+8      	; 0x1d34 <disk_writep+0xcc>
				if (bc) res = RES_OK;
    1d2c:	cd 2b       	or	r28, r29
    1d2e:	11 f0       	breq	.+4      	; 0x1d34 <disk_writep+0xcc>
    1d30:	10 e0       	ldi	r17, 0x00	; 0
    1d32:	01 c0       	rjmp	.+2      	; 0x1d36 <disk_writep+0xce>
    1d34:	11 e0       	ldi	r17, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    1d36:	c0 9a       	sbi	0x18, 0	; 24
	rcv_spi();
    1d38:	0e 94 ee 10 	call	0x21dc	; 0x21dc <rcv_spi>
    1d3c:	01 c0       	rjmp	.+2      	; 0x1d40 <disk_writep+0xd8>
    1d3e:	10 e0       	ldi	r17, 0x00	; 0
			release_spi();
		}
	}

	return res;
}
    1d40:	81 2f       	mov	r24, r17
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	1f 91       	pop	r17
    1d48:	0f 91       	pop	r16
    1d4a:	08 95       	ret

00001d4c <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
    1d4c:	cf 92       	push	r12
    1d4e:	df 92       	push	r13
    1d50:	ef 92       	push	r14
    1d52:	ff 92       	push	r15
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <disk_initialize+0x12>
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <disk_initialize+0x14>
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	WORD tmr;


	INIT_SPI();
    1d64:	80 e5       	ldi	r24, 0x50	; 80
    1d66:	8d b9       	out	0x0d, r24	; 13

#if _WRITE_FUNC
	if (MMC_SEL) disk_writep(0, 0);		/* Finalize write process if it is in progress */
    1d68:	c0 99       	sbic	0x18, 0	; 24
    1d6a:	08 c0       	rjmp	.+16     	; 0x1d7c <disk_initialize+0x30>
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	40 e0       	ldi	r20, 0x00	; 0
    1d72:	50 e0       	ldi	r21, 0x00	; 0
    1d74:	60 e0       	ldi	r22, 0x00	; 0
    1d76:	70 e0       	ldi	r23, 0x00	; 0
    1d78:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <disk_writep>
    1d7c:	14 e6       	ldi	r17, 0x64	; 100
#endif
	for (n = 100; n; n--) rcv_spi();	/* Dummy clocks */
    1d7e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <rcv_spi>
    1d82:	11 50       	subi	r17, 0x01	; 1
    1d84:	e1 f7       	brne	.-8      	; 0x1d7e <disk_initialize+0x32>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    1d86:	80 e4       	ldi	r24, 0x40	; 64
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	50 e0       	ldi	r21, 0x00	; 0
    1d8c:	60 e0       	ldi	r22, 0x00	; 0
    1d8e:	70 e0       	ldi	r23, 0x00	; 0
    1d90:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <send_cmd>
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	09 f0       	breq	.+2      	; 0x1d9a <disk_initialize+0x4e>
    1d98:	65 c0       	rjmp	.+202    	; 0x1e64 <disk_initialize+0x118>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    1d9a:	88 e4       	ldi	r24, 0x48	; 72
    1d9c:	4a ea       	ldi	r20, 0xAA	; 170
    1d9e:	51 e0       	ldi	r21, 0x01	; 1
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	70 e0       	ldi	r23, 0x00	; 0
    1da4:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <send_cmd>
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	d1 f5       	brne	.+116    	; 0x1e20 <disk_initialize+0xd4>
    1dac:	6e 01       	movw	r12, r28
    1dae:	08 94       	sec
    1db0:	c1 1c       	adc	r12, r1
    1db2:	d1 1c       	adc	r13, r1
    1db4:	76 01       	movw	r14, r12
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
    1db6:	8e 01       	movw	r16, r28
    1db8:	0b 5f       	subi	r16, 0xFB	; 251
    1dba:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbc:	0e 94 ee 10 	call	0x21dc	; 0x21dc <rcv_spi>
    1dc0:	f7 01       	movw	r30, r14
    1dc2:	81 93       	st	Z+, r24
    1dc4:	7f 01       	movw	r14, r30
    1dc6:	e0 17       	cp	r30, r16
    1dc8:	f1 07       	cpc	r31, r17
    1dca:	c1 f7       	brne	.-16     	; 0x1dbc <disk_initialize+0x70>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	81 30       	cpi	r24, 0x01	; 1
    1dd0:	09 f0       	breq	.+2      	; 0x1dd4 <disk_initialize+0x88>
    1dd2:	48 c0       	rjmp	.+144    	; 0x1e64 <disk_initialize+0x118>
    1dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd6:	8a 3a       	cpi	r24, 0xAA	; 170
    1dd8:	09 f0       	breq	.+2      	; 0x1ddc <disk_initialize+0x90>
    1dda:	44 c0       	rjmp	.+136    	; 0x1e64 <disk_initialize+0x118>
    1ddc:	00 ee       	ldi	r16, 0xE0	; 224
    1dde:	1e e2       	ldi	r17, 0x2E	; 46
    1de0:	04 c0       	rjmp	.+8      	; 0x1dea <disk_initialize+0x9e>
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1de2:	01 50       	subi	r16, 0x01	; 1
    1de4:	10 40       	sbci	r17, 0x00	; 0
    1de6:	09 f4       	brne	.+2      	; 0x1dea <disk_initialize+0x9e>
    1de8:	3d c0       	rjmp	.+122    	; 0x1e64 <disk_initialize+0x118>
    1dea:	89 ee       	ldi	r24, 0xE9	; 233
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	50 e0       	ldi	r21, 0x00	; 0
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	70 e4       	ldi	r23, 0x40	; 64
    1df4:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <send_cmd>
    1df8:	88 23       	and	r24, r24
    1dfa:	99 f7       	brne	.-26     	; 0x1de2 <disk_initialize+0x96>
    1dfc:	4a c0       	rjmp	.+148    	; 0x1e92 <disk_initialize+0x146>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
    1dfe:	0e 94 ee 10 	call	0x21dc	; 0x21dc <rcv_spi>
    1e02:	f6 01       	movw	r30, r12
    1e04:	81 93       	st	Z+, r24
    1e06:	6f 01       	movw	r12, r30
    1e08:	ee 15       	cp	r30, r14
    1e0a:	ff 05       	cpc	r31, r15
    1e0c:	c1 f7       	brne	.-16     	; 0x1dfe <disk_initialize+0xb2>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	86 fd       	sbrc	r24, 6
    1e12:	03 c0       	rjmp	.+6      	; 0x1e1a <disk_initialize+0xce>
    1e14:	e4 e0       	ldi	r30, 0x04	; 4
    1e16:	fe 2e       	mov	r15, r30
    1e18:	26 c0       	rjmp	.+76     	; 0x1e66 <disk_initialize+0x11a>
    1e1a:	7c e0       	ldi	r23, 0x0C	; 12
    1e1c:	f7 2e       	mov	r15, r23
    1e1e:	23 c0       	rjmp	.+70     	; 0x1e66 <disk_initialize+0x11a>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    1e20:	89 ee       	ldi	r24, 0xE9	; 233
    1e22:	40 e0       	ldi	r20, 0x00	; 0
    1e24:	50 e0       	ldi	r21, 0x00	; 0
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	70 e0       	ldi	r23, 0x00	; 0
    1e2a:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <send_cmd>
    1e2e:	82 30       	cpi	r24, 0x02	; 2
    1e30:	28 f0       	brcs	.+10     	; 0x1e3c <disk_initialize+0xf0>
    1e32:	61 e4       	ldi	r22, 0x41	; 65
    1e34:	e6 2e       	mov	r14, r22
    1e36:	ff 24       	eor	r15, r15
    1e38:	f3 94       	inc	r15
    1e3a:	04 c0       	rjmp	.+8      	; 0x1e44 <disk_initialize+0xf8>
    1e3c:	59 ee       	ldi	r21, 0xE9	; 233
    1e3e:	e5 2e       	mov	r14, r21
    1e40:	42 e0       	ldi	r20, 0x02	; 2
    1e42:	f4 2e       	mov	r15, r20
    1e44:	08 ea       	ldi	r16, 0xA8	; 168
    1e46:	11 e6       	ldi	r17, 0x61	; 97
    1e48:	03 c0       	rjmp	.+6      	; 0x1e50 <disk_initialize+0x104>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
    1e4a:	01 50       	subi	r16, 0x01	; 1
    1e4c:	10 40       	sbci	r17, 0x00	; 0
    1e4e:	51 f0       	breq	.+20     	; 0x1e64 <disk_initialize+0x118>
    1e50:	8e 2d       	mov	r24, r14
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	70 e0       	ldi	r23, 0x00	; 0
    1e5a:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <send_cmd>
    1e5e:	88 23       	and	r24, r24
    1e60:	a1 f7       	brne	.-24     	; 0x1e4a <disk_initialize+0xfe>
    1e62:	22 c0       	rjmp	.+68     	; 0x1ea8 <disk_initialize+0x15c>
    1e64:	ff 24       	eor	r15, r15
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    1e66:	f0 92 08 01 	sts	0x0108, r15
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    1e6a:	c0 9a       	sbi	0x18, 0	; 24
	rcv_spi();
    1e6c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <rcv_spi>
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	ff 20       	and	r15, r15
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <disk_initialize+0x12c>
    1e76:	81 e0       	ldi	r24, 0x01	; 1
	}
	CardType = ty;
	release_spi();

	return ty ? 0 : STA_NOINIT;
}
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	1f 91       	pop	r17
    1e86:	0f 91       	pop	r16
    1e88:	ff 90       	pop	r15
    1e8a:	ef 90       	pop	r14
    1e8c:	df 90       	pop	r13
    1e8e:	cf 90       	pop	r12
    1e90:	08 95       	ret
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    1e92:	8a e7       	ldi	r24, 0x7A	; 122
    1e94:	40 e0       	ldi	r20, 0x00	; 0
    1e96:	50 e0       	ldi	r21, 0x00	; 0
    1e98:	60 e0       	ldi	r22, 0x00	; 0
    1e9a:	70 e0       	ldi	r23, 0x00	; 0
    1e9c:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <send_cmd>
    1ea0:	88 23       	and	r24, r24
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <disk_initialize+0x15a>
    1ea4:	ac cf       	rjmp	.-168    	; 0x1dfe <disk_initialize+0xb2>
    1ea6:	de cf       	rjmp	.-68     	; 0x1e64 <disk_initialize+0x118>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
    1ea8:	80 e5       	ldi	r24, 0x50	; 80
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	52 e0       	ldi	r21, 0x02	; 2
    1eae:	60 e0       	ldi	r22, 0x00	; 0
    1eb0:	70 e0       	ldi	r23, 0x00	; 0
    1eb2:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <send_cmd>
    1eb6:	88 23       	and	r24, r24
    1eb8:	a9 f6       	brne	.-86     	; 0x1e64 <disk_initialize+0x118>
    1eba:	d5 cf       	rjmp	.-86     	; 0x1e66 <disk_initialize+0x11a>

00001ebc <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
    1ebc:	cf 92       	push	r12
    1ebe:	df 92       	push	r13
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	7c 01       	movw	r14, r24
    1ece:	69 01       	movw	r12, r18
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
    1ed0:	80 91 08 01 	lds	r24, 0x0108
    1ed4:	83 fd       	sbrc	r24, 3
    1ed6:	07 c0       	rjmp	.+14     	; 0x1ee6 <disk_readp+0x2a>
    1ed8:	f9 e0       	ldi	r31, 0x09	; 9
    1eda:	44 0f       	add	r20, r20
    1edc:	55 1f       	adc	r21, r21
    1ede:	66 1f       	adc	r22, r22
    1ee0:	77 1f       	adc	r23, r23
    1ee2:	fa 95       	dec	r31
    1ee4:	d1 f7       	brne	.-12     	; 0x1eda <disk_readp+0x1e>

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
    1ee6:	81 e5       	ldi	r24, 0x51	; 81
    1ee8:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <send_cmd>
    1eec:	88 23       	and	r24, r24
    1eee:	a1 f5       	brne	.+104    	; 0x1f58 <disk_readp+0x9c>
    1ef0:	c0 e3       	ldi	r28, 0x30	; 48
    1ef2:	d5 e7       	ldi	r29, 0x75	; 117

		bc = 30000;
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
    1ef4:	0e 94 ee 10 	call	0x21dc	; 0x21dc <rcv_spi>
		} while (rc == 0xFF && --bc);
    1ef8:	8f 3f       	cpi	r24, 0xFF	; 255
    1efa:	19 f4       	brne	.+6      	; 0x1f02 <disk_readp+0x46>
    1efc:	21 97       	sbiw	r28, 0x01	; 1
    1efe:	d1 f7       	brne	.-12     	; 0x1ef4 <disk_readp+0x38>
    1f00:	2b c0       	rjmp	.+86     	; 0x1f58 <disk_readp+0x9c>

		if (rc == 0xFE) {				/* A data packet arrived */
    1f02:	8e 3f       	cpi	r24, 0xFE	; 254
    1f04:	49 f5       	brne	.+82     	; 0x1f58 <disk_readp+0x9c>
			bc = 514 - ofs - cnt;

			/* Skip leading bytes */
			if (ofs) {
    1f06:	c1 14       	cp	r12, r1
    1f08:	d1 04       	cpc	r13, r1
    1f0a:	29 f0       	breq	.+10     	; 0x1f16 <disk_readp+0x5a>
    1f0c:	e6 01       	movw	r28, r12
				do rcv_spi(); while (--ofs);
    1f0e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <rcv_spi>
    1f12:	21 97       	sbiw	r28, 0x01	; 1
    1f14:	e1 f7       	brne	.-8      	; 0x1f0e <disk_readp+0x52>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
    1f16:	e1 14       	cp	r14, r1
    1f18:	f1 04       	cpc	r15, r1
    1f1a:	49 f0       	breq	.+18     	; 0x1f2e <disk_readp+0x72>
    1f1c:	e8 01       	movw	r28, r16
				do
					*buff++ = rcv_spi();
    1f1e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <rcv_spi>
    1f22:	f7 01       	movw	r30, r14
    1f24:	81 93       	st	Z+, r24
    1f26:	7f 01       	movw	r14, r30
				while (--cnt);
    1f28:	21 97       	sbiw	r28, 0x01	; 1
    1f2a:	c9 f7       	brne	.-14     	; 0x1f1e <disk_readp+0x62>
    1f2c:	07 c0       	rjmp	.+14     	; 0x1f3c <disk_readp+0x80>
    1f2e:	e8 01       	movw	r28, r16
			} else {	/* Forward data to the outgoing stream (depends on the project) */
				do
					xmit(rcv_spi());	/* (Console output) */
    1f30:	0e 94 ee 10 	call	0x21dc	; 0x21dc <rcv_spi>
    1f34:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <xmit>
				while (--cnt);
    1f38:	21 97       	sbiw	r28, 0x01	; 1
    1f3a:	d1 f7       	brne	.-12     	; 0x1f30 <disk_readp+0x74>
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {				/* A data packet arrived */
			bc = 514 - ofs - cnt;
    1f3c:	cc 27       	eor	r28, r28
    1f3e:	dd 27       	eor	r29, r29
    1f40:	cc 19       	sub	r28, r12
    1f42:	dd 09       	sbc	r29, r13
    1f44:	ce 5f       	subi	r28, 0xFE	; 254
    1f46:	dd 4f       	sbci	r29, 0xFD	; 253
    1f48:	c0 1b       	sub	r28, r16
    1f4a:	d1 0b       	sbc	r29, r17
					xmit(rcv_spi());	/* (Console output) */
				while (--cnt);
			}

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
    1f4c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <rcv_spi>
    1f50:	21 97       	sbiw	r28, 0x01	; 1
    1f52:	e1 f7       	brne	.-8      	; 0x1f4c <disk_readp+0x90>
    1f54:	10 e0       	ldi	r17, 0x00	; 0
    1f56:	01 c0       	rjmp	.+2      	; 0x1f5a <disk_readp+0x9e>
    1f58:	11 e0       	ldi	r17, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    1f5a:	c0 9a       	sbi	0x18, 0	; 24
	rcv_spi();
    1f5c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <rcv_spi>
	}

	release_spi();

	return res;
}
    1f60:	81 2f       	mov	r24, r17
    1f62:	df 91       	pop	r29
    1f64:	cf 91       	pop	r28
    1f66:	1f 91       	pop	r17
    1f68:	0f 91       	pop	r16
    1f6a:	ff 90       	pop	r15
    1f6c:	ef 90       	pop	r14
    1f6e:	df 90       	pop	r13
    1f70:	cf 90       	pop	r12
    1f72:	08 95       	ret

00001f74 <xmit>:
#if BIDIR
	ldi	r23, BPS-1	;Pre-idle time for bidirectional data line
5:	dec	r23     	;
	brne	5b		;/
#endif
	in	r0, _SFR_IO_ADDR(SREG)	;Save flags
    1f74:	0f b6       	in	r0, 0x3f	; 63

	com	r24		;C = start bit
    1f76:	80 95       	com	r24
	ldi	r25, 10		;Bit counter
    1f78:	9a e0       	ldi	r25, 0x0A	; 10
	cli			;Start critical section
    1f7a:	f8 94       	cli

1:	ldi	r23, BPS-1	;----- Bit transferring loop 
    1f7c:	79 e8       	ldi	r23, 0x89	; 137
2:	dec	r23     	;Wait for a bit time
    1f7e:	7a 95       	dec	r23
	brne	2b		;/
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <xmit+0xa>
	brcs	3f		;MISO = bit to be sent
    1f82:	08 f0       	brcs	.+2      	; 0x1f86 <xmit+0x12>
	OUT_1			;
    1f84:	19 9a       	sbi	0x03, 1	; 3
3:	brcc	4f		;
    1f86:	08 f4       	brcc	.+2      	; 0x1f8a <xmit+0x16>
	OUT_0			;/
    1f88:	19 98       	cbi	0x03, 1	; 3
4:	lsr	r24     	;Get next bit into C
    1f8a:	86 95       	lsr	r24
	dec	r25     	;All bits sent?
    1f8c:	9a 95       	dec	r25
	brne	1b	     	;  no, coutinue
    1f8e:	b1 f7       	brne	.-20     	; 0x1f7c <xmit+0x8>

	out	_SFR_IO_ADDR(SREG), r0	;End of critical section
    1f90:	0f be       	out	0x3f, r0	; 63
	ret
    1f92:	08 95       	ret

00001f94 <rcvr>:
;Size: 19 words

.global rcvr
.func rcvr
rcvr:
	in	r0, _SFR_IO_ADDR(SREG)	;Save flags
    1f94:	0f b6       	in	r0, 0x3f	; 63

	ldi	r24, 0x80	;Receiving shift reg
    1f96:	80 e8       	ldi	r24, 0x80	; 128
	cli			;Start critical section
    1f98:	f8 94       	cli

1:	SKIP_IN_1		;Wait for idle
    1f9a:	08 9b       	sbis	0x01, 0	; 1
	rjmp	1b
    1f9c:	fe cf       	rjmp	.-4      	; 0x1f9a <rcvr+0x6>
2:	SKIP_IN_0		;Wait for start bit
    1f9e:	08 99       	sbic	0x01, 0	; 1
	rjmp	2b
    1fa0:	fe cf       	rjmp	.-4      	; 0x1f9e <rcvr+0xa>
	ldi	r25, BPS/2	;Wait for half bit time
    1fa2:	95 e4       	ldi	r25, 0x45	; 69
3:	dec	r25
    1fa4:	9a 95       	dec	r25
	brne	3b
    1fa6:	f1 f7       	brne	.-4      	; 0x1fa4 <rcvr+0x10>

4:	ldi	r25, BPS	;----- Bit receiving loop
    1fa8:	9a e8       	ldi	r25, 0x8A	; 138
5:	dec	r25     	;Wait for a bit time
    1faa:	9a 95       	dec	r25
	brne	5b		;/
    1fac:	f1 f7       	brne	.-4      	; 0x1faa <rcvr+0x16>
	lsr	r24     	;Next bit
    1fae:	86 95       	lsr	r24
	SKIP_IN_0		;Get a data bit into r24.7
    1fb0:	08 99       	sbic	0x01, 0	; 1
	ori	r24, 0x80
    1fb2:	80 68       	ori	r24, 0x80	; 128
	brcc	4b	     	;All bits received?  no, continue
    1fb4:	c8 f7       	brcc	.-14     	; 0x1fa8 <rcvr+0x14>

	out	_SFR_IO_ADDR(SREG), r0	;End of critical section
    1fb6:	0f be       	out	0x3f, r0	; 63
	ret
    1fb8:	08 95       	ret

00001fba <xputc>:

.global xputc
.func xputc
xputc:
#ifdef CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    1fba:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    1fbc:	19 f4       	brne	.+6      	; 0x1fc4 <xputc+0xa>
	ldi	r24, 13		;
    1fbe:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    1fc0:	01 d0       	rcall	.+2      	; 0x1fc4 <xputc+0xa>
	ldi	r24, 10		;/
    1fc2:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    1fc4:	ff 93       	push	r31
	push	ZL
    1fc6:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    1fc8:	e0 91 09 01 	lds	r30, 0x0109
	lds	ZH, xfunc_out+1	;/
    1fcc:	f0 91 0a 01 	lds	r31, 0x010A
	sbiw	ZL, 0
    1fd0:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f
    1fd2:	09 f0       	breq	.+2      	; 0x1fd6 <xputc+0x1c>
	icall
    1fd4:	09 95       	icall
2:	pop	ZL
    1fd6:	ef 91       	pop	r30
	pop	ZH
    1fd8:	ff 91       	pop	r31
	ret
    1fda:	08 95       	ret

00001fdc <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    1fdc:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    1fde:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    1fe0:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    1fe2:	11 f0       	breq	.+4      	; 0x1fe8 <xputs+0xc>
	rcall	xputc
    1fe4:	ea df       	rcall	.-44     	; 0x1fba <xputc>
	rjmp	1b
    1fe6:	fb cf       	rjmp	.-10     	; 0x1fde <xputs+0x2>
2:	ret
    1fe8:	08 95       	ret

00001fea <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    1fea:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    1fec:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    1fee:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    1ff0:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    1ff2:	0c c0       	rjmp	.+24     	; 0x200c <xitoa+0x22>
	neg	r20		;
    1ff4:	41 95       	neg	r20
	sbrs	r25, 7		;
    1ff6:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    1ff8:	09 c0       	rjmp	.+18     	; 0x200c <xitoa+0x22>
	ldi	r30, '-'	;
    1ffa:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    1ffc:	60 95       	com	r22
	com	r23		;
    1ffe:	70 95       	com	r23
	com	r24		;
    2000:	80 95       	com	r24
	com	r25		;
    2002:	90 95       	com	r25
	adc	r22, r1		;
    2004:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    2006:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    2008:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    200a:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    200c:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <xitoa+0x2a>
	neg	r18		;
    2010:	21 95       	neg	r18
	ldi	r19, '0'	;/
    2012:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    2014:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    2016:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    2018:	66 0f       	add	r22, r22
	rol	r23		;
    201a:	77 1f       	adc	r23, r23
	rol	r24		;
    201c:	88 1f       	adc	r24, r24
	rol	r25		;
    201e:	99 1f       	adc	r25, r25
	rol	r26		;
    2020:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    2022:	a4 17       	cp	r26, r20
	brcs	3f		;
    2024:	10 f0       	brcs	.+4      	; 0x202a <xitoa+0x40>
	sub	r26, r20	;
    2026:	a4 1b       	sub	r26, r20
	inc	r22		;
    2028:	63 95       	inc	r22
3:	dec	r21		;
    202a:	5a 95       	dec	r21
	brne	2b		;/
    202c:	a9 f7       	brne	.-22     	; 0x2018 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    202e:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    2030:	08 f0       	brcs	.+2      	; 0x2034 <xitoa+0x4a>
	subi	r26, -7		;
    2032:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    2034:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    2036:	af 93       	push	r26
	inc	r31		;/
    2038:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    203a:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    203c:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    203e:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    2040:	91 05       	cpc	r25, r1
	brne	1b		;/
    2042:	41 f7       	brne	.-48     	; 0x2014 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    2044:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    2046:	11 f4       	brne	.+4      	; 0x204c <xitoa+0x62>
	push	r30		;
    2048:	ef 93       	push	r30
	inc	r31		;/
    204a:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    204c:	f2 17       	cp	r31, r18
	brcc	6f		;
    204e:	18 f4       	brcc	.+6      	; 0x2056 <xitoa+0x6c>
	push	r19		;
    2050:	3f 93       	push	r19
	inc	r31		;
    2052:	f3 95       	inc	r31
	rjmp	5b		;/
    2054:	fb cf       	rjmp	.-10     	; 0x204c <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    2056:	8f 91       	pop	r24
	rcall	xputc		;
    2058:	b0 df       	rcall	.-160    	; 0x1fba <xputc>
	dec	r31		;
    205a:	fa 95       	dec	r31
	brne	6b		;/
    205c:	e1 f7       	brne	.-8      	; 0x2056 <xitoa+0x6c>

	ret
    205e:	08 95       	ret

00002060 <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
    2060:	df 93       	push	r29
	push	YL
    2062:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    2064:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    2066:	de b7       	in	r29, 0x3e	; 62
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
#else
	adiw	YL, 5		;Y = pointer to arguments
    2068:	25 96       	adiw	r28, 0x05	; 5
#endif
	ld	ZL, Y+		;Z = pointer to format string
    206a:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    206c:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    206e:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    2070:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    2072:	21 f0       	breq	.+8      	; 0x207c <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
    2074:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    2076:	29 f0       	breq	.+10     	; 0x2082 <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
    2078:	a0 df       	rcall	.-192    	; 0x1fba <xputc>
	rjmp	0b		;/
    207a:	f9 cf       	rjmp	.-14     	; 0x206e <xprintf+0xe>
90:	pop	YL
    207c:	cf 91       	pop	r28
	pop	YH
    207e:	df 91       	pop	r29
	ret
    2080:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    2082:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    2084:	e8 94       	clt
	_LPMI	r21		;Get flags
    2086:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    2088:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    208a:	b1 f3       	breq	.-20     	; 0x2078 <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
    208c:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    208e:	11 f4       	brne	.+4      	; 0x2094 <xprintf+0x34>
	set			;/
    2090:	68 94       	set
22:	_LPMI	r21		;Get width
    2092:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    2094:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    2096:	48 f4       	brcc	.+18     	; 0x20aa <xprintf+0x4a>
	subi	r21, '0'	;
    2098:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    209a:	80 f3       	brcs	.-32     	; 0x207c <xprintf+0x1c>
	lsl	r18		;
    209c:	22 0f       	add	r18, r18
	mov	r0, r18		;
    209e:	02 2e       	mov	r0, r18
	lsl	r18		;
    20a0:	22 0f       	add	r18, r18
	lsl	r18		;
    20a2:	22 0f       	add	r18, r18
	add	r18, r0		;
    20a4:	20 0d       	add	r18, r0
	add	r18, r21	;
    20a6:	25 0f       	add	r18, r21
	rjmp	22b		;/
    20a8:	f4 cf       	rjmp	.-24     	; 0x2092 <xprintf+0x32>

24:	brtc	25f		;get value (low word)
    20aa:	0e f4       	brtc	.+2      	; 0x20ae <xprintf+0x4e>
	neg	r18		;
    20ac:	21 95       	neg	r18
25:	ld	r24, Y+		;
    20ae:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    20b0:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    20b2:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    20b4:	09 f3       	breq	.-62     	; 0x2078 <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
    20b6:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    20b8:	29 f1       	breq	.+74     	; 0x2104 <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
    20ba:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    20bc:	59 f1       	breq	.+86     	; 0x2114 <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    20be:	bc 01       	movw	r22, r24
	clr	r24		;
    20c0:	88 27       	eor	r24, r24
	clr	r25		;
    20c2:	99 27       	eor	r25, r25
	clt			;/
    20c4:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    20c6:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    20c8:	21 f4       	brne	.+8      	; 0x20d2 <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
    20ca:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    20cc:	99 91       	ld	r25, Y+
	set			;
    20ce:	68 94       	set
	_LPMI	r21		;/
    20d0:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    20d2:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    20d4:	39 f4       	brne	.+14     	; 0x20e4 <xprintf+0x84>
	ldi	r20, -10	;
    20d6:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    20d8:	7e f0       	brts	.+30     	; 0x20f8 <xprintf+0x98>
	sbrs	r23, 7		;
    20da:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    20dc:	0d c0       	rjmp	.+26     	; 0x20f8 <xprintf+0x98>
	ldi	r24, -1		;
    20de:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    20e0:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    20e2:	0a c0       	rjmp	.+20     	; 0x20f8 <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    20e4:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    20e6:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    20e8:	39 f0       	breq	.+14     	; 0x20f8 <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
    20ea:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    20ec:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    20ee:	21 f0       	breq	.+8      	; 0x20f8 <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
    20f0:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    20f2:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    20f4:	09 f0       	breq	.+2      	; 0x20f8 <xprintf+0x98>
	rjmp	90b		;abort
    20f6:	c2 cf       	rjmp	.-124    	; 0x207c <xprintf+0x1c>
40:	push	ZH		;Output the value
    20f8:	ff 93       	push	r31
	push	ZL		;
    20fa:	ef 93       	push	r30
	rcall	xitoa		;
    20fc:	76 df       	rcall	.-276    	; 0x1fea <xitoa>
42:	pop	ZL		;
    20fe:	ef 91       	pop	r30
	pop	ZH		;
    2100:	ff 91       	pop	r31
	rjmp	0b		;/
    2102:	b5 cf       	rjmp	.-150    	; 0x206e <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
    2104:	ff 93       	push	r31
	push	ZL
    2106:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    2108:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    210a:	81 91       	ld	r24, Z+
	cpi	r24, 0
    210c:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    210e:	b9 f3       	breq	.-18     	; 0x20fe <xprintf+0x9e>
	rcall	xputc
    2110:	54 df       	rcall	.-344    	; 0x1fba <xputc>
	rjmp	51b
    2112:	fb cf       	rjmp	.-10     	; 0x210a <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
    2114:	ff 93       	push	r31
	push	ZL
    2116:	ef 93       	push	r30
	rcall	xputs
    2118:	61 df       	rcall	.-318    	; 0x1fdc <xputs>
	rjmp	42b
    211a:	f1 cf       	rjmp	.-30     	; 0x20fe <xprintf+0x9e>

0000211c <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    211c:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    211e:	dc 01       	movw	r26, r24
	ld	ZL, X+
    2120:	ed 91       	ld	r30, X+
	ld	ZH, X+
    2122:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    2124:	22 27       	eor	r18, r18
	clr	r19		;
    2126:	33 27       	eor	r19, r19
	clr	r20		;
    2128:	44 27       	eor	r20, r20
	clr	r21		;/
    212a:	55 27       	eor	r21, r21
	clt			;T = 0;
    212c:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    212e:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    2130:	01 c0       	rjmp	.+2      	; 0x2134 <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    2132:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    2134:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    2136:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    2138:	e1 f3       	breq	.-8      	; 0x2132 <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    213a:	a8 f1       	brcs	.+106    	; 0x21a6 <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    213c:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    213e:	11 f4       	brne	.+4      	; 0x2144 <xatoi+0x28>
	set			; continue;
    2140:	68 94       	set
	rjmp	40b		;}
    2142:	f7 cf       	rjmp	.-18     	; 0x2132 <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    2144:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    2146:	78 f5       	brcc	.+94     	; 0x21a6 <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    2148:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    214a:	68 f1       	brcs	.+90     	; 0x21a6 <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    214c:	71 f4       	brne	.+28     	; 0x216a <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    214e:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    2150:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    2152:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    2154:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    2156:	48 f1       	brcs	.+82     	; 0x21aa <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    2158:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    215a:	11 f4       	brne	.+4      	; 0x2160 <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    215c:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    215e:	03 c0       	rjmp	.+6      	; 0x2166 <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    2160:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    2162:	19 f4       	brne	.+6      	; 0x216a <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    2164:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    2166:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    2168:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    216a:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    216c:	f0 f0       	brcs	.+60     	; 0x21aa <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    216e:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    2170:	08 f0       	brcs	.+2      	; 0x2174 <xatoi+0x58>
	subi	r22, 0x20	;/
    2172:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    2174:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    2176:	b8 f0       	brcs	.+46     	; 0x21a6 <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    2178:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    217a:	18 f0       	brcs	.+6      	; 0x2182 <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    217c:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    217e:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    2180:	90 f0       	brcs	.+36     	; 0x21a6 <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    2182:	69 17       	cp	r22, r25
	brcc	70f		;/
    2184:	80 f4       	brcc	.+32     	; 0x21a6 <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    2186:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    2188:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    218a:	08 f4       	brcc	.+2      	; 0x218e <xatoi+0x72>
	add	r23, r25	;
    218c:	79 0f       	add	r23, r25
62:	lsr	r23		;
    218e:	76 95       	lsr	r23
	ror	r21		;
    2190:	57 95       	ror	r21
	ror	r20		;
    2192:	47 95       	ror	r20
	ror	r19		;
    2194:	37 95       	ror	r19
	ror	r18		;
    2196:	27 95       	ror	r18
	dec	r24		;
    2198:	8a 95       	dec	r24
	brne	61b		;/
    219a:	b9 f7       	brne	.-18     	; 0x218a <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    219c:	26 0f       	add	r18, r22
	adc	r19, r24	;
    219e:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    21a0:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    21a2:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    21a4:	e0 cf       	rjmp	.-64     	; 0x2166 <xatoi+0x4a>

70:	ldi	r24, 0
    21a6:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    21a8:	01 c0       	rjmp	.+2      	; 0x21ac <xatoi+0x90>
80:	ldi	r24, 1
    21aa:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    21ac:	4e f4       	brtc	.+18     	; 0x21c0 <xatoi+0xa4>
	clr	r22
    21ae:	66 27       	eor	r22, r22
	com	r18
    21b0:	20 95       	com	r18
	com	r19
    21b2:	30 95       	com	r19
	com	r20
    21b4:	40 95       	com	r20
	com	r21
    21b6:	50 95       	com	r21
	adc	r18, r22
    21b8:	26 1f       	adc	r18, r22
	adc	r19, r22
    21ba:	36 1f       	adc	r19, r22
	adc	r20, r22
    21bc:	46 1f       	adc	r20, r22
	adc	r21, r22
    21be:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    21c0:	fe 93       	st	-X, r31
	st	-X, ZL
    21c2:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    21c4:	d0 01       	movw	r26, r0
	st	X+, r18
    21c6:	2d 93       	st	X+, r18
	st	X+, r19
    21c8:	3d 93       	st	X+, r19
	st	X+, r20
    21ca:	4d 93       	st	X+, r20
	st	X+, r21
    21cc:	5d 93       	st	X+, r21
	clr	r1
    21ce:	11 24       	eor	r1, r1
	ret
    21d0:	08 95       	ret

000021d2 <xmit_spi>:

#include <avr/io.h>
#include "pff.h"

BYTE xmit_spi(BYTE c) {
	SPDR = c;
    21d2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
    21d4:	77 9b       	sbis	0x0e, 7	; 14
    21d6:	fe cf       	rjmp	.-4      	; 0x21d4 <xmit_spi+0x2>
	return SPDR;
    21d8:	8f b1       	in	r24, 0x0f	; 15
}
    21da:	08 95       	ret

000021dc <rcv_spi>:

#include <avr/io.h>
#include "pff.h"

BYTE xmit_spi(BYTE c) {
	SPDR = c;
    21dc:	8f ef       	ldi	r24, 0xFF	; 255
    21de:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
    21e0:	77 9b       	sbis	0x0e, 7	; 14
    21e2:	fe cf       	rjmp	.-4      	; 0x21e0 <rcv_spi+0x4>
	return SPDR;
    21e4:	8f b1       	in	r24, 0x0f	; 15
// Receive a byte from MMC via SPI  (Platform dependent)                 
//-----------------------------------------------------------------------

BYTE rcv_spi(void) {
	return xmit_spi(0xFF);
}
    21e6:	08 95       	ret

000021e8 <__mulsi3>:
    21e8:	62 9f       	mul	r22, r18
    21ea:	d0 01       	movw	r26, r0
    21ec:	73 9f       	mul	r23, r19
    21ee:	f0 01       	movw	r30, r0
    21f0:	82 9f       	mul	r24, r18
    21f2:	e0 0d       	add	r30, r0
    21f4:	f1 1d       	adc	r31, r1
    21f6:	64 9f       	mul	r22, r20
    21f8:	e0 0d       	add	r30, r0
    21fa:	f1 1d       	adc	r31, r1
    21fc:	92 9f       	mul	r25, r18
    21fe:	f0 0d       	add	r31, r0
    2200:	83 9f       	mul	r24, r19
    2202:	f0 0d       	add	r31, r0
    2204:	74 9f       	mul	r23, r20
    2206:	f0 0d       	add	r31, r0
    2208:	65 9f       	mul	r22, r21
    220a:	f0 0d       	add	r31, r0
    220c:	99 27       	eor	r25, r25
    220e:	72 9f       	mul	r23, r18
    2210:	b0 0d       	add	r27, r0
    2212:	e1 1d       	adc	r30, r1
    2214:	f9 1f       	adc	r31, r25
    2216:	63 9f       	mul	r22, r19
    2218:	b0 0d       	add	r27, r0
    221a:	e1 1d       	adc	r30, r1
    221c:	f9 1f       	adc	r31, r25
    221e:	bd 01       	movw	r22, r26
    2220:	cf 01       	movw	r24, r30
    2222:	11 24       	eor	r1, r1
    2224:	08 95       	ret

00002226 <__udivmodsi4>:
    2226:	a1 e2       	ldi	r26, 0x21	; 33
    2228:	1a 2e       	mov	r1, r26
    222a:	aa 1b       	sub	r26, r26
    222c:	bb 1b       	sub	r27, r27
    222e:	fd 01       	movw	r30, r26
    2230:	0d c0       	rjmp	.+26     	; 0x224c <__udivmodsi4_ep>

00002232 <__udivmodsi4_loop>:
    2232:	aa 1f       	adc	r26, r26
    2234:	bb 1f       	adc	r27, r27
    2236:	ee 1f       	adc	r30, r30
    2238:	ff 1f       	adc	r31, r31
    223a:	a2 17       	cp	r26, r18
    223c:	b3 07       	cpc	r27, r19
    223e:	e4 07       	cpc	r30, r20
    2240:	f5 07       	cpc	r31, r21
    2242:	20 f0       	brcs	.+8      	; 0x224c <__udivmodsi4_ep>
    2244:	a2 1b       	sub	r26, r18
    2246:	b3 0b       	sbc	r27, r19
    2248:	e4 0b       	sbc	r30, r20
    224a:	f5 0b       	sbc	r31, r21

0000224c <__udivmodsi4_ep>:
    224c:	66 1f       	adc	r22, r22
    224e:	77 1f       	adc	r23, r23
    2250:	88 1f       	adc	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	1a 94       	dec	r1
    2256:	69 f7       	brne	.-38     	; 0x2232 <__udivmodsi4_loop>
    2258:	60 95       	com	r22
    225a:	70 95       	com	r23
    225c:	80 95       	com	r24
    225e:	90 95       	com	r25
    2260:	9b 01       	movw	r18, r22
    2262:	ac 01       	movw	r20, r24
    2264:	bd 01       	movw	r22, r26
    2266:	cf 01       	movw	r24, r30
    2268:	08 95       	ret

0000226a <strcat>:
    226a:	fb 01       	movw	r30, r22
    226c:	dc 01       	movw	r26, r24
    226e:	0d 90       	ld	r0, X+
    2270:	00 20       	and	r0, r0
    2272:	e9 f7       	brne	.-6      	; 0x226e <strcat+0x4>
    2274:	11 97       	sbiw	r26, 0x01	; 1
    2276:	01 90       	ld	r0, Z+
    2278:	0d 92       	st	X+, r0
    227a:	00 20       	and	r0, r0
    227c:	e1 f7       	brne	.-8      	; 0x2276 <strcat+0xc>
    227e:	08 95       	ret

00002280 <_exit>:
    2280:	f8 94       	cli

00002282 <__stop_program>:
    2282:	ff cf       	rjmp	.-2      	; 0x2282 <__stop_program>
