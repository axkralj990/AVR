
AK_MPU_test_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000856  000008ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000856  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000092c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019d8  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000674  00000000  00000000  000024a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000718  00000000  00000000  00002b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000414  00000000  00000000  00003230  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a1  00000000  00000000  00003644  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011ff  00000000  00000000  00003be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  00004de4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 2f 03 	call	0x65e	; 0x65e <main>
  8e:	0c 94 29 04 	jmp	0x852	; 0x852 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <MPU6050_test_I2C>:
	i2c_readReg(MPU6050_ADDRESS,MPU6050_RA_GYRO_YOUT_L,&gyro_YL,1);
	i2c_readReg(MPU6050_ADDRESS,MPU6050_RA_GYRO_YOUT_H,&gyro_YH,1);
	gyroRates[1] = (gyro_YH << 8) | (gyro_YL & 0xff);
	
	i2c_readReg(MPU6050_ADDRESS,MPU6050_RA_GYRO_ZOUT_L,&gyro_ZL,1);
	i2c_readReg(MPU6050_ADDRESS,MPU6050_RA_GYRO_ZOUT_H,&gyro_ZH,1);
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	1f 92       	push	r1
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	19 82       	std	Y+1, r1	; 0x01
  a2:	21 e0       	ldi	r18, 0x01	; 1
	gyroRates[2] = (gyro_ZH << 8) | (gyro_ZL & 0xff);
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	ae 01       	movw	r20, r28
  a8:	4f 5f       	subi	r20, 0xFF	; 255
  aa:	5f 4f       	sbci	r21, 0xFF	; 255
  ac:	65 e7       	ldi	r22, 0x75	; 117
  ae:	80 ed       	ldi	r24, 0xD0	; 208
  b0:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
  b4:	81 e0       	ldi	r24, 0x01	; 1
}
  b6:	99 81       	ldd	r25, Y+1	; 0x01
  b8:	98 36       	cpi	r25, 0x68	; 104
  ba:	09 f0       	breq	.+2      	; 0xbe <MPU6050_test_I2C+0x28>
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0f 90       	pop	r0
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <MPU6050_get_accel>:
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
	}
	return MPU6050_test;
}

void MPU6050_get_accel(uint16_t* acceleration) 
{
  cc:	df 93       	push	r29
  ce:	00 d0       	rcall	.+0      	; 0xd0 <MPU6050_get_accel+0xa>
  d0:	00 d0       	rcall	.+0      	; 0xd2 <MPU6050_get_accel+0xc>
  d2:	00 d0       	rcall	.+0      	; 0xd4 <MPU6050_get_accel+0xe>
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	8c 01       	movw	r16, r24
	uint8_t accel_XL, accel_XH, accel_YL, accel_YH, accel_ZL, accel_ZH;
	i2c_readReg(MPU6050_ADDRESS,MPU6050_RA_ACCEL_XOUT_L,&accel_XL,1);
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	ae 01       	movw	r20, r28
  e0:	4f 5f       	subi	r20, 0xFF	; 255
  e2:	5f 4f       	sbci	r21, 0xFF	; 255
  e4:	6c e3       	ldi	r22, 0x3C	; 60
  e6:	80 ed       	ldi	r24, 0xD0	; 208
  e8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
	i2c_readReg(MPU6050_ADDRESS,MPU6050_RA_ACCEL_XOUT_H,&accel_XH,1);
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	ae 01       	movw	r20, r28
  f2:	4e 5f       	subi	r20, 0xFE	; 254
  f4:	5f 4f       	sbci	r21, 0xFF	; 255
  f6:	6b e3       	ldi	r22, 0x3B	; 59
  f8:	80 ed       	ldi	r24, 0xD0	; 208
  fa:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
	acceleration[0] = (accel_XH << 8) | (accel_XL & 0xff);
  fe:	8a 81       	ldd	r24, Y+2	; 0x02
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	98 2f       	mov	r25, r24
 104:	88 27       	eor	r24, r24
 106:	29 81       	ldd	r18, Y+1	; 0x01
 108:	82 2b       	or	r24, r18
 10a:	f8 01       	movw	r30, r16
 10c:	91 83       	std	Z+1, r25	; 0x01
 10e:	80 83       	st	Z, r24
	
	i2c_readReg(MPU6050_ADDRESS,MPU6050_RA_ACCEL_YOUT_L,&accel_YL,1);
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	ae 01       	movw	r20, r28
 116:	4d 5f       	subi	r20, 0xFD	; 253
 118:	5f 4f       	sbci	r21, 0xFF	; 255
 11a:	6e e3       	ldi	r22, 0x3E	; 62
 11c:	80 ed       	ldi	r24, 0xD0	; 208
 11e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
	i2c_readReg(MPU6050_ADDRESS,MPU6050_RA_ACCEL_YOUT_H,&accel_YH,1);
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	ae 01       	movw	r20, r28
 128:	4c 5f       	subi	r20, 0xFC	; 252
 12a:	5f 4f       	sbci	r21, 0xFF	; 255
 12c:	6d e3       	ldi	r22, 0x3D	; 61
 12e:	80 ed       	ldi	r24, 0xD0	; 208
 130:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
	acceleration[1] = (accel_YH << 8) | (accel_YL & 0xff);
 134:	2c 81       	ldd	r18, Y+4	; 0x04
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	32 2f       	mov	r19, r18
 13a:	22 27       	eor	r18, r18
 13c:	8b 81       	ldd	r24, Y+3	; 0x03
 13e:	28 2b       	or	r18, r24
 140:	f8 01       	movw	r30, r16
 142:	33 83       	std	Z+3, r19	; 0x03
 144:	22 83       	std	Z+2, r18	; 0x02
	
	i2c_readReg(MPU6050_ADDRESS,MPU6050_RA_ACCEL_ZOUT_L,&accel_ZL,1);
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	ae 01       	movw	r20, r28
 14c:	4b 5f       	subi	r20, 0xFB	; 251
 14e:	5f 4f       	sbci	r21, 0xFF	; 255
 150:	60 e4       	ldi	r22, 0x40	; 64
 152:	80 ed       	ldi	r24, 0xD0	; 208
 154:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
	i2c_readReg(MPU6050_ADDRESS,MPU6050_RA_ACCEL_ZOUT_H,&accel_ZH,1);
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	ae 01       	movw	r20, r28
 15e:	4a 5f       	subi	r20, 0xFA	; 250
 160:	5f 4f       	sbci	r21, 0xFF	; 255
 162:	6f e3       	ldi	r22, 0x3F	; 63
 164:	80 ed       	ldi	r24, 0xD0	; 208
 166:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
	acceleration[2] = (accel_ZH << 8) | (accel_ZL & 0xff);
 16a:	2e 81       	ldd	r18, Y+6	; 0x06
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	32 2f       	mov	r19, r18
 170:	22 27       	eor	r18, r18
 172:	8d 81       	ldd	r24, Y+5	; 0x05
 174:	28 2b       	or	r18, r24
 176:	f8 01       	movw	r30, r16
 178:	35 83       	std	Z+5, r19	; 0x05
 17a:	24 83       	std	Z+4, r18	; 0x04
}
 17c:	26 96       	adiw	r28, 0x06	; 6
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	f8 94       	cli
 182:	de bf       	out	0x3e, r29	; 62
 184:	0f be       	out	0x3f, r0	; 63
 186:	cd bf       	out	0x3d, r28	; 61
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	08 95       	ret

00000192 <MPU6050_set_sleepMode>:
	i2c_readReg(MPU6050_ADDRESS,MPU6050_RA_GYRO_ZOUT_H,&gyro_ZH,1);
	gyroRates[2] = (gyro_ZH << 8) | (gyro_ZL & 0xff);
}

void MPU6050_set_sleepMode(uint8_t enableSleep)
{
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	00 d0       	rcall	.+0      	; 0x198 <MPU6050_set_sleepMode+0x6>
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
	uint8_t power_reg_read, power_reg_write;
	switch(enableSleep) {
 19c:	88 23       	and	r24, r24
 19e:	c1 f0       	breq	.+48     	; 0x1d0 <MPU6050_set_sleepMode+0x3e>
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	61 f5       	brne	.+88     	; 0x1fc <MPU6050_set_sleepMode+0x6a>
		case 1:
				i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	ae 01       	movw	r20, r28
 1aa:	4f 5f       	subi	r20, 0xFF	; 255
 1ac:	5f 4f       	sbci	r21, 0xFF	; 255
 1ae:	6b e6       	ldi	r22, 0x6B	; 107
 1b0:	80 ed       	ldi	r24, 0xD0	; 208
 1b2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
				power_reg_write = power_reg_read & ~(0b01000000);
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
				power_reg_write |= (0b01000000);
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	8a 83       	std	Y+2, r24	; 0x02
				i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	ae 01       	movw	r20, r28
 1c2:	4e 5f       	subi	r20, 0xFE	; 254
 1c4:	5f 4f       	sbci	r21, 0xFF	; 255
 1c6:	6b e6       	ldi	r22, 0x6B	; 107
 1c8:	80 ed       	ldi	r24, 0xD0	; 208
 1ca:	0e 94 b3 02 	call	0x566	; 0x566 <i2c_writeReg>
				break;
 1ce:	2b c0       	rjmp	.+86     	; 0x226 <MPU6050_set_sleepMode+0x94>
		case 0:
				i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	ae 01       	movw	r20, r28
 1d6:	4f 5f       	subi	r20, 0xFF	; 255
 1d8:	5f 4f       	sbci	r21, 0xFF	; 255
 1da:	6b e6       	ldi	r22, 0x6B	; 107
 1dc:	80 ed       	ldi	r24, 0xD0	; 208
 1de:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
				power_reg_write = power_reg_read & ~(0b01000000);
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	8f 7b       	andi	r24, 0xBF	; 191
 1e6:	8a 83       	std	Y+2, r24	; 0x02
				power_reg_write |= (0b00000000);
				i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 1e8:	21 e0       	ldi	r18, 0x01	; 1
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	ae 01       	movw	r20, r28
 1ee:	4e 5f       	subi	r20, 0xFE	; 254
 1f0:	5f 4f       	sbci	r21, 0xFF	; 255
 1f2:	6b e6       	ldi	r22, 0x6B	; 107
 1f4:	80 ed       	ldi	r24, 0xD0	; 208
 1f6:	0e 94 b3 02 	call	0x566	; 0x566 <i2c_writeReg>
				break;
 1fa:	15 c0       	rjmp	.+42     	; 0x226 <MPU6050_set_sleepMode+0x94>
		default:
				i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	ae 01       	movw	r20, r28
 202:	4f 5f       	subi	r20, 0xFF	; 255
 204:	5f 4f       	sbci	r21, 0xFF	; 255
 206:	6b e6       	ldi	r22, 0x6B	; 107
 208:	80 ed       	ldi	r24, 0xD0	; 208
 20a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
				power_reg_write = power_reg_read & ~(0b01000000);
 20e:	89 81       	ldd	r24, Y+1	; 0x01
				power_reg_write |= (0b01000000);
 210:	80 64       	ori	r24, 0x40	; 64
 212:	8a 83       	std	Y+2, r24	; 0x02
				i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	ae 01       	movw	r20, r28
 21a:	4e 5f       	subi	r20, 0xFE	; 254
 21c:	5f 4f       	sbci	r21, 0xFF	; 255
 21e:	6b e6       	ldi	r22, 0x6B	; 107
 220:	80 ed       	ldi	r24, 0xD0	; 208
 222:	0e 94 b3 02 	call	0x566	; 0x566 <i2c_writeReg>
				break;
	}
}
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <MPU6050_set_gyroFS>:

void MPU6050_set_gyroFS(uint8_t gyroFS)
{
	switch(gyroFS) {
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	79 f0       	breq	.+30     	; 0x252 <MPU6050_set_gyroFS+0x22>
 234:	28 f0       	brcs	.+10     	; 0x240 <MPU6050_set_gyroFS+0x10>
 236:	82 30       	cpi	r24, 0x02	; 2
 238:	a9 f0       	breq	.+42     	; 0x264 <MPU6050_set_gyroFS+0x34>
 23a:	83 30       	cpi	r24, 0x03	; 3
 23c:	e1 f0       	breq	.+56     	; 0x276 <MPU6050_set_gyroFS+0x46>
 23e:	24 c0       	rjmp	.+72     	; 0x288 <MPU6050_set_gyroFS+0x58>
		case 0:
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG,(uint8_t*)0b00000000,1);
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	6b e1       	ldi	r22, 0x1B	; 27
 24a:	80 ed       	ldi	r24, 0xD0	; 208
 24c:	0e 94 b3 02 	call	0x566	; 0x566 <i2c_writeReg>
			break;
 250:	08 95       	ret
		case 1:
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG,(uint8_t*)0b00001000,1);
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	48 e0       	ldi	r20, 0x08	; 8
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	6b e1       	ldi	r22, 0x1B	; 27
 25c:	80 ed       	ldi	r24, 0xD0	; 208
 25e:	0e 94 b3 02 	call	0x566	; 0x566 <i2c_writeReg>
			break;
 262:	08 95       	ret
		case 2:
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG,(uint8_t*)0b00010000,1);
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	40 e1       	ldi	r20, 0x10	; 16
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	6b e1       	ldi	r22, 0x1B	; 27
 26e:	80 ed       	ldi	r24, 0xD0	; 208
 270:	0e 94 b3 02 	call	0x566	; 0x566 <i2c_writeReg>
			break;
 274:	08 95       	ret
		case 3:
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG,(uint8_t*)0b00011000,1);
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	48 e1       	ldi	r20, 0x18	; 24
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	6b e1       	ldi	r22, 0x1B	; 27
 280:	80 ed       	ldi	r24, 0xD0	; 208
 282:	0e 94 b3 02 	call	0x566	; 0x566 <i2c_writeReg>
			break;
 286:	08 95       	ret
		default:
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG,(uint8_t*)0b00000000,1);
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	6b e1       	ldi	r22, 0x1B	; 27
 292:	80 ed       	ldi	r24, 0xD0	; 208
 294:	0e 94 b3 02 	call	0x566	; 0x566 <i2c_writeReg>
 298:	08 95       	ret

0000029a <MPU6050_set_accelFS>:
			break;
	}
}

void MPU6050_set_accelFS(uint8_t accelFS)
{
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	00 d0       	rcall	.+0      	; 0x2a0 <MPU6050_set_accelFS+0x6>
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
	uint8_t accel_config_read, accel_config_write;
	
	switch(accelFS) {
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	e9 f0       	breq	.+58     	; 0x2e2 <MPU6050_set_accelFS+0x48>
 2a8:	30 f0       	brcs	.+12     	; 0x2b6 <MPU6050_set_accelFS+0x1c>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	89 f1       	breq	.+98     	; 0x310 <MPU6050_set_accelFS+0x76>
 2ae:	83 30       	cpi	r24, 0x03	; 3
 2b0:	09 f4       	brne	.+2      	; 0x2b4 <MPU6050_set_accelFS+0x1a>
 2b2:	45 c0       	rjmp	.+138    	; 0x33e <MPU6050_set_accelFS+0xa4>
 2b4:	5a c0       	rjmp	.+180    	; 0x36a <MPU6050_set_accelFS+0xd0>
		case 0:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 2b6:	21 e0       	ldi	r18, 0x01	; 1
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	ae 01       	movw	r20, r28
 2bc:	4f 5f       	subi	r20, 0xFF	; 255
 2be:	5f 4f       	sbci	r21, 0xFF	; 255
 2c0:	6c e1       	ldi	r22, 0x1C	; 28
 2c2:	80 ed       	ldi	r24, 0xD0	; 208
 2c4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	87 7e       	andi	r24, 0xE7	; 231
 2cc:	8a 83       	std	Y+2, r24	; 0x02
			accel_config_write |= (0b00000000);
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	ae 01       	movw	r20, r28
 2d4:	4e 5f       	subi	r20, 0xFE	; 254
 2d6:	5f 4f       	sbci	r21, 0xFF	; 255
 2d8:	6c e1       	ldi	r22, 0x1C	; 28
 2da:	80 ed       	ldi	r24, 0xD0	; 208
 2dc:	0e 94 b3 02 	call	0x566	; 0x566 <i2c_writeReg>
			break;
 2e0:	59 c0       	rjmp	.+178    	; 0x394 <MPU6050_set_accelFS+0xfa>
		case 1:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 2e2:	21 e0       	ldi	r18, 0x01	; 1
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	ae 01       	movw	r20, r28
 2e8:	4f 5f       	subi	r20, 0xFF	; 255
 2ea:	5f 4f       	sbci	r21, 0xFF	; 255
 2ec:	6c e1       	ldi	r22, 0x1C	; 28
 2ee:	80 ed       	ldi	r24, 0xD0	; 208
 2f0:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 2f4:	89 81       	ldd	r24, Y+1	; 0x01
 2f6:	87 7e       	andi	r24, 0xE7	; 231
			accel_config_write |= (0b00001000);
 2f8:	88 60       	ori	r24, 0x08	; 8
 2fa:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 2fc:	21 e0       	ldi	r18, 0x01	; 1
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	ae 01       	movw	r20, r28
 302:	4e 5f       	subi	r20, 0xFE	; 254
 304:	5f 4f       	sbci	r21, 0xFF	; 255
 306:	6c e1       	ldi	r22, 0x1C	; 28
 308:	80 ed       	ldi	r24, 0xD0	; 208
 30a:	0e 94 b3 02 	call	0x566	; 0x566 <i2c_writeReg>
			break;
 30e:	42 c0       	rjmp	.+132    	; 0x394 <MPU6050_set_accelFS+0xfa>
		case 2:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 310:	21 e0       	ldi	r18, 0x01	; 1
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	ae 01       	movw	r20, r28
 316:	4f 5f       	subi	r20, 0xFF	; 255
 318:	5f 4f       	sbci	r21, 0xFF	; 255
 31a:	6c e1       	ldi	r22, 0x1C	; 28
 31c:	80 ed       	ldi	r24, 0xD0	; 208
 31e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	87 7e       	andi	r24, 0xE7	; 231
			accel_config_write |= (0b00010000);
 326:	80 61       	ori	r24, 0x10	; 16
 328:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	ae 01       	movw	r20, r28
 330:	4e 5f       	subi	r20, 0xFE	; 254
 332:	5f 4f       	sbci	r21, 0xFF	; 255
 334:	6c e1       	ldi	r22, 0x1C	; 28
 336:	80 ed       	ldi	r24, 0xD0	; 208
 338:	0e 94 b3 02 	call	0x566	; 0x566 <i2c_writeReg>
			break;
 33c:	2b c0       	rjmp	.+86     	; 0x394 <MPU6050_set_accelFS+0xfa>
		case 3:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	ae 01       	movw	r20, r28
 344:	4f 5f       	subi	r20, 0xFF	; 255
 346:	5f 4f       	sbci	r21, 0xFF	; 255
 348:	6c e1       	ldi	r22, 0x1C	; 28
 34a:	80 ed       	ldi	r24, 0xD0	; 208
 34c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 350:	89 81       	ldd	r24, Y+1	; 0x01
			accel_config_write |= (0b00011000);
 352:	88 61       	ori	r24, 0x18	; 24
 354:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	ae 01       	movw	r20, r28
 35c:	4e 5f       	subi	r20, 0xFE	; 254
 35e:	5f 4f       	sbci	r21, 0xFF	; 255
 360:	6c e1       	ldi	r22, 0x1C	; 28
 362:	80 ed       	ldi	r24, 0xD0	; 208
 364:	0e 94 b3 02 	call	0x566	; 0x566 <i2c_writeReg>
			break;
 368:	15 c0       	rjmp	.+42     	; 0x394 <MPU6050_set_accelFS+0xfa>
		default:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 36a:	21 e0       	ldi	r18, 0x01	; 1
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	ae 01       	movw	r20, r28
 370:	4f 5f       	subi	r20, 0xFF	; 255
 372:	5f 4f       	sbci	r21, 0xFF	; 255
 374:	6c e1       	ldi	r22, 0x1C	; 28
 376:	80 ed       	ldi	r24, 0xD0	; 208
 378:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 37c:	89 81       	ldd	r24, Y+1	; 0x01
 37e:	87 7e       	andi	r24, 0xE7	; 231
 380:	8a 83       	std	Y+2, r24	; 0x02
			accel_config_write |= (0b00000000);
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 382:	21 e0       	ldi	r18, 0x01	; 1
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	ae 01       	movw	r20, r28
 388:	4e 5f       	subi	r20, 0xFE	; 254
 38a:	5f 4f       	sbci	r21, 0xFF	; 255
 38c:	6c e1       	ldi	r22, 0x1C	; 28
 38e:	80 ed       	ldi	r24, 0xD0	; 208
 390:	0e 94 b3 02 	call	0x566	; 0x566 <i2c_writeReg>
			break;
	}
}
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <MPU6050_set_clockSource>:

void MPU6050_set_clockSource(uint8_t clockSource)
{
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	00 d0       	rcall	.+0      	; 0x3a4 <MPU6050_set_clockSource+0x6>
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
	uint8_t power_reg_read, power_reg_write;
	switch(clockSource) {
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	e9 f0       	breq	.+58     	; 0x3e6 <MPU6050_set_clockSource+0x48>
 3ac:	30 f0       	brcs	.+12     	; 0x3ba <MPU6050_set_clockSource+0x1c>
 3ae:	82 30       	cpi	r24, 0x02	; 2
 3b0:	89 f1       	breq	.+98     	; 0x414 <MPU6050_set_clockSource+0x76>
 3b2:	83 30       	cpi	r24, 0x03	; 3
 3b4:	09 f4       	brne	.+2      	; 0x3b8 <MPU6050_set_clockSource+0x1a>
 3b6:	45 c0       	rjmp	.+138    	; 0x442 <MPU6050_set_clockSource+0xa4>
 3b8:	5b c0       	rjmp	.+182    	; 0x470 <MPU6050_set_clockSource+0xd2>
		case 0:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 3ba:	21 e0       	ldi	r18, 0x01	; 1
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	ae 01       	movw	r20, r28
 3c0:	4f 5f       	subi	r20, 0xFF	; 255
 3c2:	5f 4f       	sbci	r21, 0xFF	; 255
 3c4:	6b e6       	ldi	r22, 0x6B	; 107
 3c6:	80 ed       	ldi	r24, 0xD0	; 208
 3c8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 3cc:	89 81       	ldd	r24, Y+1	; 0x01
 3ce:	88 7f       	andi	r24, 0xF8	; 248
 3d0:	8a 83       	std	Y+2, r24	; 0x02
			power_reg_write |= (0b00000000);
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);;
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	ae 01       	movw	r20, r28
 3d8:	4e 5f       	subi	r20, 0xFE	; 254
 3da:	5f 4f       	sbci	r21, 0xFF	; 255
 3dc:	6b e6       	ldi	r22, 0x6B	; 107
 3de:	80 ed       	ldi	r24, 0xD0	; 208
 3e0:	0e 94 b3 02 	call	0x566	; 0x566 <i2c_writeReg>
			break;
 3e4:	5b c0       	rjmp	.+182    	; 0x49c <MPU6050_set_clockSource+0xfe>
		case 1:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 3e6:	21 e0       	ldi	r18, 0x01	; 1
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	ae 01       	movw	r20, r28
 3ec:	4f 5f       	subi	r20, 0xFF	; 255
 3ee:	5f 4f       	sbci	r21, 0xFF	; 255
 3f0:	6b e6       	ldi	r22, 0x6B	; 107
 3f2:	80 ed       	ldi	r24, 0xD0	; 208
 3f4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 3f8:	89 81       	ldd	r24, Y+1	; 0x01
 3fa:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000001);
 3fc:	81 60       	ori	r24, 0x01	; 1
 3fe:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 400:	21 e0       	ldi	r18, 0x01	; 1
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	ae 01       	movw	r20, r28
 406:	4e 5f       	subi	r20, 0xFE	; 254
 408:	5f 4f       	sbci	r21, 0xFF	; 255
 40a:	6b e6       	ldi	r22, 0x6B	; 107
 40c:	80 ed       	ldi	r24, 0xD0	; 208
 40e:	0e 94 b3 02 	call	0x566	; 0x566 <i2c_writeReg>
			break;
 412:	44 c0       	rjmp	.+136    	; 0x49c <MPU6050_set_clockSource+0xfe>
		case 2:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 414:	21 e0       	ldi	r18, 0x01	; 1
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	ae 01       	movw	r20, r28
 41a:	4f 5f       	subi	r20, 0xFF	; 255
 41c:	5f 4f       	sbci	r21, 0xFF	; 255
 41e:	6b e6       	ldi	r22, 0x6B	; 107
 420:	80 ed       	ldi	r24, 0xD0	; 208
 422:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 426:	89 81       	ldd	r24, Y+1	; 0x01
 428:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000010);
 42a:	82 60       	ori	r24, 0x02	; 2
 42c:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 42e:	21 e0       	ldi	r18, 0x01	; 1
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	ae 01       	movw	r20, r28
 434:	4e 5f       	subi	r20, 0xFE	; 254
 436:	5f 4f       	sbci	r21, 0xFF	; 255
 438:	6b e6       	ldi	r22, 0x6B	; 107
 43a:	80 ed       	ldi	r24, 0xD0	; 208
 43c:	0e 94 b3 02 	call	0x566	; 0x566 <i2c_writeReg>
			break;
 440:	2d c0       	rjmp	.+90     	; 0x49c <MPU6050_set_clockSource+0xfe>
		case 3:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 442:	21 e0       	ldi	r18, 0x01	; 1
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	ae 01       	movw	r20, r28
 448:	4f 5f       	subi	r20, 0xFF	; 255
 44a:	5f 4f       	sbci	r21, 0xFF	; 255
 44c:	6b e6       	ldi	r22, 0x6B	; 107
 44e:	80 ed       	ldi	r24, 0xD0	; 208
 450:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 454:	89 81       	ldd	r24, Y+1	; 0x01
 456:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000011);
 458:	83 60       	ori	r24, 0x03	; 3
 45a:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 45c:	21 e0       	ldi	r18, 0x01	; 1
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	ae 01       	movw	r20, r28
 462:	4e 5f       	subi	r20, 0xFE	; 254
 464:	5f 4f       	sbci	r21, 0xFF	; 255
 466:	6b e6       	ldi	r22, 0x6B	; 107
 468:	80 ed       	ldi	r24, 0xD0	; 208
 46a:	0e 94 b3 02 	call	0x566	; 0x566 <i2c_writeReg>
			break;
 46e:	16 c0       	rjmp	.+44     	; 0x49c <MPU6050_set_clockSource+0xfe>
		default:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 470:	21 e0       	ldi	r18, 0x01	; 1
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	ae 01       	movw	r20, r28
 476:	4f 5f       	subi	r20, 0xFF	; 255
 478:	5f 4f       	sbci	r21, 0xFF	; 255
 47a:	6b e6       	ldi	r22, 0x6B	; 107
 47c:	80 ed       	ldi	r24, 0xD0	; 208
 47e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 482:	89 81       	ldd	r24, Y+1	; 0x01
 484:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000001);
 486:	81 60       	ori	r24, 0x01	; 1
 488:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 48a:	21 e0       	ldi	r18, 0x01	; 1
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	ae 01       	movw	r20, r28
 490:	4e 5f       	subi	r20, 0xFE	; 254
 492:	5f 4f       	sbci	r21, 0xFF	; 255
 494:	6b e6       	ldi	r22, 0x6B	; 107
 496:	80 ed       	ldi	r24, 0xD0	; 208
 498:	0e 94 b3 02 	call	0x566	; 0x566 <i2c_writeReg>
			break;
	}
 49c:	0f 90       	pop	r0
 49e:	0f 90       	pop	r0
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <MPU6050_init>:
#include "AK_MPU6050_lib.h"
#include "i2c_master.h"

void MPU6050_init()
{
	i2c_init();
 4a6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <i2c_init>
	MPU6050_set_clockSource(1);
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0e 94 cf 01 	call	0x39e	; 0x39e <MPU6050_set_clockSource>
	MPU6050_set_sleepMode(0);
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	0e 94 c9 00 	call	0x192	; 0x192 <MPU6050_set_sleepMode>
	MPU6050_set_gyroFS(0);
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	0e 94 18 01 	call	0x230	; 0x230 <MPU6050_set_gyroFS>
	MPU6050_set_accelFS(0);
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 4d 01 	call	0x29a	; 0x29a <MPU6050_set_accelFS>
 4c2:	08 95       	ret

000004c4 <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
 4c4:	80 e2       	ldi	r24, 0x20	; 32
 4c6:	80 93 b8 00 	sts	0x00B8, r24
 4ca:	08 95       	ret

000004cc <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
 4cc:	ec eb       	ldi	r30, 0xBC	; 188
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	10 82       	st	Z, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 4d2:	94 ea       	ldi	r25, 0xA4	; 164
 4d4:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 4d6:	90 81       	ld	r25, Z
 4d8:	99 23       	and	r25, r25
 4da:	ec f7       	brge	.-6      	; 0x4d6 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 4dc:	90 91 b9 00 	lds	r25, 0x00B9
 4e0:	98 7f       	andi	r25, 0xF8	; 248
 4e2:	98 30       	cpi	r25, 0x08	; 8
 4e4:	a1 f4       	brne	.+40     	; 0x50e <i2c_start+0x42>
	
	// load slave address into data register
	TWDR = address;
 4e6:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
 4ea:	84 e8       	ldi	r24, 0x84	; 132
 4ec:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 4f0:	ec eb       	ldi	r30, 0xBC	; 188
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	80 81       	ld	r24, Z
 4f6:	88 23       	and	r24, r24
 4f8:	ec f7       	brge	.-6      	; 0x4f4 <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
 4fa:	90 91 b9 00 	lds	r25, 0x00B9
 4fe:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 500:	98 31       	cpi	r25, 0x18	; 24
 502:	39 f0       	breq	.+14     	; 0x512 <i2c_start+0x46>
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 34       	cpi	r25, 0x40	; 64
 508:	29 f4       	brne	.+10     	; 0x514 <i2c_start+0x48>
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
 512:	80 e0       	ldi	r24, 0x00	; 0
}
 514:	08 95       	ret

00000516 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
 516:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
 51a:	84 e8       	ldi	r24, 0x84	; 132
 51c:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 520:	ec eb       	ldi	r30, 0xBC	; 188
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	88 23       	and	r24, r24
 528:	ec f7       	brge	.-6      	; 0x524 <i2c_write+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
 52a:	90 91 b9 00 	lds	r25, 0x00B9
 52e:	98 7f       	andi	r25, 0xF8	; 248
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	98 32       	cpi	r25, 0x28	; 40
 534:	09 f4       	brne	.+2      	; 0x538 <i2c_write+0x22>
 536:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
 538:	08 95       	ret

0000053a <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 53a:	84 ec       	ldi	r24, 0xC4	; 196
 53c:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 540:	ec eb       	ldi	r30, 0xBC	; 188
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	88 23       	and	r24, r24
 548:	ec f7       	brge	.-6      	; 0x544 <i2c_read_ack+0xa>
	// return received data from TWDR
	return TWDR;
 54a:	80 91 bb 00 	lds	r24, 0x00BB
}
 54e:	08 95       	ret

00000550 <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 550:	84 e8       	ldi	r24, 0x84	; 132
 552:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 556:	ec eb       	ldi	r30, 0xBC	; 188
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	88 23       	and	r24, r24
 55e:	ec f7       	brge	.-6      	; 0x55a <i2c_read_nack+0xa>
	// return received data from TWDR
	return TWDR;
 560:	80 91 bb 00 	lds	r24, 0x00BB
}
 564:	08 95       	ret

00000566 <i2c_writeReg>:
	
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 566:	cf 92       	push	r12
 568:	df 92       	push	r13
 56a:	ff 92       	push	r15
 56c:	0f 93       	push	r16
 56e:	1f 93       	push	r17
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
 574:	c6 2f       	mov	r28, r22
 576:	6a 01       	movw	r12, r20
 578:	89 01       	movw	r16, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 57a:	0e 94 66 02 	call	0x4cc	; 0x4cc <i2c_start>
 57e:	f8 2e       	mov	r15, r24
 580:	81 11       	cpse	r24, r1
 582:	15 c0       	rjmp	.+42     	; 0x5ae <i2c_writeReg+0x48>

	i2c_write(regaddr);
 584:	8c 2f       	mov	r24, r28
 586:	0e 94 8b 02 	call	0x516	; 0x516 <i2c_write>

	for (uint16_t i = 0; i < length; i++)
 58a:	01 15       	cp	r16, r1
 58c:	11 05       	cpc	r17, r1
 58e:	59 f0       	breq	.+22     	; 0x5a6 <i2c_writeReg+0x40>
 590:	e6 01       	movw	r28, r12
 592:	0c 0d       	add	r16, r12
 594:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 596:	89 91       	ld	r24, Y+
 598:	0e 94 8b 02 	call	0x516	; 0x516 <i2c_write>
 59c:	81 11       	cpse	r24, r1
 59e:	0a c0       	rjmp	.+20     	; 0x5b4 <i2c_writeReg+0x4e>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
 5a0:	c0 17       	cp	r28, r16
 5a2:	d1 07       	cpc	r29, r17
 5a4:	c1 f7       	brne	.-16     	; 0x596 <i2c_writeReg+0x30>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 5a6:	84 e9       	ldi	r24, 0x94	; 148
 5a8:	80 93 bc 00 	sts	0x00BC, r24
 5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <i2c_writeReg+0x52>
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
 5ae:	ff 24       	eor	r15, r15
 5b0:	f3 94       	inc	r15
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <i2c_writeReg+0x52>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 5b4:	ff 24       	eor	r15, r15
 5b6:	f3 94       	inc	r15
	}

	i2c_stop();

	return 0;
}
 5b8:	8f 2d       	mov	r24, r15
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	1f 91       	pop	r17
 5c0:	0f 91       	pop	r16
 5c2:	ff 90       	pop	r15
 5c4:	df 90       	pop	r13
 5c6:	cf 90       	pop	r12
 5c8:	08 95       	ret

000005ca <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 5ca:	af 92       	push	r10
 5cc:	bf 92       	push	r11
 5ce:	df 92       	push	r13
 5d0:	ef 92       	push	r14
 5d2:	ff 92       	push	r15
 5d4:	0f 93       	push	r16
 5d6:	1f 93       	push	r17
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	18 2f       	mov	r17, r24
 5de:	06 2f       	mov	r16, r22
 5e0:	5a 01       	movw	r10, r20
 5e2:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
 5e4:	0e 94 66 02 	call	0x4cc	; 0x4cc <i2c_start>
 5e8:	81 11       	cpse	r24, r1
 5ea:	22 c0       	rjmp	.+68     	; 0x630 <i2c_readReg+0x66>

	i2c_write(regaddr);
 5ec:	80 2f       	mov	r24, r16
 5ee:	0e 94 8b 02 	call	0x516	; 0x516 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 5f2:	81 2f       	mov	r24, r17
 5f4:	81 60       	ori	r24, 0x01	; 1
 5f6:	0e 94 66 02 	call	0x4cc	; 0x4cc <i2c_start>
 5fa:	d8 2e       	mov	r13, r24
 5fc:	81 11       	cpse	r24, r1
 5fe:	1b c0       	rjmp	.+54     	; 0x636 <i2c_readReg+0x6c>

	for (uint16_t i = 0; i < (length-1); i++)
 600:	8e 01       	movw	r16, r28
 602:	01 50       	subi	r16, 0x01	; 1
 604:	11 09       	sbc	r17, r1
 606:	51 f0       	breq	.+20     	; 0x61c <i2c_readReg+0x52>
 608:	e5 01       	movw	r28, r10
 60a:	75 01       	movw	r14, r10
 60c:	e0 0e       	add	r14, r16
 60e:	f1 1e       	adc	r15, r17
	{
		data[i] = i2c_read_ack();
 610:	0e 94 9d 02 	call	0x53a	; 0x53a <i2c_read_ack>
 614:	89 93       	st	Y+, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
 616:	ce 15       	cp	r28, r14
 618:	df 05       	cpc	r29, r15
 61a:	d1 f7       	brne	.-12     	; 0x610 <i2c_readReg+0x46>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 61c:	e5 01       	movw	r28, r10
 61e:	c0 0f       	add	r28, r16
 620:	d1 1f       	adc	r29, r17
 622:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_read_nack>
 626:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 628:	84 e9       	ldi	r24, 0x94	; 148
 62a:	80 93 bc 00 	sts	0x00BC, r24
 62e:	05 c0       	rjmp	.+10     	; 0x63a <i2c_readReg+0x70>
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
 630:	dd 24       	eor	r13, r13
 632:	d3 94       	inc	r13
 634:	02 c0       	rjmp	.+4      	; 0x63a <i2c_readReg+0x70>

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
 636:	dd 24       	eor	r13, r13
 638:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 63a:	8d 2d       	mov	r24, r13
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	1f 91       	pop	r17
 642:	0f 91       	pop	r16
 644:	ff 90       	pop	r15
 646:	ef 90       	pop	r14
 648:	df 90       	pop	r13
 64a:	bf 90       	pop	r11
 64c:	af 90       	pop	r10
 64e:	08 95       	ret

00000650 <statusLED>:
    }
}

void statusLED(uint8_t status)
{
	DDRD |= (1<<DDD5);
 650:	55 9a       	sbi	0x0a, 5	; 10
	if (status) {
 652:	88 23       	and	r24, r24
 654:	11 f0       	breq	.+4      	; 0x65a <statusLED+0xa>
		PORTD |= (1<<PORTD5);
 656:	5d 9a       	sbi	0x0b, 5	; 11
 658:	08 95       	ret
	}
	else {
		PORTD &= ~(1<<PORTD5);
 65a:	5d 98       	cbi	0x0b, 5	; 11
 65c:	08 95       	ret

0000065e <main>:
#include "i2c_master.h"

void statusLED(uint8_t status);

int main(void)
{
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
 662:	cd b7       	in	r28, 0x3d	; 61
 664:	de b7       	in	r29, 0x3e	; 62
 666:	e6 97       	sbiw	r28, 0x36	; 54
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	f8 94       	cli
 66c:	de bf       	out	0x3e, r29	; 62
 66e:	0f be       	out	0x3f, r0	; 63
 670:	cd bf       	out	0x3d, r28	; 61
	uint16_t acc[3];
	char accX_str[16], accY_str[16], accZ_str[16];
	
	initUSART();
 672:	0e 94 ac 03 	call	0x758	; 0x758 <initUSART>
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	80 e8       	ldi	r24, 0x80	; 128
 67a:	0f b6       	in	r0, 0x3f	; 63
 67c:	f8 94       	cli
 67e:	80 93 61 00 	sts	0x0061, r24
 682:	90 93 61 00 	sts	0x0061, r25
 686:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(clock_div_1); // set clock to 8MHz
	MPU6050_init();
 688:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MPU6050_init>
	MPU6050_set_accelFS(3);
 68c:	83 e0       	ldi	r24, 0x03	; 3
 68e:	0e 94 4d 01 	call	0x29a	; 0x29a <MPU6050_set_accelFS>
	
	//statusLED_ON();
	
	if (MPU6050_test_I2C()) {
 692:	0e 94 4b 00 	call	0x96	; 0x96 <MPU6050_test_I2C>
 696:	88 23       	and	r24, r24
 698:	41 f0       	breq	.+16     	; 0x6aa <main+0x4c>
		printLine("=== IMU working properly ===");
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	91 e0       	ldi	r25, 0x01	; 1
 69e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <printLine>
		statusLED(1);
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	0e 94 28 03 	call	0x650	; 0x650 <statusLED>
 6a8:	20 c0       	rjmp	.+64     	; 0x6ea <main+0x8c>
	}
	else {
		statusLED(1);
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	0e 94 28 03 	call	0x650	; 0x650 <statusLED>
		printLine("=== IMU ERROR ===");
 6b0:	8d e1       	ldi	r24, 0x1D	; 29
 6b2:	91 e0       	ldi	r25, 0x01	; 1
 6b4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <printLine>
		while(1){
			statusLED(0);
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	0e 94 28 03 	call	0x650	; 0x650 <statusLED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6be:	2f e7       	ldi	r18, 0x7F	; 127
 6c0:	88 e3       	ldi	r24, 0x38	; 56
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	21 50       	subi	r18, 0x01	; 1
 6c6:	80 40       	sbci	r24, 0x00	; 0
 6c8:	90 40       	sbci	r25, 0x00	; 0
 6ca:	e1 f7       	brne	.-8      	; 0x6c4 <main+0x66>
 6cc:	00 c0       	rjmp	.+0      	; 0x6ce <main+0x70>
 6ce:	00 00       	nop
			_delay_ms(50);
			statusLED(1);
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	0e 94 28 03 	call	0x650	; 0x650 <statusLED>
 6d6:	2f e7       	ldi	r18, 0x7F	; 127
 6d8:	88 e3       	ldi	r24, 0x38	; 56
 6da:	91 e0       	ldi	r25, 0x01	; 1
 6dc:	21 50       	subi	r18, 0x01	; 1
 6de:	80 40       	sbci	r24, 0x00	; 0
 6e0:	90 40       	sbci	r25, 0x00	; 0
 6e2:	e1 f7       	brne	.-8      	; 0x6dc <main+0x7e>
 6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <main+0x88>
 6e6:	00 00       	nop
 6e8:	e7 cf       	rjmp	.-50     	; 0x6b8 <main+0x5a>
		}
	}
	
    while (1) 
    {
		MPU6050_get_accel(acc);
 6ea:	ce 01       	movw	r24, r28
 6ec:	01 96       	adiw	r24, 0x01	; 1
 6ee:	0e 94 63 00 	call	0xc6	; 0xc6 <MPU6050_get_accel>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 6f2:	4a e0       	ldi	r20, 0x0A	; 10
 6f4:	be 01       	movw	r22, r28
 6f6:	69 5f       	subi	r22, 0xF9	; 249
 6f8:	7f 4f       	sbci	r23, 0xFF	; 255
 6fa:	89 81       	ldd	r24, Y+1	; 0x01
 6fc:	9a 81       	ldd	r25, Y+2	; 0x02
 6fe:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__itoa_ncheck>
 702:	4a e0       	ldi	r20, 0x0A	; 10
 704:	be 01       	movw	r22, r28
 706:	69 5e       	subi	r22, 0xE9	; 233
 708:	7f 4f       	sbci	r23, 0xFF	; 255
 70a:	8b 81       	ldd	r24, Y+3	; 0x03
 70c:	9c 81       	ldd	r25, Y+4	; 0x04
 70e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__itoa_ncheck>
 712:	4a e0       	ldi	r20, 0x0A	; 10
 714:	be 01       	movw	r22, r28
 716:	69 5d       	subi	r22, 0xD9	; 217
 718:	7f 4f       	sbci	r23, 0xFF	; 255
 71a:	8d 81       	ldd	r24, Y+5	; 0x05
 71c:	9e 81       	ldd	r25, Y+6	; 0x06
 71e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__itoa_ncheck>
		itoa(acc[0],accX_str,10);
		itoa(acc[1],accY_str,10);
		itoa(acc[2],accZ_str,10);
		printString(accX_str); printString("_");
 722:	ce 01       	movw	r24, r28
 724:	07 96       	adiw	r24, 0x07	; 7
 726:	0e 94 c5 03 	call	0x78a	; 0x78a <printString>
 72a:	8f e2       	ldi	r24, 0x2F	; 47
 72c:	91 e0       	ldi	r25, 0x01	; 1
 72e:	0e 94 c5 03 	call	0x78a	; 0x78a <printString>
		printString(accY_str); printString("_");
 732:	ce 01       	movw	r24, r28
 734:	47 96       	adiw	r24, 0x17	; 23
 736:	0e 94 c5 03 	call	0x78a	; 0x78a <printString>
 73a:	8f e2       	ldi	r24, 0x2F	; 47
 73c:	91 e0       	ldi	r25, 0x01	; 1
 73e:	0e 94 c5 03 	call	0x78a	; 0x78a <printString>
		printLine(accZ_str);
 742:	ce 01       	movw	r24, r28
 744:	87 96       	adiw	r24, 0x27	; 39
 746:	0e 94 db 03 	call	0x7b6	; 0x7b6 <printLine>
 74a:	8f e2       	ldi	r24, 0x2F	; 47
 74c:	95 e7       	ldi	r25, 0x75	; 117
 74e:	01 97       	sbiw	r24, 0x01	; 1
 750:	f1 f7       	brne	.-4      	; 0x74e <main+0xf0>
 752:	00 c0       	rjmp	.+0      	; 0x754 <main+0xf6>
 754:	00 00       	nop
 756:	c9 cf       	rjmp	.-110    	; 0x6ea <main+0x8c>

00000758 <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 758:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
 75c:	8c e0       	ldi	r24, 0x0C	; 12
 75e:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
#else
  UCSR0A &= ~(1 << U2X0);
 762:	e0 ec       	ldi	r30, 0xC0	; 192
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	80 81       	ld	r24, Z
 768:	8d 7f       	andi	r24, 0xFD	; 253
 76a:	80 83       	st	Z, r24
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 76c:	88 e1       	ldi	r24, 0x18	; 24
 76e:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 772:	86 e0       	ldi	r24, 0x06	; 6
 774:	80 93 c2 00 	sts	0x00C2, r24
 778:	08 95       	ret

0000077a <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 77a:	e0 ec       	ldi	r30, 0xC0	; 192
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	90 81       	ld	r25, Z
 780:	95 ff       	sbrs	r25, 5
 782:	fd cf       	rjmp	.-6      	; 0x77e <transmitByte+0x4>
  UDR0 = data;                                            /* send data */
 784:	80 93 c6 00 	sts	0x00C6, r24
 788:	08 95       	ret

0000078a <printString>:
}


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 78a:	0f 93       	push	r16
 78c:	1f 93       	push	r17
 78e:	cf 93       	push	r28
 790:	fc 01       	movw	r30, r24
  uint8_t i = 0;
  while (myString[i]) {
 792:	80 81       	ld	r24, Z
 794:	88 23       	and	r24, r24
 796:	59 f0       	breq	.+22     	; 0x7ae <printString+0x24>
 798:	8f 01       	movw	r16, r30
 79a:	c0 e0       	ldi	r28, 0x00	; 0
    transmitByte(myString[i]);
 79c:	0e 94 bd 03 	call	0x77a	; 0x77a <transmitByte>
    i++;
 7a0:	cf 5f       	subi	r28, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 7a2:	f8 01       	movw	r30, r16
 7a4:	ec 0f       	add	r30, r28
 7a6:	f1 1d       	adc	r31, r1
 7a8:	80 81       	ld	r24, Z
 7aa:	81 11       	cpse	r24, r1
 7ac:	f7 cf       	rjmp	.-18     	; 0x79c <printString+0x12>
    transmitByte(myString[i]);
    i++;
  }
}
 7ae:	cf 91       	pop	r28
 7b0:	1f 91       	pop	r17
 7b2:	0f 91       	pop	r16
 7b4:	08 95       	ret

000007b6 <printLine>:

void printLine(const char myString[]) {
 7b6:	0f 93       	push	r16
 7b8:	1f 93       	push	r17
 7ba:	cf 93       	push	r28
 7bc:	8c 01       	movw	r16, r24
	uint8_t i = 0;
	while (myString[i]) {
 7be:	fc 01       	movw	r30, r24
 7c0:	80 81       	ld	r24, Z
 7c2:	88 23       	and	r24, r24
 7c4:	51 f0       	breq	.+20     	; 0x7da <printLine+0x24>
 7c6:	c0 e0       	ldi	r28, 0x00	; 0
		transmitByte(myString[i]);
 7c8:	0e 94 bd 03 	call	0x77a	; 0x77a <transmitByte>
		i++;
 7cc:	cf 5f       	subi	r28, 0xFF	; 255
  }
}

void printLine(const char myString[]) {
	uint8_t i = 0;
	while (myString[i]) {
 7ce:	f8 01       	movw	r30, r16
 7d0:	ec 0f       	add	r30, r28
 7d2:	f1 1d       	adc	r31, r1
 7d4:	80 81       	ld	r24, Z
 7d6:	81 11       	cpse	r24, r1
 7d8:	f7 cf       	rjmp	.-18     	; 0x7c8 <printLine+0x12>
		transmitByte(myString[i]);
		i++;
	}
	transmitByte(10);
 7da:	8a e0       	ldi	r24, 0x0A	; 10
 7dc:	0e 94 bd 03 	call	0x77a	; 0x77a <transmitByte>
}
 7e0:	cf 91       	pop	r28
 7e2:	1f 91       	pop	r17
 7e4:	0f 91       	pop	r16
 7e6:	08 95       	ret

000007e8 <__itoa_ncheck>:
 7e8:	bb 27       	eor	r27, r27
 7ea:	4a 30       	cpi	r20, 0x0A	; 10
 7ec:	31 f4       	brne	.+12     	; 0x7fa <__itoa_ncheck+0x12>
 7ee:	99 23       	and	r25, r25
 7f0:	22 f4       	brpl	.+8      	; 0x7fa <__itoa_ncheck+0x12>
 7f2:	bd e2       	ldi	r27, 0x2D	; 45
 7f4:	90 95       	com	r25
 7f6:	81 95       	neg	r24
 7f8:	9f 4f       	sbci	r25, 0xFF	; 255
 7fa:	0c 94 00 04 	jmp	0x800	; 0x800 <__utoa_common>

000007fe <__utoa_ncheck>:
 7fe:	bb 27       	eor	r27, r27

00000800 <__utoa_common>:
 800:	fb 01       	movw	r30, r22
 802:	55 27       	eor	r21, r21
 804:	aa 27       	eor	r26, r26
 806:	88 0f       	add	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	aa 1f       	adc	r26, r26
 80c:	a4 17       	cp	r26, r20
 80e:	10 f0       	brcs	.+4      	; 0x814 <__utoa_common+0x14>
 810:	a4 1b       	sub	r26, r20
 812:	83 95       	inc	r24
 814:	50 51       	subi	r21, 0x10	; 16
 816:	b9 f7       	brne	.-18     	; 0x806 <__utoa_common+0x6>
 818:	a0 5d       	subi	r26, 0xD0	; 208
 81a:	aa 33       	cpi	r26, 0x3A	; 58
 81c:	08 f0       	brcs	.+2      	; 0x820 <__utoa_common+0x20>
 81e:	a9 5d       	subi	r26, 0xD9	; 217
 820:	a1 93       	st	Z+, r26
 822:	00 97       	sbiw	r24, 0x00	; 0
 824:	79 f7       	brne	.-34     	; 0x804 <__utoa_common+0x4>
 826:	b1 11       	cpse	r27, r1
 828:	b1 93       	st	Z+, r27
 82a:	11 92       	st	Z+, r1
 82c:	cb 01       	movw	r24, r22
 82e:	0c 94 19 04 	jmp	0x832	; 0x832 <strrev>

00000832 <strrev>:
 832:	dc 01       	movw	r26, r24
 834:	fc 01       	movw	r30, r24
 836:	67 2f       	mov	r22, r23
 838:	71 91       	ld	r23, Z+
 83a:	77 23       	and	r23, r23
 83c:	e1 f7       	brne	.-8      	; 0x836 <strrev+0x4>
 83e:	32 97       	sbiw	r30, 0x02	; 2
 840:	04 c0       	rjmp	.+8      	; 0x84a <strrev+0x18>
 842:	7c 91       	ld	r23, X
 844:	6d 93       	st	X+, r22
 846:	70 83       	st	Z, r23
 848:	62 91       	ld	r22, -Z
 84a:	ae 17       	cp	r26, r30
 84c:	bf 07       	cpc	r27, r31
 84e:	c8 f3       	brcs	.-14     	; 0x842 <strrev+0x10>
 850:	08 95       	ret

00000852 <_exit>:
 852:	f8 94       	cli

00000854 <__stop_program>:
 854:	ff cf       	rjmp	.-2      	; 0x854 <__stop_program>
