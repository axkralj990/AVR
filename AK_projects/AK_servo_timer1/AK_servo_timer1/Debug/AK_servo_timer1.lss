
AK_servo_timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000131  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d1  00000000  00000000  0000031d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000119  00000000  00000000  000003ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000508  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ad  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006a  00000000  00000000  000006d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000743  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void)
{
	uint16_t pulseWidth = 1001;
	int direction = 1;
	
	TCCR1A |= (1<<COM1A1) | (1<<WGM11);
  80:	e0 e8       	ldi	r30, 0x80	; 128
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	82 68       	ori	r24, 0x82	; 130
  88:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS11); // prescale 8
  8a:	e1 e8       	ldi	r30, 0x81	; 129
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	8a 61       	ori	r24, 0x1A	; 26
  92:	80 83       	st	Z, r24
	ICR1 = 39999;
  94:	8f e3       	ldi	r24, 0x3F	; 63
  96:	9c e9       	ldi	r25, 0x9C	; 156
  98:	90 93 87 00 	sts	0x0087, r25
  9c:	80 93 86 00 	sts	0x0086, r24
	DDRB |= (1<<PINB1);
  a0:	21 9a       	sbi	0x04, 1	; 4
#include <util/delay.h>

int main(void)
{
	uint16_t pulseWidth = 1001;
	int direction = 1;
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	30 e0       	ldi	r19, 0x00	; 0
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	uint16_t pulseWidth = 1001;
  a6:	89 ee       	ldi	r24, 0xE9	; 233
  a8:	93 e0       	ldi	r25, 0x03	; 3
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS11); // prescale 8
	ICR1 = 39999;
	DDRB |= (1<<PINB1);
    while (1) 
    {
		OCR1A = 2*pulseWidth;
  aa:	e8 e8       	ldi	r30, 0x88	; 136
  ac:	f0 e0       	ldi	r31, 0x00	; 0
		pulseWidth = pulseWidth + 10*direction;
		if (pulseWidth >= 2200)
		{
			direction = -1;
  ae:	bf ef       	ldi	r27, 0xFF	; 255
  b0:	af ef       	ldi	r26, 0xFF	; 255
		}
		else if (pulseWidth <= 900)
		{
			direction = 1;
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	00 e0       	ldi	r16, 0x00	; 0
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS11); // prescale 8
	ICR1 = 39999;
	DDRB |= (1<<PINB1);
    while (1) 
    {
		OCR1A = 2*pulseWidth;
  b6:	ac 01       	movw	r20, r24
  b8:	44 0f       	add	r20, r20
  ba:	55 1f       	adc	r21, r21
  bc:	51 83       	std	Z+1, r21	; 0x01
  be:	40 83       	st	Z, r20
		pulseWidth = pulseWidth + 10*direction;
  c0:	a9 01       	movw	r20, r18
  c2:	44 0f       	add	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	44 0f       	add	r20, r20
  c8:	55 1f       	adc	r21, r21
  ca:	44 0f       	add	r20, r20
  cc:	55 1f       	adc	r21, r21
  ce:	b9 01       	movw	r22, r18
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	46 0f       	add	r20, r22
  d6:	57 1f       	adc	r21, r23
  d8:	84 0f       	add	r24, r20
  da:	95 1f       	adc	r25, r21
		if (pulseWidth >= 2200)
  dc:	88 39       	cpi	r24, 0x98	; 152
  de:	48 e0       	ldi	r20, 0x08	; 8
  e0:	94 07       	cpc	r25, r20
  e2:	38 f4       	brcc	.+14     	; 0xf2 <main+0x72>
		{
			direction = -1;
		}
		else if (pulseWidth <= 900)
  e4:	85 38       	cpi	r24, 0x85	; 133
  e6:	c3 e0       	ldi	r28, 0x03	; 3
  e8:	9c 07       	cpc	r25, r28
  ea:	28 f4       	brcc	.+10     	; 0xf6 <main+0x76>
		{
			direction = 1;
  ec:	21 2f       	mov	r18, r17
  ee:	30 2f       	mov	r19, r16
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <main+0x76>
    {
		OCR1A = 2*pulseWidth;
		pulseWidth = pulseWidth + 10*direction;
		if (pulseWidth >= 2200)
		{
			direction = -1;
  f2:	2b 2f       	mov	r18, r27
  f4:	3a 2f       	mov	r19, r26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	cf e3       	ldi	r28, 0x3F	; 63
  f8:	df e1       	ldi	r29, 0x1F	; 31
  fa:	21 97       	sbiw	r28, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x7a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x80>
 100:	00 00       	nop
 102:	d9 cf       	rjmp	.-78     	; 0xb6 <main+0x36>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
