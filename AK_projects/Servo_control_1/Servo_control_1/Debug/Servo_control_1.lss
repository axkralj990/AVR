
Servo_control_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b9  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000374  00000000  00000000  00000a99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000426  00000000  00000000  00000e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00001234  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000367  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000646  00000000  00000000  0000176b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00001db1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  78:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_TICTOC>:

void init_TICTOC()
{
	if (F_CPU == 8000000)
	{
		TCCR1B |= (1<<CS11) | (1<<CS10); // clock prescaler 64
  80:	e1 e8       	ldi	r30, 0x81	; 129
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	83 60       	ori	r24, 0x03	; 3
  88:	80 83       	st	Z, r24
	{
		TCCR1B |= (1<<CS11) | (1<<CS10); //default for 8MHz
	}
	
	// WGM -> NORMAL mode is default
	TIMSK0 |= (1<<TOIE1); // Timer/Counter1 Overflow Interrupt Enable
  8a:	ee e6       	ldi	r30, 0x6E	; 110
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	81 60       	ori	r24, 0x01	; 1
  92:	80 83       	st	Z, r24
  94:	08 95       	ret

00000096 <tic>:
}

void tic()
{
	TCNT1 = 0;
  96:	10 92 85 00 	sts	0x0085, r1
  9a:	10 92 84 00 	sts	0x0084, r1
  9e:	08 95       	ret

000000a0 <toc>:
}

uint32_t toc()
{
	uint32_t micro_time = TCNT1;
  a0:	60 91 84 00 	lds	r22, 0x0084
  a4:	70 91 85 00 	lds	r23, 0x0085
  a8:	cb 01       	movw	r24, r22
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b0 e0       	ldi	r27, 0x00	; 0
	return micro_time * 8;
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	aa 1f       	adc	r26, r26
  b4:	bb 1f       	adc	r27, r27
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	aa 1f       	adc	r26, r26
  bc:	bb 1f       	adc	r27, r27
  be:	bc 01       	movw	r22, r24
  c0:	cd 01       	movw	r24, r26
  c2:	66 0f       	add	r22, r22
  c4:	77 1f       	adc	r23, r23
  c6:	88 1f       	adc	r24, r24
  c8:	99 1f       	adc	r25, r25
}
  ca:	08 95       	ret

000000cc <main>:
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	f8 94       	cli
  d4:	80 93 61 00 	sts	0x0061, r24
  d8:	90 93 61 00 	sts	0x0061, r25
  dc:	0f be       	out	0x3f, r0	; 63
int main(void)
{
	clock_prescale_set(clock_div_1);
	
	// set LED and servo ports as output
    DDRC |= (1<<DDC5) | (1<<DDC3);
  de:	87 b1       	in	r24, 0x07	; 7
  e0:	88 62       	ori	r24, 0x28	; 40
  e2:	87 b9       	out	0x07, r24	; 7
	
	// LED ON
	PORTC |= (1<<PORTC3);
  e4:	43 9a       	sbi	0x08, 3	; 8
	PORTC &= ~(1<<PORTC5);
  e6:	45 98       	cbi	0x08, 5	; 8
	
	initUSART();
  e8:	0e 94 97 00 	call	0x12e	; 0x12e <initUSART>
	init_TICTOC();
  ec:	0e 94 40 00 	call	0x80	; 0x80 <init_TICTOC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	89 e6       	ldi	r24, 0x69	; 105
  f4:	98 e1       	ldi	r25, 0x18	; 24
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x2a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x34>
 100:	00 00       	nop
    {
		
		//servo_receive = getNumber();
		servo_signal = 2000;
		
		tic();
 102:	0e 94 4b 00 	call	0x96	; 0x96 <tic>
		PORTC |= (1<<PORTC5);
 106:	45 9a       	sbi	0x08, 5	; 8
		//_delay_us(1000);
		//PORTC &= ~(1<<PORTC5);
		
		while (PORTC >= 40)
 108:	08 c0       	rjmp	.+16     	; 0x11a <main+0x4e>
		{
			micros = toc();
 10a:	0e 94 50 00 	call	0xa0	; 0xa0 <toc>
			if(servo_signal <= micros)
 10e:	60 3d       	cpi	r22, 0xD0	; 208
 110:	77 40       	sbci	r23, 0x07	; 7
 112:	81 05       	cpc	r24, r1
 114:	91 05       	cpc	r25, r1
 116:	08 f0       	brcs	.+2      	; 0x11a <main+0x4e>
			{
				PORTC &= ~(1<<PORTC5);
 118:	45 98       	cbi	0x08, 5	; 8
		tic();
		PORTC |= (1<<PORTC5);
		//_delay_us(1000);
		//PORTC &= ~(1<<PORTC5);
		
		while (PORTC >= 40)
 11a:	88 b1       	in	r24, 0x08	; 8
 11c:	88 32       	cpi	r24, 0x28	; 40
 11e:	a8 f7       	brcc	.-22     	; 0x10a <main+0x3e>
 120:	8f e3       	ldi	r24, 0x3F	; 63
 122:	9c e9       	ldi	r25, 0x9C	; 156
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x58>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x5e>
 12a:	00 00       	nop
 12c:	ea cf       	rjmp	.-44     	; 0x102 <main+0x36>

0000012e <initUSART>:

void printWord(uint16_t word) {
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 12e:	10 92 c5 00 	sts	0x00C5, r1
  transmitByte('0' + (word % 10));                             /* Ones */
 132:	83 e3       	ldi	r24, 0x33	; 51
 134:	80 93 c4 00 	sts	0x00C4, r24
 138:	e0 ec       	ldi	r30, 0xC0	; 192
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	8d 7f       	andi	r24, 0xFD	; 253
 140:	80 83       	st	Z, r24
 142:	88 e1       	ldi	r24, 0x18	; 24
 144:	80 93 c1 00 	sts	0x00C1, r24
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	80 93 c2 00 	sts	0x00C2, r24
 14e:	08 95       	ret

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
}
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
