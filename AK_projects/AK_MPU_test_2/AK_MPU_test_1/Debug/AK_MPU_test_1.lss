
AK_MPU_test_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000840  000008b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000840  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000008e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000182f  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a4  00000000  00000000  000022ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000745  00000000  00000000  00002993  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000440  00000000  00000000  000030d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005be  00000000  00000000  00003518  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012b8  00000000  00000000  00003ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  00004d8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 1a 03 	call	0x634	; 0x634 <main>
  8e:	0c 94 1e 04 	jmp	0x83c	; 0x83c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <MPU6050_test_I2C>:
	MPU6050_set_gyroFS(0);
	MPU6050_set_accelFS(0);
}

uint8_t MPU6050_test_I2C()
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	1f 92       	push	r1
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	unsigned char Data = 0x00;
  a0:	19 82       	std	Y+1, r1	; 0x01
	uint8_t MPU6050_test = 0;
	
	i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, &Data, 1);
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	ae 01       	movw	r20, r28
  a8:	4f 5f       	subi	r20, 0xFF	; 255
  aa:	5f 4f       	sbci	r21, 0xFF	; 255
  ac:	65 e7       	ldi	r22, 0x75	; 117
  ae:	80 ed       	ldi	r24, 0xD0	; 208
  b0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_readReg>
	
	if(Data == 0x68)
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	99 81       	ldd	r25, Y+1	; 0x01
  b8:	98 36       	cpi	r25, 0x68	; 104
  ba:	09 f0       	breq	.+2      	; 0xbe <MPU6050_test_I2C+0x28>
  bc:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		MPU6050_test = 0;
	}
	return MPU6050_test;
}
  be:	0f 90       	pop	r0
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <MPU6050_get_motion>:

void MPU6050_get_motion(uint16_t* motion)
{
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	2e 97       	sbiw	r28, 0x0e	; 14
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	f8 94       	cli
  d8:	de bf       	out	0x3e, r29	; 62
  da:	0f be       	out	0x3f, r0	; 63
  dc:	cd bf       	out	0x3d, r28	; 61
  de:	8c 01       	movw	r16, r24
	uint8_t motion_all[14];
	i2c_readReg(MPU6050_ADDRESS,MPU6050_RA_ACCEL_XOUT_H,motion_all,14);
  e0:	2e e0       	ldi	r18, 0x0E	; 14
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	ae 01       	movw	r20, r28
  e6:	4f 5f       	subi	r20, 0xFF	; 255
  e8:	5f 4f       	sbci	r21, 0xFF	; 255
  ea:	6b e3       	ldi	r22, 0x3B	; 59
  ec:	80 ed       	ldi	r24, 0xD0	; 208
  ee:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_readReg>
	motion[0] = (((uint16_t)motion_all[0]) << 8) | motion_all[1];
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	98 2f       	mov	r25, r24
  f8:	88 27       	eor	r24, r24
  fa:	2a 81       	ldd	r18, Y+2	; 0x02
  fc:	82 2b       	or	r24, r18
  fe:	f8 01       	movw	r30, r16
 100:	91 83       	std	Z+1, r25	; 0x01
 102:	80 83       	st	Z, r24
	motion[1] = (((uint16_t)motion_all[2]) << 8) | motion_all[3];
 104:	8b 81       	ldd	r24, Y+3	; 0x03
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	98 2f       	mov	r25, r24
 10a:	88 27       	eor	r24, r24
 10c:	2c 81       	ldd	r18, Y+4	; 0x04
 10e:	82 2b       	or	r24, r18
 110:	93 83       	std	Z+3, r25	; 0x03
 112:	82 83       	std	Z+2, r24	; 0x02
	motion[2] = (((uint16_t)motion_all[4]) << 8) | motion_all[5];
 114:	8d 81       	ldd	r24, Y+5	; 0x05
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	98 2f       	mov	r25, r24
 11a:	88 27       	eor	r24, r24
 11c:	2e 81       	ldd	r18, Y+6	; 0x06
 11e:	82 2b       	or	r24, r18
 120:	95 83       	std	Z+5, r25	; 0x05
 122:	84 83       	std	Z+4, r24	; 0x04
	
	// temperature data
	//motion[0] = (((uint16_t)motion_all[6]) << 8) | motion_all[7];
	
	motion[3] = (((uint16_t)motion_all[8]) << 8) | motion_all[9];
 124:	89 85       	ldd	r24, Y+9	; 0x09
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	98 2f       	mov	r25, r24
 12a:	88 27       	eor	r24, r24
 12c:	2a 85       	ldd	r18, Y+10	; 0x0a
 12e:	82 2b       	or	r24, r18
 130:	97 83       	std	Z+7, r25	; 0x07
 132:	86 83       	std	Z+6, r24	; 0x06
	motion[4] = (((uint16_t)motion_all[10]) << 8) | motion_all[11];
 134:	2b 85       	ldd	r18, Y+11	; 0x0b
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	32 2f       	mov	r19, r18
 13a:	22 27       	eor	r18, r18
 13c:	8c 85       	ldd	r24, Y+12	; 0x0c
 13e:	28 2b       	or	r18, r24
 140:	31 87       	std	Z+9, r19	; 0x09
 142:	20 87       	std	Z+8, r18	; 0x08
	motion[5] = (((uint16_t)motion_all[12]) << 8) | motion_all[13];
 144:	2d 85       	ldd	r18, Y+13	; 0x0d
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	32 2f       	mov	r19, r18
 14a:	22 27       	eor	r18, r18
 14c:	8e 85       	ldd	r24, Y+14	; 0x0e
 14e:	28 2b       	or	r18, r24
 150:	33 87       	std	Z+11, r19	; 0x0b
 152:	22 87       	std	Z+10, r18	; 0x0a
}
 154:	2e 96       	adiw	r28, 0x0e	; 14
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	08 95       	ret

0000016a <MPU6050_set_sleepMode>:
	gyroRates[1] = (((uint16_t)gyro[2]) << 8) | gyro[3];
	gyroRates[2] = (((uint16_t)gyro[4]) << 8) | gyro[5];
}

void MPU6050_set_sleepMode(uint8_t enableSleep)
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	00 d0       	rcall	.+0      	; 0x170 <MPU6050_set_sleepMode+0x6>
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
	uint8_t power_reg_read, power_reg_write;
	switch(enableSleep) {
 174:	88 23       	and	r24, r24
 176:	c1 f0       	breq	.+48     	; 0x1a8 <MPU6050_set_sleepMode+0x3e>
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	61 f5       	brne	.+88     	; 0x1d4 <MPU6050_set_sleepMode+0x6a>
		case 1:
				i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	ae 01       	movw	r20, r28
 182:	4f 5f       	subi	r20, 0xFF	; 255
 184:	5f 4f       	sbci	r21, 0xFF	; 255
 186:	6b e6       	ldi	r22, 0x6B	; 107
 188:	80 ed       	ldi	r24, 0xD0	; 208
 18a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_readReg>
				power_reg_write = power_reg_read & ~(0b01000000);
 18e:	89 81       	ldd	r24, Y+1	; 0x01
				power_reg_write |= (0b01000000);
 190:	80 64       	ori	r24, 0x40	; 64
 192:	8a 83       	std	Y+2, r24	; 0x02
				i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	ae 01       	movw	r20, r28
 19a:	4e 5f       	subi	r20, 0xFE	; 254
 19c:	5f 4f       	sbci	r21, 0xFF	; 255
 19e:	6b e6       	ldi	r22, 0x6B	; 107
 1a0:	80 ed       	ldi	r24, 0xD0	; 208
 1a2:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_writeReg>
				break;
 1a6:	2b c0       	rjmp	.+86     	; 0x1fe <MPU6050_set_sleepMode+0x94>
		case 0:
				i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	ae 01       	movw	r20, r28
 1ae:	4f 5f       	subi	r20, 0xFF	; 255
 1b0:	5f 4f       	sbci	r21, 0xFF	; 255
 1b2:	6b e6       	ldi	r22, 0x6B	; 107
 1b4:	80 ed       	ldi	r24, 0xD0	; 208
 1b6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_readReg>
				power_reg_write = power_reg_read & ~(0b01000000);
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	8f 7b       	andi	r24, 0xBF	; 191
 1be:	8a 83       	std	Y+2, r24	; 0x02
				power_reg_write |= (0b00000000);
				i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 1c0:	21 e0       	ldi	r18, 0x01	; 1
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	ae 01       	movw	r20, r28
 1c6:	4e 5f       	subi	r20, 0xFE	; 254
 1c8:	5f 4f       	sbci	r21, 0xFF	; 255
 1ca:	6b e6       	ldi	r22, 0x6B	; 107
 1cc:	80 ed       	ldi	r24, 0xD0	; 208
 1ce:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_writeReg>
				break;
 1d2:	15 c0       	rjmp	.+42     	; 0x1fe <MPU6050_set_sleepMode+0x94>
		default:
				i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 1d4:	21 e0       	ldi	r18, 0x01	; 1
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	ae 01       	movw	r20, r28
 1da:	4f 5f       	subi	r20, 0xFF	; 255
 1dc:	5f 4f       	sbci	r21, 0xFF	; 255
 1de:	6b e6       	ldi	r22, 0x6B	; 107
 1e0:	80 ed       	ldi	r24, 0xD0	; 208
 1e2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_readReg>
				power_reg_write = power_reg_read & ~(0b01000000);
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
				power_reg_write |= (0b01000000);
 1e8:	80 64       	ori	r24, 0x40	; 64
 1ea:	8a 83       	std	Y+2, r24	; 0x02
				i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 1ec:	21 e0       	ldi	r18, 0x01	; 1
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	ae 01       	movw	r20, r28
 1f2:	4e 5f       	subi	r20, 0xFE	; 254
 1f4:	5f 4f       	sbci	r21, 0xFF	; 255
 1f6:	6b e6       	ldi	r22, 0x6B	; 107
 1f8:	80 ed       	ldi	r24, 0xD0	; 208
 1fa:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_writeReg>
				break;
	}
}
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <MPU6050_set_gyroFS>:

void MPU6050_set_gyroFS(uint8_t gyroFS)
{
	switch(gyroFS) {
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	79 f0       	breq	.+30     	; 0x22a <MPU6050_set_gyroFS+0x22>
 20c:	28 f0       	brcs	.+10     	; 0x218 <MPU6050_set_gyroFS+0x10>
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	a9 f0       	breq	.+42     	; 0x23c <MPU6050_set_gyroFS+0x34>
 212:	83 30       	cpi	r24, 0x03	; 3
 214:	e1 f0       	breq	.+56     	; 0x24e <MPU6050_set_gyroFS+0x46>
 216:	24 c0       	rjmp	.+72     	; 0x260 <MPU6050_set_gyroFS+0x58>
		case 0:
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG,(uint8_t*)0b00000000,1);
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	6b e1       	ldi	r22, 0x1B	; 27
 222:	80 ed       	ldi	r24, 0xD0	; 208
 224:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_writeReg>
			break;
 228:	08 95       	ret
		case 1:
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG,(uint8_t*)0b00001000,1);
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	48 e0       	ldi	r20, 0x08	; 8
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	6b e1       	ldi	r22, 0x1B	; 27
 234:	80 ed       	ldi	r24, 0xD0	; 208
 236:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_writeReg>
			break;
 23a:	08 95       	ret
		case 2:
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG,(uint8_t*)0b00010000,1);
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	40 e1       	ldi	r20, 0x10	; 16
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	6b e1       	ldi	r22, 0x1B	; 27
 246:	80 ed       	ldi	r24, 0xD0	; 208
 248:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_writeReg>
			break;
 24c:	08 95       	ret
		case 3:
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG,(uint8_t*)0b00011000,1);
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	48 e1       	ldi	r20, 0x18	; 24
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	6b e1       	ldi	r22, 0x1B	; 27
 258:	80 ed       	ldi	r24, 0xD0	; 208
 25a:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_writeReg>
			break;
 25e:	08 95       	ret
		default:
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG,(uint8_t*)0b00000000,1);
 260:	21 e0       	ldi	r18, 0x01	; 1
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	50 e0       	ldi	r21, 0x00	; 0
 268:	6b e1       	ldi	r22, 0x1B	; 27
 26a:	80 ed       	ldi	r24, 0xD0	; 208
 26c:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_writeReg>
 270:	08 95       	ret

00000272 <MPU6050_set_accelFS>:
			break;
	}
}

void MPU6050_set_accelFS(uint8_t accelFS)
{
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	00 d0       	rcall	.+0      	; 0x278 <MPU6050_set_accelFS+0x6>
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
	uint8_t accel_config_read, accel_config_write;
	
	switch(accelFS) {
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	e9 f0       	breq	.+58     	; 0x2ba <MPU6050_set_accelFS+0x48>
 280:	30 f0       	brcs	.+12     	; 0x28e <MPU6050_set_accelFS+0x1c>
 282:	82 30       	cpi	r24, 0x02	; 2
 284:	89 f1       	breq	.+98     	; 0x2e8 <MPU6050_set_accelFS+0x76>
 286:	83 30       	cpi	r24, 0x03	; 3
 288:	09 f4       	brne	.+2      	; 0x28c <MPU6050_set_accelFS+0x1a>
 28a:	45 c0       	rjmp	.+138    	; 0x316 <MPU6050_set_accelFS+0xa4>
 28c:	5a c0       	rjmp	.+180    	; 0x342 <MPU6050_set_accelFS+0xd0>
		case 0:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 28e:	21 e0       	ldi	r18, 0x01	; 1
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	ae 01       	movw	r20, r28
 294:	4f 5f       	subi	r20, 0xFF	; 255
 296:	5f 4f       	sbci	r21, 0xFF	; 255
 298:	6c e1       	ldi	r22, 0x1C	; 28
 29a:	80 ed       	ldi	r24, 0xD0	; 208
 29c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	87 7e       	andi	r24, 0xE7	; 231
 2a4:	8a 83       	std	Y+2, r24	; 0x02
			accel_config_write |= (0b00000000);
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 2a6:	21 e0       	ldi	r18, 0x01	; 1
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	ae 01       	movw	r20, r28
 2ac:	4e 5f       	subi	r20, 0xFE	; 254
 2ae:	5f 4f       	sbci	r21, 0xFF	; 255
 2b0:	6c e1       	ldi	r22, 0x1C	; 28
 2b2:	80 ed       	ldi	r24, 0xD0	; 208
 2b4:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_writeReg>
			break;
 2b8:	59 c0       	rjmp	.+178    	; 0x36c <MPU6050_set_accelFS+0xfa>
		case 1:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	ae 01       	movw	r20, r28
 2c0:	4f 5f       	subi	r20, 0xFF	; 255
 2c2:	5f 4f       	sbci	r21, 0xFF	; 255
 2c4:	6c e1       	ldi	r22, 0x1C	; 28
 2c6:	80 ed       	ldi	r24, 0xD0	; 208
 2c8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	87 7e       	andi	r24, 0xE7	; 231
			accel_config_write |= (0b00001000);
 2d0:	88 60       	ori	r24, 0x08	; 8
 2d2:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	ae 01       	movw	r20, r28
 2da:	4e 5f       	subi	r20, 0xFE	; 254
 2dc:	5f 4f       	sbci	r21, 0xFF	; 255
 2de:	6c e1       	ldi	r22, 0x1C	; 28
 2e0:	80 ed       	ldi	r24, 0xD0	; 208
 2e2:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_writeReg>
			break;
 2e6:	42 c0       	rjmp	.+132    	; 0x36c <MPU6050_set_accelFS+0xfa>
		case 2:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	ae 01       	movw	r20, r28
 2ee:	4f 5f       	subi	r20, 0xFF	; 255
 2f0:	5f 4f       	sbci	r21, 0xFF	; 255
 2f2:	6c e1       	ldi	r22, 0x1C	; 28
 2f4:	80 ed       	ldi	r24, 0xD0	; 208
 2f6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
 2fc:	87 7e       	andi	r24, 0xE7	; 231
			accel_config_write |= (0b00010000);
 2fe:	80 61       	ori	r24, 0x10	; 16
 300:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	ae 01       	movw	r20, r28
 308:	4e 5f       	subi	r20, 0xFE	; 254
 30a:	5f 4f       	sbci	r21, 0xFF	; 255
 30c:	6c e1       	ldi	r22, 0x1C	; 28
 30e:	80 ed       	ldi	r24, 0xD0	; 208
 310:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_writeReg>
			break;
 314:	2b c0       	rjmp	.+86     	; 0x36c <MPU6050_set_accelFS+0xfa>
		case 3:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	ae 01       	movw	r20, r28
 31c:	4f 5f       	subi	r20, 0xFF	; 255
 31e:	5f 4f       	sbci	r21, 0xFF	; 255
 320:	6c e1       	ldi	r22, 0x1C	; 28
 322:	80 ed       	ldi	r24, 0xD0	; 208
 324:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 328:	89 81       	ldd	r24, Y+1	; 0x01
			accel_config_write |= (0b00011000);
 32a:	88 61       	ori	r24, 0x18	; 24
 32c:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 32e:	21 e0       	ldi	r18, 0x01	; 1
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	ae 01       	movw	r20, r28
 334:	4e 5f       	subi	r20, 0xFE	; 254
 336:	5f 4f       	sbci	r21, 0xFF	; 255
 338:	6c e1       	ldi	r22, 0x1C	; 28
 33a:	80 ed       	ldi	r24, 0xD0	; 208
 33c:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_writeReg>
			break;
 340:	15 c0       	rjmp	.+42     	; 0x36c <MPU6050_set_accelFS+0xfa>
		default:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 342:	21 e0       	ldi	r18, 0x01	; 1
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	ae 01       	movw	r20, r28
 348:	4f 5f       	subi	r20, 0xFF	; 255
 34a:	5f 4f       	sbci	r21, 0xFF	; 255
 34c:	6c e1       	ldi	r22, 0x1C	; 28
 34e:	80 ed       	ldi	r24, 0xD0	; 208
 350:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	87 7e       	andi	r24, 0xE7	; 231
 358:	8a 83       	std	Y+2, r24	; 0x02
			accel_config_write |= (0b00000000);
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 35a:	21 e0       	ldi	r18, 0x01	; 1
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	ae 01       	movw	r20, r28
 360:	4e 5f       	subi	r20, 0xFE	; 254
 362:	5f 4f       	sbci	r21, 0xFF	; 255
 364:	6c e1       	ldi	r22, 0x1C	; 28
 366:	80 ed       	ldi	r24, 0xD0	; 208
 368:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_writeReg>
			break;
	}
}
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <MPU6050_set_clockSource>:

void MPU6050_set_clockSource(uint8_t clockSource)
{
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	00 d0       	rcall	.+0      	; 0x37c <MPU6050_set_clockSource+0x6>
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
	uint8_t power_reg_read, power_reg_write;
	switch(clockSource) {
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	e9 f0       	breq	.+58     	; 0x3be <MPU6050_set_clockSource+0x48>
 384:	30 f0       	brcs	.+12     	; 0x392 <MPU6050_set_clockSource+0x1c>
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	89 f1       	breq	.+98     	; 0x3ec <MPU6050_set_clockSource+0x76>
 38a:	83 30       	cpi	r24, 0x03	; 3
 38c:	09 f4       	brne	.+2      	; 0x390 <MPU6050_set_clockSource+0x1a>
 38e:	45 c0       	rjmp	.+138    	; 0x41a <MPU6050_set_clockSource+0xa4>
 390:	5b c0       	rjmp	.+182    	; 0x448 <MPU6050_set_clockSource+0xd2>
		case 0:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 392:	21 e0       	ldi	r18, 0x01	; 1
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	ae 01       	movw	r20, r28
 398:	4f 5f       	subi	r20, 0xFF	; 255
 39a:	5f 4f       	sbci	r21, 0xFF	; 255
 39c:	6b e6       	ldi	r22, 0x6B	; 107
 39e:	80 ed       	ldi	r24, 0xD0	; 208
 3a0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 3a4:	89 81       	ldd	r24, Y+1	; 0x01
 3a6:	88 7f       	andi	r24, 0xF8	; 248
 3a8:	8a 83       	std	Y+2, r24	; 0x02
			power_reg_write |= (0b00000000);
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);;
 3aa:	21 e0       	ldi	r18, 0x01	; 1
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	ae 01       	movw	r20, r28
 3b0:	4e 5f       	subi	r20, 0xFE	; 254
 3b2:	5f 4f       	sbci	r21, 0xFF	; 255
 3b4:	6b e6       	ldi	r22, 0x6B	; 107
 3b6:	80 ed       	ldi	r24, 0xD0	; 208
 3b8:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_writeReg>
			break;
 3bc:	5b c0       	rjmp	.+182    	; 0x474 <MPU6050_set_clockSource+0xfe>
		case 1:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 3be:	21 e0       	ldi	r18, 0x01	; 1
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	ae 01       	movw	r20, r28
 3c4:	4f 5f       	subi	r20, 0xFF	; 255
 3c6:	5f 4f       	sbci	r21, 0xFF	; 255
 3c8:	6b e6       	ldi	r22, 0x6B	; 107
 3ca:	80 ed       	ldi	r24, 0xD0	; 208
 3cc:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000001);
 3d4:	81 60       	ori	r24, 0x01	; 1
 3d6:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 3d8:	21 e0       	ldi	r18, 0x01	; 1
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	ae 01       	movw	r20, r28
 3de:	4e 5f       	subi	r20, 0xFE	; 254
 3e0:	5f 4f       	sbci	r21, 0xFF	; 255
 3e2:	6b e6       	ldi	r22, 0x6B	; 107
 3e4:	80 ed       	ldi	r24, 0xD0	; 208
 3e6:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_writeReg>
			break;
 3ea:	44 c0       	rjmp	.+136    	; 0x474 <MPU6050_set_clockSource+0xfe>
		case 2:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 3ec:	21 e0       	ldi	r18, 0x01	; 1
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	ae 01       	movw	r20, r28
 3f2:	4f 5f       	subi	r20, 0xFF	; 255
 3f4:	5f 4f       	sbci	r21, 0xFF	; 255
 3f6:	6b e6       	ldi	r22, 0x6B	; 107
 3f8:	80 ed       	ldi	r24, 0xD0	; 208
 3fa:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 3fe:	89 81       	ldd	r24, Y+1	; 0x01
 400:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000010);
 402:	82 60       	ori	r24, 0x02	; 2
 404:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 406:	21 e0       	ldi	r18, 0x01	; 1
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	ae 01       	movw	r20, r28
 40c:	4e 5f       	subi	r20, 0xFE	; 254
 40e:	5f 4f       	sbci	r21, 0xFF	; 255
 410:	6b e6       	ldi	r22, 0x6B	; 107
 412:	80 ed       	ldi	r24, 0xD0	; 208
 414:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_writeReg>
			break;
 418:	2d c0       	rjmp	.+90     	; 0x474 <MPU6050_set_clockSource+0xfe>
		case 3:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 41a:	21 e0       	ldi	r18, 0x01	; 1
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	ae 01       	movw	r20, r28
 420:	4f 5f       	subi	r20, 0xFF	; 255
 422:	5f 4f       	sbci	r21, 0xFF	; 255
 424:	6b e6       	ldi	r22, 0x6B	; 107
 426:	80 ed       	ldi	r24, 0xD0	; 208
 428:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 42c:	89 81       	ldd	r24, Y+1	; 0x01
 42e:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000011);
 430:	83 60       	ori	r24, 0x03	; 3
 432:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 434:	21 e0       	ldi	r18, 0x01	; 1
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	ae 01       	movw	r20, r28
 43a:	4e 5f       	subi	r20, 0xFE	; 254
 43c:	5f 4f       	sbci	r21, 0xFF	; 255
 43e:	6b e6       	ldi	r22, 0x6B	; 107
 440:	80 ed       	ldi	r24, 0xD0	; 208
 442:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_writeReg>
			break;
 446:	16 c0       	rjmp	.+44     	; 0x474 <MPU6050_set_clockSource+0xfe>
		default:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 448:	21 e0       	ldi	r18, 0x01	; 1
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	ae 01       	movw	r20, r28
 44e:	4f 5f       	subi	r20, 0xFF	; 255
 450:	5f 4f       	sbci	r21, 0xFF	; 255
 452:	6b e6       	ldi	r22, 0x6B	; 107
 454:	80 ed       	ldi	r24, 0xD0	; 208
 456:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 45a:	89 81       	ldd	r24, Y+1	; 0x01
 45c:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000001);
 45e:	81 60       	ori	r24, 0x01	; 1
 460:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 462:	21 e0       	ldi	r18, 0x01	; 1
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	ae 01       	movw	r20, r28
 468:	4e 5f       	subi	r20, 0xFE	; 254
 46a:	5f 4f       	sbci	r21, 0xFF	; 255
 46c:	6b e6       	ldi	r22, 0x6B	; 107
 46e:	80 ed       	ldi	r24, 0xD0	; 208
 470:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_writeReg>
			break;
	}
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	08 95       	ret

0000047e <MPU6050_init>:
#include "AK_MPU6050_lib.h"
#include "i2c_master.h"

void MPU6050_init()
{
	i2c_init();
 47e:	0e 94 4e 02 	call	0x49c	; 0x49c <i2c_init>
	MPU6050_set_clockSource(1);
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	0e 94 bb 01 	call	0x376	; 0x376 <MPU6050_set_clockSource>
	MPU6050_set_sleepMode(0);
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0e 94 b5 00 	call	0x16a	; 0x16a <MPU6050_set_sleepMode>
	MPU6050_set_gyroFS(0);
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	0e 94 04 01 	call	0x208	; 0x208 <MPU6050_set_gyroFS>
	MPU6050_set_accelFS(0);
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	0e 94 39 01 	call	0x272	; 0x272 <MPU6050_set_accelFS>
 49a:	08 95       	ret

0000049c <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
 49c:	88 e4       	ldi	r24, 0x48	; 72
 49e:	80 93 b8 00 	sts	0x00B8, r24
 4a2:	08 95       	ret

000004a4 <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
 4a4:	ec eb       	ldi	r30, 0xBC	; 188
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	10 82       	st	Z, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 4aa:	94 ea       	ldi	r25, 0xA4	; 164
 4ac:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 4ae:	90 81       	ld	r25, Z
 4b0:	99 23       	and	r25, r25
 4b2:	ec f7       	brge	.-6      	; 0x4ae <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 4b4:	90 91 b9 00 	lds	r25, 0x00B9
 4b8:	98 7f       	andi	r25, 0xF8	; 248
 4ba:	98 30       	cpi	r25, 0x08	; 8
 4bc:	a1 f4       	brne	.+40     	; 0x4e6 <i2c_start+0x42>
	
	// load slave address into data register
	TWDR = address;
 4be:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
 4c2:	84 e8       	ldi	r24, 0x84	; 132
 4c4:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 4c8:	ec eb       	ldi	r30, 0xBC	; 188
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	80 81       	ld	r24, Z
 4ce:	88 23       	and	r24, r24
 4d0:	ec f7       	brge	.-6      	; 0x4cc <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
 4d2:	90 91 b9 00 	lds	r25, 0x00B9
 4d6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 4d8:	98 31       	cpi	r25, 0x18	; 24
 4da:	39 f0       	breq	.+14     	; 0x4ea <i2c_start+0x46>
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 34       	cpi	r25, 0x40	; 64
 4e0:	29 f4       	brne	.+10     	; 0x4ec <i2c_start+0x48>
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
 4ea:	80 e0       	ldi	r24, 0x00	; 0
}
 4ec:	08 95       	ret

000004ee <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
 4ee:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
 4f2:	84 e8       	ldi	r24, 0x84	; 132
 4f4:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 4f8:	ec eb       	ldi	r30, 0xBC	; 188
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	88 23       	and	r24, r24
 500:	ec f7       	brge	.-6      	; 0x4fc <i2c_write+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
 502:	90 91 b9 00 	lds	r25, 0x00B9
 506:	98 7f       	andi	r25, 0xF8	; 248
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	98 32       	cpi	r25, 0x28	; 40
 50c:	09 f4       	brne	.+2      	; 0x510 <i2c_write+0x22>
 50e:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
 510:	08 95       	ret

00000512 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 512:	84 ec       	ldi	r24, 0xC4	; 196
 514:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 518:	ec eb       	ldi	r30, 0xBC	; 188
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	80 81       	ld	r24, Z
 51e:	88 23       	and	r24, r24
 520:	ec f7       	brge	.-6      	; 0x51c <i2c_read_ack+0xa>
	// return received data from TWDR
	return TWDR;
 522:	80 91 bb 00 	lds	r24, 0x00BB
}
 526:	08 95       	ret

00000528 <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 528:	84 e8       	ldi	r24, 0x84	; 132
 52a:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 52e:	ec eb       	ldi	r30, 0xBC	; 188
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	88 23       	and	r24, r24
 536:	ec f7       	brge	.-6      	; 0x532 <i2c_read_nack+0xa>
	// return received data from TWDR
	return TWDR;
 538:	80 91 bb 00 	lds	r24, 0x00BB
}
 53c:	08 95       	ret

0000053e <i2c_writeReg>:
	
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 53e:	cf 92       	push	r12
 540:	df 92       	push	r13
 542:	ff 92       	push	r15
 544:	0f 93       	push	r16
 546:	1f 93       	push	r17
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	c6 2f       	mov	r28, r22
 54e:	6a 01       	movw	r12, r20
 550:	89 01       	movw	r16, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 552:	0e 94 52 02 	call	0x4a4	; 0x4a4 <i2c_start>
 556:	f8 2e       	mov	r15, r24
 558:	81 11       	cpse	r24, r1
 55a:	15 c0       	rjmp	.+42     	; 0x586 <i2c_writeReg+0x48>

	i2c_write(regaddr);
 55c:	8c 2f       	mov	r24, r28
 55e:	0e 94 77 02 	call	0x4ee	; 0x4ee <i2c_write>

	for (uint16_t i = 0; i < length; i++)
 562:	01 15       	cp	r16, r1
 564:	11 05       	cpc	r17, r1
 566:	59 f0       	breq	.+22     	; 0x57e <i2c_writeReg+0x40>
 568:	e6 01       	movw	r28, r12
 56a:	0c 0d       	add	r16, r12
 56c:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 56e:	89 91       	ld	r24, Y+
 570:	0e 94 77 02 	call	0x4ee	; 0x4ee <i2c_write>
 574:	81 11       	cpse	r24, r1
 576:	0a c0       	rjmp	.+20     	; 0x58c <i2c_writeReg+0x4e>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
 578:	c0 17       	cp	r28, r16
 57a:	d1 07       	cpc	r29, r17
 57c:	c1 f7       	brne	.-16     	; 0x56e <i2c_writeReg+0x30>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 57e:	84 e9       	ldi	r24, 0x94	; 148
 580:	80 93 bc 00 	sts	0x00BC, r24
 584:	05 c0       	rjmp	.+10     	; 0x590 <i2c_writeReg+0x52>
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
 586:	ff 24       	eor	r15, r15
 588:	f3 94       	inc	r15
 58a:	02 c0       	rjmp	.+4      	; 0x590 <i2c_writeReg+0x52>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 58c:	ff 24       	eor	r15, r15
 58e:	f3 94       	inc	r15
	}

	i2c_stop();

	return 0;
}
 590:	8f 2d       	mov	r24, r15
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	ff 90       	pop	r15
 59c:	df 90       	pop	r13
 59e:	cf 90       	pop	r12
 5a0:	08 95       	ret

000005a2 <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 5a2:	af 92       	push	r10
 5a4:	bf 92       	push	r11
 5a6:	df 92       	push	r13
 5a8:	ef 92       	push	r14
 5aa:	ff 92       	push	r15
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	18 2f       	mov	r17, r24
 5b6:	06 2f       	mov	r16, r22
 5b8:	5a 01       	movw	r10, r20
 5ba:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
 5bc:	0e 94 52 02 	call	0x4a4	; 0x4a4 <i2c_start>
 5c0:	81 11       	cpse	r24, r1
 5c2:	22 c0       	rjmp	.+68     	; 0x608 <i2c_readReg+0x66>

	i2c_write(regaddr);
 5c4:	80 2f       	mov	r24, r16
 5c6:	0e 94 77 02 	call	0x4ee	; 0x4ee <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 5ca:	81 2f       	mov	r24, r17
 5cc:	81 60       	ori	r24, 0x01	; 1
 5ce:	0e 94 52 02 	call	0x4a4	; 0x4a4 <i2c_start>
 5d2:	d8 2e       	mov	r13, r24
 5d4:	81 11       	cpse	r24, r1
 5d6:	1b c0       	rjmp	.+54     	; 0x60e <i2c_readReg+0x6c>

	for (uint16_t i = 0; i < (length-1); i++)
 5d8:	8e 01       	movw	r16, r28
 5da:	01 50       	subi	r16, 0x01	; 1
 5dc:	11 09       	sbc	r17, r1
 5de:	51 f0       	breq	.+20     	; 0x5f4 <i2c_readReg+0x52>
 5e0:	e5 01       	movw	r28, r10
 5e2:	75 01       	movw	r14, r10
 5e4:	e0 0e       	add	r14, r16
 5e6:	f1 1e       	adc	r15, r17
	{
		data[i] = i2c_read_ack();
 5e8:	0e 94 89 02 	call	0x512	; 0x512 <i2c_read_ack>
 5ec:	89 93       	st	Y+, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
 5ee:	ce 15       	cp	r28, r14
 5f0:	df 05       	cpc	r29, r15
 5f2:	d1 f7       	brne	.-12     	; 0x5e8 <i2c_readReg+0x46>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 5f4:	e5 01       	movw	r28, r10
 5f6:	c0 0f       	add	r28, r16
 5f8:	d1 1f       	adc	r29, r17
 5fa:	0e 94 94 02 	call	0x528	; 0x528 <i2c_read_nack>
 5fe:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 600:	84 e9       	ldi	r24, 0x94	; 148
 602:	80 93 bc 00 	sts	0x00BC, r24
 606:	05 c0       	rjmp	.+10     	; 0x612 <i2c_readReg+0x70>
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
 608:	dd 24       	eor	r13, r13
 60a:	d3 94       	inc	r13
 60c:	02 c0       	rjmp	.+4      	; 0x612 <i2c_readReg+0x70>

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
 60e:	dd 24       	eor	r13, r13
 610:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 612:	8d 2d       	mov	r24, r13
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	1f 91       	pop	r17
 61a:	0f 91       	pop	r16
 61c:	ff 90       	pop	r15
 61e:	ef 90       	pop	r14
 620:	df 90       	pop	r13
 622:	bf 90       	pop	r11
 624:	af 90       	pop	r10
 626:	08 95       	ret

00000628 <statusLED>:
}

void statusLED(uint8_t status)
{
	//DDRD |= (1<<DDD3);
	if (status) {
 628:	88 23       	and	r24, r24
 62a:	11 f0       	breq	.+4      	; 0x630 <statusLED+0x8>
		PORTD |= (1<<PORTD3);
 62c:	5b 9a       	sbi	0x0b, 3	; 11
 62e:	08 95       	ret
	}
	else {
		PORTD &= ~(1<<PORTD3);
 630:	5b 98       	cbi	0x0b, 3	; 11
 632:	08 95       	ret

00000634 <main>:
#include "i2c_master.h"

void statusLED(uint8_t status);

int main(void)
{
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	cd b7       	in	r28, 0x3d	; 61
 63a:	de b7       	in	r29, 0x3e	; 62
 63c:	ec 97       	sbiw	r28, 0x3c	; 60
 63e:	0f b6       	in	r0, 0x3f	; 63
 640:	f8 94       	cli
 642:	de bf       	out	0x3e, r29	; 62
 644:	0f be       	out	0x3f, r0	; 63
 646:	cd bf       	out	0x3d, r28	; 61
	uint8_t timing_bit = 0;
	uint16_t gyr[6];
	char gyrX_str[16], gyrY_str[16], gyrZ_str[16];
	uint8_t scale_selector = 1;
	
	DDRD |= (1<<DDD3);
 648:	53 9a       	sbi	0x0a, 3	; 10
	
	initUSART();
 64a:	0e 94 a1 03 	call	0x742	; 0x742 <initUSART>
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	80 e8       	ldi	r24, 0x80	; 128
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	f8 94       	cli
 656:	80 93 61 00 	sts	0x0061, r24
 65a:	90 93 61 00 	sts	0x0061, r25
 65e:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(clock_div_1); // set clock to 16MHz
	MPU6050_init();
 660:	0e 94 3f 02 	call	0x47e	; 0x47e <MPU6050_init>
	0 - 250 deg/s, 131 LSB/(deg/s)
	1 - 500 deg/s, 65.5 LSB/(deg/s)
	2 - 1000 deg/s, 32.8 LSB/(deg/s)
	3 - 2000 deg/s, 16.4 LSB/(deg/s)
	*/
	MPU6050_set_gyroFS(scale_selector);
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	0e 94 04 01 	call	0x208	; 0x208 <MPU6050_set_gyroFS>
	
	if (MPU6050_test_I2C()) {
 66a:	0e 94 4b 00 	call	0x96	; 0x96 <MPU6050_test_I2C>
 66e:	88 23       	and	r24, r24
 670:	59 f0       	breq	.+22     	; 0x688 <main+0x54>
		printLine("=== IMU working properly ===");
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	91 e0       	ldi	r25, 0x01	; 1
 676:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <printLine>
		statusLED(1);
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	0e 94 14 03 	call	0x628	; 0x628 <statusLED>

void statusLED(uint8_t status);

int main(void)
{
	uint8_t timing_bit = 0;
 680:	10 e0       	ldi	r17, 0x00	; 0
		itoa(gyr[5],gyrZ_str,10);
		printString(gyrX_str); printString("_");
		printString(gyrY_str); printString("_");
		printLine(gyrZ_str);
		_delay_ms(10);
		timing_bit = !timing_bit;
 682:	01 e0       	ldi	r16, 0x01	; 1
 684:	f1 2c       	mov	r15, r1
 686:	20 c0       	rjmp	.+64     	; 0x6c8 <main+0x94>
	if (MPU6050_test_I2C()) {
		printLine("=== IMU working properly ===");
		statusLED(1);
	}
	else {
		statusLED(1);
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	0e 94 14 03 	call	0x628	; 0x628 <statusLED>
		printLine("=== IMU ERROR ===");
 68e:	8d e1       	ldi	r24, 0x1D	; 29
 690:	91 e0       	ldi	r25, 0x01	; 1
 692:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <printLine>
		while(1){
			statusLED(0);
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	0e 94 14 03 	call	0x628	; 0x628 <statusLED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 69c:	2f ef       	ldi	r18, 0xFF	; 255
 69e:	80 e7       	ldi	r24, 0x70	; 112
 6a0:	92 e0       	ldi	r25, 0x02	; 2
 6a2:	21 50       	subi	r18, 0x01	; 1
 6a4:	80 40       	sbci	r24, 0x00	; 0
 6a6:	90 40       	sbci	r25, 0x00	; 0
 6a8:	e1 f7       	brne	.-8      	; 0x6a2 <main+0x6e>
 6aa:	00 c0       	rjmp	.+0      	; 0x6ac <main+0x78>
 6ac:	00 00       	nop
			_delay_ms(50);
			statusLED(1);
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	0e 94 14 03 	call	0x628	; 0x628 <statusLED>
 6b4:	2f ef       	ldi	r18, 0xFF	; 255
 6b6:	80 e7       	ldi	r24, 0x70	; 112
 6b8:	92 e0       	ldi	r25, 0x02	; 2
 6ba:	21 50       	subi	r18, 0x01	; 1
 6bc:	80 40       	sbci	r24, 0x00	; 0
 6be:	90 40       	sbci	r25, 0x00	; 0
 6c0:	e1 f7       	brne	.-8      	; 0x6ba <main+0x86>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <main+0x90>
 6c4:	00 00       	nop
 6c6:	e7 cf       	rjmp	.-50     	; 0x696 <main+0x62>
	
    while (1) 
    {
		//MPU6050_get_gyro(gyr);
		//MPU6050_get_accel(gyr);
		MPU6050_get_motion(gyr);
 6c8:	ce 01       	movw	r24, r28
 6ca:	01 96       	adiw	r24, 0x01	; 1
 6cc:	0e 94 63 00 	call	0xc6	; 0xc6 <MPU6050_get_motion>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 6d0:	4a e0       	ldi	r20, 0x0A	; 10
 6d2:	be 01       	movw	r22, r28
 6d4:	63 5f       	subi	r22, 0xF3	; 243
 6d6:	7f 4f       	sbci	r23, 0xFF	; 255
 6d8:	8f 81       	ldd	r24, Y+7	; 0x07
 6da:	98 85       	ldd	r25, Y+8	; 0x08
 6dc:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__itoa_ncheck>
 6e0:	4a e0       	ldi	r20, 0x0A	; 10
 6e2:	be 01       	movw	r22, r28
 6e4:	63 5e       	subi	r22, 0xE3	; 227
 6e6:	7f 4f       	sbci	r23, 0xFF	; 255
 6e8:	89 85       	ldd	r24, Y+9	; 0x09
 6ea:	9a 85       	ldd	r25, Y+10	; 0x0a
 6ec:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__itoa_ncheck>
 6f0:	4a e0       	ldi	r20, 0x0A	; 10
 6f2:	be 01       	movw	r22, r28
 6f4:	63 5d       	subi	r22, 0xD3	; 211
 6f6:	7f 4f       	sbci	r23, 0xFF	; 255
 6f8:	8b 85       	ldd	r24, Y+11	; 0x0b
 6fa:	9c 85       	ldd	r25, Y+12	; 0x0c
 6fc:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__itoa_ncheck>
		itoa(gyr[3],gyrX_str,10);
		itoa(gyr[4],gyrY_str,10);
		itoa(gyr[5],gyrZ_str,10);
		printString(gyrX_str); printString("_");
 700:	ce 01       	movw	r24, r28
 702:	0d 96       	adiw	r24, 0x0d	; 13
 704:	0e 94 ba 03 	call	0x774	; 0x774 <printString>
 708:	8f e2       	ldi	r24, 0x2F	; 47
 70a:	91 e0       	ldi	r25, 0x01	; 1
 70c:	0e 94 ba 03 	call	0x774	; 0x774 <printString>
		printString(gyrY_str); printString("_");
 710:	ce 01       	movw	r24, r28
 712:	4d 96       	adiw	r24, 0x1d	; 29
 714:	0e 94 ba 03 	call	0x774	; 0x774 <printString>
 718:	8f e2       	ldi	r24, 0x2F	; 47
 71a:	91 e0       	ldi	r25, 0x01	; 1
 71c:	0e 94 ba 03 	call	0x774	; 0x774 <printString>
		printLine(gyrZ_str);
 720:	ce 01       	movw	r24, r28
 722:	8d 96       	adiw	r24, 0x2d	; 45
 724:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <printLine>
 728:	8f e3       	ldi	r24, 0x3F	; 63
 72a:	9c e9       	ldi	r25, 0x9C	; 156
 72c:	01 97       	sbiw	r24, 0x01	; 1
 72e:	f1 f7       	brne	.-4      	; 0x72c <main+0xf8>
 730:	00 c0       	rjmp	.+0      	; 0x732 <main+0xfe>
 732:	00 00       	nop
		_delay_ms(10);
		timing_bit = !timing_bit;
 734:	80 2f       	mov	r24, r16
 736:	11 11       	cpse	r17, r1
 738:	8f 2d       	mov	r24, r15
 73a:	18 2f       	mov	r17, r24
		statusLED(timing_bit);
 73c:	0e 94 14 03 	call	0x628	; 0x628 <statusLED>
    }
 740:	c3 cf       	rjmp	.-122    	; 0x6c8 <main+0x94>

00000742 <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 742:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
 746:	80 e1       	ldi	r24, 0x10	; 16
 748:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
 74c:	e0 ec       	ldi	r30, 0xC0	; 192
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	82 60       	ori	r24, 0x02	; 2
 754:	80 83       	st	Z, r24
#else
  UCSR0A &= ~(1 << U2X0);
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 756:	88 e1       	ldi	r24, 0x18	; 24
 758:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 75c:	86 e0       	ldi	r24, 0x06	; 6
 75e:	80 93 c2 00 	sts	0x00C2, r24
 762:	08 95       	ret

00000764 <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 764:	e0 ec       	ldi	r30, 0xC0	; 192
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	90 81       	ld	r25, Z
 76a:	95 ff       	sbrs	r25, 5
 76c:	fd cf       	rjmp	.-6      	; 0x768 <transmitByte+0x4>
  UDR0 = data;                                            /* send data */
 76e:	80 93 c6 00 	sts	0x00C6, r24
 772:	08 95       	ret

00000774 <printString>:
}


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 774:	0f 93       	push	r16
 776:	1f 93       	push	r17
 778:	cf 93       	push	r28
 77a:	fc 01       	movw	r30, r24
  uint8_t i = 0;
  while (myString[i]) {
 77c:	80 81       	ld	r24, Z
 77e:	88 23       	and	r24, r24
 780:	59 f0       	breq	.+22     	; 0x798 <printString+0x24>
 782:	8f 01       	movw	r16, r30
 784:	c0 e0       	ldi	r28, 0x00	; 0
    transmitByte(myString[i]);
 786:	0e 94 b2 03 	call	0x764	; 0x764 <transmitByte>
    i++;
 78a:	cf 5f       	subi	r28, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 78c:	f8 01       	movw	r30, r16
 78e:	ec 0f       	add	r30, r28
 790:	f1 1d       	adc	r31, r1
 792:	80 81       	ld	r24, Z
 794:	81 11       	cpse	r24, r1
 796:	f7 cf       	rjmp	.-18     	; 0x786 <printString+0x12>
    transmitByte(myString[i]);
    i++;
  }
}
 798:	cf 91       	pop	r28
 79a:	1f 91       	pop	r17
 79c:	0f 91       	pop	r16
 79e:	08 95       	ret

000007a0 <printLine>:

void printLine(const char myString[]) {
 7a0:	0f 93       	push	r16
 7a2:	1f 93       	push	r17
 7a4:	cf 93       	push	r28
 7a6:	8c 01       	movw	r16, r24
	uint8_t i = 0;
	while (myString[i]) {
 7a8:	fc 01       	movw	r30, r24
 7aa:	80 81       	ld	r24, Z
 7ac:	88 23       	and	r24, r24
 7ae:	51 f0       	breq	.+20     	; 0x7c4 <printLine+0x24>
 7b0:	c0 e0       	ldi	r28, 0x00	; 0
		transmitByte(myString[i]);
 7b2:	0e 94 b2 03 	call	0x764	; 0x764 <transmitByte>
		i++;
 7b6:	cf 5f       	subi	r28, 0xFF	; 255
  }
}

void printLine(const char myString[]) {
	uint8_t i = 0;
	while (myString[i]) {
 7b8:	f8 01       	movw	r30, r16
 7ba:	ec 0f       	add	r30, r28
 7bc:	f1 1d       	adc	r31, r1
 7be:	80 81       	ld	r24, Z
 7c0:	81 11       	cpse	r24, r1
 7c2:	f7 cf       	rjmp	.-18     	; 0x7b2 <printLine+0x12>
		transmitByte(myString[i]);
		i++;
	}
	transmitByte(10);
 7c4:	8a e0       	ldi	r24, 0x0A	; 10
 7c6:	0e 94 b2 03 	call	0x764	; 0x764 <transmitByte>
}
 7ca:	cf 91       	pop	r28
 7cc:	1f 91       	pop	r17
 7ce:	0f 91       	pop	r16
 7d0:	08 95       	ret

000007d2 <__itoa_ncheck>:
 7d2:	bb 27       	eor	r27, r27
 7d4:	4a 30       	cpi	r20, 0x0A	; 10
 7d6:	31 f4       	brne	.+12     	; 0x7e4 <__itoa_ncheck+0x12>
 7d8:	99 23       	and	r25, r25
 7da:	22 f4       	brpl	.+8      	; 0x7e4 <__itoa_ncheck+0x12>
 7dc:	bd e2       	ldi	r27, 0x2D	; 45
 7de:	90 95       	com	r25
 7e0:	81 95       	neg	r24
 7e2:	9f 4f       	sbci	r25, 0xFF	; 255
 7e4:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__utoa_common>

000007e8 <__utoa_ncheck>:
 7e8:	bb 27       	eor	r27, r27

000007ea <__utoa_common>:
 7ea:	fb 01       	movw	r30, r22
 7ec:	55 27       	eor	r21, r21
 7ee:	aa 27       	eor	r26, r26
 7f0:	88 0f       	add	r24, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	aa 1f       	adc	r26, r26
 7f6:	a4 17       	cp	r26, r20
 7f8:	10 f0       	brcs	.+4      	; 0x7fe <__utoa_common+0x14>
 7fa:	a4 1b       	sub	r26, r20
 7fc:	83 95       	inc	r24
 7fe:	50 51       	subi	r21, 0x10	; 16
 800:	b9 f7       	brne	.-18     	; 0x7f0 <__utoa_common+0x6>
 802:	a0 5d       	subi	r26, 0xD0	; 208
 804:	aa 33       	cpi	r26, 0x3A	; 58
 806:	08 f0       	brcs	.+2      	; 0x80a <__utoa_common+0x20>
 808:	a9 5d       	subi	r26, 0xD9	; 217
 80a:	a1 93       	st	Z+, r26
 80c:	00 97       	sbiw	r24, 0x00	; 0
 80e:	79 f7       	brne	.-34     	; 0x7ee <__utoa_common+0x4>
 810:	b1 11       	cpse	r27, r1
 812:	b1 93       	st	Z+, r27
 814:	11 92       	st	Z+, r1
 816:	cb 01       	movw	r24, r22
 818:	0c 94 0e 04 	jmp	0x81c	; 0x81c <strrev>

0000081c <strrev>:
 81c:	dc 01       	movw	r26, r24
 81e:	fc 01       	movw	r30, r24
 820:	67 2f       	mov	r22, r23
 822:	71 91       	ld	r23, Z+
 824:	77 23       	and	r23, r23
 826:	e1 f7       	brne	.-8      	; 0x820 <strrev+0x4>
 828:	32 97       	sbiw	r30, 0x02	; 2
 82a:	04 c0       	rjmp	.+8      	; 0x834 <strrev+0x18>
 82c:	7c 91       	ld	r23, X
 82e:	6d 93       	st	X+, r22
 830:	70 83       	st	Z, r23
 832:	62 91       	ld	r22, -Z
 834:	ae 17       	cp	r26, r30
 836:	bf 07       	cpc	r27, r31
 838:	c8 f3       	brcs	.-14     	; 0x82c <strrev+0x10>
 83a:	08 95       	ret

0000083c <_exit>:
 83c:	f8 94       	cli

0000083e <__stop_program>:
 83e:	ff cf       	rjmp	.-2      	; 0x83e <__stop_program>
