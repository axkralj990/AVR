
AK_MPU_test_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00000af0  00000b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000be8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002026  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e2  00000000  00000000  00002dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000809  00000000  00000000  000035b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000534  00000000  00000000  00003dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000064f  00000000  00000000  000042f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001772  00000000  00000000  00004947  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  000060b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 35       	cpi	r26, 0x54	; 84
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 34 04 	call	0x868	; 0x868 <main>
  8e:	0c 94 76 05 	jmp	0xaec	; 0xaec <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <MPU6050_test_I2C>:
	long ac_bias[3] = {0, 0, 0};
	MPU6050_set_accelFS(2); // set to 8G range
	
	for (uint16_t i = 0; i < 1000; i++) {
		MPU6050_get_accel(accel);
		for (uint8_t j = 0; j < 3; j++) {
  96:	cf 93       	push	r28
void MPU6050_auto_set_accel_bias() {
	int16_t accel[3];
	long ac_bias[3] = {0, 0, 0};
	MPU6050_set_accelFS(2); // set to 8G range
	
	for (uint16_t i = 0; i < 1000; i++) {
  98:	df 93       	push	r29
			ac_bias[j] += accel[j];
		}
	}
	
	for (uint8_t i = 0; i < 3; i++) {
		ac_bias[i] /= -1000;
  9a:	1f 92       	push	r1
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	19 82       	std	Y+1, r1	; 0x01
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	ae 01       	movw	r20, r28
  a8:	4f 5f       	subi	r20, 0xFF	; 255
  aa:	5f 4f       	sbci	r21, 0xFF	; 255
  ac:	65 e7       	ldi	r22, 0x75	; 117
  ae:	80 ed       	ldi	r24, 0xD0	; 208
  b0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <i2c_readReg>
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	99 81       	ldd	r25, Y+1	; 0x01
  b8:	98 36       	cpi	r25, 0x68	; 104
  ba:	09 f0       	breq	.+2      	; 0xbe <MPU6050_test_I2C+0x28>
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0f 90       	pop	r0
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <MPU6050_get_gyro>:
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	00 d0       	rcall	.+0      	; 0xd0 <MPU6050_get_gyro+0xa>
  d0:	00 d0       	rcall	.+0      	; 0xd2 <MPU6050_get_gyro+0xc>
  d2:	00 d0       	rcall	.+0      	; 0xd4 <MPU6050_get_gyro+0xe>
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	8c 01       	movw	r16, r24
  da:	26 e0       	ldi	r18, 0x06	; 6
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	ae 01       	movw	r20, r28
  e0:	4f 5f       	subi	r20, 0xFF	; 255
  e2:	5f 4f       	sbci	r21, 0xFF	; 255
  e4:	63 e4       	ldi	r22, 0x43	; 67
  e6:	80 ed       	ldi	r24, 0xD0	; 208
  e8:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <i2c_readReg>
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	98 2f       	mov	r25, r24
  f2:	88 27       	eor	r24, r24
	}
	
	MPU6050_set_accel_bias_reg(ac_bias);
  f4:	2a 81       	ldd	r18, Y+2	; 0x02
  f6:	82 2b       	or	r24, r18
  f8:	f8 01       	movw	r30, r16
  fa:	91 83       	std	Z+1, r25	; 0x01
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  fc:	80 83       	st	Z, r24
  fe:	2b 81       	ldd	r18, Y+3	; 0x03
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	32 2f       	mov	r19, r18
 104:	22 27       	eor	r18, r18
 106:	8c 81       	ldd	r24, Y+4	; 0x04
 108:	28 2b       	or	r18, r24
 10a:	33 83       	std	Z+3, r19	; 0x03
 10c:	22 83       	std	Z+2, r18	; 0x02
 10e:	2d 81       	ldd	r18, Y+5	; 0x05
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	32 2f       	mov	r19, r18
 114:	22 27       	eor	r18, r18
 116:	8e 81       	ldd	r24, Y+6	; 0x06
 118:	28 2b       	or	r18, r24
 11a:	35 83       	std	Z+5, r19	; 0x05
 11c:	24 83       	std	Z+4, r18	; 0x04
 11e:	26 96       	adiw	r28, 0x06	; 6
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
 12a:	df 91       	pop	r29
	
	char gyrX_str[16], gyrY_str[16], gyrZ_str[16];
	itoa(ac_bias[0],gyrX_str,10);
	itoa(ac_bias[1],gyrY_str,10);
	itoa(ac_bias[2],gyrZ_str,10);
	printString(gyrX_str); printString("_");
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	08 95       	ret

00000134 <MPU6050_set_sleepMode>:
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	00 d0       	rcall	.+0      	; 0x13a <MPU6050_set_sleepMode+0x6>
 13a:	cd b7       	in	r28, 0x3d	; 61
	printString(gyrY_str); printString("_");
 13c:	de b7       	in	r29, 0x3e	; 62
 13e:	88 23       	and	r24, r24
 140:	c1 f0       	breq	.+48     	; 0x172 <MPU6050_set_sleepMode+0x3e>
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	61 f5       	brne	.+88     	; 0x19e <MPU6050_set_sleepMode+0x6a>
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	ae 01       	movw	r20, r28
	printLine(gyrZ_str);
 14c:	4f 5f       	subi	r20, 0xFF	; 255
 14e:	5f 4f       	sbci	r21, 0xFF	; 255
 150:	6b e6       	ldi	r22, 0x6B	; 107
 152:	80 ed       	ldi	r24, 0xD0	; 208
}
 154:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <i2c_readReg>
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	80 64       	ori	r24, 0x40	; 64
 15c:	8a 83       	std	Y+2, r24	; 0x02
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	ae 01       	movw	r20, r28
 164:	4e 5f       	subi	r20, 0xFE	; 254
 166:	5f 4f       	sbci	r21, 0xFF	; 255
 168:	6b e6       	ldi	r22, 0x6B	; 107
 16a:	80 ed       	ldi	r24, 0xD0	; 208
 16c:	0e 94 b9 03 	call	0x772	; 0x772 <i2c_writeReg>
 170:	2b c0       	rjmp	.+86     	; 0x1c8 <MPU6050_set_sleepMode+0x94>
 172:	21 e0       	ldi	r18, 0x01	; 1
				power_reg_write = power_reg_read & ~(0b01000000);
				power_reg_write |= (0b01000000);
				i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
				break;
		case 0:
				i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	ae 01       	movw	r20, r28
 178:	4f 5f       	subi	r20, 0xFF	; 255
 17a:	5f 4f       	sbci	r21, 0xFF	; 255
 17c:	6b e6       	ldi	r22, 0x6B	; 107
 17e:	80 ed       	ldi	r24, 0xD0	; 208
 180:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <i2c_readReg>
				power_reg_write = power_reg_read & ~(0b01000000);
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	8f 7b       	andi	r24, 0xBF	; 191
 188:	8a 83       	std	Y+2, r24	; 0x02
				power_reg_write |= (0b00000000);
				i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	ae 01       	movw	r20, r28
 190:	4e 5f       	subi	r20, 0xFE	; 254
 192:	5f 4f       	sbci	r21, 0xFF	; 255
 194:	6b e6       	ldi	r22, 0x6B	; 107
 196:	80 ed       	ldi	r24, 0xD0	; 208
 198:	0e 94 b9 03 	call	0x772	; 0x772 <i2c_writeReg>
				break;
 19c:	15 c0       	rjmp	.+42     	; 0x1c8 <MPU6050_set_sleepMode+0x94>
		default:
				i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	ae 01       	movw	r20, r28
 1a4:	4f 5f       	subi	r20, 0xFF	; 255
 1a6:	5f 4f       	sbci	r21, 0xFF	; 255
 1a8:	6b e6       	ldi	r22, 0x6B	; 107
 1aa:	80 ed       	ldi	r24, 0xD0	; 208
 1ac:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <i2c_readReg>
				power_reg_write = power_reg_read & ~(0b01000000);
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
				power_reg_write |= (0b01000000);
 1b2:	80 64       	ori	r24, 0x40	; 64
 1b4:	8a 83       	std	Y+2, r24	; 0x02
				i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	ae 01       	movw	r20, r28
 1bc:	4e 5f       	subi	r20, 0xFE	; 254
 1be:	5f 4f       	sbci	r21, 0xFF	; 255
 1c0:	6b e6       	ldi	r22, 0x6B	; 107
 1c2:	80 ed       	ldi	r24, 0xD0	; 208
 1c4:	0e 94 b9 03 	call	0x772	; 0x772 <i2c_writeReg>
				break;
	}
}
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <MPU6050_set_gyroFS>:

void MPU6050_set_gyroFS(uint8_t gyroFS)
{
	switch(gyroFS) {
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	79 f0       	breq	.+30     	; 0x1f4 <MPU6050_set_gyroFS+0x22>
 1d6:	28 f0       	brcs	.+10     	; 0x1e2 <MPU6050_set_gyroFS+0x10>
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	a9 f0       	breq	.+42     	; 0x206 <MPU6050_set_gyroFS+0x34>
 1dc:	83 30       	cpi	r24, 0x03	; 3
 1de:	e1 f0       	breq	.+56     	; 0x218 <MPU6050_set_gyroFS+0x46>
 1e0:	24 c0       	rjmp	.+72     	; 0x22a <MPU6050_set_gyroFS+0x58>
		case 0:
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG,(uint8_t*)0b00000000,1);
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	40 e0       	ldi	r20, 0x00	; 0
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	6b e1       	ldi	r22, 0x1B	; 27
 1ec:	80 ed       	ldi	r24, 0xD0	; 208
 1ee:	0e 94 b9 03 	call	0x772	; 0x772 <i2c_writeReg>
			break;
 1f2:	08 95       	ret
		case 1:
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG,(uint8_t*)0b00001000,1);
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	48 e0       	ldi	r20, 0x08	; 8
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	6b e1       	ldi	r22, 0x1B	; 27
 1fe:	80 ed       	ldi	r24, 0xD0	; 208
 200:	0e 94 b9 03 	call	0x772	; 0x772 <i2c_writeReg>
			break;
 204:	08 95       	ret
		case 2:
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG,(uint8_t*)0b00010000,1);
 206:	21 e0       	ldi	r18, 0x01	; 1
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	40 e1       	ldi	r20, 0x10	; 16
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	6b e1       	ldi	r22, 0x1B	; 27
 210:	80 ed       	ldi	r24, 0xD0	; 208
 212:	0e 94 b9 03 	call	0x772	; 0x772 <i2c_writeReg>
			break;
 216:	08 95       	ret
		case 3:
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG,(uint8_t*)0b00011000,1);
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	48 e1       	ldi	r20, 0x18	; 24
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	6b e1       	ldi	r22, 0x1B	; 27
 222:	80 ed       	ldi	r24, 0xD0	; 208
 224:	0e 94 b9 03 	call	0x772	; 0x772 <i2c_writeReg>
			break;
 228:	08 95       	ret
		default:
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG,(uint8_t*)0b00000000,1);
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	6b e1       	ldi	r22, 0x1B	; 27
 234:	80 ed       	ldi	r24, 0xD0	; 208
 236:	0e 94 b9 03 	call	0x772	; 0x772 <i2c_writeReg>
 23a:	08 95       	ret

0000023c <MPU6050_set_accelFS>:
			break;
	}
}

void MPU6050_set_accelFS(uint8_t accelFS)
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	00 d0       	rcall	.+0      	; 0x242 <MPU6050_set_accelFS+0x6>
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
	uint8_t accel_config_read, accel_config_write;
	
	switch(accelFS) {
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	e9 f0       	breq	.+58     	; 0x284 <MPU6050_set_accelFS+0x48>
 24a:	30 f0       	brcs	.+12     	; 0x258 <MPU6050_set_accelFS+0x1c>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	89 f1       	breq	.+98     	; 0x2b2 <MPU6050_set_accelFS+0x76>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	09 f4       	brne	.+2      	; 0x256 <MPU6050_set_accelFS+0x1a>
 254:	45 c0       	rjmp	.+138    	; 0x2e0 <MPU6050_set_accelFS+0xa4>
 256:	5a c0       	rjmp	.+180    	; 0x30c <MPU6050_set_accelFS+0xd0>
		case 0:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	ae 01       	movw	r20, r28
 25e:	4f 5f       	subi	r20, 0xFF	; 255
 260:	5f 4f       	sbci	r21, 0xFF	; 255
 262:	6c e1       	ldi	r22, 0x1C	; 28
 264:	80 ed       	ldi	r24, 0xD0	; 208
 266:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	87 7e       	andi	r24, 0xE7	; 231
 26e:	8a 83       	std	Y+2, r24	; 0x02
			accel_config_write |= (0b00000000);
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	ae 01       	movw	r20, r28
 276:	4e 5f       	subi	r20, 0xFE	; 254
 278:	5f 4f       	sbci	r21, 0xFF	; 255
 27a:	6c e1       	ldi	r22, 0x1C	; 28
 27c:	80 ed       	ldi	r24, 0xD0	; 208
 27e:	0e 94 b9 03 	call	0x772	; 0x772 <i2c_writeReg>
			break;
 282:	59 c0       	rjmp	.+178    	; 0x336 <MPU6050_set_accelFS+0xfa>
		case 1:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	ae 01       	movw	r20, r28
 28a:	4f 5f       	subi	r20, 0xFF	; 255
 28c:	5f 4f       	sbci	r21, 0xFF	; 255
 28e:	6c e1       	ldi	r22, 0x1C	; 28
 290:	80 ed       	ldi	r24, 0xD0	; 208
 292:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 296:	89 81       	ldd	r24, Y+1	; 0x01
 298:	87 7e       	andi	r24, 0xE7	; 231
			accel_config_write |= (0b00001000);
 29a:	88 60       	ori	r24, 0x08	; 8
 29c:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	ae 01       	movw	r20, r28
 2a4:	4e 5f       	subi	r20, 0xFE	; 254
 2a6:	5f 4f       	sbci	r21, 0xFF	; 255
 2a8:	6c e1       	ldi	r22, 0x1C	; 28
 2aa:	80 ed       	ldi	r24, 0xD0	; 208
 2ac:	0e 94 b9 03 	call	0x772	; 0x772 <i2c_writeReg>
			break;
 2b0:	42 c0       	rjmp	.+132    	; 0x336 <MPU6050_set_accelFS+0xfa>
		case 2:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 2b2:	21 e0       	ldi	r18, 0x01	; 1
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	ae 01       	movw	r20, r28
 2b8:	4f 5f       	subi	r20, 0xFF	; 255
 2ba:	5f 4f       	sbci	r21, 0xFF	; 255
 2bc:	6c e1       	ldi	r22, 0x1C	; 28
 2be:	80 ed       	ldi	r24, 0xD0	; 208
 2c0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 2c4:	89 81       	ldd	r24, Y+1	; 0x01
 2c6:	87 7e       	andi	r24, 0xE7	; 231
			accel_config_write |= (0b00010000);
 2c8:	80 61       	ori	r24, 0x10	; 16
 2ca:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	ae 01       	movw	r20, r28
 2d2:	4e 5f       	subi	r20, 0xFE	; 254
 2d4:	5f 4f       	sbci	r21, 0xFF	; 255
 2d6:	6c e1       	ldi	r22, 0x1C	; 28
 2d8:	80 ed       	ldi	r24, 0xD0	; 208
 2da:	0e 94 b9 03 	call	0x772	; 0x772 <i2c_writeReg>
			break;
 2de:	2b c0       	rjmp	.+86     	; 0x336 <MPU6050_set_accelFS+0xfa>
		case 3:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 2e0:	21 e0       	ldi	r18, 0x01	; 1
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	ae 01       	movw	r20, r28
 2e6:	4f 5f       	subi	r20, 0xFF	; 255
 2e8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ea:	6c e1       	ldi	r22, 0x1C	; 28
 2ec:	80 ed       	ldi	r24, 0xD0	; 208
 2ee:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
			accel_config_write |= (0b00011000);
 2f4:	88 61       	ori	r24, 0x18	; 24
 2f6:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 2f8:	21 e0       	ldi	r18, 0x01	; 1
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	ae 01       	movw	r20, r28
 2fe:	4e 5f       	subi	r20, 0xFE	; 254
 300:	5f 4f       	sbci	r21, 0xFF	; 255
 302:	6c e1       	ldi	r22, 0x1C	; 28
 304:	80 ed       	ldi	r24, 0xD0	; 208
 306:	0e 94 b9 03 	call	0x772	; 0x772 <i2c_writeReg>
			break;
 30a:	15 c0       	rjmp	.+42     	; 0x336 <MPU6050_set_accelFS+0xfa>
		default:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 30c:	21 e0       	ldi	r18, 0x01	; 1
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	ae 01       	movw	r20, r28
 312:	4f 5f       	subi	r20, 0xFF	; 255
 314:	5f 4f       	sbci	r21, 0xFF	; 255
 316:	6c e1       	ldi	r22, 0x1C	; 28
 318:	80 ed       	ldi	r24, 0xD0	; 208
 31a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 31e:	89 81       	ldd	r24, Y+1	; 0x01
 320:	87 7e       	andi	r24, 0xE7	; 231
 322:	8a 83       	std	Y+2, r24	; 0x02
			accel_config_write |= (0b00000000);
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 324:	21 e0       	ldi	r18, 0x01	; 1
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	ae 01       	movw	r20, r28
 32a:	4e 5f       	subi	r20, 0xFE	; 254
 32c:	5f 4f       	sbci	r21, 0xFF	; 255
 32e:	6c e1       	ldi	r22, 0x1C	; 28
 330:	80 ed       	ldi	r24, 0xD0	; 208
 332:	0e 94 b9 03 	call	0x772	; 0x772 <i2c_writeReg>
			break;
	}
}
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <MPU6050_set_clockSource>:

void MPU6050_set_clockSource(uint8_t clockSource)
{
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	00 d0       	rcall	.+0      	; 0x346 <MPU6050_set_clockSource+0x6>
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
	uint8_t power_reg_read, power_reg_write;
	switch(clockSource) {
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	e9 f0       	breq	.+58     	; 0x388 <MPU6050_set_clockSource+0x48>
 34e:	30 f0       	brcs	.+12     	; 0x35c <MPU6050_set_clockSource+0x1c>
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	89 f1       	breq	.+98     	; 0x3b6 <MPU6050_set_clockSource+0x76>
 354:	83 30       	cpi	r24, 0x03	; 3
 356:	09 f4       	brne	.+2      	; 0x35a <MPU6050_set_clockSource+0x1a>
 358:	45 c0       	rjmp	.+138    	; 0x3e4 <MPU6050_set_clockSource+0xa4>
 35a:	5b c0       	rjmp	.+182    	; 0x412 <MPU6050_set_clockSource+0xd2>
		case 0:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 35c:	21 e0       	ldi	r18, 0x01	; 1
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	ae 01       	movw	r20, r28
 362:	4f 5f       	subi	r20, 0xFF	; 255
 364:	5f 4f       	sbci	r21, 0xFF	; 255
 366:	6b e6       	ldi	r22, 0x6B	; 107
 368:	80 ed       	ldi	r24, 0xD0	; 208
 36a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 36e:	89 81       	ldd	r24, Y+1	; 0x01
 370:	88 7f       	andi	r24, 0xF8	; 248
 372:	8a 83       	std	Y+2, r24	; 0x02
			power_reg_write |= (0b00000000);
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);;
 374:	21 e0       	ldi	r18, 0x01	; 1
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	ae 01       	movw	r20, r28
 37a:	4e 5f       	subi	r20, 0xFE	; 254
 37c:	5f 4f       	sbci	r21, 0xFF	; 255
 37e:	6b e6       	ldi	r22, 0x6B	; 107
 380:	80 ed       	ldi	r24, 0xD0	; 208
 382:	0e 94 b9 03 	call	0x772	; 0x772 <i2c_writeReg>
			break;
 386:	5b c0       	rjmp	.+182    	; 0x43e <MPU6050_set_clockSource+0xfe>
		case 1:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 388:	21 e0       	ldi	r18, 0x01	; 1
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	ae 01       	movw	r20, r28
 38e:	4f 5f       	subi	r20, 0xFF	; 255
 390:	5f 4f       	sbci	r21, 0xFF	; 255
 392:	6b e6       	ldi	r22, 0x6B	; 107
 394:	80 ed       	ldi	r24, 0xD0	; 208
 396:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000001);
 39e:	81 60       	ori	r24, 0x01	; 1
 3a0:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 3a2:	21 e0       	ldi	r18, 0x01	; 1
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	ae 01       	movw	r20, r28
 3a8:	4e 5f       	subi	r20, 0xFE	; 254
 3aa:	5f 4f       	sbci	r21, 0xFF	; 255
 3ac:	6b e6       	ldi	r22, 0x6B	; 107
 3ae:	80 ed       	ldi	r24, 0xD0	; 208
 3b0:	0e 94 b9 03 	call	0x772	; 0x772 <i2c_writeReg>
			break;
 3b4:	44 c0       	rjmp	.+136    	; 0x43e <MPU6050_set_clockSource+0xfe>
		case 2:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 3b6:	21 e0       	ldi	r18, 0x01	; 1
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	ae 01       	movw	r20, r28
 3bc:	4f 5f       	subi	r20, 0xFF	; 255
 3be:	5f 4f       	sbci	r21, 0xFF	; 255
 3c0:	6b e6       	ldi	r22, 0x6B	; 107
 3c2:	80 ed       	ldi	r24, 0xD0	; 208
 3c4:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000010);
 3cc:	82 60       	ori	r24, 0x02	; 2
 3ce:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 3d0:	21 e0       	ldi	r18, 0x01	; 1
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	ae 01       	movw	r20, r28
 3d6:	4e 5f       	subi	r20, 0xFE	; 254
 3d8:	5f 4f       	sbci	r21, 0xFF	; 255
 3da:	6b e6       	ldi	r22, 0x6B	; 107
 3dc:	80 ed       	ldi	r24, 0xD0	; 208
 3de:	0e 94 b9 03 	call	0x772	; 0x772 <i2c_writeReg>
			break;
 3e2:	2d c0       	rjmp	.+90     	; 0x43e <MPU6050_set_clockSource+0xfe>
		case 3:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 3e4:	21 e0       	ldi	r18, 0x01	; 1
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	ae 01       	movw	r20, r28
 3ea:	4f 5f       	subi	r20, 0xFF	; 255
 3ec:	5f 4f       	sbci	r21, 0xFF	; 255
 3ee:	6b e6       	ldi	r22, 0x6B	; 107
 3f0:	80 ed       	ldi	r24, 0xD0	; 208
 3f2:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000011);
 3fa:	83 60       	ori	r24, 0x03	; 3
 3fc:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 3fe:	21 e0       	ldi	r18, 0x01	; 1
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	ae 01       	movw	r20, r28
 404:	4e 5f       	subi	r20, 0xFE	; 254
 406:	5f 4f       	sbci	r21, 0xFF	; 255
 408:	6b e6       	ldi	r22, 0x6B	; 107
 40a:	80 ed       	ldi	r24, 0xD0	; 208
 40c:	0e 94 b9 03 	call	0x772	; 0x772 <i2c_writeReg>
			break;
 410:	16 c0       	rjmp	.+44     	; 0x43e <MPU6050_set_clockSource+0xfe>
		default:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 412:	21 e0       	ldi	r18, 0x01	; 1
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	ae 01       	movw	r20, r28
 418:	4f 5f       	subi	r20, 0xFF	; 255
 41a:	5f 4f       	sbci	r21, 0xFF	; 255
 41c:	6b e6       	ldi	r22, 0x6B	; 107
 41e:	80 ed       	ldi	r24, 0xD0	; 208
 420:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 424:	89 81       	ldd	r24, Y+1	; 0x01
 426:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000001);
 428:	81 60       	ori	r24, 0x01	; 1
 42a:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 42c:	21 e0       	ldi	r18, 0x01	; 1
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	ae 01       	movw	r20, r28
 432:	4e 5f       	subi	r20, 0xFE	; 254
 434:	5f 4f       	sbci	r21, 0xFF	; 255
 436:	6b e6       	ldi	r22, 0x6B	; 107
 438:	80 ed       	ldi	r24, 0xD0	; 208
 43a:	0e 94 b9 03 	call	0x772	; 0x772 <i2c_writeReg>
			break;
	}
}
 43e:	0f 90       	pop	r0
 440:	0f 90       	pop	r0
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <MPU6050_init>:
#include "USART.h"
#include <stdlib.h>

void MPU6050_init()
{
	i2c_init();
 448:	0e 94 68 03 	call	0x6d0	; 0x6d0 <i2c_init>
	MPU6050_set_clockSource(1);
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	0e 94 a0 01 	call	0x340	; 0x340 <MPU6050_set_clockSource>
	MPU6050_set_sleepMode(0);
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 9a 00 	call	0x134	; 0x134 <MPU6050_set_sleepMode>
	MPU6050_set_gyroFS(2);
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <MPU6050_set_gyroFS>
	MPU6050_set_accelFS(0);
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0e 94 1e 01 	call	0x23c	; 0x23c <MPU6050_set_accelFS>
 464:	08 95       	ret

00000466 <MPU6050_set_gyro_bias_reg>:
	
	i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_XA_OFFS_H, &data[0], 6);
}

void MPU6050_set_gyro_bias_reg(long *gyro_bias)
{
 466:	cf 92       	push	r12
 468:	df 92       	push	r13
 46a:	ef 92       	push	r14
 46c:	ff 92       	push	r15
 46e:	0f 93       	push	r16
 470:	1f 93       	push	r17
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	00 d0       	rcall	.+0      	; 0x478 <MPU6050_set_gyro_bias_reg+0x12>
 478:	00 d0       	rcall	.+0      	; 0x47a <MPU6050_set_gyro_bias_reg+0x14>
 47a:	00 d0       	rcall	.+0      	; 0x47c <MPU6050_set_gyro_bias_reg+0x16>
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
 480:	fc 01       	movw	r30, r24
	unsigned char data[6] = {0, 0, 0, 0, 0, 0};
 482:	ae 01       	movw	r20, r28
 484:	4f 5f       	subi	r20, 0xFF	; 255
 486:	5f 4f       	sbci	r21, 0xFF	; 255
 488:	86 e0       	ldi	r24, 0x06	; 6
 48a:	da 01       	movw	r26, r20
 48c:	1d 92       	st	X+, r1
 48e:	8a 95       	dec	r24
 490:	e9 f7       	brne	.-6      	; 0x48c <MPU6050_set_gyro_bias_reg+0x26>
	int i=0;
	for(i=0;i<3;i++) {
		gyro_bias[i]= (-gyro_bias[i]);
 492:	c0 80       	ld	r12, Z
 494:	d1 80       	ldd	r13, Z+1	; 0x01
 496:	e2 80       	ldd	r14, Z+2	; 0x02
 498:	f3 80       	ldd	r15, Z+3	; 0x03
 49a:	f0 94       	com	r15
 49c:	e0 94       	com	r14
 49e:	d0 94       	com	r13
 4a0:	c0 94       	com	r12
 4a2:	c1 1c       	adc	r12, r1
 4a4:	d1 1c       	adc	r13, r1
 4a6:	e1 1c       	adc	r14, r1
 4a8:	f1 1c       	adc	r15, r1
 4aa:	c0 82       	st	Z, r12
 4ac:	d1 82       	std	Z+1, r13	; 0x01
 4ae:	e2 82       	std	Z+2, r14	; 0x02
 4b0:	f3 82       	std	Z+3, r15	; 0x03
 4b2:	04 81       	ldd	r16, Z+4	; 0x04
 4b4:	15 81       	ldd	r17, Z+5	; 0x05
 4b6:	26 81       	ldd	r18, Z+6	; 0x06
 4b8:	37 81       	ldd	r19, Z+7	; 0x07
 4ba:	30 95       	com	r19
 4bc:	20 95       	com	r18
 4be:	10 95       	com	r17
 4c0:	01 95       	neg	r16
 4c2:	1f 4f       	sbci	r17, 0xFF	; 255
 4c4:	2f 4f       	sbci	r18, 0xFF	; 255
 4c6:	3f 4f       	sbci	r19, 0xFF	; 255
 4c8:	04 83       	std	Z+4, r16	; 0x04
 4ca:	15 83       	std	Z+5, r17	; 0x05
 4cc:	26 83       	std	Z+6, r18	; 0x06
 4ce:	37 83       	std	Z+7, r19	; 0x07
 4d0:	80 85       	ldd	r24, Z+8	; 0x08
 4d2:	91 85       	ldd	r25, Z+9	; 0x09
 4d4:	a2 85       	ldd	r26, Z+10	; 0x0a
 4d6:	b3 85       	ldd	r27, Z+11	; 0x0b
 4d8:	b0 95       	com	r27
 4da:	a0 95       	com	r26
 4dc:	90 95       	com	r25
 4de:	81 95       	neg	r24
 4e0:	9f 4f       	sbci	r25, 0xFF	; 255
 4e2:	af 4f       	sbci	r26, 0xFF	; 255
 4e4:	bf 4f       	sbci	r27, 0xFF	; 255
 4e6:	80 87       	std	Z+8, r24	; 0x08
 4e8:	91 87       	std	Z+9, r25	; 0x09
 4ea:	a2 87       	std	Z+10, r26	; 0x0a
 4ec:	b3 87       	std	Z+11, r27	; 0x0b
	}
	data[0] = (gyro_bias[0] >> 8) & 0xff;
 4ee:	d9 82       	std	Y+1, r13	; 0x01
	data[1] = (gyro_bias[0]) & 0xff;
 4f0:	ca 82       	std	Y+2, r12	; 0x02
	data[2] = (gyro_bias[1] >> 8) & 0xff;
 4f2:	1b 83       	std	Y+3, r17	; 0x03
	data[3] = (gyro_bias[1]) & 0xff;
 4f4:	0c 83       	std	Y+4, r16	; 0x04
	data[4] = (gyro_bias[2] >> 8) & 0xff;
 4f6:	9d 83       	std	Y+5, r25	; 0x05
	data[5] = (gyro_bias[2]) & 0xff;
 4f8:	8e 83       	std	Y+6, r24	; 0x06
	
	i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_XG_OFFS_USRH, &data[0], 6);
 4fa:	26 e0       	ldi	r18, 0x06	; 6
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	63 e1       	ldi	r22, 0x13	; 19
 500:	80 ed       	ldi	r24, 0xD0	; 208
 502:	0e 94 b9 03 	call	0x772	; 0x772 <i2c_writeReg>
}
 506:	26 96       	adiw	r28, 0x06	; 6
 508:	0f b6       	in	r0, 0x3f	; 63
 50a:	f8 94       	cli
 50c:	de bf       	out	0x3e, r29	; 62
 50e:	0f be       	out	0x3f, r0	; 63
 510:	cd bf       	out	0x3d, r28	; 61
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	1f 91       	pop	r17
 518:	0f 91       	pop	r16
 51a:	ff 90       	pop	r15
 51c:	ef 90       	pop	r14
 51e:	df 90       	pop	r13
 520:	cf 90       	pop	r12
 522:	08 95       	ret

00000524 <MPU6050_auto_set_gyro_bias>:
	printString(gyrX_str); printString("_");
	printString(gyrY_str); printString("_");
	printLine(gyrZ_str);
}

void MPU6050_auto_set_gyro_bias() {
 524:	ef 92       	push	r14
 526:	ff 92       	push	r15
 528:	0f 93       	push	r16
 52a:	1f 93       	push	r17
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	cd b7       	in	r28, 0x3d	; 61
 532:	de b7       	in	r29, 0x3e	; 62
 534:	c2 54       	subi	r28, 0x42	; 66
 536:	d1 09       	sbc	r29, r1
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
	int16_t gyro[3];
	long gy_bias[] = {0, 0, 0};
 542:	1f 82       	std	Y+7, r1	; 0x07
 544:	18 86       	std	Y+8, r1	; 0x08
 546:	19 86       	std	Y+9, r1	; 0x09
 548:	1a 86       	std	Y+10, r1	; 0x0a
 54a:	1b 86       	std	Y+11, r1	; 0x0b
 54c:	1c 86       	std	Y+12, r1	; 0x0c
 54e:	1d 86       	std	Y+13, r1	; 0x0d
 550:	1e 86       	std	Y+14, r1	; 0x0e
 552:	1f 86       	std	Y+15, r1	; 0x0f
 554:	18 8a       	std	Y+16, r1	; 0x10
 556:	19 8a       	std	Y+17, r1	; 0x11
 558:	1a 8a       	std	Y+18, r1	; 0x12
	MPU6050_set_gyro_bias_reg(gy_bias);
 55a:	ce 01       	movw	r24, r28
 55c:	07 96       	adiw	r24, 0x07	; 7
 55e:	0e 94 33 02 	call	0x466	; 0x466 <MPU6050_set_gyro_bias_reg>
	MPU6050_set_gyroFS(2); // set to +-1000dps range
 562:	82 e0       	ldi	r24, 0x02	; 2
 564:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <MPU6050_set_gyroFS>
 568:	e1 2c       	mov	r14, r1
 56a:	68 94       	set
 56c:	ff 24       	eor	r15, r15
 56e:	f2 f8       	bld	r15, 2
 570:	8e 01       	movw	r16, r28
 572:	0d 5e       	subi	r16, 0xED	; 237
 574:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for (uint16_t i = 0; i < 1024; i++) {
		MPU6050_get_gyro(gyro);
 576:	ce 01       	movw	r24, r28
 578:	01 96       	adiw	r24, 0x01	; 1
 57a:	0e 94 63 00 	call	0xc6	; 0xc6 <MPU6050_get_gyro>
 57e:	9e 01       	movw	r18, r28
 580:	2f 5f       	subi	r18, 0xFF	; 255
 582:	3f 4f       	sbci	r19, 0xFF	; 255
 584:	fe 01       	movw	r30, r28
 586:	37 96       	adiw	r30, 0x07	; 7
		for (uint8_t j = 0; j < 3; j++) {
			gy_bias[j] += gyro[j];
 588:	d9 01       	movw	r26, r18
 58a:	8d 91       	ld	r24, X+
 58c:	9d 91       	ld	r25, X+
 58e:	9d 01       	movw	r18, r26
 590:	09 2e       	mov	r0, r25
 592:	00 0c       	add	r0, r0
 594:	aa 0b       	sbc	r26, r26
 596:	bb 0b       	sbc	r27, r27
 598:	40 81       	ld	r20, Z
 59a:	51 81       	ldd	r21, Z+1	; 0x01
 59c:	62 81       	ldd	r22, Z+2	; 0x02
 59e:	73 81       	ldd	r23, Z+3	; 0x03
 5a0:	84 0f       	add	r24, r20
 5a2:	95 1f       	adc	r25, r21
 5a4:	a6 1f       	adc	r26, r22
 5a6:	b7 1f       	adc	r27, r23
 5a8:	81 93       	st	Z+, r24
 5aa:	91 93       	st	Z+, r25
 5ac:	a1 93       	st	Z+, r26
 5ae:	b1 93       	st	Z+, r27
	MPU6050_set_gyro_bias_reg(gy_bias);
	MPU6050_set_gyroFS(2); // set to +-1000dps range
	
	for (uint16_t i = 0; i < 1024; i++) {
		MPU6050_get_gyro(gyro);
		for (uint8_t j = 0; j < 3; j++) {
 5b0:	e0 17       	cp	r30, r16
 5b2:	f1 07       	cpc	r31, r17
 5b4:	49 f7       	brne	.-46     	; 0x588 <MPU6050_auto_set_gyro_bias+0x64>
 5b6:	b1 e0       	ldi	r27, 0x01	; 1
 5b8:	eb 1a       	sub	r14, r27
 5ba:	f1 08       	sbc	r15, r1
	int16_t gyro[3];
	long gy_bias[] = {0, 0, 0};
	MPU6050_set_gyro_bias_reg(gy_bias);
	MPU6050_set_gyroFS(2); // set to +-1000dps range
	
	for (uint16_t i = 0; i < 1024; i++) {
 5bc:	e1 f6       	brne	.-72     	; 0x576 <MPU6050_auto_set_gyro_bias+0x52>
			gy_bias[j] += gyro[j];
		}
	}
	
	for (uint8_t k = 0; k < 3; k++) {
		gy_bias[k] = gy_bias[k] / 1024;
 5be:	8f 81       	ldd	r24, Y+7	; 0x07
 5c0:	98 85       	ldd	r25, Y+8	; 0x08
 5c2:	a9 85       	ldd	r26, Y+9	; 0x09
 5c4:	ba 85       	ldd	r27, Y+10	; 0x0a
 5c6:	bb 23       	and	r27, r27
 5c8:	24 f4       	brge	.+8      	; 0x5d2 <MPU6050_auto_set_gyro_bias+0xae>
 5ca:	81 50       	subi	r24, 0x01	; 1
 5cc:	9c 4f       	sbci	r25, 0xFC	; 252
 5ce:	af 4f       	sbci	r26, 0xFF	; 255
 5d0:	bf 4f       	sbci	r27, 0xFF	; 255
 5d2:	07 2e       	mov	r0, r23
 5d4:	7a e0       	ldi	r23, 0x0A	; 10
 5d6:	b5 95       	asr	r27
 5d8:	a7 95       	ror	r26
 5da:	97 95       	ror	r25
 5dc:	87 95       	ror	r24
 5de:	7a 95       	dec	r23
 5e0:	d1 f7       	brne	.-12     	; 0x5d6 <MPU6050_auto_set_gyro_bias+0xb2>
 5e2:	70 2d       	mov	r23, r0
 5e4:	8f 83       	std	Y+7, r24	; 0x07
 5e6:	98 87       	std	Y+8, r25	; 0x08
 5e8:	a9 87       	std	Y+9, r26	; 0x09
 5ea:	ba 87       	std	Y+10, r27	; 0x0a
 5ec:	8b 85       	ldd	r24, Y+11	; 0x0b
 5ee:	9c 85       	ldd	r25, Y+12	; 0x0c
 5f0:	ad 85       	ldd	r26, Y+13	; 0x0d
 5f2:	be 85       	ldd	r27, Y+14	; 0x0e
 5f4:	bb 23       	and	r27, r27
 5f6:	24 f4       	brge	.+8      	; 0x600 <MPU6050_auto_set_gyro_bias+0xdc>
 5f8:	81 50       	subi	r24, 0x01	; 1
 5fa:	9c 4f       	sbci	r25, 0xFC	; 252
 5fc:	af 4f       	sbci	r26, 0xFF	; 255
 5fe:	bf 4f       	sbci	r27, 0xFF	; 255
 600:	07 2e       	mov	r0, r23
 602:	7a e0       	ldi	r23, 0x0A	; 10
 604:	b5 95       	asr	r27
 606:	a7 95       	ror	r26
 608:	97 95       	ror	r25
 60a:	87 95       	ror	r24
 60c:	7a 95       	dec	r23
 60e:	d1 f7       	brne	.-12     	; 0x604 <MPU6050_auto_set_gyro_bias+0xe0>
 610:	70 2d       	mov	r23, r0
 612:	8b 87       	std	Y+11, r24	; 0x0b
 614:	9c 87       	std	Y+12, r25	; 0x0c
 616:	ad 87       	std	Y+13, r26	; 0x0d
 618:	be 87       	std	Y+14, r27	; 0x0e
 61a:	8f 85       	ldd	r24, Y+15	; 0x0f
 61c:	98 89       	ldd	r25, Y+16	; 0x10
 61e:	a9 89       	ldd	r26, Y+17	; 0x11
 620:	ba 89       	ldd	r27, Y+18	; 0x12
 622:	bb 23       	and	r27, r27
 624:	24 f4       	brge	.+8      	; 0x62e <MPU6050_auto_set_gyro_bias+0x10a>
 626:	81 50       	subi	r24, 0x01	; 1
 628:	9c 4f       	sbci	r25, 0xFC	; 252
 62a:	af 4f       	sbci	r26, 0xFF	; 255
 62c:	bf 4f       	sbci	r27, 0xFF	; 255
 62e:	07 2e       	mov	r0, r23
 630:	7a e0       	ldi	r23, 0x0A	; 10
 632:	b5 95       	asr	r27
 634:	a7 95       	ror	r26
 636:	97 95       	ror	r25
 638:	87 95       	ror	r24
 63a:	7a 95       	dec	r23
 63c:	d1 f7       	brne	.-12     	; 0x632 <MPU6050_auto_set_gyro_bias+0x10e>
 63e:	70 2d       	mov	r23, r0
 640:	8f 87       	std	Y+15, r24	; 0x0f
 642:	98 8b       	std	Y+16, r25	; 0x10
 644:	a9 8b       	std	Y+17, r26	; 0x11
 646:	ba 8b       	std	Y+18, r27	; 0x12
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
 648:	6f 81       	ldd	r22, Y+7	; 0x07
 64a:	78 85       	ldd	r23, Y+8	; 0x08
 64c:	89 85       	ldd	r24, Y+9	; 0x09
 64e:	9a 85       	ldd	r25, Y+10	; 0x0a
 650:	2a e0       	ldi	r18, 0x0A	; 10
 652:	ae 01       	movw	r20, r28
 654:	4d 5e       	subi	r20, 0xED	; 237
 656:	5f 4f       	sbci	r21, 0xFF	; 255
 658:	0e 94 1b 05 	call	0xa36	; 0xa36 <__ltoa_ncheck>
 65c:	6b 85       	ldd	r22, Y+11	; 0x0b
 65e:	7c 85       	ldd	r23, Y+12	; 0x0c
 660:	8d 85       	ldd	r24, Y+13	; 0x0d
 662:	9e 85       	ldd	r25, Y+14	; 0x0e
 664:	2a e0       	ldi	r18, 0x0A	; 10
 666:	ae 01       	movw	r20, r28
 668:	4d 5d       	subi	r20, 0xDD	; 221
 66a:	5f 4f       	sbci	r21, 0xFF	; 255
 66c:	0e 94 1b 05 	call	0xa36	; 0xa36 <__ltoa_ncheck>
 670:	6f 85       	ldd	r22, Y+15	; 0x0f
 672:	78 89       	ldd	r23, Y+16	; 0x10
 674:	89 89       	ldd	r24, Y+17	; 0x11
 676:	9a 89       	ldd	r25, Y+18	; 0x12
 678:	2a e0       	ldi	r18, 0x0A	; 10
 67a:	ae 01       	movw	r20, r28
 67c:	4d 5c       	subi	r20, 0xCD	; 205
 67e:	5f 4f       	sbci	r21, 0xFF	; 255
 680:	0e 94 1b 05 	call	0xa36	; 0xa36 <__ltoa_ncheck>
	
	char gyrX_str[16], gyrY_str[16], gyrZ_str[16];
	ltoa(gy_bias[0],gyrX_str,10);
	ltoa(gy_bias[1],gyrY_str,10);
	ltoa(gy_bias[2],gyrZ_str,10);
	printString(gyrX_str); printString("_");
 684:	ce 01       	movw	r24, r28
 686:	43 96       	adiw	r24, 0x13	; 19
 688:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <printString>
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	91 e0       	ldi	r25, 0x01	; 1
 690:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <printString>
	printString(gyrY_str); printString("_");
 694:	ce 01       	movw	r24, r28
 696:	83 96       	adiw	r24, 0x23	; 35
 698:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <printString>
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	91 e0       	ldi	r25, 0x01	; 1
 6a0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <printString>
	printLine(gyrZ_str);
 6a4:	ce 01       	movw	r24, r28
 6a6:	c3 96       	adiw	r24, 0x33	; 51
 6a8:	0e 94 f7 04 	call	0x9ee	; 0x9ee <printLine>
	
	MPU6050_set_gyro_bias_reg(gy_bias);
 6ac:	ce 01       	movw	r24, r28
 6ae:	07 96       	adiw	r24, 0x07	; 7
 6b0:	0e 94 33 02 	call	0x466	; 0x466 <MPU6050_set_gyro_bias_reg>
 6b4:	ce 5b       	subi	r28, 0xBE	; 190
 6b6:	df 4f       	sbci	r29, 0xFF	; 255
 6b8:	0f b6       	in	r0, 0x3f	; 63
 6ba:	f8 94       	cli
 6bc:	de bf       	out	0x3e, r29	; 62
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	cd bf       	out	0x3d, r28	; 61
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	1f 91       	pop	r17
 6c8:	0f 91       	pop	r16
 6ca:	ff 90       	pop	r15
 6cc:	ef 90       	pop	r14
 6ce:	08 95       	ret

000006d0 <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
 6d0:	88 e4       	ldi	r24, 0x48	; 72
 6d2:	80 93 b8 00 	sts	0x00B8, r24
 6d6:	08 95       	ret

000006d8 <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
 6d8:	ec eb       	ldi	r30, 0xBC	; 188
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	10 82       	st	Z, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 6de:	94 ea       	ldi	r25, 0xA4	; 164
 6e0:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 6e2:	90 81       	ld	r25, Z
 6e4:	99 23       	and	r25, r25
 6e6:	ec f7       	brge	.-6      	; 0x6e2 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 6e8:	90 91 b9 00 	lds	r25, 0x00B9
 6ec:	98 7f       	andi	r25, 0xF8	; 248
 6ee:	98 30       	cpi	r25, 0x08	; 8
 6f0:	a1 f4       	brne	.+40     	; 0x71a <i2c_start+0x42>
	
	// load slave address into data register
	TWDR = address;
 6f2:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
 6f6:	84 e8       	ldi	r24, 0x84	; 132
 6f8:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 6fc:	ec eb       	ldi	r30, 0xBC	; 188
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 81       	ld	r24, Z
 702:	88 23       	and	r24, r24
 704:	ec f7       	brge	.-6      	; 0x700 <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
 706:	90 91 b9 00 	lds	r25, 0x00B9
 70a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 70c:	98 31       	cpi	r25, 0x18	; 24
 70e:	39 f0       	breq	.+14     	; 0x71e <i2c_start+0x46>
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	90 34       	cpi	r25, 0x40	; 64
 714:	29 f4       	brne	.+10     	; 0x720 <i2c_start+0x48>
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
 71e:	80 e0       	ldi	r24, 0x00	; 0
}
 720:	08 95       	ret

00000722 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
 722:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
 726:	84 e8       	ldi	r24, 0x84	; 132
 728:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 72c:	ec eb       	ldi	r30, 0xBC	; 188
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	80 81       	ld	r24, Z
 732:	88 23       	and	r24, r24
 734:	ec f7       	brge	.-6      	; 0x730 <i2c_write+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
 736:	90 91 b9 00 	lds	r25, 0x00B9
 73a:	98 7f       	andi	r25, 0xF8	; 248
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	98 32       	cpi	r25, 0x28	; 40
 740:	09 f4       	brne	.+2      	; 0x744 <i2c_write+0x22>
 742:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
 744:	08 95       	ret

00000746 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 746:	84 ec       	ldi	r24, 0xC4	; 196
 748:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 74c:	ec eb       	ldi	r30, 0xBC	; 188
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	88 23       	and	r24, r24
 754:	ec f7       	brge	.-6      	; 0x750 <i2c_read_ack+0xa>
	// return received data from TWDR
	return TWDR;
 756:	80 91 bb 00 	lds	r24, 0x00BB
}
 75a:	08 95       	ret

0000075c <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 75c:	84 e8       	ldi	r24, 0x84	; 132
 75e:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 762:	ec eb       	ldi	r30, 0xBC	; 188
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	80 81       	ld	r24, Z
 768:	88 23       	and	r24, r24
 76a:	ec f7       	brge	.-6      	; 0x766 <i2c_read_nack+0xa>
	// return received data from TWDR
	return TWDR;
 76c:	80 91 bb 00 	lds	r24, 0x00BB
}
 770:	08 95       	ret

00000772 <i2c_writeReg>:
	
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 772:	cf 92       	push	r12
 774:	df 92       	push	r13
 776:	ff 92       	push	r15
 778:	0f 93       	push	r16
 77a:	1f 93       	push	r17
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	c6 2f       	mov	r28, r22
 782:	6a 01       	movw	r12, r20
 784:	89 01       	movw	r16, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 786:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <i2c_start>
 78a:	f8 2e       	mov	r15, r24
 78c:	81 11       	cpse	r24, r1
 78e:	15 c0       	rjmp	.+42     	; 0x7ba <i2c_writeReg+0x48>

	i2c_write(regaddr);
 790:	8c 2f       	mov	r24, r28
 792:	0e 94 91 03 	call	0x722	; 0x722 <i2c_write>

	for (uint16_t i = 0; i < length; i++)
 796:	01 15       	cp	r16, r1
 798:	11 05       	cpc	r17, r1
 79a:	59 f0       	breq	.+22     	; 0x7b2 <i2c_writeReg+0x40>
 79c:	e6 01       	movw	r28, r12
 79e:	0c 0d       	add	r16, r12
 7a0:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 7a2:	89 91       	ld	r24, Y+
 7a4:	0e 94 91 03 	call	0x722	; 0x722 <i2c_write>
 7a8:	81 11       	cpse	r24, r1
 7aa:	0a c0       	rjmp	.+20     	; 0x7c0 <i2c_writeReg+0x4e>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
 7ac:	c0 17       	cp	r28, r16
 7ae:	d1 07       	cpc	r29, r17
 7b0:	c1 f7       	brne	.-16     	; 0x7a2 <i2c_writeReg+0x30>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 7b2:	84 e9       	ldi	r24, 0x94	; 148
 7b4:	80 93 bc 00 	sts	0x00BC, r24
 7b8:	05 c0       	rjmp	.+10     	; 0x7c4 <i2c_writeReg+0x52>
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
 7ba:	ff 24       	eor	r15, r15
 7bc:	f3 94       	inc	r15
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <i2c_writeReg+0x52>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 7c0:	ff 24       	eor	r15, r15
 7c2:	f3 94       	inc	r15
	}

	i2c_stop();

	return 0;
}
 7c4:	8f 2d       	mov	r24, r15
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	1f 91       	pop	r17
 7cc:	0f 91       	pop	r16
 7ce:	ff 90       	pop	r15
 7d0:	df 90       	pop	r13
 7d2:	cf 90       	pop	r12
 7d4:	08 95       	ret

000007d6 <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 7d6:	af 92       	push	r10
 7d8:	bf 92       	push	r11
 7da:	df 92       	push	r13
 7dc:	ef 92       	push	r14
 7de:	ff 92       	push	r15
 7e0:	0f 93       	push	r16
 7e2:	1f 93       	push	r17
 7e4:	cf 93       	push	r28
 7e6:	df 93       	push	r29
 7e8:	18 2f       	mov	r17, r24
 7ea:	06 2f       	mov	r16, r22
 7ec:	5a 01       	movw	r10, r20
 7ee:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
 7f0:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <i2c_start>
 7f4:	81 11       	cpse	r24, r1
 7f6:	22 c0       	rjmp	.+68     	; 0x83c <i2c_readReg+0x66>

	i2c_write(regaddr);
 7f8:	80 2f       	mov	r24, r16
 7fa:	0e 94 91 03 	call	0x722	; 0x722 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 7fe:	81 2f       	mov	r24, r17
 800:	81 60       	ori	r24, 0x01	; 1
 802:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <i2c_start>
 806:	d8 2e       	mov	r13, r24
 808:	81 11       	cpse	r24, r1
 80a:	1b c0       	rjmp	.+54     	; 0x842 <i2c_readReg+0x6c>

	for (uint16_t i = 0; i < (length-1); i++)
 80c:	8e 01       	movw	r16, r28
 80e:	01 50       	subi	r16, 0x01	; 1
 810:	11 09       	sbc	r17, r1
 812:	51 f0       	breq	.+20     	; 0x828 <i2c_readReg+0x52>
 814:	e5 01       	movw	r28, r10
 816:	75 01       	movw	r14, r10
 818:	e0 0e       	add	r14, r16
 81a:	f1 1e       	adc	r15, r17
	{
		data[i] = i2c_read_ack();
 81c:	0e 94 a3 03 	call	0x746	; 0x746 <i2c_read_ack>
 820:	89 93       	st	Y+, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
 822:	ce 15       	cp	r28, r14
 824:	df 05       	cpc	r29, r15
 826:	d1 f7       	brne	.-12     	; 0x81c <i2c_readReg+0x46>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 828:	e5 01       	movw	r28, r10
 82a:	c0 0f       	add	r28, r16
 82c:	d1 1f       	adc	r29, r17
 82e:	0e 94 ae 03 	call	0x75c	; 0x75c <i2c_read_nack>
 832:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 834:	84 e9       	ldi	r24, 0x94	; 148
 836:	80 93 bc 00 	sts	0x00BC, r24
 83a:	05 c0       	rjmp	.+10     	; 0x846 <i2c_readReg+0x70>
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
 83c:	dd 24       	eor	r13, r13
 83e:	d3 94       	inc	r13
 840:	02 c0       	rjmp	.+4      	; 0x846 <i2c_readReg+0x70>

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
 842:	dd 24       	eor	r13, r13
 844:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 846:	8d 2d       	mov	r24, r13
 848:	df 91       	pop	r29
 84a:	cf 91       	pop	r28
 84c:	1f 91       	pop	r17
 84e:	0f 91       	pop	r16
 850:	ff 90       	pop	r15
 852:	ef 90       	pop	r14
 854:	df 90       	pop	r13
 856:	bf 90       	pop	r11
 858:	af 90       	pop	r10
 85a:	08 95       	ret

0000085c <statusLED>:
}

void statusLED(uint8_t status)
{
	//DDRD |= (1<<DDD3);
	if (status) {
 85c:	88 23       	and	r24, r24
 85e:	11 f0       	breq	.+4      	; 0x864 <statusLED+0x8>
		PORTD |= (1<<PORTD3);
 860:	5b 9a       	sbi	0x0b, 3	; 11
 862:	08 95       	ret
	}
	else {
		PORTD &= ~(1<<PORTD3);
 864:	5b 98       	cbi	0x0b, 3	; 11
 866:	08 95       	ret

00000868 <main>:
#include "i2c_master.h"

void statusLED(uint8_t status);

int main(void)
{
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
 86c:	cd b7       	in	r28, 0x3d	; 61
 86e:	de b7       	in	r29, 0x3e	; 62
 870:	e6 97       	sbiw	r28, 0x36	; 54
 872:	0f b6       	in	r0, 0x3f	; 63
 874:	f8 94       	cli
 876:	de bf       	out	0x3e, r29	; 62
 878:	0f be       	out	0x3f, r0	; 63
 87a:	cd bf       	out	0x3d, r28	; 61
	uint8_t timing_bit = 0;
	int16_t gyr[3];
	char gyrX_str[16], gyrY_str[16], gyrZ_str[16];
	uint8_t scale_selector = 2;
	
	DDRD |= (1<<DDD3);
 87c:	53 9a       	sbi	0x0a, 3	; 10
	
	initUSART();
 87e:	0e 94 c8 04 	call	0x990	; 0x990 <initUSART>
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	80 e8       	ldi	r24, 0x80	; 128
 886:	0f b6       	in	r0, 0x3f	; 63
 888:	f8 94       	cli
 88a:	80 93 61 00 	sts	0x0061, r24
 88e:	90 93 61 00 	sts	0x0061, r25
 892:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(clock_div_1); // set clock to 16MHz
	MPU6050_init();
 894:	0e 94 24 02 	call	0x448	; 0x448 <MPU6050_init>
	0 - 250 deg/s, 131 LSB/(deg/s)
	1 - 500 deg/s, 65.5 LSB/(deg/s)
	2 - 1000 deg/s, 32.8 LSB/(deg/s)
	3 - 2000 deg/s, 16.4 LSB/(deg/s)
	*/
	MPU6050_set_gyroFS(scale_selector);
 898:	82 e0       	ldi	r24, 0x02	; 2
 89a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <MPU6050_set_gyroFS>
	MPU6050_set_accelFS(2);
 89e:	82 e0       	ldi	r24, 0x02	; 2
 8a0:	0e 94 1e 01 	call	0x23c	; 0x23c <MPU6050_set_accelFS>
	
	if (MPU6050_test_I2C()) {
 8a4:	0e 94 4b 00 	call	0x96	; 0x96 <MPU6050_test_I2C>
 8a8:	88 23       	and	r24, r24
 8aa:	a9 f0       	breq	.+42     	; 0x8d6 <main+0x6e>
		printLine("=== IMU working properly ===");
 8ac:	82 e0       	ldi	r24, 0x02	; 2
 8ae:	91 e0       	ldi	r25, 0x01	; 1
 8b0:	0e 94 f7 04 	call	0x9ee	; 0x9ee <printLine>
		statusLED(1);
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	0e 94 2e 04 	call	0x85c	; 0x85c <statusLED>
			statusLED(1);
			_delay_ms(50);
		}
	}
	
	printLine("Calibrating Gyro...");
 8ba:	8f e1       	ldi	r24, 0x1F	; 31
 8bc:	91 e0       	ldi	r25, 0x01	; 1
 8be:	0e 94 f7 04 	call	0x9ee	; 0x9ee <printLine>
	MPU6050_auto_set_gyro_bias();
 8c2:	0e 94 92 02 	call	0x524	; 0x524 <MPU6050_auto_set_gyro_bias>
	printLine("Calibration OK");
 8c6:	83 e3       	ldi	r24, 0x33	; 51
 8c8:	91 e0       	ldi	r25, 0x01	; 1
 8ca:	0e 94 f7 04 	call	0x9ee	; 0x9ee <printLine>

void statusLED(uint8_t status);

int main(void)
{
	uint8_t timing_bit = 0;
 8ce:	10 e0       	ldi	r17, 0x00	; 0
		itoa(gyr[2],gyrZ_str,10);
		printString(gyrX_str); printString("_");
		printString(gyrY_str); printString("_");
		printLine(gyrZ_str);
		_delay_ms(10);
		timing_bit = !timing_bit;
 8d0:	01 e0       	ldi	r16, 0x01	; 1
 8d2:	f1 2c       	mov	r15, r1
 8d4:	20 c0       	rjmp	.+64     	; 0x916 <__stack+0x17>
	if (MPU6050_test_I2C()) {
		printLine("=== IMU working properly ===");
		statusLED(1);
	}
	else {
		statusLED(1);
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	0e 94 2e 04 	call	0x85c	; 0x85c <statusLED>
		printLine("=== IMU ERROR ===");
 8dc:	82 e4       	ldi	r24, 0x42	; 66
 8de:	91 e0       	ldi	r25, 0x01	; 1
 8e0:	0e 94 f7 04 	call	0x9ee	; 0x9ee <printLine>
		while(1){
			statusLED(0);
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	0e 94 2e 04 	call	0x85c	; 0x85c <statusLED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8ea:	2f ef       	ldi	r18, 0xFF	; 255
 8ec:	80 e7       	ldi	r24, 0x70	; 112
 8ee:	92 e0       	ldi	r25, 0x02	; 2
 8f0:	21 50       	subi	r18, 0x01	; 1
 8f2:	80 40       	sbci	r24, 0x00	; 0
 8f4:	90 40       	sbci	r25, 0x00	; 0
 8f6:	e1 f7       	brne	.-8      	; 0x8f0 <main+0x88>
 8f8:	00 c0       	rjmp	.+0      	; 0x8fa <main+0x92>
 8fa:	00 00       	nop
			_delay_ms(50);
			statusLED(1);
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	0e 94 2e 04 	call	0x85c	; 0x85c <statusLED>
 902:	2f ef       	ldi	r18, 0xFF	; 255
 904:	80 e7       	ldi	r24, 0x70	; 112
 906:	92 e0       	ldi	r25, 0x02	; 2
 908:	21 50       	subi	r18, 0x01	; 1
 90a:	80 40       	sbci	r24, 0x00	; 0
 90c:	90 40       	sbci	r25, 0x00	; 0
 90e:	e1 f7       	brne	.-8      	; 0x908 <__stack+0x9>
 910:	00 c0       	rjmp	.+0      	; 0x912 <__stack+0x13>
 912:	00 00       	nop
 914:	e7 cf       	rjmp	.-50     	; 0x8e4 <main+0x7c>
	MPU6050_auto_set_gyro_bias();
	printLine("Calibration OK");
	
    while (1) 
    {
		MPU6050_get_gyro(gyr);
 916:	ce 01       	movw	r24, r28
 918:	01 96       	adiw	r24, 0x01	; 1
 91a:	0e 94 63 00 	call	0xc6	; 0xc6 <MPU6050_get_gyro>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 91e:	4a e0       	ldi	r20, 0x0A	; 10
 920:	be 01       	movw	r22, r28
 922:	69 5f       	subi	r22, 0xF9	; 249
 924:	7f 4f       	sbci	r23, 0xFF	; 255
 926:	89 81       	ldd	r24, Y+1	; 0x01
 928:	9a 81       	ldd	r25, Y+2	; 0x02
 92a:	0e 94 10 05 	call	0xa20	; 0xa20 <__itoa_ncheck>
 92e:	4a e0       	ldi	r20, 0x0A	; 10
 930:	be 01       	movw	r22, r28
 932:	69 5e       	subi	r22, 0xE9	; 233
 934:	7f 4f       	sbci	r23, 0xFF	; 255
 936:	8b 81       	ldd	r24, Y+3	; 0x03
 938:	9c 81       	ldd	r25, Y+4	; 0x04
 93a:	0e 94 10 05 	call	0xa20	; 0xa20 <__itoa_ncheck>
 93e:	4a e0       	ldi	r20, 0x0A	; 10
 940:	be 01       	movw	r22, r28
 942:	69 5d       	subi	r22, 0xD9	; 217
 944:	7f 4f       	sbci	r23, 0xFF	; 255
 946:	8d 81       	ldd	r24, Y+5	; 0x05
 948:	9e 81       	ldd	r25, Y+6	; 0x06
 94a:	0e 94 10 05 	call	0xa20	; 0xa20 <__itoa_ncheck>
		//MPU6050_get_accel(gyr);
		//MPU6050_get_motion(gyr);
		itoa(gyr[0],gyrX_str,10);
		itoa(gyr[1],gyrY_str,10);
		itoa(gyr[2],gyrZ_str,10);
		printString(gyrX_str); printString("_");
 94e:	ce 01       	movw	r24, r28
 950:	07 96       	adiw	r24, 0x07	; 7
 952:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <printString>
 956:	80 e0       	ldi	r24, 0x00	; 0
 958:	91 e0       	ldi	r25, 0x01	; 1
 95a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <printString>
		printString(gyrY_str); printString("_");
 95e:	ce 01       	movw	r24, r28
 960:	47 96       	adiw	r24, 0x17	; 23
 962:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <printString>
 966:	80 e0       	ldi	r24, 0x00	; 0
 968:	91 e0       	ldi	r25, 0x01	; 1
 96a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <printString>
		printLine(gyrZ_str);
 96e:	ce 01       	movw	r24, r28
 970:	87 96       	adiw	r24, 0x27	; 39
 972:	0e 94 f7 04 	call	0x9ee	; 0x9ee <printLine>
 976:	8f e3       	ldi	r24, 0x3F	; 63
 978:	9c e9       	ldi	r25, 0x9C	; 156
 97a:	01 97       	sbiw	r24, 0x01	; 1
 97c:	f1 f7       	brne	.-4      	; 0x97a <__stack+0x7b>
 97e:	00 c0       	rjmp	.+0      	; 0x980 <__stack+0x81>
 980:	00 00       	nop
		_delay_ms(10);
		timing_bit = !timing_bit;
 982:	80 2f       	mov	r24, r16
 984:	11 11       	cpse	r17, r1
 986:	8f 2d       	mov	r24, r15
 988:	18 2f       	mov	r17, r24
		statusLED(timing_bit);
 98a:	0e 94 2e 04 	call	0x85c	; 0x85c <statusLED>
    }
 98e:	c3 cf       	rjmp	.-122    	; 0x916 <__stack+0x17>

00000990 <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 990:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
 994:	80 e1       	ldi	r24, 0x10	; 16
 996:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
 99a:	e0 ec       	ldi	r30, 0xC0	; 192
 99c:	f0 e0       	ldi	r31, 0x00	; 0
 99e:	80 81       	ld	r24, Z
 9a0:	82 60       	ori	r24, 0x02	; 2
 9a2:	80 83       	st	Z, r24
#else
  UCSR0A &= ~(1 << U2X0);
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 9a4:	88 e1       	ldi	r24, 0x18	; 24
 9a6:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 9aa:	86 e0       	ldi	r24, 0x06	; 6
 9ac:	80 93 c2 00 	sts	0x00C2, r24
 9b0:	08 95       	ret

000009b2 <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 9b2:	e0 ec       	ldi	r30, 0xC0	; 192
 9b4:	f0 e0       	ldi	r31, 0x00	; 0
 9b6:	90 81       	ld	r25, Z
 9b8:	95 ff       	sbrs	r25, 5
 9ba:	fd cf       	rjmp	.-6      	; 0x9b6 <transmitByte+0x4>
  UDR0 = data;                                            /* send data */
 9bc:	80 93 c6 00 	sts	0x00C6, r24
 9c0:	08 95       	ret

000009c2 <printString>:
}


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 9c2:	0f 93       	push	r16
 9c4:	1f 93       	push	r17
 9c6:	cf 93       	push	r28
 9c8:	fc 01       	movw	r30, r24
  uint8_t i = 0;
  while (myString[i]) {
 9ca:	80 81       	ld	r24, Z
 9cc:	88 23       	and	r24, r24
 9ce:	59 f0       	breq	.+22     	; 0x9e6 <printString+0x24>
 9d0:	8f 01       	movw	r16, r30
 9d2:	c0 e0       	ldi	r28, 0x00	; 0
    transmitByte(myString[i]);
 9d4:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <transmitByte>
    i++;
 9d8:	cf 5f       	subi	r28, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 9da:	f8 01       	movw	r30, r16
 9dc:	ec 0f       	add	r30, r28
 9de:	f1 1d       	adc	r31, r1
 9e0:	80 81       	ld	r24, Z
 9e2:	81 11       	cpse	r24, r1
 9e4:	f7 cf       	rjmp	.-18     	; 0x9d4 <printString+0x12>
    transmitByte(myString[i]);
    i++;
  }
}
 9e6:	cf 91       	pop	r28
 9e8:	1f 91       	pop	r17
 9ea:	0f 91       	pop	r16
 9ec:	08 95       	ret

000009ee <printLine>:

void printLine(const char myString[]) {
 9ee:	0f 93       	push	r16
 9f0:	1f 93       	push	r17
 9f2:	cf 93       	push	r28
 9f4:	8c 01       	movw	r16, r24
	uint8_t i = 0;
	while (myString[i]) {
 9f6:	fc 01       	movw	r30, r24
 9f8:	80 81       	ld	r24, Z
 9fa:	88 23       	and	r24, r24
 9fc:	51 f0       	breq	.+20     	; 0xa12 <printLine+0x24>
 9fe:	c0 e0       	ldi	r28, 0x00	; 0
		transmitByte(myString[i]);
 a00:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <transmitByte>
		i++;
 a04:	cf 5f       	subi	r28, 0xFF	; 255
  }
}

void printLine(const char myString[]) {
	uint8_t i = 0;
	while (myString[i]) {
 a06:	f8 01       	movw	r30, r16
 a08:	ec 0f       	add	r30, r28
 a0a:	f1 1d       	adc	r31, r1
 a0c:	80 81       	ld	r24, Z
 a0e:	81 11       	cpse	r24, r1
 a10:	f7 cf       	rjmp	.-18     	; 0xa00 <printLine+0x12>
		transmitByte(myString[i]);
		i++;
	}
	transmitByte(10);
 a12:	8a e0       	ldi	r24, 0x0A	; 10
 a14:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <transmitByte>
}
 a18:	cf 91       	pop	r28
 a1a:	1f 91       	pop	r17
 a1c:	0f 91       	pop	r16
 a1e:	08 95       	ret

00000a20 <__itoa_ncheck>:
 a20:	bb 27       	eor	r27, r27
 a22:	4a 30       	cpi	r20, 0x0A	; 10
 a24:	31 f4       	brne	.+12     	; 0xa32 <__itoa_ncheck+0x12>
 a26:	99 23       	and	r25, r25
 a28:	22 f4       	brpl	.+8      	; 0xa32 <__itoa_ncheck+0x12>
 a2a:	bd e2       	ldi	r27, 0x2D	; 45
 a2c:	90 95       	com	r25
 a2e:	81 95       	neg	r24
 a30:	9f 4f       	sbci	r25, 0xFF	; 255
 a32:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__utoa_common>

00000a36 <__ltoa_ncheck>:
 a36:	bb 27       	eor	r27, r27
 a38:	2a 30       	cpi	r18, 0x0A	; 10
 a3a:	51 f4       	brne	.+20     	; 0xa50 <__ltoa_ncheck+0x1a>
 a3c:	99 23       	and	r25, r25
 a3e:	42 f4       	brpl	.+16     	; 0xa50 <__ltoa_ncheck+0x1a>
 a40:	bd e2       	ldi	r27, 0x2D	; 45
 a42:	90 95       	com	r25
 a44:	80 95       	com	r24
 a46:	70 95       	com	r23
 a48:	61 95       	neg	r22
 a4a:	7f 4f       	sbci	r23, 0xFF	; 255
 a4c:	8f 4f       	sbci	r24, 0xFF	; 255
 a4e:	9f 4f       	sbci	r25, 0xFF	; 255
 a50:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__ultoa_common>

00000a54 <__ultoa_ncheck>:
 a54:	bb 27       	eor	r27, r27

00000a56 <__ultoa_common>:
 a56:	fa 01       	movw	r30, r20
 a58:	a6 2f       	mov	r26, r22
 a5a:	62 17       	cp	r22, r18
 a5c:	71 05       	cpc	r23, r1
 a5e:	81 05       	cpc	r24, r1
 a60:	91 05       	cpc	r25, r1
 a62:	33 0b       	sbc	r19, r19
 a64:	30 fb       	bst	r19, 0
 a66:	66 f0       	brts	.+24     	; 0xa80 <__ultoa_common+0x2a>
 a68:	aa 27       	eor	r26, r26
 a6a:	66 0f       	add	r22, r22
 a6c:	77 1f       	adc	r23, r23
 a6e:	88 1f       	adc	r24, r24
 a70:	99 1f       	adc	r25, r25
 a72:	aa 1f       	adc	r26, r26
 a74:	a2 17       	cp	r26, r18
 a76:	10 f0       	brcs	.+4      	; 0xa7c <__ultoa_common+0x26>
 a78:	a2 1b       	sub	r26, r18
 a7a:	63 95       	inc	r22
 a7c:	38 50       	subi	r19, 0x08	; 8
 a7e:	a9 f7       	brne	.-22     	; 0xa6a <__ultoa_common+0x14>
 a80:	a0 5d       	subi	r26, 0xD0	; 208
 a82:	aa 33       	cpi	r26, 0x3A	; 58
 a84:	08 f0       	brcs	.+2      	; 0xa88 <__ultoa_common+0x32>
 a86:	a9 5d       	subi	r26, 0xD9	; 217
 a88:	a1 93       	st	Z+, r26
 a8a:	36 f7       	brtc	.-52     	; 0xa58 <__ultoa_common+0x2>
 a8c:	b1 11       	cpse	r27, r1
 a8e:	b1 93       	st	Z+, r27
 a90:	10 82       	st	Z, r1
 a92:	ca 01       	movw	r24, r20
 a94:	0c 94 66 05 	jmp	0xacc	; 0xacc <strrev>

00000a98 <__utoa_ncheck>:
 a98:	bb 27       	eor	r27, r27

00000a9a <__utoa_common>:
 a9a:	fb 01       	movw	r30, r22
 a9c:	55 27       	eor	r21, r21
 a9e:	aa 27       	eor	r26, r26
 aa0:	88 0f       	add	r24, r24
 aa2:	99 1f       	adc	r25, r25
 aa4:	aa 1f       	adc	r26, r26
 aa6:	a4 17       	cp	r26, r20
 aa8:	10 f0       	brcs	.+4      	; 0xaae <__utoa_common+0x14>
 aaa:	a4 1b       	sub	r26, r20
 aac:	83 95       	inc	r24
 aae:	50 51       	subi	r21, 0x10	; 16
 ab0:	b9 f7       	brne	.-18     	; 0xaa0 <__utoa_common+0x6>
 ab2:	a0 5d       	subi	r26, 0xD0	; 208
 ab4:	aa 33       	cpi	r26, 0x3A	; 58
 ab6:	08 f0       	brcs	.+2      	; 0xaba <__utoa_common+0x20>
 ab8:	a9 5d       	subi	r26, 0xD9	; 217
 aba:	a1 93       	st	Z+, r26
 abc:	00 97       	sbiw	r24, 0x00	; 0
 abe:	79 f7       	brne	.-34     	; 0xa9e <__utoa_common+0x4>
 ac0:	b1 11       	cpse	r27, r1
 ac2:	b1 93       	st	Z+, r27
 ac4:	11 92       	st	Z+, r1
 ac6:	cb 01       	movw	r24, r22
 ac8:	0c 94 66 05 	jmp	0xacc	; 0xacc <strrev>

00000acc <strrev>:
 acc:	dc 01       	movw	r26, r24
 ace:	fc 01       	movw	r30, r24
 ad0:	67 2f       	mov	r22, r23
 ad2:	71 91       	ld	r23, Z+
 ad4:	77 23       	and	r23, r23
 ad6:	e1 f7       	brne	.-8      	; 0xad0 <strrev+0x4>
 ad8:	32 97       	sbiw	r30, 0x02	; 2
 ada:	04 c0       	rjmp	.+8      	; 0xae4 <strrev+0x18>
 adc:	7c 91       	ld	r23, X
 ade:	6d 93       	st	X+, r22
 ae0:	70 83       	st	Z, r23
 ae2:	62 91       	ld	r22, -Z
 ae4:	ae 17       	cp	r26, r30
 ae6:	bf 07       	cpc	r27, r31
 ae8:	c8 f3       	brcs	.-14     	; 0xadc <strrev+0x10>
 aea:	08 95       	ret

00000aec <_exit>:
 aec:	f8 94       	cli

00000aee <__stop_program>:
 aee:	ff cf       	rjmp	.-2      	; 0xaee <__stop_program>
