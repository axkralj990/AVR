
AK_servoControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002a7  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ad  00000000  00000000  000005a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000250  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000261  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c0  00000000  00000000  00000c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000e2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  78:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_TICTOC>:
void init_TICTOC()
{
	if (F_CPU == 8000000)
	{
		//TCCR1B |= (1<<CS11) | (1<<CS10); // clock prescaler 64
		TCCR1B |= (1<<CS11); // clock prescaler 64
  80:	e1 e8       	ldi	r30, 0x81	; 129
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	82 60       	ori	r24, 0x02	; 2
  88:	80 83       	st	Z, r24
  8a:	08 95       	ret

0000008c <tic>:
	//TIMSK0 |= (1<<TOIE1); // Timer/Counter1 Overflow Interrupt Enable
}

void tic()
{
	TCNT1 = 0;
  8c:	10 92 85 00 	sts	0x0085, r1
  90:	10 92 84 00 	sts	0x0084, r1
  94:	08 95       	ret

00000096 <toc>:
}

uint32_t toc()
{
	uint32_t micro_time = TCNT1;
  96:	60 91 84 00 	lds	r22, 0x0084
  9a:	70 91 85 00 	lds	r23, 0x0085
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
	return micro_time;
}
  a2:	08 95       	ret

000000a4 <main>:
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	80 e8       	ldi	r24, 0x80	; 128
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	80 93 61 00 	sts	0x0061, r24
  b0:	90 93 61 00 	sts	0x0061, r25
  b4:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(clock_div_1);
	
	uint32_t servo_timer = 0, timer_channel_1 = 0, timer_channel_2 = 0;
	uint8_t direction = 1;
	
	init_TICTOC();
  b6:	0e 94 40 00 	call	0x80	; 0x80 <init_TICTOC>
	DDRC |= (1<<DDC4);
  ba:	3c 9a       	sbi	0x07, 4	; 7
	PORTC = 0b00000000;
  bc:	18 b8       	out	0x08, r1	; 8
	
	DDRB |= (1<<DDB1);
  be:	21 9a       	sbi	0x04, 1	; 4
	PORTB &= ~(1<<PORTB1);
  c0:	29 98       	cbi	0x05, 1	; 5
int main(void)
{
	clock_prescale_set(clock_div_1);
	
	uint32_t servo_timer = 0, timer_channel_1 = 0, timer_channel_2 = 0;
	uint8_t direction = 1;
  c2:	c1 e0       	ldi	r28, 0x01	; 1
	
	DDRB |= (1<<DDB1);
	PORTB &= ~(1<<PORTB1);

	timer_channel_1 = 1000;
	timer_channel_2 = 1000;
  c4:	0f 2e       	mov	r0, r31
  c6:	f8 ee       	ldi	r31, 0xE8	; 232
  c8:	8f 2e       	mov	r8, r31
  ca:	f3 e0       	ldi	r31, 0x03	; 3
  cc:	9f 2e       	mov	r9, r31
  ce:	a1 2c       	mov	r10, r1
  d0:	b1 2c       	mov	r11, r1
  d2:	f0 2d       	mov	r31, r0
	PORTC = 0b00000000;
	
	DDRB |= (1<<DDB1);
	PORTB &= ~(1<<PORTB1);

	timer_channel_1 = 1000;
  d4:	0f 2e       	mov	r0, r31
  d6:	f8 ee       	ldi	r31, 0xE8	; 232
  d8:	cf 2e       	mov	r12, r31
  da:	f3 e0       	ldi	r31, 0x03	; 3
  dc:	df 2e       	mov	r13, r31
  de:	e1 2c       	mov	r14, r1
  e0:	f1 2c       	mov	r15, r1
  e2:	f0 2d       	mov	r31, r0
			}
		}
		else
		{
			timer_channel_1 = 1500;
			timer_channel_2 = 1500;
  e4:	0f 2e       	mov	r0, r31
  e6:	fc ed       	ldi	r31, 0xDC	; 220
  e8:	7f 2e       	mov	r7, r31
  ea:	f0 2d       	mov	r31, r0
  ec:	05 e0       	ldi	r16, 0x05	; 5
  ee:	10 e0       	ldi	r17, 0x00	; 0
  f0:	d0 e0       	ldi	r29, 0x00	; 0
			timer_channel_1 -= 30;
			timer_channel_2 -= 30;
			if (timer_channel_1 < 1000)
			{
				timer_channel_1 = 1000;
				timer_channel_2 = 1000;
  f2:	0f 2e       	mov	r0, r31
  f4:	f8 ee       	ldi	r31, 0xE8	; 232
  f6:	3f 2e       	mov	r3, r31
  f8:	f0 2d       	mov	r31, r0
  fa:	0f 2e       	mov	r0, r31
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	4f 2e       	mov	r4, r31
 100:	f0 2d       	mov	r31, r0
 102:	51 2c       	mov	r5, r1
 104:	61 2c       	mov	r6, r1
			timer_channel_1 += 30;
			timer_channel_2 += 30;
			if (timer_channel_1 > 2000)
			{
				timer_channel_1 = 2000;
				timer_channel_2 = 2000;
 106:	21 2c       	mov	r2, r1
	
    while (1) 
    {		
		//PORTB ^= (1<<PORTB1);
		
		if (direction == 1)
 108:	c1 30       	cpi	r28, 0x01	; 1
 10a:	91 f4       	brne	.+36     	; 0x130 <main+0x8c>
		{
			timer_channel_1 += 30;
 10c:	2e e1       	ldi	r18, 0x1E	; 30
 10e:	c2 0e       	add	r12, r18
 110:	d1 1c       	adc	r13, r1
 112:	e1 1c       	adc	r14, r1
 114:	f1 1c       	adc	r15, r1
			timer_channel_2 += 30;
			if (timer_channel_1 > 2000)
 116:	81 ed       	ldi	r24, 0xD1	; 209
 118:	c8 16       	cp	r12, r24
 11a:	87 e0       	ldi	r24, 0x07	; 7
 11c:	d8 06       	cpc	r13, r24
 11e:	e1 04       	cpc	r14, r1
 120:	f1 04       	cpc	r15, r1
 122:	d0 f4       	brcc	.+52     	; 0x158 <main+0xb4>
		//PORTB ^= (1<<PORTB1);
		
		if (direction == 1)
		{
			timer_channel_1 += 30;
			timer_channel_2 += 30;
 124:	2e e1       	ldi	r18, 0x1E	; 30
 126:	82 0e       	add	r8, r18
 128:	91 1c       	adc	r9, r1
 12a:	a1 1c       	adc	r10, r1
 12c:	b1 1c       	adc	r11, r1
 12e:	3c c0       	rjmp	.+120    	; 0x1a8 <main+0x104>
				timer_channel_1 = 2000;
				timer_channel_2 = 2000;
				direction = 0;
			}
		}
		else if (direction == 0)
 130:	c1 11       	cpse	r28, r1
 132:	28 c0       	rjmp	.+80     	; 0x184 <main+0xe0>
		{
			timer_channel_1 -= 30;
 134:	8e e1       	ldi	r24, 0x1E	; 30
 136:	c8 1a       	sub	r12, r24
 138:	d1 08       	sbc	r13, r1
 13a:	e1 08       	sbc	r14, r1
 13c:	f1 08       	sbc	r15, r1
			timer_channel_2 -= 30;
			if (timer_channel_1 < 1000)
 13e:	28 ee       	ldi	r18, 0xE8	; 232
 140:	c2 16       	cp	r12, r18
 142:	23 e0       	ldi	r18, 0x03	; 3
 144:	d2 06       	cpc	r13, r18
 146:	e1 04       	cpc	r14, r1
 148:	f1 04       	cpc	r15, r1
 14a:	28 f1       	brcs	.+74     	; 0x196 <main+0xf2>
			}
		}
		else if (direction == 0)
		{
			timer_channel_1 -= 30;
			timer_channel_2 -= 30;
 14c:	8e e1       	ldi	r24, 0x1E	; 30
 14e:	88 1a       	sub	r8, r24
 150:	91 08       	sbc	r9, r1
 152:	a1 08       	sbc	r10, r1
 154:	b1 08       	sbc	r11, r1
 156:	28 c0       	rjmp	.+80     	; 0x1a8 <main+0x104>
			timer_channel_2 += 30;
			if (timer_channel_1 > 2000)
			{
				timer_channel_1 = 2000;
				timer_channel_2 = 2000;
				direction = 0;
 158:	c0 e0       	ldi	r28, 0x00	; 0
			timer_channel_1 += 30;
			timer_channel_2 += 30;
			if (timer_channel_1 > 2000)
			{
				timer_channel_1 = 2000;
				timer_channel_2 = 2000;
 15a:	0f 2e       	mov	r0, r31
 15c:	f0 ed       	ldi	r31, 0xD0	; 208
 15e:	8f 2e       	mov	r8, r31
 160:	f0 2d       	mov	r31, r0
 162:	0f 2e       	mov	r0, r31
 164:	f7 e0       	ldi	r31, 0x07	; 7
 166:	9f 2e       	mov	r9, r31
 168:	f0 2d       	mov	r31, r0
 16a:	a1 2c       	mov	r10, r1
 16c:	b2 2c       	mov	r11, r2
		{
			timer_channel_1 += 30;
			timer_channel_2 += 30;
			if (timer_channel_1 > 2000)
			{
				timer_channel_1 = 2000;
 16e:	0f 2e       	mov	r0, r31
 170:	f0 ed       	ldi	r31, 0xD0	; 208
 172:	cf 2e       	mov	r12, r31
 174:	f0 2d       	mov	r31, r0
 176:	0f 2e       	mov	r0, r31
 178:	f7 e0       	ldi	r31, 0x07	; 7
 17a:	df 2e       	mov	r13, r31
 17c:	f0 2d       	mov	r31, r0
 17e:	e1 2c       	mov	r14, r1
 180:	f2 2c       	mov	r15, r2
 182:	12 c0       	rjmp	.+36     	; 0x1a8 <main+0x104>
			}
		}
		else
		{
			timer_channel_1 = 1500;
			timer_channel_2 = 1500;
 184:	87 2c       	mov	r8, r7
 186:	90 2e       	mov	r9, r16
 188:	a1 2e       	mov	r10, r17
 18a:	bd 2e       	mov	r11, r29
				direction = 1;
			}
		}
		else
		{
			timer_channel_1 = 1500;
 18c:	c7 2c       	mov	r12, r7
 18e:	d0 2e       	mov	r13, r16
 190:	e1 2e       	mov	r14, r17
 192:	fd 2e       	mov	r15, r29
 194:	09 c0       	rjmp	.+18     	; 0x1a8 <main+0x104>
			timer_channel_2 -= 30;
			if (timer_channel_1 < 1000)
			{
				timer_channel_1 = 1000;
				timer_channel_2 = 1000;
				direction = 1;
 196:	c1 e0       	ldi	r28, 0x01	; 1
			timer_channel_1 -= 30;
			timer_channel_2 -= 30;
			if (timer_channel_1 < 1000)
			{
				timer_channel_1 = 1000;
				timer_channel_2 = 1000;
 198:	83 2c       	mov	r8, r3
 19a:	94 2c       	mov	r9, r4
 19c:	a5 2c       	mov	r10, r5
 19e:	b6 2c       	mov	r11, r6
		{
			timer_channel_1 -= 30;
			timer_channel_2 -= 30;
			if (timer_channel_1 < 1000)
			{
				timer_channel_1 = 1000;
 1a0:	c3 2c       	mov	r12, r3
 1a2:	d4 2c       	mov	r13, r4
 1a4:	e5 2c       	mov	r14, r5
 1a6:	f6 2c       	mov	r15, r6
		}
		
		//timer_channel_1 = 1500;
		//timer_channel_2 = 1500;
		
		while(toc() < 20000);
 1a8:	0e 94 4b 00 	call	0x96	; 0x96 <toc>
 1ac:	60 32       	cpi	r22, 0x20	; 32
 1ae:	7e 44       	sbci	r23, 0x4E	; 78
 1b0:	81 05       	cpc	r24, r1
 1b2:	91 05       	cpc	r25, r1
 1b4:	c8 f3       	brcs	.-14     	; 0x1a8 <main+0x104>
		
		tic();
 1b6:	0e 94 46 00 	call	0x8c	; 0x8c <tic>
		PORTC |= 0b00110000;
 1ba:	88 b1       	in	r24, 0x08	; 8
 1bc:	80 63       	ori	r24, 0x30	; 48
 1be:	88 b9       	out	0x08, r24	; 8
		
		while(PORTC >= 16)
 1c0:	0e c0       	rjmp	.+28     	; 0x1de <main+0x13a>
		{
			servo_timer = toc();
 1c2:	0e 94 4b 00 	call	0x96	; 0x96 <toc>
			if(timer_channel_1 <= servo_timer) PORTC &= 0b11101111;
 1c6:	6c 15       	cp	r22, r12
 1c8:	7d 05       	cpc	r23, r13
 1ca:	8e 05       	cpc	r24, r14
 1cc:	9f 05       	cpc	r25, r15
 1ce:	08 f0       	brcs	.+2      	; 0x1d2 <main+0x12e>
 1d0:	44 98       	cbi	0x08, 4	; 8
			if(timer_channel_2 <= servo_timer) PORTC &= 0b11011111;
 1d2:	68 15       	cp	r22, r8
 1d4:	79 05       	cpc	r23, r9
 1d6:	8a 05       	cpc	r24, r10
 1d8:	9b 05       	cpc	r25, r11
 1da:	08 f0       	brcs	.+2      	; 0x1de <main+0x13a>
 1dc:	45 98       	cbi	0x08, 5	; 8
		while(toc() < 20000);
		
		tic();
		PORTC |= 0b00110000;
		
		while(PORTC >= 16)
 1de:	88 b1       	in	r24, 0x08	; 8
 1e0:	80 31       	cpi	r24, 0x10	; 16
 1e2:	78 f7       	brcc	.-34     	; 0x1c2 <main+0x11e>
 1e4:	91 cf       	rjmp	.-222    	; 0x108 <main+0x64>

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
