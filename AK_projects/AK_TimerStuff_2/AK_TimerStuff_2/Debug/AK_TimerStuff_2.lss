
AK_TimerStuff_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091d  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000044b  00000000  00000000  00000cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000450  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e0  00000000  00000000  00001550  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038c  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000688  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002144  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  78:	0c 94 03 01 	jmp	0x206	; 0x206 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_TICTOC>:

void init_TICTOC()
{
	if (F_CPU == 8000000)
	{
		TCCR1B |= (1<<CS11) | (1<<CS10); // clock prescaler 64
  80:	e1 e8       	ldi	r30, 0x81	; 129
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	83 60       	ori	r24, 0x03	; 3
  88:	80 83       	st	Z, r24
	{
		TCCR1B |= (1<<CS11) | (1<<CS10); //default for 8MHz
	}
	
	// WGM -> NORMAL mode is default
	TIMSK0 |= (1<<TOIE1); // Timer/Counter1 Overflow Interrupt Enable
  8a:	ee e6       	ldi	r30, 0x6E	; 110
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	81 60       	ori	r24, 0x01	; 1
  92:	80 83       	st	Z, r24
  94:	08 95       	ret

00000096 <tic>:
}

void tic()
{
	TCNT1 = 0;
  96:	10 92 85 00 	sts	0x0085, r1
  9a:	10 92 84 00 	sts	0x0084, r1
  9e:	08 95       	ret

000000a0 <toc>:
}

uint32_t toc()
{
	uint32_t micro_time = TCNT1;
  a0:	60 91 84 00 	lds	r22, 0x0084
  a4:	70 91 85 00 	lds	r23, 0x0085
  a8:	cb 01       	movw	r24, r22
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b0 e0       	ldi	r27, 0x00	; 0
	return micro_time * 8;
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	aa 1f       	adc	r26, r26
  b4:	bb 1f       	adc	r27, r27
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	aa 1f       	adc	r26, r26
  bc:	bb 1f       	adc	r27, r27
  be:	bc 01       	movw	r22, r24
  c0:	cd 01       	movw	r24, r26
  c2:	66 0f       	add	r22, r22
  c4:	77 1f       	adc	r23, r23
  c6:	88 1f       	adc	r24, r24
  c8:	99 1f       	adc	r25, r25
}
  ca:	08 95       	ret

000000cc <main>:
#include <avr/power.h>

#include "AK_tictoc_lib.h"

int main(void)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	c0 54       	subi	r28, 0x40	; 64
  d6:	d1 09       	sbc	r29, r1
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	f8 94       	cli
  dc:	de bf       	out	0x3e, r29	; 62
  de:	0f be       	out	0x3f, r0	; 63
  e0:	cd bf       	out	0x3d, r28	; 61
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	80 e8       	ldi	r24, 0x80	; 128
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	f8 94       	cli
  ea:	80 93 61 00 	sts	0x0061, r24
  ee:	90 93 61 00 	sts	0x0061, r25
  f2:	0f be       	out	0x3f, r0	; 63
	char str[64];
	
	// set F_CPU to 8MHz
	clock_prescale_set(clock_div_1);
	
    initUSART();
  f4:	0e 94 9f 00 	call	0x13e	; 0x13e <initUSART>
	init_TICTOC();
  f8:	0e 94 40 00 	call	0x80	; 0x80 <init_TICTOC>

	
	DDRC |=   (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0); // config PORTC4 as output
  fc:	87 b1       	in	r24, 0x07	; 7
  fe:	8f 63       	ori	r24, 0x3F	; 63
 100:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0); // set PORTC4 to HIGH
 102:	88 b1       	in	r24, 0x08	; 8
 104:	8f 63       	ori	r24, 0x3F	; 63
 106:	88 b9       	out	0x08, r24	; 8
	
	//sei(); // enable global interrupts
	
    while (1) 
    {
		tic();
 108:	0e 94 4b 00 	call	0x96	; 0x96 <tic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	87 ee       	ldi	r24, 0xE7	; 231
 10e:	93 e0       	ldi	r25, 0x03	; 3
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x44>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x4a>
 116:	00 00       	nop
		_delay_us(500);
		microTime = toc();
 118:	0e 94 50 00 	call	0xa0	; 0xa0 <toc>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
 11c:	2a e0       	ldi	r18, 0x0A	; 10
 11e:	ae 01       	movw	r20, r28
 120:	4f 5f       	subi	r20, 0xFF	; 255
 122:	5f 4f       	sbci	r21, 0xFF	; 255
 124:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <__ultoa_ncheck>
		ultoa(microTime,str,10);
		printLine(str);
 128:	ce 01       	movw	r24, r28
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	0e 94 b8 00 	call	0x170	; 0x170 <printLine>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	8f e3       	ldi	r24, 0x3F	; 63
 132:	9c e9       	ldi	r25, 0x9C	; 156
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0x68>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x6e>
 13a:	00 00       	nop
 13c:	e5 cf       	rjmp	.-54     	; 0x108 <main+0x3c>

0000013e <initUSART>:
void printWord(uint16_t word) {
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
  transmitByte('0' + (word % 10));                             /* Ones */
 13e:	10 92 c5 00 	sts	0x00C5, r1
 142:	83 e3       	ldi	r24, 0x33	; 51
 144:	80 93 c4 00 	sts	0x00C4, r24
 148:	e0 ec       	ldi	r30, 0xC0	; 192
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	8d 7f       	andi	r24, 0xFD	; 253
 150:	80 83       	st	Z, r24
}
 152:	88 e1       	ldi	r24, 0x18	; 24
 154:	80 93 c1 00 	sts	0x00C1, r24
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	80 93 c2 00 	sts	0x00C2, r24
#else
  UCSR0A &= ~(1 << U2X0);
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 15e:	08 95       	ret

00000160 <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 160:	e0 ec       	ldi	r30, 0xC0	; 192
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	90 81       	ld	r25, Z
 166:	95 ff       	sbrs	r25, 5
 168:	fd cf       	rjmp	.-6      	; 0x164 <transmitByte+0x4>
  UDR0 = data;                                            /* send data */
 16a:	80 93 c6 00 	sts	0x00C6, r24
 16e:	08 95       	ret

00000170 <printLine>:
    transmitByte(myString[i]);
    i++;
  }
}

void printLine(const char myString[]) {
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	8c 01       	movw	r16, r24
	uint8_t i = 0;
	while (myString[i]) {
 178:	fc 01       	movw	r30, r24
 17a:	80 81       	ld	r24, Z
 17c:	88 23       	and	r24, r24
 17e:	51 f0       	breq	.+20     	; 0x194 <printLine+0x24>
 180:	c0 e0       	ldi	r28, 0x00	; 0
		transmitByte(myString[i]);
 182:	0e 94 b0 00 	call	0x160	; 0x160 <transmitByte>
		i++;
 186:	cf 5f       	subi	r28, 0xFF	; 255
  }
}

void printLine(const char myString[]) {
	uint8_t i = 0;
	while (myString[i]) {
 188:	f8 01       	movw	r30, r16
 18a:	ec 0f       	add	r30, r28
 18c:	f1 1d       	adc	r31, r1
 18e:	80 81       	ld	r24, Z
 190:	81 11       	cpse	r24, r1
 192:	f7 cf       	rjmp	.-18     	; 0x182 <printLine+0x12>
		transmitByte(myString[i]);
		i++;
	}
	transmitByte(10);
 194:	8a e0       	ldi	r24, 0x0A	; 10
 196:	0e 94 b0 00 	call	0x160	; 0x160 <transmitByte>
}
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	08 95       	ret

000001a2 <__ultoa_ncheck>:
 1a2:	bb 27       	eor	r27, r27

000001a4 <__ultoa_common>:
 1a4:	fa 01       	movw	r30, r20
 1a6:	a6 2f       	mov	r26, r22
 1a8:	62 17       	cp	r22, r18
 1aa:	71 05       	cpc	r23, r1
 1ac:	81 05       	cpc	r24, r1
 1ae:	91 05       	cpc	r25, r1
 1b0:	33 0b       	sbc	r19, r19
 1b2:	30 fb       	bst	r19, 0
 1b4:	66 f0       	brts	.+24     	; 0x1ce <__ultoa_common+0x2a>
 1b6:	aa 27       	eor	r26, r26
 1b8:	66 0f       	add	r22, r22
 1ba:	77 1f       	adc	r23, r23
 1bc:	88 1f       	adc	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	aa 1f       	adc	r26, r26
 1c2:	a2 17       	cp	r26, r18
 1c4:	10 f0       	brcs	.+4      	; 0x1ca <__ultoa_common+0x26>
 1c6:	a2 1b       	sub	r26, r18
 1c8:	63 95       	inc	r22
 1ca:	38 50       	subi	r19, 0x08	; 8
 1cc:	a9 f7       	brne	.-22     	; 0x1b8 <__ultoa_common+0x14>
 1ce:	a0 5d       	subi	r26, 0xD0	; 208
 1d0:	aa 33       	cpi	r26, 0x3A	; 58
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <__ultoa_common+0x32>
 1d4:	a9 5d       	subi	r26, 0xD9	; 217
 1d6:	a1 93       	st	Z+, r26
 1d8:	36 f7       	brtc	.-52     	; 0x1a6 <__ultoa_common+0x2>
 1da:	b1 11       	cpse	r27, r1
 1dc:	b1 93       	st	Z+, r27
 1de:	10 82       	st	Z, r1
 1e0:	ca 01       	movw	r24, r20
 1e2:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <strrev>

000001e6 <strrev>:
 1e6:	dc 01       	movw	r26, r24
 1e8:	fc 01       	movw	r30, r24
 1ea:	67 2f       	mov	r22, r23
 1ec:	71 91       	ld	r23, Z+
 1ee:	77 23       	and	r23, r23
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <strrev+0x4>
 1f2:	32 97       	sbiw	r30, 0x02	; 2
 1f4:	04 c0       	rjmp	.+8      	; 0x1fe <strrev+0x18>
 1f6:	7c 91       	ld	r23, X
 1f8:	6d 93       	st	X+, r22
 1fa:	70 83       	st	Z, r23
 1fc:	62 91       	ld	r22, -Z
 1fe:	ae 17       	cp	r26, r30
 200:	bf 07       	cpc	r27, r31
 202:	c8 f3       	brcs	.-14     	; 0x1f6 <strrev+0x10>
 204:	08 95       	ret

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
