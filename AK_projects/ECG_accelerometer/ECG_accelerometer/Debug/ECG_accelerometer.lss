
ECG_accelerometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000a42  00000ad6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800134  00800134  00000b0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000238c  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087a  00000000  00000000  000030d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000092f  00000000  00000000  0000394a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005ec  00000000  00000000  0000427c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c6  00000000  00000000  00004868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000192d  00000000  00000000  00004f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000685b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	3e 02       	muls	r19, r30
  6a:	54 02       	muls	r21, r20
  6c:	6b 02       	muls	r22, r27
  6e:	82 02       	muls	r24, r18
  70:	99 02       	muls	r25, r25
  72:	b0 02       	muls	r27, r16
  74:	c7 02       	muls	r28, r23

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e2 e4       	ldi	r30, 0x42	; 66
  8a:	fa e0       	ldi	r31, 0x0A	; 10
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a4 33       	cpi	r26, 0x34	; 52
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a4 e3       	ldi	r26, 0x34	; 52
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ac 33       	cpi	r26, 0x3C	; 60
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 56 04 	call	0x8ac	; 0x8ac <main>
  ac:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <MPU6050_test_I2C>:
			gy_bias[j] += gyro[j];
		}
	}
	
	for (uint8_t k = 0; k < 3; k++) {
		gy_bias[k] = gy_bias[k] / 1024;
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	1f 92       	push	r1
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	19 82       	std	Y+1, r1	; 0x01
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	ae 01       	movw	r20, r28
  c6:	4f 5f       	subi	r20, 0xFF	; 255
  c8:	5f 4f       	sbci	r21, 0xFF	; 255
  ca:	65 e7       	ldi	r22, 0x75	; 117
  cc:	80 ed       	ldi	r24, 0xD0	; 208
  ce:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	99 81       	ldd	r25, Y+1	; 0x01
  d6:	98 36       	cpi	r25, 0x68	; 104
  d8:	09 f0       	breq	.+2      	; 0xdc <MPU6050_test_I2C+0x28>
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0f 90       	pop	r0
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <MPU6050_get_accel>:
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	00 d0       	rcall	.+0      	; 0xee <MPU6050_get_accel+0xa>
  ee:	00 d0       	rcall	.+0      	; 0xf0 <MPU6050_get_accel+0xc>
  f0:	00 d0       	rcall	.+0      	; 0xf2 <MPU6050_get_accel+0xe>
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	8c 01       	movw	r16, r24
  f8:	26 e0       	ldi	r18, 0x06	; 6
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	ae 01       	movw	r20, r28
  fe:	4f 5f       	subi	r20, 0xFF	; 255
 100:	5f 4f       	sbci	r21, 0xFF	; 255
 102:	6b e3       	ldi	r22, 0x3B	; 59
 104:	80 ed       	ldi	r24, 0xD0	; 208
 106:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	98 2f       	mov	r25, r24
 110:	88 27       	eor	r24, r24
 112:	2a 81       	ldd	r18, Y+2	; 0x02
 114:	82 2b       	or	r24, r18
 116:	f8 01       	movw	r30, r16
 118:	91 83       	std	Z+1, r25	; 0x01
 11a:	80 83       	st	Z, r24
 11c:	2b 81       	ldd	r18, Y+3	; 0x03
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	32 2f       	mov	r19, r18
 122:	22 27       	eor	r18, r18
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
 124:	8c 81       	ldd	r24, Y+4	; 0x04
 126:	28 2b       	or	r18, r24
 128:	33 83       	std	Z+3, r19	; 0x03
 12a:	22 83       	std	Z+2, r18	; 0x02
 12c:	2d 81       	ldd	r18, Y+5	; 0x05
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	32 2f       	mov	r19, r18
 132:	22 27       	eor	r18, r18
 134:	8e 81       	ldd	r24, Y+6	; 0x06
 136:	28 2b       	or	r18, r24
 138:	35 83       	std	Z+5, r19	; 0x05
 13a:	24 83       	std	Z+4, r18	; 0x04
 13c:	26 96       	adiw	r28, 0x06	; 6
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	de bf       	out	0x3e, r29	; 62
 144:	0f be       	out	0x3f, r0	; 63
 146:	cd bf       	out	0x3d, r28	; 61
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	08 95       	ret

00000152 <MPU6050_set_sleepMode>:
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	00 d0       	rcall	.+0      	; 0x158 <MPU6050_set_sleepMode+0x6>
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	88 23       	and	r24, r24
 15e:	c1 f0       	breq	.+48     	; 0x190 <MPU6050_set_sleepMode+0x3e>
	
	char gyrX_str[16], gyrY_str[16], gyrZ_str[16];
	ltoa(gy_bias[0],gyrX_str,10);
	ltoa(gy_bias[1],gyrY_str,10);
	ltoa(gy_bias[2],gyrZ_str,10);
	printString(gyrX_str); printString("_");
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	61 f5       	brne	.+88     	; 0x1bc <MPU6050_set_sleepMode+0x6a>
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	ae 01       	movw	r20, r28
 16a:	4f 5f       	subi	r20, 0xFF	; 255
 16c:	5f 4f       	sbci	r21, 0xFF	; 255
 16e:	6b e6       	ldi	r22, 0x6B	; 107
	printString(gyrY_str); printString("_");
 170:	80 ed       	ldi	r24, 0xD0	; 208
 172:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	8a 83       	std	Y+2, r24	; 0x02
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	30 e0       	ldi	r19, 0x00	; 0
	printLine(gyrZ_str);
 180:	ae 01       	movw	r20, r28
 182:	4e 5f       	subi	r20, 0xFE	; 254
 184:	5f 4f       	sbci	r21, 0xFF	; 255
 186:	6b e6       	ldi	r22, 0x6B	; 107
	
	MPU6050_set_gyro_bias_reg(gy_bias);
 188:	80 ed       	ldi	r24, 0xD0	; 208
 18a:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
 18e:	2b c0       	rjmp	.+86     	; 0x1e6 <MPU6050_set_sleepMode+0x94>
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	ae 01       	movw	r20, r28
 196:	4f 5f       	subi	r20, 0xFF	; 255
 198:	5f 4f       	sbci	r21, 0xFF	; 255
 19a:	6b e6       	ldi	r22, 0x6B	; 107
 19c:	80 ed       	ldi	r24, 0xD0	; 208
 19e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	8f 7b       	andi	r24, 0xBF	; 191
 1a6:	8a 83       	std	Y+2, r24	; 0x02
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
				break;
		case 0:
				i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
				power_reg_write = power_reg_read & ~(0b01000000);
				power_reg_write |= (0b00000000);
				i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 1ac:	ae 01       	movw	r20, r28
 1ae:	4e 5f       	subi	r20, 0xFE	; 254
 1b0:	5f 4f       	sbci	r21, 0xFF	; 255
 1b2:	6b e6       	ldi	r22, 0x6B	; 107
 1b4:	80 ed       	ldi	r24, 0xD0	; 208
 1b6:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
				break;
 1ba:	15 c0       	rjmp	.+42     	; 0x1e6 <MPU6050_set_sleepMode+0x94>
		default:
				i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	ae 01       	movw	r20, r28
 1c2:	4f 5f       	subi	r20, 0xFF	; 255
 1c4:	5f 4f       	sbci	r21, 0xFF	; 255
 1c6:	6b e6       	ldi	r22, 0x6B	; 107
 1c8:	80 ed       	ldi	r24, 0xD0	; 208
 1ca:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
				power_reg_write = power_reg_read & ~(0b01000000);
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
				power_reg_write |= (0b01000000);
 1d0:	80 64       	ori	r24, 0x40	; 64
 1d2:	8a 83       	std	Y+2, r24	; 0x02
				i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 1d4:	21 e0       	ldi	r18, 0x01	; 1
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	ae 01       	movw	r20, r28
 1da:	4e 5f       	subi	r20, 0xFE	; 254
 1dc:	5f 4f       	sbci	r21, 0xFF	; 255
 1de:	6b e6       	ldi	r22, 0x6B	; 107
 1e0:	80 ed       	ldi	r24, 0xD0	; 208
 1e2:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
				break;
	}
}
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <MPU6050_set_gyroFS>:

void MPU6050_set_gyroFS(uint8_t gyroFS)
{
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	1f 92       	push	r1
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
	uint8_t gyroFSregValue = 0;
	
	switch(gyroFS) {
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	49 f0       	breq	.+18     	; 0x210 <MPU6050_set_gyroFS+0x20>
 1fe:	83 30       	cpi	r24, 0x03	; 3
 200:	51 f0       	breq	.+20     	; 0x216 <MPU6050_set_gyroFS+0x26>
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	11 f0       	breq	.+4      	; 0x20a <MPU6050_set_gyroFS+0x1a>
	}
}

void MPU6050_set_gyroFS(uint8_t gyroFS)
{
	uint8_t gyroFSregValue = 0;
 206:	19 82       	std	Y+1, r1	; 0x01
 208:	08 c0       	rjmp	.+16     	; 0x21a <MPU6050_set_gyroFS+0x2a>
	switch(gyroFS) {
		case 0:
			gyroFSregValue = 0b00000000;
			break;
		case 1:
			gyroFSregValue = 0b00001000;
 20a:	88 e0       	ldi	r24, 0x08	; 8
 20c:	89 83       	std	Y+1, r24	; 0x01
			break;
 20e:	05 c0       	rjmp	.+10     	; 0x21a <MPU6050_set_gyroFS+0x2a>
		case 2:
			gyroFSregValue = 0b00010000;
 210:	80 e1       	ldi	r24, 0x10	; 16
 212:	89 83       	std	Y+1, r24	; 0x01
			break;
 214:	02 c0       	rjmp	.+4      	; 0x21a <MPU6050_set_gyroFS+0x2a>
		case 3:
			gyroFSregValue = 0b00011000;
 216:	88 e1       	ldi	r24, 0x18	; 24
 218:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			gyroFSregValue = 0b00000000;
	}
	i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG,&gyroFSregValue,1);
 21a:	21 e0       	ldi	r18, 0x01	; 1
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	ae 01       	movw	r20, r28
 220:	4f 5f       	subi	r20, 0xFF	; 255
 222:	5f 4f       	sbci	r21, 0xFF	; 255
 224:	6b e1       	ldi	r22, 0x1B	; 27
 226:	80 ed       	ldi	r24, 0xD0	; 208
 228:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
}
 22c:	0f 90       	pop	r0
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <MPU6050_set_accelFS>:

void MPU6050_set_accelFS(uint8_t accelFS)
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	00 d0       	rcall	.+0      	; 0x23a <MPU6050_set_accelFS+0x6>
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62
	uint8_t accel_config_read, accel_config_write;
	
	switch(accelFS) {
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	e9 f0       	breq	.+58     	; 0x27c <MPU6050_set_accelFS+0x48>
 242:	30 f0       	brcs	.+12     	; 0x250 <MPU6050_set_accelFS+0x1c>
 244:	82 30       	cpi	r24, 0x02	; 2
 246:	89 f1       	breq	.+98     	; 0x2aa <MPU6050_set_accelFS+0x76>
 248:	83 30       	cpi	r24, 0x03	; 3
 24a:	09 f4       	brne	.+2      	; 0x24e <MPU6050_set_accelFS+0x1a>
 24c:	45 c0       	rjmp	.+138    	; 0x2d8 <MPU6050_set_accelFS+0xa4>
 24e:	5a c0       	rjmp	.+180    	; 0x304 <MPU6050_set_accelFS+0xd0>
		case 0:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 250:	21 e0       	ldi	r18, 0x01	; 1
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	ae 01       	movw	r20, r28
 256:	4f 5f       	subi	r20, 0xFF	; 255
 258:	5f 4f       	sbci	r21, 0xFF	; 255
 25a:	6c e1       	ldi	r22, 0x1C	; 28
 25c:	80 ed       	ldi	r24, 0xD0	; 208
 25e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	87 7e       	andi	r24, 0xE7	; 231
 266:	8a 83       	std	Y+2, r24	; 0x02
			accel_config_write |= (0b00000000);
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	ae 01       	movw	r20, r28
 26e:	4e 5f       	subi	r20, 0xFE	; 254
 270:	5f 4f       	sbci	r21, 0xFF	; 255
 272:	6c e1       	ldi	r22, 0x1C	; 28
 274:	80 ed       	ldi	r24, 0xD0	; 208
 276:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
			break;
 27a:	59 c0       	rjmp	.+178    	; 0x32e <MPU6050_set_accelFS+0xfa>
		case 1:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 27c:	21 e0       	ldi	r18, 0x01	; 1
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	ae 01       	movw	r20, r28
 282:	4f 5f       	subi	r20, 0xFF	; 255
 284:	5f 4f       	sbci	r21, 0xFF	; 255
 286:	6c e1       	ldi	r22, 0x1C	; 28
 288:	80 ed       	ldi	r24, 0xD0	; 208
 28a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 28e:	89 81       	ldd	r24, Y+1	; 0x01
 290:	87 7e       	andi	r24, 0xE7	; 231
			accel_config_write |= (0b00001000);
 292:	88 60       	ori	r24, 0x08	; 8
 294:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	ae 01       	movw	r20, r28
 29c:	4e 5f       	subi	r20, 0xFE	; 254
 29e:	5f 4f       	sbci	r21, 0xFF	; 255
 2a0:	6c e1       	ldi	r22, 0x1C	; 28
 2a2:	80 ed       	ldi	r24, 0xD0	; 208
 2a4:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
			break;
 2a8:	42 c0       	rjmp	.+132    	; 0x32e <MPU6050_set_accelFS+0xfa>
		case 2:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	ae 01       	movw	r20, r28
 2b0:	4f 5f       	subi	r20, 0xFF	; 255
 2b2:	5f 4f       	sbci	r21, 0xFF	; 255
 2b4:	6c e1       	ldi	r22, 0x1C	; 28
 2b6:	80 ed       	ldi	r24, 0xD0	; 208
 2b8:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	87 7e       	andi	r24, 0xE7	; 231
			accel_config_write |= (0b00010000);
 2c0:	80 61       	ori	r24, 0x10	; 16
 2c2:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 2c4:	21 e0       	ldi	r18, 0x01	; 1
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	ae 01       	movw	r20, r28
 2ca:	4e 5f       	subi	r20, 0xFE	; 254
 2cc:	5f 4f       	sbci	r21, 0xFF	; 255
 2ce:	6c e1       	ldi	r22, 0x1C	; 28
 2d0:	80 ed       	ldi	r24, 0xD0	; 208
 2d2:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
			break;
 2d6:	2b c0       	rjmp	.+86     	; 0x32e <MPU6050_set_accelFS+0xfa>
		case 3:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 2d8:	21 e0       	ldi	r18, 0x01	; 1
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	ae 01       	movw	r20, r28
 2de:	4f 5f       	subi	r20, 0xFF	; 255
 2e0:	5f 4f       	sbci	r21, 0xFF	; 255
 2e2:	6c e1       	ldi	r22, 0x1C	; 28
 2e4:	80 ed       	ldi	r24, 0xD0	; 208
 2e6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
			accel_config_write |= (0b00011000);
 2ec:	88 61       	ori	r24, 0x18	; 24
 2ee:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	ae 01       	movw	r20, r28
 2f6:	4e 5f       	subi	r20, 0xFE	; 254
 2f8:	5f 4f       	sbci	r21, 0xFF	; 255
 2fa:	6c e1       	ldi	r22, 0x1C	; 28
 2fc:	80 ed       	ldi	r24, 0xD0	; 208
 2fe:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
			break;
 302:	15 c0       	rjmp	.+42     	; 0x32e <MPU6050_set_accelFS+0xfa>
		default:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_read, 1);
 304:	21 e0       	ldi	r18, 0x01	; 1
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	ae 01       	movw	r20, r28
 30a:	4f 5f       	subi	r20, 0xFF	; 255
 30c:	5f 4f       	sbci	r21, 0xFF	; 255
 30e:	6c e1       	ldi	r22, 0x1C	; 28
 310:	80 ed       	ldi	r24, 0xD0	; 208
 312:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
			accel_config_write = accel_config_read & ~(0b00011000);
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	87 7e       	andi	r24, 0xE7	; 231
 31a:	8a 83       	std	Y+2, r24	; 0x02
			accel_config_write |= (0b00000000);
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, &accel_config_write, 1);
 31c:	21 e0       	ldi	r18, 0x01	; 1
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	ae 01       	movw	r20, r28
 322:	4e 5f       	subi	r20, 0xFE	; 254
 324:	5f 4f       	sbci	r21, 0xFF	; 255
 326:	6c e1       	ldi	r22, 0x1C	; 28
 328:	80 ed       	ldi	r24, 0xD0	; 208
 32a:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
			break;
	}
}
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <MPU6050_set_clockSource>:

void MPU6050_set_clockSource(uint8_t clockSource)
{
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	00 d0       	rcall	.+0      	; 0x33e <MPU6050_set_clockSource+0x6>
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
	uint8_t power_reg_read, power_reg_write;
	switch(clockSource) {
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	e9 f0       	breq	.+58     	; 0x380 <MPU6050_set_clockSource+0x48>
 346:	30 f0       	brcs	.+12     	; 0x354 <MPU6050_set_clockSource+0x1c>
 348:	82 30       	cpi	r24, 0x02	; 2
 34a:	89 f1       	breq	.+98     	; 0x3ae <MPU6050_set_clockSource+0x76>
 34c:	83 30       	cpi	r24, 0x03	; 3
 34e:	09 f4       	brne	.+2      	; 0x352 <MPU6050_set_clockSource+0x1a>
 350:	45 c0       	rjmp	.+138    	; 0x3dc <MPU6050_set_clockSource+0xa4>
 352:	5b c0       	rjmp	.+182    	; 0x40a <MPU6050_set_clockSource+0xd2>
		case 0:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	ae 01       	movw	r20, r28
 35a:	4f 5f       	subi	r20, 0xFF	; 255
 35c:	5f 4f       	sbci	r21, 0xFF	; 255
 35e:	6b e6       	ldi	r22, 0x6B	; 107
 360:	80 ed       	ldi	r24, 0xD0	; 208
 362:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 366:	89 81       	ldd	r24, Y+1	; 0x01
 368:	88 7f       	andi	r24, 0xF8	; 248
 36a:	8a 83       	std	Y+2, r24	; 0x02
			power_reg_write |= (0b00000000);
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 36c:	21 e0       	ldi	r18, 0x01	; 1
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	ae 01       	movw	r20, r28
 372:	4e 5f       	subi	r20, 0xFE	; 254
 374:	5f 4f       	sbci	r21, 0xFF	; 255
 376:	6b e6       	ldi	r22, 0x6B	; 107
 378:	80 ed       	ldi	r24, 0xD0	; 208
 37a:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
			break;
 37e:	5b c0       	rjmp	.+182    	; 0x436 <MPU6050_set_clockSource+0xfe>
		case 1:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 380:	21 e0       	ldi	r18, 0x01	; 1
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	ae 01       	movw	r20, r28
 386:	4f 5f       	subi	r20, 0xFF	; 255
 388:	5f 4f       	sbci	r21, 0xFF	; 255
 38a:	6b e6       	ldi	r22, 0x6B	; 107
 38c:	80 ed       	ldi	r24, 0xD0	; 208
 38e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 392:	89 81       	ldd	r24, Y+1	; 0x01
 394:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000001);
 396:	81 60       	ori	r24, 0x01	; 1
 398:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	ae 01       	movw	r20, r28
 3a0:	4e 5f       	subi	r20, 0xFE	; 254
 3a2:	5f 4f       	sbci	r21, 0xFF	; 255
 3a4:	6b e6       	ldi	r22, 0x6B	; 107
 3a6:	80 ed       	ldi	r24, 0xD0	; 208
 3a8:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
			break;
 3ac:	44 c0       	rjmp	.+136    	; 0x436 <MPU6050_set_clockSource+0xfe>
		case 2:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 3ae:	21 e0       	ldi	r18, 0x01	; 1
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	ae 01       	movw	r20, r28
 3b4:	4f 5f       	subi	r20, 0xFF	; 255
 3b6:	5f 4f       	sbci	r21, 0xFF	; 255
 3b8:	6b e6       	ldi	r22, 0x6B	; 107
 3ba:	80 ed       	ldi	r24, 0xD0	; 208
 3bc:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 3c0:	89 81       	ldd	r24, Y+1	; 0x01
 3c2:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000010);
 3c4:	82 60       	ori	r24, 0x02	; 2
 3c6:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 3c8:	21 e0       	ldi	r18, 0x01	; 1
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	ae 01       	movw	r20, r28
 3ce:	4e 5f       	subi	r20, 0xFE	; 254
 3d0:	5f 4f       	sbci	r21, 0xFF	; 255
 3d2:	6b e6       	ldi	r22, 0x6B	; 107
 3d4:	80 ed       	ldi	r24, 0xD0	; 208
 3d6:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
			break;
 3da:	2d c0       	rjmp	.+90     	; 0x436 <MPU6050_set_clockSource+0xfe>
		case 3:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 3dc:	21 e0       	ldi	r18, 0x01	; 1
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	ae 01       	movw	r20, r28
 3e2:	4f 5f       	subi	r20, 0xFF	; 255
 3e4:	5f 4f       	sbci	r21, 0xFF	; 255
 3e6:	6b e6       	ldi	r22, 0x6B	; 107
 3e8:	80 ed       	ldi	r24, 0xD0	; 208
 3ea:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000011);
 3f2:	83 60       	ori	r24, 0x03	; 3
 3f4:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 3f6:	21 e0       	ldi	r18, 0x01	; 1
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	ae 01       	movw	r20, r28
 3fc:	4e 5f       	subi	r20, 0xFE	; 254
 3fe:	5f 4f       	sbci	r21, 0xFF	; 255
 400:	6b e6       	ldi	r22, 0x6B	; 107
 402:	80 ed       	ldi	r24, 0xD0	; 208
 404:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
			break;
 408:	16 c0       	rjmp	.+44     	; 0x436 <MPU6050_set_clockSource+0xfe>
		default:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_read, 1);
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	ae 01       	movw	r20, r28
 410:	4f 5f       	subi	r20, 0xFF	; 255
 412:	5f 4f       	sbci	r21, 0xFF	; 255
 414:	6b e6       	ldi	r22, 0x6B	; 107
 416:	80 ed       	ldi	r24, 0xD0	; 208
 418:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
			power_reg_write = power_reg_read & ~(0b00000111);
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	88 7f       	andi	r24, 0xF8	; 248
			power_reg_write |= (0b00000001);
 420:	81 60       	ori	r24, 0x01	; 1
 422:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, &power_reg_write, 1);
 424:	21 e0       	ldi	r18, 0x01	; 1
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	ae 01       	movw	r20, r28
 42a:	4e 5f       	subi	r20, 0xFE	; 254
 42c:	5f 4f       	sbci	r21, 0xFF	; 255
 42e:	6b e6       	ldi	r22, 0x6B	; 107
 430:	80 ed       	ldi	r24, 0xD0	; 208
 432:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
			break;
	}
}
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <MPU6050_init>:
#include "i2c_master.h"
#include "USART.h"

void MPU6050_init()
{
	i2c_init();
 440:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <i2c_init>
	MPU6050_set_clockSource(1);
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 9c 01 	call	0x338	; 0x338 <MPU6050_set_clockSource>
	MPU6050_set_gyroFS(2);
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <MPU6050_set_gyroFS>
	MPU6050_set_accelFS(0);
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 1a 01 	call	0x234	; 0x234 <MPU6050_set_accelFS>
	MPU6050_set_sleepMode(0);
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	0e 94 a9 00 	call	0x152	; 0x152 <MPU6050_set_sleepMode>
 45c:	08 95       	ret

0000045e <MPU6050_set_dlpf>:
			break;
	}
}

void MPU6050_set_dlpf(uint8_t dlpf)
{
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	00 d0       	rcall	.+0      	; 0x464 <MPU6050_set_dlpf+0x6>
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
	uint8_t config_reg_read, config_reg_write;
	switch(dlpf) {
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	87 30       	cpi	r24, 0x07	; 7
 46c:	91 05       	cpc	r25, r1
 46e:	08 f0       	brcs	.+2      	; 0x472 <MPU6050_set_dlpf+0x14>
 470:	a5 c0       	rjmp	.+330    	; 0x5bc <MPU6050_set_dlpf+0x15e>
 472:	fc 01       	movw	r30, r24
 474:	ec 5c       	subi	r30, 0xCC	; 204
 476:	ff 4f       	sbci	r31, 0xFF	; 255
 478:	0c 94 c2 04 	jmp	0x984	; 0x984 <__tablejump2__>
		case 0:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_CONFIG, &config_reg_read, 1);
 47c:	21 e0       	ldi	r18, 0x01	; 1
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	ae 01       	movw	r20, r28
 482:	4f 5f       	subi	r20, 0xFF	; 255
 484:	5f 4f       	sbci	r21, 0xFF	; 255
 486:	6a e1       	ldi	r22, 0x1A	; 26
 488:	80 ed       	ldi	r24, 0xD0	; 208
 48a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
			config_reg_write = config_reg_read & ~(0b00000111);
 48e:	89 81       	ldd	r24, Y+1	; 0x01
 490:	88 7f       	andi	r24, 0xF8	; 248
 492:	8a 83       	std	Y+2, r24	; 0x02
			config_reg_write |= (0b00000000);
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_CONFIG, &config_reg_write, 1);
 494:	21 e0       	ldi	r18, 0x01	; 1
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	ae 01       	movw	r20, r28
 49a:	4e 5f       	subi	r20, 0xFE	; 254
 49c:	5f 4f       	sbci	r21, 0xFF	; 255
 49e:	6a e1       	ldi	r22, 0x1A	; 26
 4a0:	80 ed       	ldi	r24, 0xD0	; 208
 4a2:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
			break;
 4a6:	9f c0       	rjmp	.+318    	; 0x5e6 <MPU6050_set_dlpf+0x188>
		case 1:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_CONFIG, &config_reg_read, 1);
 4a8:	21 e0       	ldi	r18, 0x01	; 1
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	ae 01       	movw	r20, r28
 4ae:	4f 5f       	subi	r20, 0xFF	; 255
 4b0:	5f 4f       	sbci	r21, 0xFF	; 255
 4b2:	6a e1       	ldi	r22, 0x1A	; 26
 4b4:	80 ed       	ldi	r24, 0xD0	; 208
 4b6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
			config_reg_write = config_reg_read & ~(0b00000111);
 4ba:	89 81       	ldd	r24, Y+1	; 0x01
 4bc:	88 7f       	andi	r24, 0xF8	; 248
			config_reg_write |= (0b00000001);
 4be:	81 60       	ori	r24, 0x01	; 1
 4c0:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_CONFIG, &config_reg_write, 1);
 4c2:	21 e0       	ldi	r18, 0x01	; 1
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	ae 01       	movw	r20, r28
 4c8:	4e 5f       	subi	r20, 0xFE	; 254
 4ca:	5f 4f       	sbci	r21, 0xFF	; 255
 4cc:	6a e1       	ldi	r22, 0x1A	; 26
 4ce:	80 ed       	ldi	r24, 0xD0	; 208
 4d0:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
			break;
 4d4:	88 c0       	rjmp	.+272    	; 0x5e6 <MPU6050_set_dlpf+0x188>
		case 2:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_CONFIG, &config_reg_read, 1);
 4d6:	21 e0       	ldi	r18, 0x01	; 1
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	ae 01       	movw	r20, r28
 4dc:	4f 5f       	subi	r20, 0xFF	; 255
 4de:	5f 4f       	sbci	r21, 0xFF	; 255
 4e0:	6a e1       	ldi	r22, 0x1A	; 26
 4e2:	80 ed       	ldi	r24, 0xD0	; 208
 4e4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
			config_reg_write = config_reg_read & ~(0b00000111);
 4e8:	89 81       	ldd	r24, Y+1	; 0x01
 4ea:	88 7f       	andi	r24, 0xF8	; 248
			config_reg_write |= (0b00000010);
 4ec:	82 60       	ori	r24, 0x02	; 2
 4ee:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_CONFIG, &config_reg_write, 1);
 4f0:	21 e0       	ldi	r18, 0x01	; 1
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	ae 01       	movw	r20, r28
 4f6:	4e 5f       	subi	r20, 0xFE	; 254
 4f8:	5f 4f       	sbci	r21, 0xFF	; 255
 4fa:	6a e1       	ldi	r22, 0x1A	; 26
 4fc:	80 ed       	ldi	r24, 0xD0	; 208
 4fe:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
			break;
 502:	71 c0       	rjmp	.+226    	; 0x5e6 <MPU6050_set_dlpf+0x188>
		case 3:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_CONFIG, &config_reg_read, 1);
 504:	21 e0       	ldi	r18, 0x01	; 1
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	ae 01       	movw	r20, r28
 50a:	4f 5f       	subi	r20, 0xFF	; 255
 50c:	5f 4f       	sbci	r21, 0xFF	; 255
 50e:	6a e1       	ldi	r22, 0x1A	; 26
 510:	80 ed       	ldi	r24, 0xD0	; 208
 512:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
			config_reg_write = config_reg_read & ~(0b00000111);
 516:	89 81       	ldd	r24, Y+1	; 0x01
 518:	88 7f       	andi	r24, 0xF8	; 248
			config_reg_write |= (0b00000011);
 51a:	83 60       	ori	r24, 0x03	; 3
 51c:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_CONFIG, &config_reg_write, 1);
 51e:	21 e0       	ldi	r18, 0x01	; 1
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	ae 01       	movw	r20, r28
 524:	4e 5f       	subi	r20, 0xFE	; 254
 526:	5f 4f       	sbci	r21, 0xFF	; 255
 528:	6a e1       	ldi	r22, 0x1A	; 26
 52a:	80 ed       	ldi	r24, 0xD0	; 208
 52c:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
			break;
 530:	5a c0       	rjmp	.+180    	; 0x5e6 <MPU6050_set_dlpf+0x188>
		case 4:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_CONFIG, &config_reg_read, 1);
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	ae 01       	movw	r20, r28
 538:	4f 5f       	subi	r20, 0xFF	; 255
 53a:	5f 4f       	sbci	r21, 0xFF	; 255
 53c:	6a e1       	ldi	r22, 0x1A	; 26
 53e:	80 ed       	ldi	r24, 0xD0	; 208
 540:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
			config_reg_write = config_reg_read & ~(0b00000111);
 544:	89 81       	ldd	r24, Y+1	; 0x01
 546:	88 7f       	andi	r24, 0xF8	; 248
			config_reg_write |= (0b00000100);
 548:	84 60       	ori	r24, 0x04	; 4
 54a:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_CONFIG, &config_reg_write, 1);
 54c:	21 e0       	ldi	r18, 0x01	; 1
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	ae 01       	movw	r20, r28
 552:	4e 5f       	subi	r20, 0xFE	; 254
 554:	5f 4f       	sbci	r21, 0xFF	; 255
 556:	6a e1       	ldi	r22, 0x1A	; 26
 558:	80 ed       	ldi	r24, 0xD0	; 208
 55a:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
			break;
 55e:	43 c0       	rjmp	.+134    	; 0x5e6 <MPU6050_set_dlpf+0x188>
		case 5:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_CONFIG, &config_reg_read, 1);
 560:	21 e0       	ldi	r18, 0x01	; 1
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	ae 01       	movw	r20, r28
 566:	4f 5f       	subi	r20, 0xFF	; 255
 568:	5f 4f       	sbci	r21, 0xFF	; 255
 56a:	6a e1       	ldi	r22, 0x1A	; 26
 56c:	80 ed       	ldi	r24, 0xD0	; 208
 56e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
			config_reg_write = config_reg_read & ~(0b00000111);
 572:	89 81       	ldd	r24, Y+1	; 0x01
 574:	88 7f       	andi	r24, 0xF8	; 248
			config_reg_write |= (0b00000101);
 576:	85 60       	ori	r24, 0x05	; 5
 578:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_CONFIG, &config_reg_write, 1);
 57a:	21 e0       	ldi	r18, 0x01	; 1
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	ae 01       	movw	r20, r28
 580:	4e 5f       	subi	r20, 0xFE	; 254
 582:	5f 4f       	sbci	r21, 0xFF	; 255
 584:	6a e1       	ldi	r22, 0x1A	; 26
 586:	80 ed       	ldi	r24, 0xD0	; 208
 588:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
			break;
 58c:	2c c0       	rjmp	.+88     	; 0x5e6 <MPU6050_set_dlpf+0x188>
		case 6:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_CONFIG, &config_reg_read, 1);
 58e:	21 e0       	ldi	r18, 0x01	; 1
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	ae 01       	movw	r20, r28
 594:	4f 5f       	subi	r20, 0xFF	; 255
 596:	5f 4f       	sbci	r21, 0xFF	; 255
 598:	6a e1       	ldi	r22, 0x1A	; 26
 59a:	80 ed       	ldi	r24, 0xD0	; 208
 59c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
			config_reg_write = config_reg_read & ~(0b00000111);
 5a0:	89 81       	ldd	r24, Y+1	; 0x01
 5a2:	88 7f       	andi	r24, 0xF8	; 248
			config_reg_write |= (0b00000110);
 5a4:	86 60       	ori	r24, 0x06	; 6
 5a6:	8a 83       	std	Y+2, r24	; 0x02
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_CONFIG, &config_reg_write, 1);
 5a8:	21 e0       	ldi	r18, 0x01	; 1
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	ae 01       	movw	r20, r28
 5ae:	4e 5f       	subi	r20, 0xFE	; 254
 5b0:	5f 4f       	sbci	r21, 0xFF	; 255
 5b2:	6a e1       	ldi	r22, 0x1A	; 26
 5b4:	80 ed       	ldi	r24, 0xD0	; 208
 5b6:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
			break;
 5ba:	15 c0       	rjmp	.+42     	; 0x5e6 <MPU6050_set_dlpf+0x188>
		default:
			i2c_readReg(MPU6050_ADDRESS, MPU6050_RA_CONFIG, &config_reg_read, 1);
 5bc:	21 e0       	ldi	r18, 0x01	; 1
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	ae 01       	movw	r20, r28
 5c2:	4f 5f       	subi	r20, 0xFF	; 255
 5c4:	5f 4f       	sbci	r21, 0xFF	; 255
 5c6:	6a e1       	ldi	r22, 0x1A	; 26
 5c8:	80 ed       	ldi	r24, 0xD0	; 208
 5ca:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_readReg>
			config_reg_write = config_reg_read & ~(0b00000111);
 5ce:	89 81       	ldd	r24, Y+1	; 0x01
 5d0:	88 7f       	andi	r24, 0xF8	; 248
 5d2:	8a 83       	std	Y+2, r24	; 0x02
			config_reg_write |= (0b00000000);
			i2c_writeReg(MPU6050_ADDRESS, MPU6050_RA_CONFIG, &config_reg_write, 1);
 5d4:	21 e0       	ldi	r18, 0x01	; 1
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	ae 01       	movw	r20, r28
 5da:	4e 5f       	subi	r20, 0xFE	; 254
 5dc:	5f 4f       	sbci	r21, 0xFF	; 255
 5de:	6a e1       	ldi	r22, 0x1A	; 26
 5e0:	80 ed       	ldi	r24, 0xD0	; 208
 5e2:	0e 94 49 03 	call	0x692	; 0x692 <i2c_writeReg>
			break;
	}
}
 5e6:	0f 90       	pop	r0
 5e8:	0f 90       	pop	r0
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	08 95       	ret

000005f0 <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
 5f0:	88 e4       	ldi	r24, 0x48	; 72
 5f2:	80 93 b8 00 	sts	0x00B8, r24
 5f6:	08 95       	ret

000005f8 <i2c_start>:
}

uint8_t i2c_start(uint8_t address)
{
	// reset TWI control register
	TWCR = 0;
 5f8:	ec eb       	ldi	r30, 0xBC	; 188
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	10 82       	st	Z, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 5fe:	94 ea       	ldi	r25, 0xA4	; 164
 600:	90 83       	st	Z, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 602:	90 81       	ld	r25, Z
 604:	99 23       	and	r25, r25
 606:	ec f7       	brge	.-6      	; 0x602 <i2c_start+0xa>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 608:	90 91 b9 00 	lds	r25, 0x00B9
 60c:	98 7f       	andi	r25, 0xF8	; 248
 60e:	98 30       	cpi	r25, 0x08	; 8
 610:	a1 f4       	brne	.+40     	; 0x63a <i2c_start+0x42>
	
	// load slave address into data register
	TWDR = address;
 612:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
 616:	84 e8       	ldi	r24, 0x84	; 132
 618:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 61c:	ec eb       	ldi	r30, 0xBC	; 188
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	88 23       	and	r24, r24
 624:	ec f7       	brge	.-6      	; 0x620 <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
 626:	90 91 b9 00 	lds	r25, 0x00B9
 62a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 62c:	98 31       	cpi	r25, 0x18	; 24
 62e:	39 f0       	breq	.+14     	; 0x63e <i2c_start+0x46>
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 34       	cpi	r25, 0x40	; 64
 634:	29 f4       	brne	.+10     	; 0x640 <i2c_start+0x48>
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
 63e:	80 e0       	ldi	r24, 0x00	; 0
}
 640:	08 95       	ret

00000642 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
 642:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
 646:	84 e8       	ldi	r24, 0x84	; 132
 648:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 64c:	ec eb       	ldi	r30, 0xBC	; 188
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	80 81       	ld	r24, Z
 652:	88 23       	and	r24, r24
 654:	ec f7       	brge	.-6      	; 0x650 <i2c_write+0xe>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
 656:	90 91 b9 00 	lds	r25, 0x00B9
 65a:	98 7f       	andi	r25, 0xF8	; 248
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	98 32       	cpi	r25, 0x28	; 40
 660:	09 f4       	brne	.+2      	; 0x664 <i2c_write+0x22>
 662:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
 664:	08 95       	ret

00000666 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 666:	84 ec       	ldi	r24, 0xC4	; 196
 668:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 66c:	ec eb       	ldi	r30, 0xBC	; 188
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	80 81       	ld	r24, Z
 672:	88 23       	and	r24, r24
 674:	ec f7       	brge	.-6      	; 0x670 <i2c_read_ack+0xa>
	// return received data from TWDR
	return TWDR;
 676:	80 91 bb 00 	lds	r24, 0x00BB
}
 67a:	08 95       	ret

0000067c <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 67c:	84 e8       	ldi	r24, 0x84	; 132
 67e:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 682:	ec eb       	ldi	r30, 0xBC	; 188
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	80 81       	ld	r24, Z
 688:	88 23       	and	r24, r24
 68a:	ec f7       	brge	.-6      	; 0x686 <i2c_read_nack+0xa>
	// return received data from TWDR
	return TWDR;
 68c:	80 91 bb 00 	lds	r24, 0x00BB
}
 690:	08 95       	ret

00000692 <i2c_writeReg>:
	
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 692:	cf 92       	push	r12
 694:	df 92       	push	r13
 696:	ff 92       	push	r15
 698:	0f 93       	push	r16
 69a:	1f 93       	push	r17
 69c:	cf 93       	push	r28
 69e:	df 93       	push	r29
 6a0:	c6 2f       	mov	r28, r22
 6a2:	6a 01       	movw	r12, r20
 6a4:	89 01       	movw	r16, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 6a6:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <i2c_start>
 6aa:	f8 2e       	mov	r15, r24
 6ac:	81 11       	cpse	r24, r1
 6ae:	15 c0       	rjmp	.+42     	; 0x6da <i2c_writeReg+0x48>

	i2c_write(regaddr);
 6b0:	8c 2f       	mov	r24, r28
 6b2:	0e 94 21 03 	call	0x642	; 0x642 <i2c_write>

	for (uint16_t i = 0; i < length; i++)
 6b6:	01 15       	cp	r16, r1
 6b8:	11 05       	cpc	r17, r1
 6ba:	59 f0       	breq	.+22     	; 0x6d2 <i2c_writeReg+0x40>
 6bc:	e6 01       	movw	r28, r12
 6be:	0c 0d       	add	r16, r12
 6c0:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 6c2:	89 91       	ld	r24, Y+
 6c4:	0e 94 21 03 	call	0x642	; 0x642 <i2c_write>
 6c8:	81 11       	cpse	r24, r1
 6ca:	0a c0       	rjmp	.+20     	; 0x6e0 <i2c_writeReg+0x4e>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
 6cc:	c0 17       	cp	r28, r16
 6ce:	d1 07       	cpc	r29, r17
 6d0:	c1 f7       	brne	.-16     	; 0x6c2 <i2c_writeReg+0x30>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 6d2:	84 e9       	ldi	r24, 0x94	; 148
 6d4:	80 93 bc 00 	sts	0x00BC, r24
 6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <i2c_writeReg+0x52>
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
 6da:	ff 24       	eor	r15, r15
 6dc:	f3 94       	inc	r15
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <i2c_writeReg+0x52>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 6e0:	ff 24       	eor	r15, r15
 6e2:	f3 94       	inc	r15
	}

	i2c_stop();

	return 0;
}
 6e4:	8f 2d       	mov	r24, r15
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	1f 91       	pop	r17
 6ec:	0f 91       	pop	r16
 6ee:	ff 90       	pop	r15
 6f0:	df 90       	pop	r13
 6f2:	cf 90       	pop	r12
 6f4:	08 95       	ret

000006f6 <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 6f6:	af 92       	push	r10
 6f8:	bf 92       	push	r11
 6fa:	df 92       	push	r13
 6fc:	ef 92       	push	r14
 6fe:	ff 92       	push	r15
 700:	0f 93       	push	r16
 702:	1f 93       	push	r17
 704:	cf 93       	push	r28
 706:	df 93       	push	r29
 708:	18 2f       	mov	r17, r24
 70a:	06 2f       	mov	r16, r22
 70c:	5a 01       	movw	r10, r20
 70e:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
 710:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <i2c_start>
 714:	81 11       	cpse	r24, r1
 716:	22 c0       	rjmp	.+68     	; 0x75c <i2c_readReg+0x66>

	i2c_write(regaddr);
 718:	80 2f       	mov	r24, r16
 71a:	0e 94 21 03 	call	0x642	; 0x642 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 71e:	81 2f       	mov	r24, r17
 720:	81 60       	ori	r24, 0x01	; 1
 722:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <i2c_start>
 726:	d8 2e       	mov	r13, r24
 728:	81 11       	cpse	r24, r1
 72a:	1b c0       	rjmp	.+54     	; 0x762 <i2c_readReg+0x6c>

	for (uint16_t i = 0; i < (length-1); i++)
 72c:	8e 01       	movw	r16, r28
 72e:	01 50       	subi	r16, 0x01	; 1
 730:	11 09       	sbc	r17, r1
 732:	51 f0       	breq	.+20     	; 0x748 <i2c_readReg+0x52>
 734:	e5 01       	movw	r28, r10
 736:	75 01       	movw	r14, r10
 738:	e0 0e       	add	r14, r16
 73a:	f1 1e       	adc	r15, r17
	{
		data[i] = i2c_read_ack();
 73c:	0e 94 33 03 	call	0x666	; 0x666 <i2c_read_ack>
 740:	89 93       	st	Y+, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
 742:	ce 15       	cp	r28, r14
 744:	df 05       	cpc	r29, r15
 746:	d1 f7       	brne	.-12     	; 0x73c <i2c_readReg+0x46>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 748:	e5 01       	movw	r28, r10
 74a:	c0 0f       	add	r28, r16
 74c:	d1 1f       	adc	r29, r17
 74e:	0e 94 3e 03 	call	0x67c	; 0x67c <i2c_read_nack>
 752:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 754:	84 e9       	ldi	r24, 0x94	; 148
 756:	80 93 bc 00 	sts	0x00BC, r24
 75a:	05 c0       	rjmp	.+10     	; 0x766 <i2c_readReg+0x70>
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
 75c:	dd 24       	eor	r13, r13
 75e:	d3 94       	inc	r13
 760:	02 c0       	rjmp	.+4      	; 0x766 <i2c_readReg+0x70>

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
 762:	dd 24       	eor	r13, r13
 764:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 766:	8d 2d       	mov	r24, r13
 768:	df 91       	pop	r29
 76a:	cf 91       	pop	r28
 76c:	1f 91       	pop	r17
 76e:	0f 91       	pop	r16
 770:	ff 90       	pop	r15
 772:	ef 90       	pop	r14
 774:	df 90       	pop	r13
 776:	bf 90       	pop	r11
 778:	af 90       	pop	r10
 77a:	08 95       	ret

0000077c <init_tictoc>:

volatile uint32_t timer_us = 0, timer_ms = 0;

void init_tictoc()
{
	TCCR0A |= (1<<WGM01);
 77c:	84 b5       	in	r24, 0x24	; 36
 77e:	82 60       	ori	r24, 0x02	; 2
 780:	84 bd       	out	0x24, r24	; 36
	OCR0A = 250;
 782:	8a ef       	ldi	r24, 0xFA	; 250
 784:	87 bd       	out	0x27, r24	; 39
	// Set 64 clock prescaller on timer 0
	TCCR0B |= (1<<CS01) | (1<<CS00);
 786:	85 b5       	in	r24, 0x25	; 37
 788:	83 60       	ori	r24, 0x03	; 3
 78a:	85 bd       	out	0x25, r24	; 37
	// Set Timer/Counter0 Overflow interrupt Enable
	TIMSK0 |= (1<<OCIE0A);
 78c:	ee e6       	ldi	r30, 0x6E	; 110
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	80 81       	ld	r24, Z
 792:	82 60       	ori	r24, 0x02	; 2
 794:	80 83       	st	Z, r24
	// Global interrupt enable
	sei();
 796:	78 94       	sei
	TCNT0 = 0;
 798:	16 bc       	out	0x26, r1	; 38
 79a:	08 95       	ret

0000079c <tic>:
}

void tic()
{
	TCNT0 = 0;
 79c:	16 bc       	out	0x26, r1	; 38
	timer_us = 0;
 79e:	10 92 38 01 	sts	0x0138, r1
 7a2:	10 92 39 01 	sts	0x0139, r1
 7a6:	10 92 3a 01 	sts	0x013A, r1
 7aa:	10 92 3b 01 	sts	0x013B, r1
	timer_ms = 0;
 7ae:	10 92 34 01 	sts	0x0134, r1
 7b2:	10 92 35 01 	sts	0x0135, r1
 7b6:	10 92 36 01 	sts	0x0136, r1
 7ba:	10 92 37 01 	sts	0x0137, r1
 7be:	08 95       	ret

000007c0 <millis>:
}

uint32_t millis()
{
	return timer_ms;
 7c0:	60 91 34 01 	lds	r22, 0x0134
 7c4:	70 91 35 01 	lds	r23, 0x0135
 7c8:	80 91 36 01 	lds	r24, 0x0136
 7cc:	90 91 37 01 	lds	r25, 0x0137
}
 7d0:	08 95       	ret

000007d2 <__vector_14>:
	timer_us = (millis()*1000) + (TCNT0*4);
	return timer_us;
}

ISR(TIMER0_COMPA_vect)
{
 7d2:	1f 92       	push	r1
 7d4:	0f 92       	push	r0
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	0f 92       	push	r0
 7da:	11 24       	eor	r1, r1
 7dc:	8f 93       	push	r24
 7de:	9f 93       	push	r25
 7e0:	af 93       	push	r26
 7e2:	bf 93       	push	r27
	timer_ms += 1;
 7e4:	80 91 34 01 	lds	r24, 0x0134
 7e8:	90 91 35 01 	lds	r25, 0x0135
 7ec:	a0 91 36 01 	lds	r26, 0x0136
 7f0:	b0 91 37 01 	lds	r27, 0x0137
 7f4:	01 96       	adiw	r24, 0x01	; 1
 7f6:	a1 1d       	adc	r26, r1
 7f8:	b1 1d       	adc	r27, r1
 7fa:	80 93 34 01 	sts	0x0134, r24
 7fe:	90 93 35 01 	sts	0x0135, r25
 802:	a0 93 36 01 	sts	0x0136, r26
 806:	b0 93 37 01 	sts	0x0137, r27
 80a:	bf 91       	pop	r27
 80c:	af 91       	pop	r26
 80e:	9f 91       	pop	r25
 810:	8f 91       	pop	r24
 812:	0f 90       	pop	r0
 814:	0f be       	out	0x3f, r0	; 63
 816:	0f 90       	pop	r0
 818:	1f 90       	pop	r1
 81a:	18 95       	reti

0000081c <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 81c:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
 820:	87 e6       	ldi	r24, 0x67	; 103
 822:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
#else
  UCSR0A &= ~(1 << U2X0);
 826:	e0 ec       	ldi	r30, 0xC0	; 192
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	80 81       	ld	r24, Z
 82c:	8d 7f       	andi	r24, 0xFD	; 253
 82e:	80 83       	st	Z, r24
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 830:	88 e1       	ldi	r24, 0x18	; 24
 832:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 836:	86 e0       	ldi	r24, 0x06	; 6
 838:	80 93 c2 00 	sts	0x00C2, r24
 83c:	08 95       	ret

0000083e <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 83e:	e0 ec       	ldi	r30, 0xC0	; 192
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	90 81       	ld	r25, Z
 844:	95 ff       	sbrs	r25, 5
 846:	fd cf       	rjmp	.-6      	; 0x842 <transmitByte+0x4>
  UDR0 = data;                                            /* send data */
 848:	80 93 c6 00 	sts	0x00C6, r24
 84c:	08 95       	ret

0000084e <printString>:
}


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 84e:	0f 93       	push	r16
 850:	1f 93       	push	r17
 852:	cf 93       	push	r28
 854:	fc 01       	movw	r30, r24
  uint8_t i = 0;
  while (myString[i]) {
 856:	80 81       	ld	r24, Z
 858:	88 23       	and	r24, r24
 85a:	59 f0       	breq	.+22     	; 0x872 <printString+0x24>
 85c:	8f 01       	movw	r16, r30
 85e:	c0 e0       	ldi	r28, 0x00	; 0
    transmitByte(myString[i]);
 860:	0e 94 1f 04 	call	0x83e	; 0x83e <transmitByte>
    i++;
 864:	cf 5f       	subi	r28, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 866:	f8 01       	movw	r30, r16
 868:	ec 0f       	add	r30, r28
 86a:	f1 1d       	adc	r31, r1
 86c:	80 81       	ld	r24, Z
 86e:	81 11       	cpse	r24, r1
 870:	f7 cf       	rjmp	.-18     	; 0x860 <printString+0x12>
    transmitByte(myString[i]);
    i++;
  }
}
 872:	cf 91       	pop	r28
 874:	1f 91       	pop	r17
 876:	0f 91       	pop	r16
 878:	08 95       	ret

0000087a <printLine>:

void printLine(const char myString[]) {
 87a:	0f 93       	push	r16
 87c:	1f 93       	push	r17
 87e:	cf 93       	push	r28
 880:	8c 01       	movw	r16, r24
	uint8_t i = 0;
	while (myString[i]) {
 882:	fc 01       	movw	r30, r24
 884:	80 81       	ld	r24, Z
 886:	88 23       	and	r24, r24
 888:	51 f0       	breq	.+20     	; 0x89e <printLine+0x24>
 88a:	c0 e0       	ldi	r28, 0x00	; 0
		transmitByte(myString[i]);
 88c:	0e 94 1f 04 	call	0x83e	; 0x83e <transmitByte>
		i++;
 890:	cf 5f       	subi	r28, 0xFF	; 255
  }
}

void printLine(const char myString[]) {
	uint8_t i = 0;
	while (myString[i]) {
 892:	f8 01       	movw	r30, r16
 894:	ec 0f       	add	r30, r28
 896:	f1 1d       	adc	r31, r1
 898:	80 81       	ld	r24, Z
 89a:	81 11       	cpse	r24, r1
 89c:	f7 cf       	rjmp	.-18     	; 0x88c <printLine+0x12>
		transmitByte(myString[i]);
		i++;
	}
	transmitByte(10);
 89e:	8a e0       	ldi	r24, 0x0A	; 10
 8a0:	0e 94 1f 04 	call	0x83e	; 0x83e <transmitByte>
}
 8a4:	cf 91       	pop	r28
 8a6:	1f 91       	pop	r17
 8a8:	0f 91       	pop	r16
 8aa:	08 95       	ret

000008ac <main>:
#include "USART.h"
#include "i2c_master.h"


int main(void)
{
 8ac:	cf 93       	push	r28
 8ae:	df 93       	push	r29
 8b0:	cd b7       	in	r28, 0x3d	; 61
 8b2:	de b7       	in	r29, 0x3e	; 62
 8b4:	c6 55       	subi	r28, 0x56	; 86
 8b6:	d1 09       	sbc	r29, r1
 8b8:	0f b6       	in	r0, 0x3f	; 63
 8ba:	f8 94       	cli
 8bc:	de bf       	out	0x3e, r29	; 62
 8be:	0f be       	out	0x3f, r0	; 63
 8c0:	cd bf       	out	0x3d, r28	; 61
	unsigned long timer = 0;
	char timer_str[64];
	char accZ_str[16];
    //char accX_str[16], accY_str[16], accZ_str[16];
    
	initUSART();
 8c2:	0e 94 0e 04 	call	0x81c	; 0x81c <initUSART>
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	80 e8       	ldi	r24, 0x80	; 128
 8ca:	0f b6       	in	r0, 0x3f	; 63
 8cc:	f8 94       	cli
 8ce:	80 93 61 00 	sts	0x0061, r24
 8d2:	90 93 61 00 	sts	0x0061, r25
 8d6:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(clock_div_1); // set clock to 16MHz
	MPU6050_init();
 8d8:	0e 94 20 02 	call	0x440	; 0x440 <MPU6050_init>
	init_tictoc();
 8dc:	0e 94 be 03 	call	0x77c	; 0x77c <init_tictoc>
	
		MPU6050_set_accelFS(0);
 8e0:	80 e0       	ldi	r24, 0x00	; 0
 8e2:	0e 94 1a 01 	call	0x234	; 0x234 <MPU6050_set_accelFS>
		
		if (MPU6050_test_I2C()) {
 8e6:	0e 94 5a 00 	call	0xb4	; 0xb4 <MPU6050_test_I2C>
 8ea:	88 23       	and	r24, r24
 8ec:	29 f0       	breq	.+10     	; 0x8f8 <main+0x4c>
			printLine("=== IMU working properly ===");
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	91 e0       	ldi	r25, 0x01	; 1
 8f2:	0e 94 3d 04 	call	0x87a	; 0x87a <printLine>
 8f6:	14 c0       	rjmp	.+40     	; 0x920 <__stack+0x21>
		}
		else {
			printLine("=== IMU ERROR ===");
 8f8:	8d e1       	ldi	r24, 0x1D	; 29
 8fa:	91 e0       	ldi	r25, 0x01	; 1
 8fc:	0e 94 3d 04 	call	0x87a	; 0x87a <printLine>
 900:	12 e3       	ldi	r17, 0x32	; 50
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 902:	2f ef       	ldi	r18, 0xFF	; 255
 904:	80 e7       	ldi	r24, 0x70	; 112
 906:	92 e0       	ldi	r25, 0x02	; 2
 908:	21 50       	subi	r18, 0x01	; 1
 90a:	80 40       	sbci	r24, 0x00	; 0
 90c:	90 40       	sbci	r25, 0x00	; 0
 90e:	e1 f7       	brne	.-8      	; 0x908 <__stack+0x9>
 910:	00 c0       	rjmp	.+0      	; 0x912 <__stack+0x13>
 912:	00 00       	nop
			for(uint8_t i = 0; i < 50; i++){
				_delay_ms(50);
				printString(".");
 914:	8f e2       	ldi	r24, 0x2F	; 47
 916:	91 e0       	ldi	r25, 0x01	; 1
 918:	0e 94 27 04 	call	0x84e	; 0x84e <printString>
 91c:	11 50       	subi	r17, 0x01	; 1
		if (MPU6050_test_I2C()) {
			printLine("=== IMU working properly ===");
		}
		else {
			printLine("=== IMU ERROR ===");
			for(uint8_t i = 0; i < 50; i++){
 91e:	89 f7       	brne	.-30     	; 0x902 <__stack+0x3>
				_delay_ms(50);
				printString(".");
			}
		}
		
	MPU6050_set_dlpf(2);
 920:	82 e0       	ldi	r24, 0x02	; 2
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	0e 94 2f 02 	call	0x45e	; 0x45e <MPU6050_set_dlpf>
	
	tic();
 928:	0e 94 ce 03 	call	0x79c	; 0x79c <tic>
	
    while (1) 
    {
		timer = millis();
 92c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <millis>
 930:	6b 01       	movw	r12, r22
 932:	7c 01       	movw	r14, r24
		MPU6050_get_accel(acc);
 934:	ce 01       	movw	r24, r28
 936:	01 96       	adiw	r24, 0x01	; 1
 938:	0e 94 72 00 	call	0xe4	; 0xe4 <MPU6050_get_accel>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 93c:	4a e0       	ldi	r20, 0x0A	; 10
 93e:	be 01       	movw	r22, r28
 940:	69 5b       	subi	r22, 0xB9	; 185
 942:	7f 4f       	sbci	r23, 0xFF	; 255
 944:	89 81       	ldd	r24, Y+1	; 0x01
 946:	9a 81       	ldd	r25, Y+2	; 0x02
 948:	0e 94 c8 04 	call	0x990	; 0x990 <__itoa_ncheck>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
 94c:	2a e0       	ldi	r18, 0x0A	; 10
 94e:	ae 01       	movw	r20, r28
 950:	49 5f       	subi	r20, 0xF9	; 249
 952:	5f 4f       	sbci	r21, 0xFF	; 255
 954:	c7 01       	movw	r24, r14
 956:	b6 01       	movw	r22, r12
 958:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__ultoa_ncheck>
		ultoa(timer,timer_str,10);
		//itoa(acc[1],accY_str,10);
		//itoa(acc[2],accZ_str,10);
		//printString(accX_str); printString(" ");
		//printString(accY_str); printString(" ");
		printString(timer_str); printString("_");
 95c:	ce 01       	movw	r24, r28
 95e:	07 96       	adiw	r24, 0x07	; 7
 960:	0e 94 27 04 	call	0x84e	; 0x84e <printString>
 964:	81 e3       	ldi	r24, 0x31	; 49
 966:	91 e0       	ldi	r25, 0x01	; 1
 968:	0e 94 27 04 	call	0x84e	; 0x84e <printString>
		printLine(accZ_str);
 96c:	ce 01       	movw	r24, r28
 96e:	89 5b       	subi	r24, 0xB9	; 185
 970:	9f 4f       	sbci	r25, 0xFF	; 255
 972:	0e 94 3d 04 	call	0x87a	; 0x87a <printLine>
 976:	8f e9       	ldi	r24, 0x9F	; 159
 978:	9f e0       	ldi	r25, 0x0F	; 15
 97a:	01 97       	sbiw	r24, 0x01	; 1
 97c:	f1 f7       	brne	.-4      	; 0x97a <__stack+0x7b>
 97e:	00 c0       	rjmp	.+0      	; 0x980 <__stack+0x81>
 980:	00 00       	nop
 982:	d4 cf       	rjmp	.-88     	; 0x92c <__stack+0x2d>

00000984 <__tablejump2__>:
 984:	ee 0f       	add	r30, r30
 986:	ff 1f       	adc	r31, r31
 988:	05 90       	lpm	r0, Z+
 98a:	f4 91       	lpm	r31, Z
 98c:	e0 2d       	mov	r30, r0
 98e:	09 94       	ijmp

00000990 <__itoa_ncheck>:
 990:	bb 27       	eor	r27, r27
 992:	4a 30       	cpi	r20, 0x0A	; 10
 994:	31 f4       	brne	.+12     	; 0x9a2 <__itoa_ncheck+0x12>
 996:	99 23       	and	r25, r25
 998:	22 f4       	brpl	.+8      	; 0x9a2 <__itoa_ncheck+0x12>
 99a:	bd e2       	ldi	r27, 0x2D	; 45
 99c:	90 95       	com	r25
 99e:	81 95       	neg	r24
 9a0:	9f 4f       	sbci	r25, 0xFF	; 255
 9a2:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__utoa_common>

000009a6 <__ultoa_ncheck>:
 9a6:	bb 27       	eor	r27, r27

000009a8 <__ultoa_common>:
 9a8:	fa 01       	movw	r30, r20
 9aa:	a6 2f       	mov	r26, r22
 9ac:	62 17       	cp	r22, r18
 9ae:	71 05       	cpc	r23, r1
 9b0:	81 05       	cpc	r24, r1
 9b2:	91 05       	cpc	r25, r1
 9b4:	33 0b       	sbc	r19, r19
 9b6:	30 fb       	bst	r19, 0
 9b8:	66 f0       	brts	.+24     	; 0x9d2 <__ultoa_common+0x2a>
 9ba:	aa 27       	eor	r26, r26
 9bc:	66 0f       	add	r22, r22
 9be:	77 1f       	adc	r23, r23
 9c0:	88 1f       	adc	r24, r24
 9c2:	99 1f       	adc	r25, r25
 9c4:	aa 1f       	adc	r26, r26
 9c6:	a2 17       	cp	r26, r18
 9c8:	10 f0       	brcs	.+4      	; 0x9ce <__ultoa_common+0x26>
 9ca:	a2 1b       	sub	r26, r18
 9cc:	63 95       	inc	r22
 9ce:	38 50       	subi	r19, 0x08	; 8
 9d0:	a9 f7       	brne	.-22     	; 0x9bc <__ultoa_common+0x14>
 9d2:	a0 5d       	subi	r26, 0xD0	; 208
 9d4:	aa 33       	cpi	r26, 0x3A	; 58
 9d6:	08 f0       	brcs	.+2      	; 0x9da <__ultoa_common+0x32>
 9d8:	a9 5d       	subi	r26, 0xD9	; 217
 9da:	a1 93       	st	Z+, r26
 9dc:	36 f7       	brtc	.-52     	; 0x9aa <__ultoa_common+0x2>
 9de:	b1 11       	cpse	r27, r1
 9e0:	b1 93       	st	Z+, r27
 9e2:	10 82       	st	Z, r1
 9e4:	ca 01       	movw	r24, r20
 9e6:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <strrev>

000009ea <__utoa_ncheck>:
 9ea:	bb 27       	eor	r27, r27

000009ec <__utoa_common>:
 9ec:	fb 01       	movw	r30, r22
 9ee:	55 27       	eor	r21, r21
 9f0:	aa 27       	eor	r26, r26
 9f2:	88 0f       	add	r24, r24
 9f4:	99 1f       	adc	r25, r25
 9f6:	aa 1f       	adc	r26, r26
 9f8:	a4 17       	cp	r26, r20
 9fa:	10 f0       	brcs	.+4      	; 0xa00 <__utoa_common+0x14>
 9fc:	a4 1b       	sub	r26, r20
 9fe:	83 95       	inc	r24
 a00:	50 51       	subi	r21, 0x10	; 16
 a02:	b9 f7       	brne	.-18     	; 0x9f2 <__utoa_common+0x6>
 a04:	a0 5d       	subi	r26, 0xD0	; 208
 a06:	aa 33       	cpi	r26, 0x3A	; 58
 a08:	08 f0       	brcs	.+2      	; 0xa0c <__utoa_common+0x20>
 a0a:	a9 5d       	subi	r26, 0xD9	; 217
 a0c:	a1 93       	st	Z+, r26
 a0e:	00 97       	sbiw	r24, 0x00	; 0
 a10:	79 f7       	brne	.-34     	; 0x9f0 <__utoa_common+0x4>
 a12:	b1 11       	cpse	r27, r1
 a14:	b1 93       	st	Z+, r27
 a16:	11 92       	st	Z+, r1
 a18:	cb 01       	movw	r24, r22
 a1a:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <strrev>

00000a1e <strrev>:
 a1e:	dc 01       	movw	r26, r24
 a20:	fc 01       	movw	r30, r24
 a22:	67 2f       	mov	r22, r23
 a24:	71 91       	ld	r23, Z+
 a26:	77 23       	and	r23, r23
 a28:	e1 f7       	brne	.-8      	; 0xa22 <strrev+0x4>
 a2a:	32 97       	sbiw	r30, 0x02	; 2
 a2c:	04 c0       	rjmp	.+8      	; 0xa36 <strrev+0x18>
 a2e:	7c 91       	ld	r23, X
 a30:	6d 93       	st	X+, r22
 a32:	70 83       	st	Z, r23
 a34:	62 91       	ld	r22, -Z
 a36:	ae 17       	cp	r26, r30
 a38:	bf 07       	cpc	r27, r31
 a3a:	c8 f3       	brcs	.-14     	; 0xa2e <strrev+0x10>
 a3c:	08 95       	ret

00000a3e <_exit>:
 a3e:	f8 94       	cli

00000a40 <__stop_program>:
 a40:	ff cf       	rjmp	.-2      	; 0xa40 <__stop_program>
