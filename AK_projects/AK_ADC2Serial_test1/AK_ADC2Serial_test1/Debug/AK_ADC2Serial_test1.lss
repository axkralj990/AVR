
AK_ADC2Serial_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000857  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000418  00000000  00000000  00000cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044d  00000000  00000000  000010eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  00001538  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036f  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000632  00000000  00000000  00001a97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000020c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  78:	0c 94 6d 01 	jmp	0x2da	; 0x2da <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_ADC>:
#include <avr/io.h>
#include "AK_ADC_lib.h"

void init_ADC(uint8_t ADpin, uint8_t ADbitMode, uint8_t ADclkPrescale)
{
	ADMUX |= (1<<REFS0); //AVcc with external capacitor at AREF pin
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	90 81       	ld	r25, Z
  86:	90 64       	ori	r25, 0x40	; 64
  88:	90 83       	st	Z, r25

	switch (ADbitMode) { // Select whether to use 8-bit or 10-bit ADC
  8a:	68 30       	cpi	r22, 0x08	; 8
  8c:	19 f0       	breq	.+6      	; 0x94 <init_ADC+0x14>
  8e:	6a 30       	cpi	r22, 0x0A	; 10
  90:	39 f0       	breq	.+14     	; 0xa0 <init_ADC+0x20>
  92:	0c c0       	rjmp	.+24     	; 0xac <init_ADC+0x2c>
		case 8: // 8-bit mode
		ADMUX |= (1<<ADLAR);
  94:	ec e7       	ldi	r30, 0x7C	; 124
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	90 81       	ld	r25, Z
  9a:	90 62       	ori	r25, 0x20	; 32
  9c:	90 83       	st	Z, r25
		break;
  9e:	0b c0       	rjmp	.+22     	; 0xb6 <init_ADC+0x36>
		case 10: // 10-bit mode
		ADMUX &= ~(1<<ADLAR);
  a0:	ec e7       	ldi	r30, 0x7C	; 124
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	9f 7d       	andi	r25, 0xDF	; 223
  a8:	90 83       	st	Z, r25
		break;
  aa:	05 c0       	rjmp	.+10     	; 0xb6 <init_ADC+0x36>
		default:
		ADMUX &= ~(1<<ADLAR);
  ac:	ec e7       	ldi	r30, 0x7C	; 124
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	90 81       	ld	r25, Z
  b2:	9f 7d       	andi	r25, 0xDF	; 223
  b4:	90 83       	st	Z, r25
	}

	ADMUX &= ~(0b00001111); // reset MUX to all zeros
  b6:	ec e7       	ldi	r30, 0x7C	; 124
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	90 81       	ld	r25, Z
  bc:	90 7f       	andi	r25, 0xF0	; 240
  be:	90 83       	st	Z, r25
	switch (ADpin) { // Select which pin to use for ADC
  c0:	83 30       	cpi	r24, 0x03	; 3
  c2:	b9 f0       	breq	.+46     	; 0xf2 <init_ADC+0x72>
  c4:	28 f4       	brcc	.+10     	; 0xd0 <init_ADC+0x50>
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	41 f0       	breq	.+16     	; 0xda <init_ADC+0x5a>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	61 f0       	breq	.+24     	; 0xe6 <init_ADC+0x66>
  ce:	22 c0       	rjmp	.+68     	; 0x114 <init_ADC+0x94>
  d0:	84 30       	cpi	r24, 0x04	; 4
  d2:	a9 f0       	breq	.+42     	; 0xfe <init_ADC+0x7e>
  d4:	85 30       	cpi	r24, 0x05	; 5
  d6:	c9 f0       	breq	.+50     	; 0x10a <init_ADC+0x8a>
  d8:	1d c0       	rjmp	.+58     	; 0x114 <init_ADC+0x94>
		case 0:
		break;
		case 1:
		ADMUX |= (1<<MUX0);
  da:	ec e7       	ldi	r30, 0x7C	; 124
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	80 83       	st	Z, r24
		break;
  e4:	17 c0       	rjmp	.+46     	; 0x114 <init_ADC+0x94>
		case 2:
		ADMUX |= (1<<MUX1);
  e6:	ec e7       	ldi	r30, 0x7C	; 124
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	80 83       	st	Z, r24
		break;
  f0:	11 c0       	rjmp	.+34     	; 0x114 <init_ADC+0x94>
		case 3:
		ADMUX |= (1<<MUX0) | (1<<MUX1);
  f2:	ec e7       	ldi	r30, 0x7C	; 124
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	83 60       	ori	r24, 0x03	; 3
  fa:	80 83       	st	Z, r24
		break;
  fc:	0b c0       	rjmp	.+22     	; 0x114 <init_ADC+0x94>
		case 4:
		ADMUX |= (1<<MUX2);
  fe:	ec e7       	ldi	r30, 0x7C	; 124
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	84 60       	ori	r24, 0x04	; 4
 106:	80 83       	st	Z, r24
		break;
 108:	05 c0       	rjmp	.+10     	; 0x114 <init_ADC+0x94>
		case 5:
		ADMUX |= (1<<MUX0) | (1<<MUX2);
 10a:	ec e7       	ldi	r30, 0x7C	; 124
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	85 60       	ori	r24, 0x05	; 5
 112:	80 83       	st	Z, r24
		break;
	}

	ADCSRA |= (1<<ADEN); // ADC enable
 114:	ea e7       	ldi	r30, 0x7A	; 122
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	80 83       	st	Z, r24

	switch (ADclkPrescale) {
 11e:	40 31       	cpi	r20, 0x10	; 16
 120:	09 f1       	breq	.+66     	; 0x164 <init_ADC+0xe4>
 122:	38 f4       	brcc	.+14     	; 0x132 <init_ADC+0xb2>
 124:	44 30       	cpi	r20, 0x04	; 4
 126:	91 f0       	breq	.+36     	; 0x14c <init_ADC+0xcc>
 128:	48 30       	cpi	r20, 0x08	; 8
 12a:	b1 f0       	breq	.+44     	; 0x158 <init_ADC+0xd8>
 12c:	42 30       	cpi	r20, 0x02	; 2
 12e:	91 f5       	brne	.+100    	; 0x194 <init_ADC+0x114>
 130:	07 c0       	rjmp	.+14     	; 0x140 <init_ADC+0xc0>
 132:	40 34       	cpi	r20, 0x40	; 64
 134:	19 f1       	breq	.+70     	; 0x17c <init_ADC+0xfc>
 136:	40 38       	cpi	r20, 0x80	; 128
 138:	39 f1       	breq	.+78     	; 0x188 <init_ADC+0x108>
 13a:	40 32       	cpi	r20, 0x20	; 32
 13c:	59 f5       	brne	.+86     	; 0x194 <init_ADC+0x114>
 13e:	18 c0       	rjmp	.+48     	; 0x170 <init_ADC+0xf0>
		case 2:
			ADCSRA |= (1<<ADPS0);
 140:	ea e7       	ldi	r30, 0x7A	; 122
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	81 60       	ori	r24, 0x01	; 1
 148:	80 83       	st	Z, r24
			break;
 14a:	08 95       	ret
		case 4:
			ADCSRA |= (1<<ADPS1);
 14c:	ea e7       	ldi	r30, 0x7A	; 122
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	82 60       	ori	r24, 0x02	; 2
 154:	80 83       	st	Z, r24
			break;
 156:	08 95       	ret
		case 8:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS1);
 158:	ea e7       	ldi	r30, 0x7A	; 122
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	83 60       	ori	r24, 0x03	; 3
 160:	80 83       	st	Z, r24
			break;
 162:	08 95       	ret
		case 16:
			ADCSRA |= (1<<ADPS2);
 164:	ea e7       	ldi	r30, 0x7A	; 122
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	84 60       	ori	r24, 0x04	; 4
 16c:	80 83       	st	Z, r24
			break;
 16e:	08 95       	ret
		case 32:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS2);
 170:	ea e7       	ldi	r30, 0x7A	; 122
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	85 60       	ori	r24, 0x05	; 5
 178:	80 83       	st	Z, r24
			break;
 17a:	08 95       	ret
		case 64:
			ADCSRA |= (1<<ADPS1) | (1<<ADPS2);
 17c:	ea e7       	ldi	r30, 0x7A	; 122
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	86 60       	ori	r24, 0x06	; 6
 184:	80 83       	st	Z, r24
			break;
 186:	08 95       	ret
		case 128:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2) ;
 188:	ea e7       	ldi	r30, 0x7A	; 122
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	87 60       	ori	r24, 0x07	; 7
 190:	80 83       	st	Z, r24
			break;
 192:	08 95       	ret
		default:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS1);
 194:	ea e7       	ldi	r30, 0x7A	; 122
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	83 60       	ori	r24, 0x03	; 3
 19c:	80 83       	st	Z, r24
 19e:	08 95       	ret

000001a0 <start_SingleConversion_ADC>:
	ADCSRA |= (1<<ADATE); // Initialize free running mode
}

void start_SingleConversion_ADC() {
	//ADCSRA &= ~(1<<ADATE); // Disable free running mode
	ADCSRA |= (1<<ADSC); // ADC start conversion
 1a0:	ea e7       	ldi	r30, 0x7A	; 122
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	80 64       	ori	r24, 0x40	; 64
 1a8:	80 83       	st	Z, r24
	while((ADCSRA & (1<<ADSC)) != 0);
 1aa:	80 81       	ld	r24, Z
 1ac:	86 fd       	sbrc	r24, 6
 1ae:	fd cf       	rjmp	.-6      	; 0x1aa <start_SingleConversion_ADC+0xa>
}
 1b0:	08 95       	ret

000001b2 <read_ADC_10bit>:
uint8_t read_ADC_8bit() {
	return ADCH;
}

uint16_t read_ADC_10bit() {
	return ADC;
 1b2:	80 91 78 00 	lds	r24, 0x0078
 1b6:	90 91 79 00 	lds	r25, 0x0079
 1ba:	08 95       	ret

000001bc <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 1bc:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
 1c0:	8c e0       	ldi	r24, 0x0C	; 12
 1c2:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
 1c6:	e0 ec       	ldi	r30, 0xC0	; 192
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	82 60       	ori	r24, 0x02	; 2
 1ce:	80 83       	st	Z, r24
#else
  UCSR0A &= ~(1 << U2X0);
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 1d0:	88 e1       	ldi	r24, 0x18	; 24
 1d2:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 1d6:	86 e0       	ldi	r24, 0x06	; 6
 1d8:	80 93 c2 00 	sts	0x00C2, r24
 1dc:	08 95       	ret

000001de <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 1de:	e0 ec       	ldi	r30, 0xC0	; 192
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	90 81       	ld	r25, Z
 1e4:	95 ff       	sbrs	r25, 5
 1e6:	fd cf       	rjmp	.-6      	; 0x1e2 <transmitByte+0x4>
  UDR0 = data;                                            /* send data */
 1e8:	80 93 c6 00 	sts	0x00C6, r24
 1ec:	08 95       	ret

000001ee <printString>:
}


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	fc 01       	movw	r30, r24
  uint8_t i = 0;
  while (myString[i]) {
 1f6:	80 81       	ld	r24, Z
 1f8:	88 23       	and	r24, r24
 1fa:	59 f0       	breq	.+22     	; 0x212 <printString+0x24>
 1fc:	8f 01       	movw	r16, r30
 1fe:	c0 e0       	ldi	r28, 0x00	; 0
    transmitByte(myString[i]);
 200:	0e 94 ef 00 	call	0x1de	; 0x1de <transmitByte>
    i++;
 204:	cf 5f       	subi	r28, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 206:	f8 01       	movw	r30, r16
 208:	ec 0f       	add	r30, r28
 20a:	f1 1d       	adc	r31, r1
 20c:	80 81       	ld	r24, Z
 20e:	81 11       	cpse	r24, r1
 210:	f7 cf       	rjmp	.-18     	; 0x200 <printString+0x12>
    transmitByte(myString[i]);
    i++;
  }
}
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	08 95       	ret

0000021a <main>:
#include "AK_ADC_lib.h"
#include "USART.h"
#include <stdlib.h>

int main(void)
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	60 97       	sbiw	r28, 0x10	; 16
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
	uint16_t sensorValue;
	char str[16];
	
    initUSART();
 22e:	0e 94 de 00 	call	0x1bc	; 0x1bc <initUSART>
	init_ADC(5,10,8);
 232:	48 e0       	ldi	r20, 0x08	; 8
 234:	6a e0       	ldi	r22, 0x0A	; 10
 236:	85 e0       	ldi	r24, 0x05	; 5
 238:	0e 94 40 00 	call	0x80	; 0x80 <init_ADC>
	
	//start_FreeRunning_ADC();
	
	DDRC |= (1<<DDC4);
 23c:	3c 9a       	sbi	0x07, 4	; 7
	PORTC |= (1<<PORTC4);
 23e:	44 9a       	sbi	0x08, 4	; 8
	
    while (1) 
    {
		start_SingleConversion_ADC();
 240:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <start_SingleConversion_ADC>
		sensorValue = read_ADC_10bit();
 244:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <read_ADC_10bit>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 248:	4a e0       	ldi	r20, 0x0A	; 10
 24a:	be 01       	movw	r22, r28
 24c:	6f 5f       	subi	r22, 0xFF	; 255
 24e:	7f 4f       	sbci	r23, 0xFF	; 255
 250:	0e 94 38 01 	call	0x270	; 0x270 <__itoa_ncheck>
		itoa(sensorValue,str,10);
		printString(str);
 254:	ce 01       	movw	r24, r28
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	0e 94 f7 00 	call	0x1ee	; 0x1ee <printString>
		transmitByte(10);
 25c:	8a e0       	ldi	r24, 0x0A	; 10
 25e:	0e 94 ef 00 	call	0x1de	; 0x1de <transmitByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 262:	87 e8       	ldi	r24, 0x87	; 135
 264:	93 e1       	ldi	r25, 0x13	; 19
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <main+0x4c>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0x52>
 26c:	00 00       	nop
 26e:	e8 cf       	rjmp	.-48     	; 0x240 <main+0x26>

00000270 <__itoa_ncheck>:
 270:	bb 27       	eor	r27, r27
 272:	4a 30       	cpi	r20, 0x0A	; 10
 274:	31 f4       	brne	.+12     	; 0x282 <__itoa_ncheck+0x12>
 276:	99 23       	and	r25, r25
 278:	22 f4       	brpl	.+8      	; 0x282 <__itoa_ncheck+0x12>
 27a:	bd e2       	ldi	r27, 0x2D	; 45
 27c:	90 95       	com	r25
 27e:	81 95       	neg	r24
 280:	9f 4f       	sbci	r25, 0xFF	; 255
 282:	0c 94 44 01 	jmp	0x288	; 0x288 <__utoa_common>

00000286 <__utoa_ncheck>:
 286:	bb 27       	eor	r27, r27

00000288 <__utoa_common>:
 288:	fb 01       	movw	r30, r22
 28a:	55 27       	eor	r21, r21
 28c:	aa 27       	eor	r26, r26
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	aa 1f       	adc	r26, r26
 294:	a4 17       	cp	r26, r20
 296:	10 f0       	brcs	.+4      	; 0x29c <__utoa_common+0x14>
 298:	a4 1b       	sub	r26, r20
 29a:	83 95       	inc	r24
 29c:	50 51       	subi	r21, 0x10	; 16
 29e:	b9 f7       	brne	.-18     	; 0x28e <__utoa_common+0x6>
 2a0:	a0 5d       	subi	r26, 0xD0	; 208
 2a2:	aa 33       	cpi	r26, 0x3A	; 58
 2a4:	08 f0       	brcs	.+2      	; 0x2a8 <__utoa_common+0x20>
 2a6:	a9 5d       	subi	r26, 0xD9	; 217
 2a8:	a1 93       	st	Z+, r26
 2aa:	00 97       	sbiw	r24, 0x00	; 0
 2ac:	79 f7       	brne	.-34     	; 0x28c <__utoa_common+0x4>
 2ae:	b1 11       	cpse	r27, r1
 2b0:	b1 93       	st	Z+, r27
 2b2:	11 92       	st	Z+, r1
 2b4:	cb 01       	movw	r24, r22
 2b6:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <strrev>

000002ba <strrev>:
 2ba:	dc 01       	movw	r26, r24
 2bc:	fc 01       	movw	r30, r24
 2be:	67 2f       	mov	r22, r23
 2c0:	71 91       	ld	r23, Z+
 2c2:	77 23       	and	r23, r23
 2c4:	e1 f7       	brne	.-8      	; 0x2be <strrev+0x4>
 2c6:	32 97       	sbiw	r30, 0x02	; 2
 2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <strrev+0x18>
 2ca:	7c 91       	ld	r23, X
 2cc:	6d 93       	st	X+, r22
 2ce:	70 83       	st	Z, r23
 2d0:	62 91       	ld	r22, -Z
 2d2:	ae 17       	cp	r26, r30
 2d4:	bf 07       	cpc	r27, r31
 2d6:	c8 f3       	brcs	.-14     	; 0x2ca <strrev+0x10>
 2d8:	08 95       	ret

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
