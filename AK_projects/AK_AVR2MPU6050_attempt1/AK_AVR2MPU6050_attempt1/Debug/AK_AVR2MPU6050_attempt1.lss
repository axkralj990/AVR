
AK_AVR2MPU6050_attempt1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000613  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002c2  00000000  00000000  000008bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033c  00000000  00000000  00000b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00000ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000338  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000058a  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000190e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	80 e8       	ldi	r24, 0x80	; 128
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	80 93 61 00 	sts	0x0061, r24
  9c:	90 93 61 00 	sts	0x0061, r25
  a0:	0f be       	out	0x3f, r0	; 63
	// set F_CPU to 8MHz
	clock_prescale_set(clock_div_1);
	
	//char str[16];
	
    initUSART();
  a2:	0e 94 85 00 	call	0x10a	; 0x10a <initUSART>
	
	// Timer initialization =========
	TCCR0B |= (1<<CS02) | (1<<CS00); // clock prescaller 1024
  a6:	85 b5       	in	r24, 0x25	; 37
  a8:	85 60       	ori	r24, 0x05	; 5
  aa:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= (1<<WGM01); // CTC mode
  ac:	84 b5       	in	r24, 0x24	; 36
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	84 bd       	out	0x24, r24	; 36
	//TCCR0A |= (1<<COM0A0); // toggle OC0A on Compare Match
	OCR0A = 235; // OCR value to generate an inerrupt every 0.03s
  b2:	8b ee       	ldi	r24, 0xEB	; 235
  b4:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A); // Timer/Counter0 Output Compare Match Interrupt Enable
  b6:	ee e6       	ldi	r30, 0x6E	; 110
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	80 83       	st	Z, r24
	// ==============================
	
	DDRC |= (1<<DDC4); // config PORTC4 as output
  c0:	3c 9a       	sbi	0x07, 4	; 7
	PORTC |= (1<<PORTC4); // set PORTC4 to HIGH
  c2:	44 9a       	sbi	0x08, 4	; 8
	
	sei(); // enable global interrupts
  c4:	78 94       	sei
		*/
		
		// TIMER ===========================
		if (q_second_ctn >= 17) { // toggle PORTC4 state every x*0.25s
			q_second_ctn = 0;
			PORTC ^= (1<<PORTC4);
  c6:	90 e1       	ldi	r25, 0x10	; 16
		transmitByte(10); // send "/n"
		// =================================
		*/
		
		// TIMER ===========================
		if (q_second_ctn >= 17) { // toggle PORTC4 state every x*0.25s
  c8:	80 91 00 01 	lds	r24, 0x0100
  cc:	81 31       	cpi	r24, 0x11	; 17
  ce:	28 f0       	brcs	.+10     	; 0xda <main+0x4a>
			q_second_ctn = 0;
  d0:	10 92 00 01 	sts	0x0100, r1
			PORTC ^= (1<<PORTC4);
  d4:	88 b1       	in	r24, 0x08	; 8
  d6:	89 27       	eor	r24, r25
  d8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	ef e3       	ldi	r30, 0x3F	; 63
  dc:	fc e9       	ldi	r31, 0x9C	; 156
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x4e>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x54>
  e4:	00 00       	nop
  e6:	f0 cf       	rjmp	.-32     	; 0xc8 <main+0x38>

000000e8 <__vector_14>:
		
		_delay_ms(20);
    }
}

ISR(TIMER0_COMPA_vect) {
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	8f 93       	push	r24
	q_second_ctn += 1; // increment quarter-second counter
  f4:	80 91 00 01 	lds	r24, 0x0100
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	80 93 00 01 	sts	0x0100, r24
}
  fe:	8f 91       	pop	r24
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <initUSART>:

void printWord(uint16_t word) {
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 10a:	10 92 c5 00 	sts	0x00C5, r1
 10e:	83 e3       	ldi	r24, 0x33	; 51
 110:	80 93 c4 00 	sts	0x00C4, r24
 114:	e0 ec       	ldi	r30, 0xC0	; 192
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	8d 7f       	andi	r24, 0xFD	; 253
 11c:	80 83       	st	Z, r24
 11e:	88 e1       	ldi	r24, 0x18	; 24
 120:	80 93 c1 00 	sts	0x00C1, r24
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	80 93 c2 00 	sts	0x00C2, r24
 12a:	08 95       	ret

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
