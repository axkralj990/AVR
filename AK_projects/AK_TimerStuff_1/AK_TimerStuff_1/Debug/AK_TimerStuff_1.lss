
AK_TimerStuff_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000348  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000003bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000925  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000492  00000000  00000000  00000e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000486  00000000  00000000  000012c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  0000174c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f0  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000681  00000000  00000000  00001d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000023cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <main>
  88:	0c 94 a2 01 	jmp	0x344	; 0x344 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_ADC>:
#include <avr/io.h>
#include "AK_ADC_lib.h"

void init_ADC(uint8_t ADpin, uint8_t ADbitMode, uint8_t ADclkPrescale)
{
	ADMUX |= (1<<REFS0); //AVcc with external capacitor at AREF pin
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	90 81       	ld	r25, Z
  96:	90 64       	ori	r25, 0x40	; 64
  98:	90 83       	st	Z, r25

	switch (ADbitMode) { // Select whether to use 8-bit or 10-bit ADC
  9a:	68 30       	cpi	r22, 0x08	; 8
  9c:	19 f0       	breq	.+6      	; 0xa4 <init_ADC+0x14>
  9e:	6a 30       	cpi	r22, 0x0A	; 10
  a0:	39 f0       	breq	.+14     	; 0xb0 <init_ADC+0x20>
  a2:	0c c0       	rjmp	.+24     	; 0xbc <init_ADC+0x2c>
		case 8: // 8-bit mode
		ADMUX |= (1<<ADLAR);
  a4:	ec e7       	ldi	r30, 0x7C	; 124
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	90 81       	ld	r25, Z
  aa:	90 62       	ori	r25, 0x20	; 32
  ac:	90 83       	st	Z, r25
		break;
  ae:	0b c0       	rjmp	.+22     	; 0xc6 <init_ADC+0x36>
		case 10: // 10-bit mode
		ADMUX &= ~(1<<ADLAR);
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	90 81       	ld	r25, Z
  b6:	9f 7d       	andi	r25, 0xDF	; 223
  b8:	90 83       	st	Z, r25
		break;
  ba:	05 c0       	rjmp	.+10     	; 0xc6 <init_ADC+0x36>
		default:
		ADMUX &= ~(1<<ADLAR);
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	9f 7d       	andi	r25, 0xDF	; 223
  c4:	90 83       	st	Z, r25
	}

	ADMUX &= ~(0b00001111); // reset MUX to all zeros
  c6:	ec e7       	ldi	r30, 0x7C	; 124
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	90 7f       	andi	r25, 0xF0	; 240
  ce:	90 83       	st	Z, r25
	switch (ADpin) { // Select which pin to use for ADC
  d0:	83 30       	cpi	r24, 0x03	; 3
  d2:	b9 f0       	breq	.+46     	; 0x102 <init_ADC+0x72>
  d4:	28 f4       	brcc	.+10     	; 0xe0 <init_ADC+0x50>
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	41 f0       	breq	.+16     	; 0xea <init_ADC+0x5a>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	61 f0       	breq	.+24     	; 0xf6 <init_ADC+0x66>
  de:	22 c0       	rjmp	.+68     	; 0x124 <init_ADC+0x94>
  e0:	84 30       	cpi	r24, 0x04	; 4
  e2:	a9 f0       	breq	.+42     	; 0x10e <init_ADC+0x7e>
  e4:	85 30       	cpi	r24, 0x05	; 5
  e6:	c9 f0       	breq	.+50     	; 0x11a <init_ADC+0x8a>
  e8:	1d c0       	rjmp	.+58     	; 0x124 <init_ADC+0x94>
		case 0:
		break;
		case 1:
		ADMUX |= (1<<MUX0);
  ea:	ec e7       	ldi	r30, 0x7C	; 124
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	80 83       	st	Z, r24
		break;
  f4:	17 c0       	rjmp	.+46     	; 0x124 <init_ADC+0x94>
		case 2:
		ADMUX |= (1<<MUX1);
  f6:	ec e7       	ldi	r30, 0x7C	; 124
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	80 83       	st	Z, r24
		break;
 100:	11 c0       	rjmp	.+34     	; 0x124 <init_ADC+0x94>
		case 3:
		ADMUX |= (1<<MUX0) | (1<<MUX1);
 102:	ec e7       	ldi	r30, 0x7C	; 124
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	83 60       	ori	r24, 0x03	; 3
 10a:	80 83       	st	Z, r24
		break;
 10c:	0b c0       	rjmp	.+22     	; 0x124 <init_ADC+0x94>
		case 4:
		ADMUX |= (1<<MUX2);
 10e:	ec e7       	ldi	r30, 0x7C	; 124
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	84 60       	ori	r24, 0x04	; 4
 116:	80 83       	st	Z, r24
		break;
 118:	05 c0       	rjmp	.+10     	; 0x124 <init_ADC+0x94>
		case 5:
		ADMUX |= (1<<MUX0) | (1<<MUX2);
 11a:	ec e7       	ldi	r30, 0x7C	; 124
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	85 60       	ori	r24, 0x05	; 5
 122:	80 83       	st	Z, r24
		break;
	}

	ADCSRA |= (1<<ADEN); // ADC enable
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 68       	ori	r24, 0x80	; 128
 12c:	80 83       	st	Z, r24

	switch (ADclkPrescale) {
 12e:	40 31       	cpi	r20, 0x10	; 16
 130:	09 f1       	breq	.+66     	; 0x174 <init_ADC+0xe4>
 132:	38 f4       	brcc	.+14     	; 0x142 <init_ADC+0xb2>
 134:	44 30       	cpi	r20, 0x04	; 4
 136:	91 f0       	breq	.+36     	; 0x15c <init_ADC+0xcc>
 138:	48 30       	cpi	r20, 0x08	; 8
 13a:	b1 f0       	breq	.+44     	; 0x168 <init_ADC+0xd8>
 13c:	42 30       	cpi	r20, 0x02	; 2
 13e:	91 f5       	brne	.+100    	; 0x1a4 <init_ADC+0x114>
 140:	07 c0       	rjmp	.+14     	; 0x150 <init_ADC+0xc0>
 142:	40 34       	cpi	r20, 0x40	; 64
 144:	19 f1       	breq	.+70     	; 0x18c <init_ADC+0xfc>
 146:	40 38       	cpi	r20, 0x80	; 128
 148:	39 f1       	breq	.+78     	; 0x198 <init_ADC+0x108>
 14a:	40 32       	cpi	r20, 0x20	; 32
 14c:	59 f5       	brne	.+86     	; 0x1a4 <init_ADC+0x114>
 14e:	18 c0       	rjmp	.+48     	; 0x180 <init_ADC+0xf0>
		case 2:
			ADCSRA |= (1<<ADPS0);
 150:	ea e7       	ldi	r30, 0x7A	; 122
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	81 60       	ori	r24, 0x01	; 1
 158:	80 83       	st	Z, r24
			break;
 15a:	08 95       	ret
		case 4:
			ADCSRA |= (1<<ADPS1);
 15c:	ea e7       	ldi	r30, 0x7A	; 122
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	82 60       	ori	r24, 0x02	; 2
 164:	80 83       	st	Z, r24
			break;
 166:	08 95       	ret
		case 8:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS1);
 168:	ea e7       	ldi	r30, 0x7A	; 122
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	83 60       	ori	r24, 0x03	; 3
 170:	80 83       	st	Z, r24
			break;
 172:	08 95       	ret
		case 16:
			ADCSRA |= (1<<ADPS2);
 174:	ea e7       	ldi	r30, 0x7A	; 122
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	84 60       	ori	r24, 0x04	; 4
 17c:	80 83       	st	Z, r24
			break;
 17e:	08 95       	ret
		case 32:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS2);
 180:	ea e7       	ldi	r30, 0x7A	; 122
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	85 60       	ori	r24, 0x05	; 5
 188:	80 83       	st	Z, r24
			break;
 18a:	08 95       	ret
		case 64:
			ADCSRA |= (1<<ADPS1) | (1<<ADPS2);
 18c:	ea e7       	ldi	r30, 0x7A	; 122
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	86 60       	ori	r24, 0x06	; 6
 194:	80 83       	st	Z, r24
			break;
 196:	08 95       	ret
		case 128:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2) ;
 198:	ea e7       	ldi	r30, 0x7A	; 122
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	87 60       	ori	r24, 0x07	; 7
 1a0:	80 83       	st	Z, r24
			break;
 1a2:	08 95       	ret
		default:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS1);
 1a4:	ea e7       	ldi	r30, 0x7A	; 122
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	83 60       	ori	r24, 0x03	; 3
 1ac:	80 83       	st	Z, r24
 1ae:	08 95       	ret

000001b0 <start_SingleConversion_ADC>:
	ADCSRA |= (1<<ADATE); // Initialize free running mode
}

void start_SingleConversion_ADC() {
	//ADCSRA &= ~(1<<ADATE); // Disable free running mode
	ADCSRA |= (1<<ADSC); // ADC start conversion
 1b0:	ea e7       	ldi	r30, 0x7A	; 122
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	80 64       	ori	r24, 0x40	; 64
 1b8:	80 83       	st	Z, r24
	while((ADCSRA & (1<<ADSC)) != 0);
 1ba:	80 81       	ld	r24, Z
 1bc:	86 fd       	sbrc	r24, 6
 1be:	fd cf       	rjmp	.-6      	; 0x1ba <start_SingleConversion_ADC+0xa>
}
 1c0:	08 95       	ret

000001c2 <read_ADC_8bit>:
void stop_ADC() {
	ADCSRA &= ~(1<<ADSC); // ADC stop conversion
}

uint8_t read_ADC_8bit() {
	return ADCH;
 1c2:	80 91 79 00 	lds	r24, 0x0079
}
 1c6:	08 95       	ret

000001c8 <main>:
#include <avr/power.h>

volatile uint8_t q_second_ctn = 0; // quarter-second timer

int main(void)
{
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	60 97       	sbiw	r28, 0x10	; 16
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	f8 94       	cli
 1d6:	de bf       	out	0x3e, r29	; 62
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	cd bf       	out	0x3d, r28	; 61
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	80 e8       	ldi	r24, 0x80	; 128
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	f8 94       	cli
 1e4:	80 93 61 00 	sts	0x0061, r24
 1e8:	90 93 61 00 	sts	0x0061, r25
 1ec:	0f be       	out	0x3f, r0	; 63
	// set F_CPU to 8MHz
	clock_prescale_set(clock_div_1);
	
	char str[16];
	
    initUSART();
 1ee:	0e 94 3e 01 	call	0x27c	; 0x27c <initUSART>
	init_ADC(0,8,64); // init_ADC(AD5,8-bit,prescale /8)
 1f2:	40 e4       	ldi	r20, 0x40	; 64
 1f4:	68 e0       	ldi	r22, 0x08	; 8
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 48 00 	call	0x90	; 0x90 <init_ADC>
	
	// Timer initialization =========
	TCCR0B |= (1<<CS02) | (1<<CS00); // clock prescaller 1024
 1fc:	85 b5       	in	r24, 0x25	; 37
 1fe:	85 60       	ori	r24, 0x05	; 5
 200:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= (1<<WGM01); // CTC mode
 202:	84 b5       	in	r24, 0x24	; 36
 204:	82 60       	ori	r24, 0x02	; 2
 206:	84 bd       	out	0x24, r24	; 36
	//TCCR0A |= (1<<COM0A0); // toggle OC0A on Compare Match
	OCR0A = 244; // OCR value to generate an inerrupt every 0.25s
 208:	84 ef       	ldi	r24, 0xF4	; 244
 20a:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A); // Timer/Counter0 Output Compare Match Interrupt Enable
 20c:	ee e6       	ldi	r30, 0x6E	; 110
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	82 60       	ori	r24, 0x02	; 2
 214:	80 83       	st	Z, r24
	// ==============================
	
	DDRC |= (1<<DDC4); // config PORTC4 as output
 216:	3c 9a       	sbi	0x07, 4	; 7
	PORTC |= (1<<PORTC4); // set PORTC4 to HIGH
 218:	44 9a       	sbi	0x08, 4	; 8
	
	sei(); // enable global interrupts
 21a:	78 94       	sei
	
    while (1) 
    {
		// ADC ==============================
		start_SingleConversion_ADC();
 21c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <start_SingleConversion_ADC>
		sensorValue = read_ADC_8bit();
 220:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <read_ADC_8bit>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 224:	4a e0       	ldi	r20, 0x0A	; 10
 226:	be 01       	movw	r22, r28
 228:	6f 5f       	subi	r22, 0xFF	; 255
 22a:	7f 4f       	sbci	r23, 0xFF	; 255
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 6d 01 	call	0x2da	; 0x2da <__itoa_ncheck>
		// =================================
		
		// USART ============================
		itoa(sensorValue,str,10); // convert integer to string
		printString(str); // send string via serial
 232:	ce 01       	movw	r24, r28
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	0e 94 57 01 	call	0x2ae	; 0x2ae <printString>
		transmitByte(10); // send "/n"
 23a:	8a e0       	ldi	r24, 0x0A	; 10
 23c:	0e 94 4f 01 	call	0x29e	; 0x29e <transmitByte>
		// =================================
		
		// TIMER ===========================
		if (q_second_ctn >= 8) { // toggle PORTC4 state every x*0.25s
 240:	80 91 00 01 	lds	r24, 0x0100
 244:	88 30       	cpi	r24, 0x08	; 8
 246:	10 f0       	brcs	.+4      	; 0x24c <main+0x84>
			q_second_ctn = 0;
 248:	10 92 00 01 	sts	0x0100, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24c:	8f e3       	ldi	r24, 0x3F	; 63
 24e:	9c e9       	ldi	r25, 0x9C	; 156
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <main+0x88>
 254:	00 c0       	rjmp	.+0      	; 0x256 <main+0x8e>
 256:	00 00       	nop
 258:	e1 cf       	rjmp	.-62     	; 0x21c <main+0x54>

0000025a <__vector_14>:
		// =================================
		_delay_ms(20);
    }
}

ISR(TIMER0_COMPA_vect) {
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	8f 93       	push	r24
	q_second_ctn += 1; // increment quarter-second counter
 266:	80 91 00 01 	lds	r24, 0x0100
 26a:	8f 5f       	subi	r24, 0xFF	; 255
 26c:	80 93 00 01 	sts	0x0100, r24
}
 270:	8f 91       	pop	r24
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 27c:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
 280:	83 e3       	ldi	r24, 0x33	; 51
 282:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
#else
  UCSR0A &= ~(1 << U2X0);
 286:	e0 ec       	ldi	r30, 0xC0	; 192
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	8d 7f       	andi	r24, 0xFD	; 253
 28e:	80 83       	st	Z, r24
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 290:	88 e1       	ldi	r24, 0x18	; 24
 292:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 296:	86 e0       	ldi	r24, 0x06	; 6
 298:	80 93 c2 00 	sts	0x00C2, r24
 29c:	08 95       	ret

0000029e <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 29e:	e0 ec       	ldi	r30, 0xC0	; 192
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	90 81       	ld	r25, Z
 2a4:	95 ff       	sbrs	r25, 5
 2a6:	fd cf       	rjmp	.-6      	; 0x2a2 <transmitByte+0x4>
  UDR0 = data;                                            /* send data */
 2a8:	80 93 c6 00 	sts	0x00C6, r24
 2ac:	08 95       	ret

000002ae <printString>:
}


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 2ae:	0f 93       	push	r16
 2b0:	1f 93       	push	r17
 2b2:	cf 93       	push	r28
 2b4:	fc 01       	movw	r30, r24
  uint8_t i = 0;
  while (myString[i]) {
 2b6:	80 81       	ld	r24, Z
 2b8:	88 23       	and	r24, r24
 2ba:	59 f0       	breq	.+22     	; 0x2d2 <printString+0x24>
 2bc:	8f 01       	movw	r16, r30
 2be:	c0 e0       	ldi	r28, 0x00	; 0
    transmitByte(myString[i]);
 2c0:	0e 94 4f 01 	call	0x29e	; 0x29e <transmitByte>
    i++;
 2c4:	cf 5f       	subi	r28, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 2c6:	f8 01       	movw	r30, r16
 2c8:	ec 0f       	add	r30, r28
 2ca:	f1 1d       	adc	r31, r1
 2cc:	80 81       	ld	r24, Z
 2ce:	81 11       	cpse	r24, r1
 2d0:	f7 cf       	rjmp	.-18     	; 0x2c0 <printString+0x12>
    transmitByte(myString[i]);
    i++;
  }
}
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	08 95       	ret

000002da <__itoa_ncheck>:
 2da:	bb 27       	eor	r27, r27
 2dc:	4a 30       	cpi	r20, 0x0A	; 10
 2de:	31 f4       	brne	.+12     	; 0x2ec <__itoa_ncheck+0x12>
 2e0:	99 23       	and	r25, r25
 2e2:	22 f4       	brpl	.+8      	; 0x2ec <__itoa_ncheck+0x12>
 2e4:	bd e2       	ldi	r27, 0x2D	; 45
 2e6:	90 95       	com	r25
 2e8:	81 95       	neg	r24
 2ea:	9f 4f       	sbci	r25, 0xFF	; 255
 2ec:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__utoa_common>

000002f0 <__utoa_ncheck>:
 2f0:	bb 27       	eor	r27, r27

000002f2 <__utoa_common>:
 2f2:	fb 01       	movw	r30, r22
 2f4:	55 27       	eor	r21, r21
 2f6:	aa 27       	eor	r26, r26
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	aa 1f       	adc	r26, r26
 2fe:	a4 17       	cp	r26, r20
 300:	10 f0       	brcs	.+4      	; 0x306 <__utoa_common+0x14>
 302:	a4 1b       	sub	r26, r20
 304:	83 95       	inc	r24
 306:	50 51       	subi	r21, 0x10	; 16
 308:	b9 f7       	brne	.-18     	; 0x2f8 <__utoa_common+0x6>
 30a:	a0 5d       	subi	r26, 0xD0	; 208
 30c:	aa 33       	cpi	r26, 0x3A	; 58
 30e:	08 f0       	brcs	.+2      	; 0x312 <__utoa_common+0x20>
 310:	a9 5d       	subi	r26, 0xD9	; 217
 312:	a1 93       	st	Z+, r26
 314:	00 97       	sbiw	r24, 0x00	; 0
 316:	79 f7       	brne	.-34     	; 0x2f6 <__utoa_common+0x4>
 318:	b1 11       	cpse	r27, r1
 31a:	b1 93       	st	Z+, r27
 31c:	11 92       	st	Z+, r1
 31e:	cb 01       	movw	r24, r22
 320:	0c 94 92 01 	jmp	0x324	; 0x324 <strrev>

00000324 <strrev>:
 324:	dc 01       	movw	r26, r24
 326:	fc 01       	movw	r30, r24
 328:	67 2f       	mov	r22, r23
 32a:	71 91       	ld	r23, Z+
 32c:	77 23       	and	r23, r23
 32e:	e1 f7       	brne	.-8      	; 0x328 <strrev+0x4>
 330:	32 97       	sbiw	r30, 0x02	; 2
 332:	04 c0       	rjmp	.+8      	; 0x33c <strrev+0x18>
 334:	7c 91       	ld	r23, X
 336:	6d 93       	st	X+, r22
 338:	70 83       	st	Z, r23
 33a:	62 91       	ld	r22, -Z
 33c:	ae 17       	cp	r26, r30
 33e:	bf 07       	cpc	r27, r31
 340:	c8 f3       	brcs	.-14     	; 0x334 <strrev+0x10>
 342:	08 95       	ret

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
