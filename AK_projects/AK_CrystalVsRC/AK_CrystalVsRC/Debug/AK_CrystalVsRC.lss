
AK_CrystalVsRC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000262  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000691  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002f1  00000000  00000000  00000a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038e  00000000  00000000  00000d26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  000010b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002a3  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000066c  00000000  00000000  00001557  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00001bc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 97 00 	call	0x12e	; 0x12e <main>
  88:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_TICTOC>:
		//TCCR1B |= (1<<CS11) | (1<<CS10); // clock prescaler 64
		TCCR1B |= (1<<CS11); // clock prescaler 8
	}
	else if (F_CPU == 16000000)
	{
		TCCR1B |= (1<<CS11) | (1<<CS10); // clock prescaler 64
  90:	e1 e8       	ldi	r30, 0x81	; 129
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	83 60       	ori	r24, 0x03	; 3
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <initUSART>:
}

void printWord(uint16_t word) {
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
  9c:	10 92 c5 00 	sts	0x00C5, r1
  a0:	87 e6       	ldi	r24, 0x67	; 103
  a2:	80 93 c4 00 	sts	0x00C4, r24
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8d 7f       	andi	r24, 0xFD	; 253
  ae:	80 83       	st	Z, r24
  b0:	88 e1       	ldi	r24, 0x18	; 24
  b2:	80 93 c1 00 	sts	0x00C1, r24
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	80 93 c2 00 	sts	0x00C2, r24
  bc:	08 95       	ret

000000be <transmitByte>:
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	90 81       	ld	r25, Z
  c4:	95 ff       	sbrs	r25, 5
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <transmitByte+0x4>
  c8:	80 93 c6 00 	sts	0x00C6, r24
  cc:	08 95       	ret

000000ce <printByte>:
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	d8 2f       	mov	r29, r24
  d4:	89 e2       	ldi	r24, 0x29	; 41
  d6:	d8 9f       	mul	r29, r24
  d8:	81 2d       	mov	r24, r1
  da:	11 24       	eor	r1, r1
  dc:	82 95       	swap	r24
  de:	8f 70       	andi	r24, 0x0F	; 15
  e0:	80 5d       	subi	r24, 0xD0	; 208
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
  e2:	0e 94 5f 00 	call	0xbe	; 0xbe <transmitByte>
  e6:	9d ec       	ldi	r25, 0xCD	; 205
  e8:	d9 9f       	mul	r29, r25
  ea:	c1 2d       	mov	r28, r1
  ec:	11 24       	eor	r1, r1
  ee:	c6 95       	lsr	r28
  f0:	c6 95       	lsr	r28
  f2:	c6 95       	lsr	r28
  f4:	c9 9f       	mul	r28, r25
  f6:	91 2d       	mov	r25, r1
  f8:	11 24       	eor	r1, r1
  fa:	96 95       	lsr	r25
  fc:	96 95       	lsr	r25
  fe:	96 95       	lsr	r25
 100:	99 0f       	add	r25, r25
 102:	89 2f       	mov	r24, r25
 104:	88 0f       	add	r24, r24
 106:	88 0f       	add	r24, r24
 108:	98 0f       	add	r25, r24
 10a:	8c 2f       	mov	r24, r28
 10c:	89 1b       	sub	r24, r25
 10e:	80 5d       	subi	r24, 0xD0	; 208
 110:	0e 94 5f 00 	call	0xbe	; 0xbe <transmitByte>
 114:	cc 0f       	add	r28, r28
 116:	8c 2f       	mov	r24, r28
 118:	88 0f       	add	r24, r24
 11a:	88 0f       	add	r24, r24
 11c:	c8 0f       	add	r28, r24
 11e:	8d 2f       	mov	r24, r29
 120:	8c 1b       	sub	r24, r28
 122:	80 5d       	subi	r24, 0xD0	; 208
 124:	0e 94 5f 00 	call	0xbe	; 0xbe <transmitByte>
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <main>:
	
	uint8_t state;
	state = 0;
	
	
	initUSART();
 12e:	0e 94 4e 00 	call	0x9c	; 0x9c <initUSART>
	init_TICTOC();
 132:	0e 94 48 00 	call	0x90	; 0x90 <init_TICTOC>
	TCCR1B |= (1<<WGM12);
 136:	e1 e8       	ldi	r30, 0x81	; 129
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 60       	ori	r24, 0x08	; 8
 13e:	80 83       	st	Z, r24
	OCR1A = 2500;
 140:	84 ec       	ldi	r24, 0xC4	; 196
 142:	99 e0       	ldi	r25, 0x09	; 9
 144:	90 93 89 00 	sts	0x0089, r25
 148:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1<<OCIE1A);
 14c:	ef e6       	ldi	r30, 0x6F	; 111
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	82 60       	ori	r24, 0x02	; 2
 154:	80 83       	st	Z, r24
	sei();
 156:	78 94       	sei
int main(void)
{
	//clock_prescale_set(clock_div_1);
	
	uint8_t state;
	state = 0;
 158:	c0 e0       	ldi	r28, 0x00	; 0
    while (1) 
    {
		
		if (time >= 10000)
		{
			if (state == 1)
 15a:	d1 e0       	ldi	r29, 0x01	; 1
 15c:	10 e0       	ldi	r17, 0x00	; 0
	//tic();
	
    while (1) 
    {
		
		if (time >= 10000)
 15e:	80 91 00 01 	lds	r24, 0x0100
 162:	90 91 01 01 	lds	r25, 0x0101
 166:	a0 91 02 01 	lds	r26, 0x0102
 16a:	b0 91 03 01 	lds	r27, 0x0103
 16e:	80 31       	cpi	r24, 0x10	; 16
 170:	97 42       	sbci	r25, 0x27	; 39
 172:	a1 05       	cpc	r26, r1
 174:	b1 05       	cpc	r27, r1
 176:	68 f0       	brcs	.+26     	; 0x192 <main+0x64>
		{
			if (state == 1)
 178:	8d 2f       	mov	r24, r29
 17a:	c1 30       	cpi	r28, 0x01	; 1
 17c:	09 f4       	brne	.+2      	; 0x180 <main+0x52>
 17e:	81 2f       	mov	r24, r17
			{
				state = 0;
 180:	c8 2f       	mov	r28, r24
			}
			else
			{
				state = 1;
			}
			time = 0;
 182:	10 92 00 01 	sts	0x0100, r1
 186:	10 92 01 01 	sts	0x0101, r1
 18a:	10 92 02 01 	sts	0x0102, r1
 18e:	10 92 03 01 	sts	0x0103, r1
		}
		
		printByte(state);
 192:	8c 2f       	mov	r24, r28
 194:	0e 94 67 00 	call	0xce	; 0xce <printByte>
		transmitByte(10);
 198:	8a e0       	ldi	r24, 0x0A	; 10
 19a:	0e 94 5f 00 	call	0xbe	; 0xbe <transmitByte>
    }
 19e:	df cf       	rjmp	.-66     	; 0x15e <main+0x30>

000001a0 <__vector_11>:
}

ISR(TIMER1_COMPA_vect)
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
	time += 10;
 1b2:	80 91 00 01 	lds	r24, 0x0100
 1b6:	90 91 01 01 	lds	r25, 0x0101
 1ba:	a0 91 02 01 	lds	r26, 0x0102
 1be:	b0 91 03 01 	lds	r27, 0x0103
 1c2:	0a 96       	adiw	r24, 0x0a	; 10
 1c4:	a1 1d       	adc	r26, r1
 1c6:	b1 1d       	adc	r27, r1
 1c8:	80 93 00 01 	sts	0x0100, r24
 1cc:	90 93 01 01 	sts	0x0101, r25
 1d0:	a0 93 02 01 	sts	0x0102, r26
 1d4:	b0 93 03 01 	sts	0x0103, r27
	//tic();
}
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
